syntax = "proto2";

package shardora.ws.protobuf;


enum StepType {
	kNormalFrom = 0;
	kNormalTo = 1;
	kConsensusRootElectShard = 2;  // shard consensus network election
	kConsensusRootTimeBlock = 3;  // create time block
	kConsensusCreateGenesisAcount = 4;
	kConsensusLocalTos = 5;
	kContractCreate = 6;
	kContractGasPrepayment = 7;
	kContractExcute = 8;
	kRootCreateAddress = 9;
	kRootCreateAddressCrossSharding = 11;
	kStatistic = 12;
	kJoinElect = 13;
	kCreateLibrary = 14;
	kCross = 15;
	kRootCross = 16;
}

enum InitInfoTagType {
	kNoneResponse = 0;
	kResponseNodes = 1;
	kResponseBalance = 2;
	kResponseTxList = 3;
	kResponseOutOfBindwidth = 4;
	kTransaction = 5;
	kC2cTxList = 6;
	kC2cUserSellInfo = 7;
	kC2cNewSell = 8;
	kC2cNewOrder = 9;
	kC2cConfirm = 10;
	kC2cPrepayment = 11;
	kC2cRefreshLocal = 12;
	kC2cCancelOrder = 13;
	kC2cCancelSell = 14;
	kC2cManagerRecover = 15;
	kC2cManagerCancelSell = 16;
}

enum ReceiveType {
	kAlipay = 0;
	kWeChatPay = 1;
	kPaypal = 2;
	kBandCard = 3;
	kCreditCard = 4;
	kBitcoin = 5;
	kEth = 6;
	kUsdt = 7;
	kUsdc = 8;
	kUnkown = 9;
}

message TxMessage {
	optional uint32 version = 1;
	optional bytes gid = 2;
	optional bytes pubkey = 3;
	optional uint64 gas_limit = 4;
	optional uint64 gas_price = 5;
	optional bytes key = 6;
	optional bytes value = 7;
	optional bytes to = 8;
	optional uint64 amount = 9;
	optional StepType step = 10 [default=kNormalFrom];
	optional uint64 contract_prepayment = 11;
	optional bytes contract_code = 12;
	optional bytes contract_input = 13;
	optional bytes signr = 14;
	optional bytes signs = 15;
	optional bytes signv = 16;
}

enum Status {
	kDefault = 0;
	kConfirmed = 1;
	kReported = 2;
	kSellWaiting = 3;
	kSellReleased = 4;
	kSellWaitingCreate = 5;
	kSellCreated = 6;
	kSellWaitingConfirm = 7;
	kSellTimeout = 8;
	kOrderCanceled = 9;
	kSellUserWaitingRelease = 10;
	kSellUserReleased = 11;
	kSellManagerWaitingRelease = 12;
	kSellManagerReleased = 13;
	kSellPrepayment = 14;
	kSellWaitingPrepayment = 15;
	kSellWaitingConfirmTx = 16;
	kSellForceReleaseWaitingTx = 17;
	kSellForceReleased = 18;
	kReportedByOrder = 19;
	kSellTxPrepaymentError = 125;
	kSellTxCreateError = 126;
	kSellTxUserReleaseError = 127;
	kSellTxManagerReleaseError = 128;
	kSellWaitingConfirmTxError = 129;
	kSellForceReleaseWaitingTxError = 130;
}

message OrderInfo {
	optional bytes buyer = 1;
	optional Status status = 2;
	optional uint64 amount = 3;
	optional bytes seller = 4;
	optional uint64 create_tm_ms = 5;
}

message ReceivableInfo {
	optional ReceiveType type = 1;
	optional bytes name = 2;
	optional bytes id = 3;
	optional bytes user_name = 4;
	optional bytes other = 5;
	optional bytes qrcode = 6;
}

message ReceivableArray {
	repeated ReceivableInfo receivable = 1;
}

message SellInfo {
	optional bytes seller = 1;
	optional bytes buyer = 2;
	optional bytes contract = 3;
	optional uint64 amount = 4;
	optional ReceivableArray receivable = 5;
	optional uint64 all = 6;
	optional uint64 price = 7;
	optional uint32 mchecked = 8;
	optional uint32 schecked = 9;
	optional uint32 reported = 10;
	optional uint64 orderId = 11;
	optional uint64 height = 12;
	optional uint64 timestamp = 13;
    optional bytes username = 14;
	optional int32 status = 15;
	optional uint64 purchase_amount = 16;
	optional uint64 create_timestamp = 17;
    optional uint64 min_amount = 18;
	optional uint64 max_amount = 19;
	optional uint64 now = 20;
	optional bool is_order = 21;
	optional Appeal appeal = 22;
	optional int32 credit = 23;
	optional Appeal peer_appeal = 24;
}

message NewOrder {
	optional bytes seller = 1;
	optional uint64 amount = 2;
	optional bytes buyer = 3;
}

message Appeal {
	optional bytes seller = 1;
	optional bytes buyer = 2;
	optional int32 type = 3;
	optional bytes content = 4;
	optional bytes pic = 5;
}

message NewSell {
	optional bytes protocol_addr = 1;
	optional bytes seller = 2;
	optional uint64 amount = 3;
	optional uint64 price = 4;
	repeated ReceivableInfo receivable = 5;
}

message BuyerReport {
	optional bytes seller = 1;
	optional bytes reports_info = 2;
}

message GetSell {
	optional bytes seller = 1;
}

message C2cMessage {
	optional NewSell sell = 1;
	optional NewOrder order = 2;
	optional BuyerReport report = 3;
	repeated SellInfo sells = 4;
	optional GetSell get_sell = 5;
	optional uint64 prepayment = 6;
	optional bytes c2c_addr = 7;
	optional SellInfo user_order_info = 8;
	optional Appeal appeal = 9;
}

message StatusInfo {
	optional int32 status = 1;
	optional bytes message = 2;
	optional uint64 msg_id = 3;
}

message InitInfo {
	optional bytes pubkey = 1;
	optional bytes platform = 2;
	optional bytes version = 3;
	optional bytes pk_hash = 4;
	optional InitInfoTagType tag = 5;
	optional TxMessage tx = 6;
	optional uint64 tx_height = 7;
	optional C2cMessage c2c = 8;
	optional StatusInfo status = 9;
	optional uint64 msg_id = 10;
}

message WsTxItem {
    optional bytes from = 1;
    optional bytes to = 2;
    optional uint64 amount = 3;
    optional uint64 balance = 4;
    optional uint64 height = 5;
    optional uint32 to_add = 6;
    optional uint64 timestamp = 7;
    optional int32 status = 8;
}

message WsTxItemResponse {
	repeated WsTxItem txs = 1;
}

message BandwidthItem {
    optional bytes id = 1;
    optional uint64 bandwidth = 2;
    optional uint64 timestamp = 3;
}

message BandwidthInfo {
	repeated BandwidthItem bws = 1;
}

message WsMessage {
	repeated WsTxItem txs = 1;
	repeated BandwidthItem bws = 2;
	optional InitInfo init_info = 3;
}