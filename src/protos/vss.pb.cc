// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/vss.proto

#include "protos/vss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zjchain {
namespace vss {
namespace protobuf {
PROTOBUF_CONSTEXPR VssMessage::VssMessage(
    ::_pbi::ConstantInitialized)
  : random_hash_(uint64_t{0u})
  , random_(uint64_t{0u})
  , tm_height_(uint64_t{0u})
  , member_index_(0u)
  , type_(0)
  , elect_height_(uint64_t{0u}){}
struct VssMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VssMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VssMessageDefaultTypeInternal() {}
  union {
    VssMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VssMessageDefaultTypeInternal _VssMessage_default_instance_;
}  // namespace protobuf
}  // namespace vss
}  // namespace zjchain
static ::_pb::Metadata file_level_metadata_protos_2fvss_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fvss_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fvss_2eproto = nullptr;

const uint32_t TableStruct_protos_2fvss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, random_hash_),
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, random_),
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, member_index_),
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, tm_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, elect_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::vss::protobuf::VssMessage, type_),
  0,
  1,
  3,
  2,
  5,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::zjchain::vss::protobuf::VssMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zjchain::vss::protobuf::_VssMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fvss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020protos/vss.proto\022\024zjchain.vss.protobuf"
  "\"~\n\nVssMessage\022\023\n\013random_hash\030\001 \001(\004\022\016\n\006r"
  "andom\030\002 \001(\004\022\024\n\014member_index\030\003 \001(\r\022\021\n\ttm_"
  "height\030\004 \001(\004\022\024\n\014elect_height\030\005 \001(\004\022\014\n\004ty"
  "pe\030\006 \001(\005"
  ;
static ::_pbi::once_flag descriptor_table_protos_2fvss_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fvss_2eproto = {
    false, false, 168, descriptor_table_protodef_protos_2fvss_2eproto,
    "protos/vss.proto",
    &descriptor_table_protos_2fvss_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_protos_2fvss_2eproto::offsets,
    file_level_metadata_protos_2fvss_2eproto, file_level_enum_descriptors_protos_2fvss_2eproto,
    file_level_service_descriptors_protos_2fvss_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fvss_2eproto_getter() {
  return &descriptor_table_protos_2fvss_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fvss_2eproto(&descriptor_table_protos_2fvss_2eproto);
namespace zjchain {
namespace vss {
namespace protobuf {

// ===================================================================

class VssMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<VssMessage>()._has_bits_);
  static void set_has_random_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_random(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_member_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tm_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_elect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

VssMessage::VssMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.vss.protobuf.VssMessage)
}
VssMessage::VssMessage(const VssMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&random_hash_, &from.random_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&elect_height_) -
    reinterpret_cast<char*>(&random_hash_)) + sizeof(elect_height_));
  // @@protoc_insertion_point(copy_constructor:zjchain.vss.protobuf.VssMessage)
}

inline void VssMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&random_hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elect_height_) -
    reinterpret_cast<char*>(&random_hash_)) + sizeof(elect_height_));
}

VssMessage::~VssMessage() {
  // @@protoc_insertion_point(destructor:zjchain.vss.protobuf.VssMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VssMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VssMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VssMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.vss.protobuf.VssMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&random_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elect_height_) -
        reinterpret_cast<char*>(&random_hash_)) + sizeof(elect_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VssMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 random_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_random_hash(&has_bits);
          random_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 random = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_random(&has_bits);
          random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 member_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_member_index(&has_bits);
          member_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tm_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tm_height(&has_bits);
          tm_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 elect_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_elect_height(&has_bits);
          elect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VssMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.vss.protobuf.VssMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 random_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_random_hash(), target);
  }

  // optional uint64 random = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_random(), target);
  }

  // optional uint32 member_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_member_index(), target);
  }

  // optional uint64 tm_height = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tm_height(), target);
  }

  // optional uint64 elect_height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_elect_height(), target);
  }

  // optional int32 type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.vss.protobuf.VssMessage)
  return target;
}

size_t VssMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.vss.protobuf.VssMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 random_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_random_hash());
    }

    // optional uint64 random = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_random());
    }

    // optional uint64 tm_height = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tm_height());
    }

    // optional uint32 member_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_index());
    }

    // optional int32 type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional uint64 elect_height = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elect_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VssMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VssMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VssMessage::GetClassData() const { return &_class_data_; }

void VssMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VssMessage *>(to)->MergeFrom(
      static_cast<const VssMessage &>(from));
}


void VssMessage::MergeFrom(const VssMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.vss.protobuf.VssMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      random_hash_ = from.random_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      random_ = from.random_;
    }
    if (cached_has_bits & 0x00000004u) {
      tm_height_ = from.tm_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      member_index_ = from.member_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      elect_height_ = from.elect_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VssMessage::CopyFrom(const VssMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.vss.protobuf.VssMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VssMessage::IsInitialized() const {
  return true;
}

void VssMessage::InternalSwap(VssMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VssMessage, elect_height_)
      + sizeof(VssMessage::elect_height_)
      - PROTOBUF_FIELD_OFFSET(VssMessage, random_hash_)>(
          reinterpret_cast<char*>(&random_hash_),
          reinterpret_cast<char*>(&other->random_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VssMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fvss_2eproto_getter, &descriptor_table_protos_2fvss_2eproto_once,
      file_level_metadata_protos_2fvss_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace vss
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zjchain::vss::protobuf::VssMessage*
Arena::CreateMaybeMessage< ::zjchain::vss::protobuf::VssMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::vss::protobuf::VssMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
