// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/block.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/block.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace block {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* StorageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockTx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockTx_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusToTxsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusToTxsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusToTxs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusToTxs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTxBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTxBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTxBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTxBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountHeightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountHeightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountHeightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountHeightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountAttrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountAttrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountAttrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountAttrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateVpnCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateVpnCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VpnCountItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VpnCountItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateVpnCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateVpnCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountInitInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountInitInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountInitInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountInitInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateVpnActiveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateVpnActiveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdRewardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdRewardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElectStatisticInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElectStatisticInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshPoolHeightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshPoolHeightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshPoolHeightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshPoolHeightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountShardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountShardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountShardReponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountShardReponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrossShardingTosMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossShardingTosMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrossShardingStatisticMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossShardingStatisticMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElectBlockMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElectBlockMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardToTxMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardToTxMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticTxMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticTxMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2fblock_2eproto() {
  protobuf_AddDesc_protos_2fblock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/block.proto");
  GOOGLE_CHECK(file != NULL);
  StorageItem_descriptor_ = file->message_type(0);
  static const int StorageItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageItem, val_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageItem, val_size_),
  };
  StorageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageItem_descriptor_,
      StorageItem::default_instance_,
      StorageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageItem));
  TransferItem_descriptor_ = file->message_type(1);
  static const int TransferItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferItem, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferItem, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferItem, amount_),
  };
  TransferItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferItem_descriptor_,
      TransferItem::default_instance_,
      TransferItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferItem));
  TxLog_descriptor_ = file->message_type(2);
  static const int TxLog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxLog, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxLog, topics_),
  };
  TxLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxLog_descriptor_,
      TxLog::default_instance_,
      TxLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxLog));
  BlockTx_descriptor_ = file->message_type(3);
  static const int BlockTx_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, gas_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, gas_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, gas_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, storages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, contract_txs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, contract_prepayment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, contract_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, contract_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, events_),
  };
  BlockTx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockTx_descriptor_,
      BlockTx::default_instance_,
      BlockTx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockTx));
  Block_descriptor_ = file->message_type(4);
  static const int Block_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, pool_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, prehash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, consistency_random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, electblock_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, timeblock_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, tx_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, bls_agg_sign_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, bls_agg_sign_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, leader_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, change_leader_invalid_hashs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, is_commited_block_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  ConsensusToTxsItem_descriptor_ = file->message_type(5);
  static const int ConsensusToTxsItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusToTxsItem, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusToTxsItem, balance_),
  };
  ConsensusToTxsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusToTxsItem_descriptor_,
      ConsensusToTxsItem::default_instance_,
      ConsensusToTxsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusToTxsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusToTxsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusToTxsItem));
  ConsensusToTxs_descriptor_ = file->message_type(6);
  static const int ConsensusToTxs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusToTxs, tos_),
  };
  ConsensusToTxs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusToTxs_descriptor_,
      ConsensusToTxs::default_instance_,
      ConsensusToTxs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusToTxs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusToTxs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusToTxs));
  GetTxBlockRequest_descriptor_ = file->message_type(7);
  static const int GetTxBlockRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockRequest, tx_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockRequest, block_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockRequest, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockRequest, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockRequest, account_address_),
  };
  GetTxBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTxBlockRequest_descriptor_,
      GetTxBlockRequest::default_instance_,
      GetTxBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTxBlockRequest));
  GetTxBlockResponse_descriptor_ = file->message_type(8);
  static const int GetTxBlockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockResponse, block_),
  };
  GetTxBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTxBlockResponse_descriptor_,
      GetTxBlockResponse::default_instance_,
      GetTxBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTxBlockResponse));
  AccountHeightRequest_descriptor_ = file->message_type(9);
  static const int AccountHeightRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightRequest, account_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightRequest, count_),
  };
  AccountHeightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountHeightRequest_descriptor_,
      AccountHeightRequest::default_instance_,
      AccountHeightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountHeightRequest));
  AccountHeightResponse_descriptor_ = file->message_type(10);
  static const int AccountHeightResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightResponse, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightResponse, account_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightResponse, type_),
  };
  AccountHeightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountHeightResponse_descriptor_,
      AccountHeightResponse::default_instance_,
      AccountHeightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountHeightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountHeightResponse));
  AccountAttrRequest_descriptor_ = file->message_type(11);
  static const int AccountAttrRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrRequest, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrRequest, height_),
  };
  AccountAttrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountAttrRequest_descriptor_,
      AccountAttrRequest::default_instance_,
      AccountAttrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountAttrRequest));
  AccountAttrResponse_descriptor_ = file->message_type(12);
  static const int AccountAttrResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrResponse, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrResponse, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrResponse, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrResponse, block_),
  };
  AccountAttrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountAttrResponse_descriptor_,
      AccountAttrResponse::default_instance_,
      AccountAttrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAttrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountAttrResponse));
  UpdateVpnCountRequest_descriptor_ = file->message_type(13);
  static const int UpdateVpnCountRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountRequest, account_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountRequest, old_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountRequest, just_set_),
  };
  UpdateVpnCountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateVpnCountRequest_descriptor_,
      UpdateVpnCountRequest::default_instance_,
      UpdateVpnCountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateVpnCountRequest));
  VpnCountItem_descriptor_ = file->message_type(14);
  static const int VpnCountItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnCountItem, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnCountItem, count_),
  };
  VpnCountItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VpnCountItem_descriptor_,
      VpnCountItem::default_instance_,
      VpnCountItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnCountItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VpnCountItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VpnCountItem));
  UpdateVpnCountResponse_descriptor_ = file->message_type(15);
  static const int UpdateVpnCountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountResponse, vpn_nodes_),
  };
  UpdateVpnCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateVpnCountResponse_descriptor_,
      UpdateVpnCountResponse::default_instance_,
      UpdateVpnCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateVpnCountResponse));
  GetAccountInitInfoRequest_descriptor_ = file->message_type(16);
  static const int GetAccountInitInfoRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoRequest, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoRequest, net_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoRequest, index_),
  };
  GetAccountInitInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountInitInfoRequest_descriptor_,
      GetAccountInitInfoRequest::default_instance_,
      GetAccountInitInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountInitInfoRequest));
  GetAccountInitInfoResponse_descriptor_ = file->message_type(17);
  static const int GetAccountInitInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoResponse, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoResponse, block_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoResponse, max_index_),
  };
  GetAccountInitInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountInitInfoResponse_descriptor_,
      GetAccountInitInfoResponse::default_instance_,
      GetAccountInitInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountInitInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountInitInfoResponse));
  UpdateVpnActiveRequest_descriptor_ = file->message_type(18);
  static const int UpdateVpnActiveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnActiveRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnActiveRequest, ip_),
  };
  UpdateVpnActiveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateVpnActiveRequest_descriptor_,
      UpdateVpnActiveRequest::default_instance_,
      UpdateVpnActiveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnActiveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateVpnActiveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateVpnActiveRequest));
  AdRewardRequest_descriptor_ = file->message_type(19);
  static const int AdRewardRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardRequest, reward_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardRequest, gid_),
  };
  AdRewardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdRewardRequest_descriptor_,
      AdRewardRequest::default_instance_,
      AdRewardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdRewardRequest));
  ElectStatisticInfo_descriptor_ = file->message_type(20);
  static const int ElectStatisticInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatisticInfo, elect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatisticInfo, succ_tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatisticInfo, lof_leaders_),
  };
  ElectStatisticInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElectStatisticInfo_descriptor_,
      ElectStatisticInfo::default_instance_,
      ElectStatisticInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatisticInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatisticInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElectStatisticInfo));
  StatisticInfo_descriptor_ = file->message_type(21);
  static const int StatisticInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, timeblock_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, all_tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, elect_statistic_),
  };
  StatisticInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticInfo_descriptor_,
      StatisticInfo::default_instance_,
      StatisticInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticInfo));
  RefreshPoolHeightRequest_descriptor_ = file->message_type(22);
  static const int RefreshPoolHeightRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshPoolHeightRequest, heights_),
  };
  RefreshPoolHeightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshPoolHeightRequest_descriptor_,
      RefreshPoolHeightRequest::default_instance_,
      RefreshPoolHeightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshPoolHeightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshPoolHeightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshPoolHeightRequest));
  RefreshPoolHeightResponse_descriptor_ = file->message_type(23);
  static const int RefreshPoolHeightResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshPoolHeightResponse, heights_),
  };
  RefreshPoolHeightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshPoolHeightResponse_descriptor_,
      RefreshPoolHeightResponse::default_instance_,
      RefreshPoolHeightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshPoolHeightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshPoolHeightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshPoolHeightResponse));
  GetAccountShardRequest_descriptor_ = file->message_type(24);
  static const int GetAccountShardRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountShardRequest, id_),
  };
  GetAccountShardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountShardRequest_descriptor_,
      GetAccountShardRequest::default_instance_,
      GetAccountShardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountShardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountShardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountShardRequest));
  GetAccountShardReponse_descriptor_ = file->message_type(25);
  static const int GetAccountShardReponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountShardReponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountShardReponse, shard_id_),
  };
  GetAccountShardReponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountShardReponse_descriptor_,
      GetAccountShardReponse::default_instance_,
      GetAccountShardReponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountShardReponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountShardReponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountShardReponse));
  CrossShardingTosMessage_descriptor_ = file->message_type(26);
  static const int CrossShardingTosMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardingTosMessage, block_),
  };
  CrossShardingTosMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossShardingTosMessage_descriptor_,
      CrossShardingTosMessage::default_instance_,
      CrossShardingTosMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardingTosMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardingTosMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossShardingTosMessage));
  CrossShardingStatisticMessage_descriptor_ = file->message_type(27);
  static const int CrossShardingStatisticMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardingStatisticMessage, block_),
  };
  CrossShardingStatisticMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossShardingStatisticMessage_descriptor_,
      CrossShardingStatisticMessage::default_instance_,
      CrossShardingStatisticMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardingStatisticMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardingStatisticMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossShardingStatisticMessage));
  ElectBlockMessage_descriptor_ = file->message_type(28);
  static const int ElectBlockMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlockMessage, block_),
  };
  ElectBlockMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElectBlockMessage_descriptor_,
      ElectBlockMessage::default_instance_,
      ElectBlockMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlockMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlockMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElectBlockMessage));
  ShardToTxMessage_descriptor_ = file->message_type(29);
  static const int ShardToTxMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxMessage, to_txs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxMessage, leader_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxMessage, elect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxMessage, leader_to_idx_),
  };
  ShardToTxMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardToTxMessage_descriptor_,
      ShardToTxMessage::default_instance_,
      ShardToTxMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardToTxMessage));
  StatisticTxMessage_descriptor_ = file->message_type(30);
  static const int StatisticTxMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxMessage, statistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxMessage, leader_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxMessage, elect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxMessage, leader_to_idx_),
  };
  StatisticTxMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticTxMessage_descriptor_,
      StatisticTxMessage::default_instance_,
      StatisticTxMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticTxMessage));
  BlockMessage_descriptor_ = file->message_type(31);
  static const int BlockMessage_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, block_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, block_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, height_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, height_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, acc_attr_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, acc_attr_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, up_vpn_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, up_vpn_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, account_init_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, account_init_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, vpn_active_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, ad_reward_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, ref_heights_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, ref_heights_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, acc_shard_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, acc_shard_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, shard_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, statistic_tx_),
  };
  BlockMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMessage_descriptor_,
      BlockMessage::default_instance_,
      BlockMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2fblock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageItem_descriptor_, &StorageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferItem_descriptor_, &TransferItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxLog_descriptor_, &TxLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockTx_descriptor_, &BlockTx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusToTxsItem_descriptor_, &ConsensusToTxsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusToTxs_descriptor_, &ConsensusToTxs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTxBlockRequest_descriptor_, &GetTxBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTxBlockResponse_descriptor_, &GetTxBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountHeightRequest_descriptor_, &AccountHeightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountHeightResponse_descriptor_, &AccountHeightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountAttrRequest_descriptor_, &AccountAttrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountAttrResponse_descriptor_, &AccountAttrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateVpnCountRequest_descriptor_, &UpdateVpnCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VpnCountItem_descriptor_, &VpnCountItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateVpnCountResponse_descriptor_, &UpdateVpnCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountInitInfoRequest_descriptor_, &GetAccountInitInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountInitInfoResponse_descriptor_, &GetAccountInitInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateVpnActiveRequest_descriptor_, &UpdateVpnActiveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdRewardRequest_descriptor_, &AdRewardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElectStatisticInfo_descriptor_, &ElectStatisticInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticInfo_descriptor_, &StatisticInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshPoolHeightRequest_descriptor_, &RefreshPoolHeightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshPoolHeightResponse_descriptor_, &RefreshPoolHeightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountShardRequest_descriptor_, &GetAccountShardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountShardReponse_descriptor_, &GetAccountShardReponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossShardingTosMessage_descriptor_, &CrossShardingTosMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossShardingStatisticMessage_descriptor_, &CrossShardingStatisticMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElectBlockMessage_descriptor_, &ElectBlockMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardToTxMessage_descriptor_, &ShardToTxMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticTxMessage_descriptor_, &StatisticTxMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMessage_descriptor_, &BlockMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2fblock_2eproto() {
  delete StorageItem::default_instance_;
  delete StorageItem_reflection_;
  delete TransferItem::default_instance_;
  delete TransferItem_reflection_;
  delete TxLog::default_instance_;
  delete TxLog_reflection_;
  delete BlockTx::default_instance_;
  delete BlockTx_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete ConsensusToTxsItem::default_instance_;
  delete ConsensusToTxsItem_reflection_;
  delete ConsensusToTxs::default_instance_;
  delete ConsensusToTxs_reflection_;
  delete GetTxBlockRequest::default_instance_;
  delete GetTxBlockRequest_reflection_;
  delete GetTxBlockResponse::default_instance_;
  delete GetTxBlockResponse_reflection_;
  delete AccountHeightRequest::default_instance_;
  delete AccountHeightRequest_reflection_;
  delete AccountHeightResponse::default_instance_;
  delete AccountHeightResponse_reflection_;
  delete AccountAttrRequest::default_instance_;
  delete AccountAttrRequest_reflection_;
  delete AccountAttrResponse::default_instance_;
  delete AccountAttrResponse_reflection_;
  delete UpdateVpnCountRequest::default_instance_;
  delete UpdateVpnCountRequest_reflection_;
  delete VpnCountItem::default_instance_;
  delete VpnCountItem_reflection_;
  delete UpdateVpnCountResponse::default_instance_;
  delete UpdateVpnCountResponse_reflection_;
  delete GetAccountInitInfoRequest::default_instance_;
  delete GetAccountInitInfoRequest_reflection_;
  delete GetAccountInitInfoResponse::default_instance_;
  delete GetAccountInitInfoResponse_reflection_;
  delete UpdateVpnActiveRequest::default_instance_;
  delete UpdateVpnActiveRequest_reflection_;
  delete AdRewardRequest::default_instance_;
  delete AdRewardRequest_reflection_;
  delete ElectStatisticInfo::default_instance_;
  delete ElectStatisticInfo_reflection_;
  delete StatisticInfo::default_instance_;
  delete StatisticInfo_reflection_;
  delete RefreshPoolHeightRequest::default_instance_;
  delete RefreshPoolHeightRequest_reflection_;
  delete RefreshPoolHeightResponse::default_instance_;
  delete RefreshPoolHeightResponse_reflection_;
  delete GetAccountShardRequest::default_instance_;
  delete GetAccountShardRequest_reflection_;
  delete GetAccountShardReponse::default_instance_;
  delete GetAccountShardReponse_reflection_;
  delete CrossShardingTosMessage::default_instance_;
  delete CrossShardingTosMessage_reflection_;
  delete CrossShardingStatisticMessage::default_instance_;
  delete CrossShardingStatisticMessage_reflection_;
  delete ElectBlockMessage::default_instance_;
  delete ElectBlockMessage_reflection_;
  delete ShardToTxMessage::default_instance_;
  delete ShardToTxMessage_reflection_;
  delete StatisticTxMessage::default_instance_;
  delete StatisticTxMessage_reflection_;
  delete BlockMessage::default_instance_;
  delete BlockMessage_reflection_;
}

void protobuf_AddDesc_protos_2fblock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zjchain::pools::protobuf::protobuf_AddDesc_protos_2fpools_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022protos/block.proto\022\026zjchain.block.prot"
    "obuf\032\022protos/pools.proto\"A\n\013StorageItem\022"
    "\013\n\003key\030\001 \001(\014\022\020\n\010val_hash\030\002 \001(\014\022\023\n\010val_si"
    "ze\030\003 \001(\r:\0010\"8\n\014TransferItem\022\014\n\004from\030\001 \001("
    "\014\022\n\n\002to\030\002 \001(\014\022\016\n\006amount\030\003 \001(\004\"%\n\005TxLog\022\014"
    "\n\004data\030\001 \001(\014\022\016\n\006topics\030\002 \003(\014\"\267\003\n\007BlockTx"
    "\022\013\n\003gid\030\001 \001(\014\022\014\n\004from\030\002 \001(\014\022\n\n\002to\030\003 \001(\014\022"
    "\016\n\006amount\030\004 \001(\004\022\021\n\tgas_limit\030\005 \001(\004\022\020\n\010ga"
    "s_used\030\006 \001(\004\022\021\n\tgas_price\030\007 \001(\004\022\017\n\007balan"
    "ce\030\010 \001(\004\022.\n\004step\030\t \001(\0162 .zjchain.pools.p"
    "rotobuf.StepType\022\016\n\006status\030\n \001(\r\0225\n\010stor"
    "ages\030\013 \003(\0132#.zjchain.block.protobuf.Stor"
    "ageItem\022:\n\014contract_txs\030\014 \003(\0132$.zjchain."
    "block.protobuf.TransferItem\022\033\n\023contract_"
    "prepayment\030\r \001(\004\022\025\n\rcontract_code\030\016 \001(\014\022"
    "\026\n\016contract_input\030\017 \001(\014\022-\n\006events\030\020 \003(\0132"
    "\035.zjchain.block.protobuf.TxLog\"\222\003\n\005Block"
    "\022\022\n\nnetwork_id\030\001 \001(\r\022\022\n\npool_index\030\002 \001(\r"
    "\022\017\n\007prehash\030\003 \001(\014\022\014\n\004hash\030\004 \001(\014\022\017\n\007versi"
    "on\030\005 \001(\r\022\016\n\006height\030\006 \001(\004\022\032\n\022consistency_"
    "random\030\007 \001(\004\022\031\n\021electblock_height\030\010 \001(\004\022"
    "\030\n\020timeblock_height\030\t \001(\004\0220\n\007tx_list\030\n \003"
    "(\0132\037.zjchain.block.protobuf.BlockTx\022\021\n\tt"
    "imestamp\030\013 \001(\004\022\026\n\016bls_agg_sign_x\030\014 \001(\014\022\026"
    "\n\016bls_agg_sign_y\030\r \001(\014\022\024\n\014leader_index\030\016"
    " \001(\004\022#\n\033change_leader_invalid_hashs\030\017 \003("
    "\014\022 \n\021is_commited_block\030\020 \001(\010:\005false\"1\n\022C"
    "onsensusToTxsItem\022\n\n\002to\030\001 \001(\014\022\017\n\007balance"
    "\030\002 \001(\004\"I\n\016ConsensusToTxs\0227\n\003tos\030\001 \003(\0132*."
    "zjchain.block.protobuf.ConsensusToTxsIte"
    "m\"n\n\021GetTxBlockRequest\022\016\n\006tx_gid\030\001 \001(\014\022\022"
    "\n\nblock_hash\030\002 \001(\014\022\014\n\004from\030\003 \001(\010\022\016\n\006heig"
    "ht\030\004 \001(\004\022\027\n\017account_address\030\005 \001(\014\"#\n\022Get"
    "TxBlockResponse\022\r\n\005block\030\001 \001(\014\"J\n\024Accoun"
    "tHeightRequest\022\024\n\014account_addr\030\001 \001(\014\022\r\n\005"
    "index\030\002 \001(\003\022\r\n\005count\030\003 \001(\005\"L\n\025AccountHei"
    "ghtResponse\022\017\n\007heights\030\001 \003(\004\022\024\n\014account_"
    "addr\030\002 \001(\014\022\014\n\004type\030\003 \001(\014\"G\n\022AccountAttrR"
    "equest\022\017\n\007account\030\001 \001(\014\022\020\n\010attr_key\030\002 \001("
    "\014\022\016\n\006height\030\003 \001(\004\"W\n\023AccountAttrResponse"
    "\022\017\n\007account\030\001 \001(\014\022\020\n\010attr_key\030\002 \001(\014\022\016\n\006h"
    "eight\030\003 \001(\004\022\r\n\005block\030\004 \001(\014\"h\n\025UpdateVpnC"
    "ountRequest\022\024\n\014account_hash\030\001 \001(\004\022\n\n\002ip\030"
    "\002 \001(\014\022\016\n\006old_ip\030\003 \001(\014\022\013\n\003uid\030\004 \001(\014\022\020\n\010ju"
    "st_set\030\005 \001(\010\")\n\014VpnCountItem\022\n\n\002ip\030\001 \001(\014"
    "\022\r\n\005count\030\002 \001(\r\"Q\n\026UpdateVpnCountRespons"
    "e\0227\n\tvpn_nodes\030\001 \003(\0132$.zjchain.block.pro"
    "tobuf.VpnCountItem\"e\n\031GetAccountInitInfo"
    "Request\022\n\n\002id\030\001 \001(\014\022\r\n\005count\030\002 \001(\r\022\016\n\006he"
    "ight\030\003 \001(\004\022\016\n\006net_id\030\004 \001(\004\022\r\n\005index\030\005 \001("
    "\004\"\177\n\032GetAccountInitInfoResponse\022\017\n\007balan"
    "ce\030\001 \001(\004\0221\n\nblock_list\030\002 \003(\0132\035.zjchain.b"
    "lock.protobuf.Block\022\n\n\002id\030\003 \001(\014\022\021\n\tmax_i"
    "ndex\030\004 \001(\004\"0\n\026UpdateVpnActiveRequest\022\n\n\002"
    "id\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\">\n\017AdRewardRequest\022"
    "\n\n\002id\030\001 \001(\014\022\022\n\nreward_key\030\002 \001(\014\022\013\n\003gid\030\003"
    " \001(\014\"V\n\022ElectStatisticInfo\022\024\n\014elect_heig"
    "ht\030\001 \001(\004\022\025\n\rsucc_tx_count\030\002 \003(\r\022\023\n\013lof_l"
    "eaders\030\003 \003(\r\"\204\001\n\rStatisticInfo\022\030\n\020timebl"
    "ock_height\030\001 \001(\004\022\024\n\014all_tx_count\030\002 \001(\r\022C"
    "\n\017elect_statistic\030\003 \003(\0132*.zjchain.block."
    "protobuf.ElectStatisticInfo\"+\n\030RefreshPo"
    "olHeightRequest\022\017\n\007heights\030\001 \003(\004\",\n\031Refr"
    "eshPoolHeightResponse\022\017\n\007heights\030\001 \003(\004\"$"
    "\n\026GetAccountShardRequest\022\n\n\002id\030\001 \001(\014\"6\n\026"
    "GetAccountShardReponse\022\n\n\002id\030\001 \001(\014\022\020\n\010sh"
    "ard_id\030\002 \001(\r\"G\n\027CrossShardingTosMessage\022"
    ",\n\005block\030\001 \001(\0132\035.zjchain.block.protobuf."
    "Block\"M\n\035CrossShardingStatisticMessage\022,"
    "\n\005block\030\001 \001(\0132\035.zjchain.block.protobuf.B"
    "lock\"A\n\021ElectBlockMessage\022,\n\005block\030\001 \001(\013"
    "2\035.zjchain.block.protobuf.Block\"\212\001\n\020Shar"
    "dToTxMessage\0225\n\006to_txs\030\001 \003(\0132%.zjchain.p"
    "ools.protobuf.ShardToTxItem\022\022\n\nleader_id"
    "x\030\002 \001(\r\022\024\n\014elect_height\030\003 \001(\004\022\025\n\rleader_"
    "to_idx\030\004 \001(\005\"\221\001\n\022StatisticTxMessage\022:\n\ts"
    "tatistic\030\001 \001(\0132\'.zjchain.pools.protobuf."
    "StatisticTxItem\022\022\n\nleader_idx\030\002 \001(\r\022\024\n\014e"
    "lect_height\030\003 \001(\004\022\025\n\rleader_to_idx\030\004 \001(\005"
    "\"\342\t\n\014BlockMessage\022<\n\tblock_req\030\001 \001(\0132).z"
    "jchain.block.protobuf.GetTxBlockRequest\022"
    "=\n\tblock_res\030\002 \001(\0132*.zjchain.block.proto"
    "buf.GetTxBlockResponse\022@\n\nheight_req\030\003 \001"
    "(\0132,.zjchain.block.protobuf.AccountHeigh"
    "tRequest\022A\n\nheight_res\030\004 \001(\0132-.zjchain.b"
    "lock.protobuf.AccountHeightResponse\022@\n\014a"
    "cc_attr_req\030\005 \001(\0132*.zjchain.block.protob"
    "uf.AccountAttrRequest\022A\n\014acc_attr_res\030\006 "
    "\001(\0132+.zjchain.block.protobuf.AccountAttr"
    "Response\022A\n\nup_vpn_req\030\007 \001(\0132-.zjchain.b"
    "lock.protobuf.UpdateVpnCountRequest\022B\n\nu"
    "p_vpn_res\030\010 \001(\0132..zjchain.block.protobuf"
    ".UpdateVpnCountResponse\022K\n\020account_init_"
    "req\030\t \001(\01321.zjchain.block.protobuf.GetAc"
    "countInitInfoRequest\022L\n\020account_init_res"
    "\030\n \001(\01322.zjchain.block.protobuf.GetAccou"
    "ntInitInfoResponse\022F\n\016vpn_active_req\030\013 \001"
    "(\0132..zjchain.block.protobuf.UpdateVpnAct"
    "iveRequest\022>\n\rad_reward_req\030\014 \001(\0132\'.zjch"
    "ain.block.protobuf.AdRewardRequest\022I\n\017re"
    "f_heights_req\030\r \001(\01320.zjchain.block.prot"
    "obuf.RefreshPoolHeightRequest\022J\n\017ref_hei"
    "ghts_res\030\016 \001(\01321.zjchain.block.protobuf."
    "RefreshPoolHeightResponse\022E\n\racc_shard_r"
    "eq\030\017 \001(\0132..zjchain.block.protobuf.GetAcc"
    "ountShardRequest\022E\n\racc_shard_res\030\020 \001(\0132"
    "..zjchain.block.protobuf.GetAccountShard"
    "Reponse\022:\n\010shard_to\030\021 \001(\0132(.zjchain.bloc"
    "k.protobuf.ShardToTxMessage\022@\n\014statistic"
    "_tx\030\022 \001(\0132*.zjchain.block.protobuf.Stati"
    "sticTxMessage", 4413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/block.proto", &protobuf_RegisterTypes);
  StorageItem::default_instance_ = new StorageItem();
  TransferItem::default_instance_ = new TransferItem();
  TxLog::default_instance_ = new TxLog();
  BlockTx::default_instance_ = new BlockTx();
  Block::default_instance_ = new Block();
  ConsensusToTxsItem::default_instance_ = new ConsensusToTxsItem();
  ConsensusToTxs::default_instance_ = new ConsensusToTxs();
  GetTxBlockRequest::default_instance_ = new GetTxBlockRequest();
  GetTxBlockResponse::default_instance_ = new GetTxBlockResponse();
  AccountHeightRequest::default_instance_ = new AccountHeightRequest();
  AccountHeightResponse::default_instance_ = new AccountHeightResponse();
  AccountAttrRequest::default_instance_ = new AccountAttrRequest();
  AccountAttrResponse::default_instance_ = new AccountAttrResponse();
  UpdateVpnCountRequest::default_instance_ = new UpdateVpnCountRequest();
  VpnCountItem::default_instance_ = new VpnCountItem();
  UpdateVpnCountResponse::default_instance_ = new UpdateVpnCountResponse();
  GetAccountInitInfoRequest::default_instance_ = new GetAccountInitInfoRequest();
  GetAccountInitInfoResponse::default_instance_ = new GetAccountInitInfoResponse();
  UpdateVpnActiveRequest::default_instance_ = new UpdateVpnActiveRequest();
  AdRewardRequest::default_instance_ = new AdRewardRequest();
  ElectStatisticInfo::default_instance_ = new ElectStatisticInfo();
  StatisticInfo::default_instance_ = new StatisticInfo();
  RefreshPoolHeightRequest::default_instance_ = new RefreshPoolHeightRequest();
  RefreshPoolHeightResponse::default_instance_ = new RefreshPoolHeightResponse();
  GetAccountShardRequest::default_instance_ = new GetAccountShardRequest();
  GetAccountShardReponse::default_instance_ = new GetAccountShardReponse();
  CrossShardingTosMessage::default_instance_ = new CrossShardingTosMessage();
  CrossShardingStatisticMessage::default_instance_ = new CrossShardingStatisticMessage();
  ElectBlockMessage::default_instance_ = new ElectBlockMessage();
  ShardToTxMessage::default_instance_ = new ShardToTxMessage();
  StatisticTxMessage::default_instance_ = new StatisticTxMessage();
  BlockMessage::default_instance_ = new BlockMessage();
  StorageItem::default_instance_->InitAsDefaultInstance();
  TransferItem::default_instance_->InitAsDefaultInstance();
  TxLog::default_instance_->InitAsDefaultInstance();
  BlockTx::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  ConsensusToTxsItem::default_instance_->InitAsDefaultInstance();
  ConsensusToTxs::default_instance_->InitAsDefaultInstance();
  GetTxBlockRequest::default_instance_->InitAsDefaultInstance();
  GetTxBlockResponse::default_instance_->InitAsDefaultInstance();
  AccountHeightRequest::default_instance_->InitAsDefaultInstance();
  AccountHeightResponse::default_instance_->InitAsDefaultInstance();
  AccountAttrRequest::default_instance_->InitAsDefaultInstance();
  AccountAttrResponse::default_instance_->InitAsDefaultInstance();
  UpdateVpnCountRequest::default_instance_->InitAsDefaultInstance();
  VpnCountItem::default_instance_->InitAsDefaultInstance();
  UpdateVpnCountResponse::default_instance_->InitAsDefaultInstance();
  GetAccountInitInfoRequest::default_instance_->InitAsDefaultInstance();
  GetAccountInitInfoResponse::default_instance_->InitAsDefaultInstance();
  UpdateVpnActiveRequest::default_instance_->InitAsDefaultInstance();
  AdRewardRequest::default_instance_->InitAsDefaultInstance();
  ElectStatisticInfo::default_instance_->InitAsDefaultInstance();
  StatisticInfo::default_instance_->InitAsDefaultInstance();
  RefreshPoolHeightRequest::default_instance_->InitAsDefaultInstance();
  RefreshPoolHeightResponse::default_instance_->InitAsDefaultInstance();
  GetAccountShardRequest::default_instance_->InitAsDefaultInstance();
  GetAccountShardReponse::default_instance_->InitAsDefaultInstance();
  CrossShardingTosMessage::default_instance_->InitAsDefaultInstance();
  CrossShardingStatisticMessage::default_instance_->InitAsDefaultInstance();
  ElectBlockMessage::default_instance_->InitAsDefaultInstance();
  ShardToTxMessage::default_instance_->InitAsDefaultInstance();
  StatisticTxMessage::default_instance_->InitAsDefaultInstance();
  BlockMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2fblock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2fblock_2eproto {
  StaticDescriptorInitializer_protos_2fblock_2eproto() {
    protobuf_AddDesc_protos_2fblock_2eproto();
  }
} static_descriptor_initializer_protos_2fblock_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StorageItem::kKeyFieldNumber;
const int StorageItem::kValHashFieldNumber;
const int StorageItem::kValSizeFieldNumber;
#endif  // !_MSC_VER

StorageItem::StorageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageItem::InitAsDefaultInstance() {
}

StorageItem::StorageItem(const StorageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageItem::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageItem::~StorageItem() {
  SharedDtor();
}

void StorageItem::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (val_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete val_hash_;
  }
  if (this != default_instance_) {
  }
}

void StorageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageItem_descriptor_;
}

const StorageItem& StorageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

StorageItem* StorageItem::default_instance_ = NULL;

StorageItem* StorageItem::New() const {
  return new StorageItem;
}

void StorageItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_val_hash()) {
      if (val_hash_ != &::google::protobuf::internal::kEmptyString) {
        val_hash_->clear();
      }
    }
    val_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val_hash;
        break;
      }

      // optional bytes val_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val_size;
        break;
      }

      // optional uint32 val_size = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_size_)));
          set_has_val_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // optional bytes val_hash = 2;
  if (has_val_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->val_hash(), output);
  }

  // optional uint32 val_size = 3 [default = 0];
  if (has_val_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->val_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes val_hash = 2;
  if (has_val_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->val_hash(), target);
  }

  // optional uint32 val_size = 3 [default = 0];
  if (has_val_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->val_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes val_hash = 2;
    if (has_val_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val_hash());
    }

    // optional uint32 val_size = 3 [default = 0];
    if (has_val_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageItem::MergeFrom(const StorageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val_hash()) {
      set_val_hash(from.val_hash());
    }
    if (from.has_val_size()) {
      set_val_size(from.val_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageItem::CopyFrom(const StorageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageItem::IsInitialized() const {

  return true;
}

void StorageItem::Swap(StorageItem* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_hash_, other->val_hash_);
    std::swap(val_size_, other->val_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageItem_descriptor_;
  metadata.reflection = StorageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferItem::kFromFieldNumber;
const int TransferItem::kToFieldNumber;
const int TransferItem::kAmountFieldNumber;
#endif  // !_MSC_VER

TransferItem::TransferItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferItem::InitAsDefaultInstance() {
}

TransferItem::TransferItem(const TransferItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferItem::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferItem::~TransferItem() {
  SharedDtor();
}

void TransferItem::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void TransferItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferItem_descriptor_;
}

const TransferItem& TransferItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

TransferItem* TransferItem::default_instance_ = NULL;

TransferItem* TransferItem::New() const {
  return new TransferItem;
}

void TransferItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional bytes to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->from(), output);
  }

  // optional bytes to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->to(), output);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes from = 1;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->from(), target);
  }

  // optional bytes to = 2;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->to(), target);
  }

  // optional uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // optional bytes to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferItem::MergeFrom(const TransferItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferItem::CopyFrom(const TransferItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferItem::IsInitialized() const {

  return true;
}

void TransferItem::Swap(TransferItem* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferItem_descriptor_;
  metadata.reflection = TransferItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TxLog::kDataFieldNumber;
const int TxLog::kTopicsFieldNumber;
#endif  // !_MSC_VER

TxLog::TxLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxLog::InitAsDefaultInstance() {
}

TxLog::TxLog(const TxLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxLog::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxLog::~TxLog() {
  SharedDtor();
}

void TxLog::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TxLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxLog_descriptor_;
}

const TxLog& TxLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

TxLog* TxLog::default_instance_ = NULL;

TxLog* TxLog::New() const {
  return new TxLog;
}

void TxLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  topics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topics;
        break;
      }

      // repeated bytes topics = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_topics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topics;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  // repeated bytes topics = 2;
  for (int i = 0; i < this->topics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->topics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0; i < this->topics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->topics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated bytes topics = 2;
  total_size += 1 * this->topics_size();
  for (int i = 0; i < this->topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->topics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxLog::MergeFrom(const TxLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  topics_.MergeFrom(from.topics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxLog::CopyFrom(const TxLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxLog::IsInitialized() const {

  return true;
}

void TxLog::Swap(TxLog* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    topics_.Swap(&other->topics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxLog_descriptor_;
  metadata.reflection = TxLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockTx::kGidFieldNumber;
const int BlockTx::kFromFieldNumber;
const int BlockTx::kToFieldNumber;
const int BlockTx::kAmountFieldNumber;
const int BlockTx::kGasLimitFieldNumber;
const int BlockTx::kGasUsedFieldNumber;
const int BlockTx::kGasPriceFieldNumber;
const int BlockTx::kBalanceFieldNumber;
const int BlockTx::kStepFieldNumber;
const int BlockTx::kStatusFieldNumber;
const int BlockTx::kStoragesFieldNumber;
const int BlockTx::kContractTxsFieldNumber;
const int BlockTx::kContractPrepaymentFieldNumber;
const int BlockTx::kContractCodeFieldNumber;
const int BlockTx::kContractInputFieldNumber;
const int BlockTx::kEventsFieldNumber;
#endif  // !_MSC_VER

BlockTx::BlockTx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockTx::InitAsDefaultInstance() {
}

BlockTx::BlockTx(const BlockTx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockTx::SharedCtor() {
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  gas_limit_ = GOOGLE_ULONGLONG(0);
  gas_used_ = GOOGLE_ULONGLONG(0);
  gas_price_ = GOOGLE_ULONGLONG(0);
  balance_ = GOOGLE_ULONGLONG(0);
  step_ = 0;
  status_ = 0u;
  contract_prepayment_ = GOOGLE_ULONGLONG(0);
  contract_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contract_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockTx::~BlockTx() {
  SharedDtor();
}

void BlockTx::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_code_;
  }
  if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_input_;
  }
  if (this != default_instance_) {
  }
}

void BlockTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockTx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockTx_descriptor_;
}

const BlockTx& BlockTx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

BlockTx* BlockTx::default_instance_ = NULL;

BlockTx* BlockTx::New() const {
  return new BlockTx;
}

void BlockTx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    gas_limit_ = GOOGLE_ULONGLONG(0);
    gas_used_ = GOOGLE_ULONGLONG(0);
    gas_price_ = GOOGLE_ULONGLONG(0);
    balance_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    step_ = 0;
    status_ = 0u;
    contract_prepayment_ = GOOGLE_ULONGLONG(0);
    if (has_contract_code()) {
      if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
        contract_code_->clear();
      }
    }
    if (has_contract_input()) {
      if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
        contract_input_->clear();
      }
    }
  }
  storages_.Clear();
  contract_txs_.Clear();
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }

      // optional bytes from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to;
        break;
      }

      // optional bytes to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gas_limit;
        break;
      }

      // optional uint64 gas_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gas_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_limit_)));
          set_has_gas_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gas_used;
        break;
      }

      // optional uint64 gas_used = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gas_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_used_)));
          set_has_gas_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gas_price;
        break;
      }

      // optional uint64 gas_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gas_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_price_)));
          set_has_gas_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_balance;
        break;
      }

      // optional uint64 balance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_step;
        break;
      }

      // optional .zjchain.pools.protobuf.StepType step = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zjchain::pools::protobuf::StepType_IsValid(value)) {
            set_step(static_cast< ::zjchain::pools::protobuf::StepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }

      // optional uint32 status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_storages;
        break;
      }

      // repeated .zjchain.block.protobuf.StorageItem storages = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_storages;
        if (input->ExpectTag(98)) goto parse_contract_txs;
        break;
      }

      // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_txs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contract_txs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_contract_txs;
        if (input->ExpectTag(104)) goto parse_contract_prepayment;
        break;
      }

      // optional uint64 contract_prepayment = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contract_prepayment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &contract_prepayment_)));
          set_has_contract_prepayment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_contract_code;
        break;
      }

      // optional bytes contract_code = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contract_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_contract_input;
        break;
      }

      // optional bytes contract_input = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contract_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_events;
        break;
      }

      // repeated .zjchain.block.protobuf.TxLog events = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->gid(), output);
  }

  // optional bytes from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->from(), output);
  }

  // optional bytes to = 3;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->to(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional uint64 gas_limit = 5;
  if (has_gas_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gas_limit(), output);
  }

  // optional uint64 gas_used = 6;
  if (has_gas_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gas_used(), output);
  }

  // optional uint64 gas_price = 7;
  if (has_gas_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->gas_price(), output);
  }

  // optional uint64 balance = 8;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->balance(), output);
  }

  // optional .zjchain.pools.protobuf.StepType step = 9;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->step(), output);
  }

  // optional uint32 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->status(), output);
  }

  // repeated .zjchain.block.protobuf.StorageItem storages = 11;
  for (int i = 0; i < this->storages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->storages(i), output);
  }

  // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
  for (int i = 0; i < this->contract_txs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->contract_txs(i), output);
  }

  // optional uint64 contract_prepayment = 13;
  if (has_contract_prepayment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->contract_prepayment(), output);
  }

  // optional bytes contract_code = 14;
  if (has_contract_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->contract_code(), output);
  }

  // optional bytes contract_input = 15;
  if (has_contract_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->contract_input(), output);
  }

  // repeated .zjchain.block.protobuf.TxLog events = 16;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockTx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes gid = 1;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gid(), target);
  }

  // optional bytes from = 2;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->from(), target);
  }

  // optional bytes to = 3;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->to(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional uint64 gas_limit = 5;
  if (has_gas_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gas_limit(), target);
  }

  // optional uint64 gas_used = 6;
  if (has_gas_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gas_used(), target);
  }

  // optional uint64 gas_price = 7;
  if (has_gas_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->gas_price(), target);
  }

  // optional uint64 balance = 8;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->balance(), target);
  }

  // optional .zjchain.pools.protobuf.StepType step = 9;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->step(), target);
  }

  // optional uint32 status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->status(), target);
  }

  // repeated .zjchain.block.protobuf.StorageItem storages = 11;
  for (int i = 0; i < this->storages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->storages(i), target);
  }

  // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
  for (int i = 0; i < this->contract_txs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->contract_txs(i), target);
  }

  // optional uint64 contract_prepayment = 13;
  if (has_contract_prepayment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->contract_prepayment(), target);
  }

  // optional bytes contract_code = 14;
  if (has_contract_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->contract_code(), target);
  }

  // optional bytes contract_input = 15;
  if (has_contract_input()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->contract_input(), target);
  }

  // repeated .zjchain.block.protobuf.TxLog events = 16;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockTx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional bytes from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // optional bytes to = 3;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 gas_limit = 5;
    if (has_gas_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_limit());
    }

    // optional uint64 gas_used = 6;
    if (has_gas_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_used());
    }

    // optional uint64 gas_price = 7;
    if (has_gas_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_price());
    }

    // optional uint64 balance = 8;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .zjchain.pools.protobuf.StepType step = 9;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional uint32 status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 contract_prepayment = 13;
    if (has_contract_prepayment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->contract_prepayment());
    }

    // optional bytes contract_code = 14;
    if (has_contract_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contract_code());
    }

    // optional bytes contract_input = 15;
    if (has_contract_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contract_input());
    }

  }
  // repeated .zjchain.block.protobuf.StorageItem storages = 11;
  total_size += 1 * this->storages_size();
  for (int i = 0; i < this->storages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storages(i));
  }

  // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
  total_size += 1 * this->contract_txs_size();
  for (int i = 0; i < this->contract_txs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contract_txs(i));
  }

  // repeated .zjchain.block.protobuf.TxLog events = 16;
  total_size += 2 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockTx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockTx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockTx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockTx::MergeFrom(const BlockTx& from) {
  GOOGLE_CHECK_NE(&from, this);
  storages_.MergeFrom(from.storages_);
  contract_txs_.MergeFrom(from.contract_txs_);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_gas_limit()) {
      set_gas_limit(from.gas_limit());
    }
    if (from.has_gas_used()) {
      set_gas_used(from.gas_used());
    }
    if (from.has_gas_price()) {
      set_gas_price(from.gas_price());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_contract_prepayment()) {
      set_contract_prepayment(from.contract_prepayment());
    }
    if (from.has_contract_code()) {
      set_contract_code(from.contract_code());
    }
    if (from.has_contract_input()) {
      set_contract_input(from.contract_input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockTx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockTx::CopyFrom(const BlockTx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockTx::IsInitialized() const {

  return true;
}

void BlockTx::Swap(BlockTx* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(amount_, other->amount_);
    std::swap(gas_limit_, other->gas_limit_);
    std::swap(gas_used_, other->gas_used_);
    std::swap(gas_price_, other->gas_price_);
    std::swap(balance_, other->balance_);
    std::swap(step_, other->step_);
    std::swap(status_, other->status_);
    storages_.Swap(&other->storages_);
    contract_txs_.Swap(&other->contract_txs_);
    std::swap(contract_prepayment_, other->contract_prepayment_);
    std::swap(contract_code_, other->contract_code_);
    std::swap(contract_input_, other->contract_input_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockTx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockTx_descriptor_;
  metadata.reflection = BlockTx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Block::kNetworkIdFieldNumber;
const int Block::kPoolIndexFieldNumber;
const int Block::kPrehashFieldNumber;
const int Block::kHashFieldNumber;
const int Block::kVersionFieldNumber;
const int Block::kHeightFieldNumber;
const int Block::kConsistencyRandomFieldNumber;
const int Block::kElectblockHeightFieldNumber;
const int Block::kTimeblockHeightFieldNumber;
const int Block::kTxListFieldNumber;
const int Block::kTimestampFieldNumber;
const int Block::kBlsAggSignXFieldNumber;
const int Block::kBlsAggSignYFieldNumber;
const int Block::kLeaderIndexFieldNumber;
const int Block::kChangeLeaderInvalidHashsFieldNumber;
const int Block::kIsCommitedBlockFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  network_id_ = 0u;
  pool_index_ = 0u;
  prehash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0u;
  height_ = GOOGLE_ULONGLONG(0);
  consistency_random_ = GOOGLE_ULONGLONG(0);
  electblock_height_ = GOOGLE_ULONGLONG(0);
  timeblock_height_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_ULONGLONG(0);
  bls_agg_sign_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bls_agg_sign_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_index_ = GOOGLE_ULONGLONG(0);
  is_commited_block_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (prehash_ != &::google::protobuf::internal::kEmptyString) {
    delete prehash_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (bls_agg_sign_x_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_agg_sign_x_;
  }
  if (bls_agg_sign_y_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_agg_sign_y_;
  }
  if (this != default_instance_) {
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    network_id_ = 0u;
    pool_index_ = 0u;
    if (has_prehash()) {
      if (prehash_ != &::google::protobuf::internal::kEmptyString) {
        prehash_->clear();
      }
    }
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    version_ = 0u;
    height_ = GOOGLE_ULONGLONG(0);
    consistency_random_ = GOOGLE_ULONGLONG(0);
    electblock_height_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timeblock_height_ = GOOGLE_ULONGLONG(0);
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_bls_agg_sign_x()) {
      if (bls_agg_sign_x_ != &::google::protobuf::internal::kEmptyString) {
        bls_agg_sign_x_->clear();
      }
    }
    if (has_bls_agg_sign_y()) {
      if (bls_agg_sign_y_ != &::google::protobuf::internal::kEmptyString) {
        bls_agg_sign_y_->clear();
      }
    }
    leader_index_ = GOOGLE_ULONGLONG(0);
    is_commited_block_ = false;
  }
  tx_list_.Clear();
  change_leader_invalid_hashs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 network_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_id_)));
          set_has_network_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pool_index;
        break;
      }

      // optional uint32 pool_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
          set_has_pool_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prehash;
        break;
      }

      // optional bytes prehash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prehash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prehash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hash;
        break;
      }

      // optional bytes hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional uint32 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional uint64 height = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_consistency_random;
        break;
      }

      // optional uint64 consistency_random = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consistency_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &consistency_random_)));
          set_has_consistency_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_electblock_height;
        break;
      }

      // optional uint64 electblock_height = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_electblock_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &electblock_height_)));
          set_has_electblock_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_timeblock_height;
        break;
      }

      // optional uint64 timeblock_height = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeblock_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeblock_height_)));
          set_has_timeblock_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tx_list;
        break;
      }

      // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tx_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tx_list;
        if (input->ExpectTag(88)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bls_agg_sign_x;
        break;
      }

      // optional bytes bls_agg_sign_x = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_agg_sign_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_agg_sign_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_bls_agg_sign_y;
        break;
      }

      // optional bytes bls_agg_sign_y = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_agg_sign_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_agg_sign_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_leader_index;
        break;
      }

      // optional uint64 leader_index = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_index_)));
          set_has_leader_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_change_leader_invalid_hashs;
        break;
      }

      // repeated bytes change_leader_invalid_hashs = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_leader_invalid_hashs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_change_leader_invalid_hashs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_change_leader_invalid_hashs;
        if (input->ExpectTag(128)) goto parse_is_commited_block;
        break;
      }

      // optional bool is_commited_block = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_commited_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_commited_block_)));
          set_has_is_commited_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 network_id = 1;
  if (has_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->network_id(), output);
  }

  // optional uint32 pool_index = 2;
  if (has_pool_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pool_index(), output);
  }

  // optional bytes prehash = 3;
  if (has_prehash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->prehash(), output);
  }

  // optional bytes hash = 4;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->hash(), output);
  }

  // optional uint32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version(), output);
  }

  // optional uint64 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->height(), output);
  }

  // optional uint64 consistency_random = 7;
  if (has_consistency_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->consistency_random(), output);
  }

  // optional uint64 electblock_height = 8;
  if (has_electblock_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->electblock_height(), output);
  }

  // optional uint64 timeblock_height = 9;
  if (has_timeblock_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->timeblock_height(), output);
  }

  // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
  for (int i = 0; i < this->tx_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tx_list(i), output);
  }

  // optional uint64 timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->timestamp(), output);
  }

  // optional bytes bls_agg_sign_x = 12;
  if (has_bls_agg_sign_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->bls_agg_sign_x(), output);
  }

  // optional bytes bls_agg_sign_y = 13;
  if (has_bls_agg_sign_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->bls_agg_sign_y(), output);
  }

  // optional uint64 leader_index = 14;
  if (has_leader_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->leader_index(), output);
  }

  // repeated bytes change_leader_invalid_hashs = 15;
  for (int i = 0; i < this->change_leader_invalid_hashs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->change_leader_invalid_hashs(i), output);
  }

  // optional bool is_commited_block = 16 [default = false];
  if (has_is_commited_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_commited_block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 network_id = 1;
  if (has_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->network_id(), target);
  }

  // optional uint32 pool_index = 2;
  if (has_pool_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pool_index(), target);
  }

  // optional bytes prehash = 3;
  if (has_prehash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->prehash(), target);
  }

  // optional bytes hash = 4;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hash(), target);
  }

  // optional uint32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version(), target);
  }

  // optional uint64 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->height(), target);
  }

  // optional uint64 consistency_random = 7;
  if (has_consistency_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->consistency_random(), target);
  }

  // optional uint64 electblock_height = 8;
  if (has_electblock_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->electblock_height(), target);
  }

  // optional uint64 timeblock_height = 9;
  if (has_timeblock_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->timeblock_height(), target);
  }

  // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
  for (int i = 0; i < this->tx_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tx_list(i), target);
  }

  // optional uint64 timestamp = 11;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->timestamp(), target);
  }

  // optional bytes bls_agg_sign_x = 12;
  if (has_bls_agg_sign_x()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->bls_agg_sign_x(), target);
  }

  // optional bytes bls_agg_sign_y = 13;
  if (has_bls_agg_sign_y()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->bls_agg_sign_y(), target);
  }

  // optional uint64 leader_index = 14;
  if (has_leader_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->leader_index(), target);
  }

  // repeated bytes change_leader_invalid_hashs = 15;
  for (int i = 0; i < this->change_leader_invalid_hashs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(15, this->change_leader_invalid_hashs(i), target);
  }

  // optional bool is_commited_block = 16 [default = false];
  if (has_is_commited_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_commited_block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 network_id = 1;
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_id());
    }

    // optional uint32 pool_index = 2;
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

    // optional bytes prehash = 3;
    if (has_prehash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prehash());
    }

    // optional bytes hash = 4;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // optional uint32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint64 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional uint64 consistency_random = 7;
    if (has_consistency_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->consistency_random());
    }

    // optional uint64 electblock_height = 8;
    if (has_electblock_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->electblock_height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 timeblock_height = 9;
    if (has_timeblock_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeblock_height());
    }

    // optional uint64 timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional bytes bls_agg_sign_x = 12;
    if (has_bls_agg_sign_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_agg_sign_x());
    }

    // optional bytes bls_agg_sign_y = 13;
    if (has_bls_agg_sign_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_agg_sign_y());
    }

    // optional uint64 leader_index = 14;
    if (has_leader_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_index());
    }

    // optional bool is_commited_block = 16 [default = false];
    if (has_is_commited_block()) {
      total_size += 2 + 1;
    }

  }
  // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
  total_size += 1 * this->tx_list_size();
  for (int i = 0; i < this->tx_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tx_list(i));
  }

  // repeated bytes change_leader_invalid_hashs = 15;
  total_size += 1 * this->change_leader_invalid_hashs_size();
  for (int i = 0; i < this->change_leader_invalid_hashs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->change_leader_invalid_hashs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  tx_list_.MergeFrom(from.tx_list_);
  change_leader_invalid_hashs_.MergeFrom(from.change_leader_invalid_hashs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_network_id()) {
      set_network_id(from.network_id());
    }
    if (from.has_pool_index()) {
      set_pool_index(from.pool_index());
    }
    if (from.has_prehash()) {
      set_prehash(from.prehash());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_consistency_random()) {
      set_consistency_random(from.consistency_random());
    }
    if (from.has_electblock_height()) {
      set_electblock_height(from.electblock_height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeblock_height()) {
      set_timeblock_height(from.timeblock_height());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_bls_agg_sign_x()) {
      set_bls_agg_sign_x(from.bls_agg_sign_x());
    }
    if (from.has_bls_agg_sign_y()) {
      set_bls_agg_sign_y(from.bls_agg_sign_y());
    }
    if (from.has_leader_index()) {
      set_leader_index(from.leader_index());
    }
    if (from.has_is_commited_block()) {
      set_is_commited_block(from.is_commited_block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {

  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(network_id_, other->network_id_);
    std::swap(pool_index_, other->pool_index_);
    std::swap(prehash_, other->prehash_);
    std::swap(hash_, other->hash_);
    std::swap(version_, other->version_);
    std::swap(height_, other->height_);
    std::swap(consistency_random_, other->consistency_random_);
    std::swap(electblock_height_, other->electblock_height_);
    std::swap(timeblock_height_, other->timeblock_height_);
    tx_list_.Swap(&other->tx_list_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(bls_agg_sign_x_, other->bls_agg_sign_x_);
    std::swap(bls_agg_sign_y_, other->bls_agg_sign_y_);
    std::swap(leader_index_, other->leader_index_);
    change_leader_invalid_hashs_.Swap(&other->change_leader_invalid_hashs_);
    std::swap(is_commited_block_, other->is_commited_block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsensusToTxsItem::kToFieldNumber;
const int ConsensusToTxsItem::kBalanceFieldNumber;
#endif  // !_MSC_VER

ConsensusToTxsItem::ConsensusToTxsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsensusToTxsItem::InitAsDefaultInstance() {
}

ConsensusToTxsItem::ConsensusToTxsItem(const ConsensusToTxsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsensusToTxsItem::SharedCtor() {
  _cached_size_ = 0;
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  balance_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusToTxsItem::~ConsensusToTxsItem() {
  SharedDtor();
}

void ConsensusToTxsItem::SharedDtor() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void ConsensusToTxsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusToTxsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusToTxsItem_descriptor_;
}

const ConsensusToTxsItem& ConsensusToTxsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

ConsensusToTxsItem* ConsensusToTxsItem::default_instance_ = NULL;

ConsensusToTxsItem* ConsensusToTxsItem::New() const {
  return new ConsensusToTxsItem;
}

void ConsensusToTxsItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    balance_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusToTxsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes to = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_balance;
        break;
      }

      // optional uint64 balance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsensusToTxsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes to = 1;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->to(), output);
  }

  // optional uint64 balance = 2;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->balance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsensusToTxsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes to = 1;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->to(), target);
  }

  // optional uint64 balance = 2;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->balance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsensusToTxsItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes to = 1;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional uint64 balance = 2;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusToTxsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusToTxsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusToTxsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusToTxsItem::MergeFrom(const ConsensusToTxsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusToTxsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusToTxsItem::CopyFrom(const ConsensusToTxsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusToTxsItem::IsInitialized() const {

  return true;
}

void ConsensusToTxsItem::Swap(ConsensusToTxsItem* other) {
  if (other != this) {
    std::swap(to_, other->to_);
    std::swap(balance_, other->balance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusToTxsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusToTxsItem_descriptor_;
  metadata.reflection = ConsensusToTxsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsensusToTxs::kTosFieldNumber;
#endif  // !_MSC_VER

ConsensusToTxs::ConsensusToTxs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsensusToTxs::InitAsDefaultInstance() {
}

ConsensusToTxs::ConsensusToTxs(const ConsensusToTxs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsensusToTxs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusToTxs::~ConsensusToTxs() {
  SharedDtor();
}

void ConsensusToTxs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConsensusToTxs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusToTxs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusToTxs_descriptor_;
}

const ConsensusToTxs& ConsensusToTxs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

ConsensusToTxs* ConsensusToTxs::default_instance_ = NULL;

ConsensusToTxs* ConsensusToTxs::New() const {
  return new ConsensusToTxs;
}

void ConsensusToTxs::Clear() {
  tos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusToTxs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsensusToTxs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
  for (int i = 0; i < this->tos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsensusToTxs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
  for (int i = 0; i < this->tos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsensusToTxs::ByteSize() const {
  int total_size = 0;

  // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
  total_size += 1 * this->tos_size();
  for (int i = 0; i < this->tos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusToTxs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusToTxs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusToTxs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusToTxs::MergeFrom(const ConsensusToTxs& from) {
  GOOGLE_CHECK_NE(&from, this);
  tos_.MergeFrom(from.tos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusToTxs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusToTxs::CopyFrom(const ConsensusToTxs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusToTxs::IsInitialized() const {

  return true;
}

void ConsensusToTxs::Swap(ConsensusToTxs* other) {
  if (other != this) {
    tos_.Swap(&other->tos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusToTxs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusToTxs_descriptor_;
  metadata.reflection = ConsensusToTxs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTxBlockRequest::kTxGidFieldNumber;
const int GetTxBlockRequest::kBlockHashFieldNumber;
const int GetTxBlockRequest::kFromFieldNumber;
const int GetTxBlockRequest::kHeightFieldNumber;
const int GetTxBlockRequest::kAccountAddressFieldNumber;
#endif  // !_MSC_VER

GetTxBlockRequest::GetTxBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTxBlockRequest::InitAsDefaultInstance() {
}

GetTxBlockRequest::GetTxBlockRequest(const GetTxBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTxBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  tx_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = false;
  height_ = GOOGLE_ULONGLONG(0);
  account_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTxBlockRequest::~GetTxBlockRequest() {
  SharedDtor();
}

void GetTxBlockRequest::SharedDtor() {
  if (tx_gid_ != &::google::protobuf::internal::kEmptyString) {
    delete tx_gid_;
  }
  if (block_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete block_hash_;
  }
  if (account_address_ != &::google::protobuf::internal::kEmptyString) {
    delete account_address_;
  }
  if (this != default_instance_) {
  }
}

void GetTxBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTxBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTxBlockRequest_descriptor_;
}

const GetTxBlockRequest& GetTxBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

GetTxBlockRequest* GetTxBlockRequest::default_instance_ = NULL;

GetTxBlockRequest* GetTxBlockRequest::New() const {
  return new GetTxBlockRequest;
}

void GetTxBlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tx_gid()) {
      if (tx_gid_ != &::google::protobuf::internal::kEmptyString) {
        tx_gid_->clear();
      }
    }
    if (has_block_hash()) {
      if (block_hash_ != &::google::protobuf::internal::kEmptyString) {
        block_hash_->clear();
      }
    }
    from_ = false;
    height_ = GOOGLE_ULONGLONG(0);
    if (has_account_address()) {
      if (account_address_ != &::google::protobuf::internal::kEmptyString) {
        account_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTxBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes tx_gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_hash;
        break;
      }

      // optional bytes block_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from;
        break;
      }

      // optional bool from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional uint64 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_address;
        break;
      }

      // optional bytes account_address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTxBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes tx_gid = 1;
  if (has_tx_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->tx_gid(), output);
  }

  // optional bytes block_hash = 2;
  if (has_block_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->block_hash(), output);
  }

  // optional bool from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from(), output);
  }

  // optional uint64 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->height(), output);
  }

  // optional bytes account_address = 5;
  if (has_account_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->account_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTxBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes tx_gid = 1;
  if (has_tx_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx_gid(), target);
  }

  // optional bytes block_hash = 2;
  if (has_block_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->block_hash(), target);
  }

  // optional bool from = 3;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from(), target);
  }

  // optional uint64 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->height(), target);
  }

  // optional bytes account_address = 5;
  if (has_account_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->account_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTxBlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes tx_gid = 1;
    if (has_tx_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tx_gid());
    }

    // optional bytes block_hash = 2;
    if (has_block_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block_hash());
    }

    // optional bool from = 3;
    if (has_from()) {
      total_size += 1 + 1;
    }

    // optional uint64 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional bytes account_address = 5;
    if (has_account_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTxBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTxBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTxBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTxBlockRequest::MergeFrom(const GetTxBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tx_gid()) {
      set_tx_gid(from.tx_gid());
    }
    if (from.has_block_hash()) {
      set_block_hash(from.block_hash());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_account_address()) {
      set_account_address(from.account_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTxBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTxBlockRequest::CopyFrom(const GetTxBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxBlockRequest::IsInitialized() const {

  return true;
}

void GetTxBlockRequest::Swap(GetTxBlockRequest* other) {
  if (other != this) {
    std::swap(tx_gid_, other->tx_gid_);
    std::swap(block_hash_, other->block_hash_);
    std::swap(from_, other->from_);
    std::swap(height_, other->height_);
    std::swap(account_address_, other->account_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTxBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTxBlockRequest_descriptor_;
  metadata.reflection = GetTxBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTxBlockResponse::kBlockFieldNumber;
#endif  // !_MSC_VER

GetTxBlockResponse::GetTxBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTxBlockResponse::InitAsDefaultInstance() {
}

GetTxBlockResponse::GetTxBlockResponse(const GetTxBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTxBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  block_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTxBlockResponse::~GetTxBlockResponse() {
  SharedDtor();
}

void GetTxBlockResponse::SharedDtor() {
  if (block_ != &::google::protobuf::internal::kEmptyString) {
    delete block_;
  }
  if (this != default_instance_) {
  }
}

void GetTxBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTxBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTxBlockResponse_descriptor_;
}

const GetTxBlockResponse& GetTxBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

GetTxBlockResponse* GetTxBlockResponse::default_instance_ = NULL;

GetTxBlockResponse* GetTxBlockResponse::New() const {
  return new GetTxBlockResponse;
}

void GetTxBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != &::google::protobuf::internal::kEmptyString) {
        block_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTxBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTxBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTxBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes block = 1;
  if (has_block()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTxBlockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTxBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTxBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTxBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTxBlockResponse::MergeFrom(const GetTxBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTxBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTxBlockResponse::CopyFrom(const GetTxBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxBlockResponse::IsInitialized() const {

  return true;
}

void GetTxBlockResponse::Swap(GetTxBlockResponse* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTxBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTxBlockResponse_descriptor_;
  metadata.reflection = GetTxBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountHeightRequest::kAccountAddrFieldNumber;
const int AccountHeightRequest::kIndexFieldNumber;
const int AccountHeightRequest::kCountFieldNumber;
#endif  // !_MSC_VER

AccountHeightRequest::AccountHeightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountHeightRequest::InitAsDefaultInstance() {
}

AccountHeightRequest::AccountHeightRequest(const AccountHeightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountHeightRequest::SharedCtor() {
  _cached_size_ = 0;
  account_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountHeightRequest::~AccountHeightRequest() {
  SharedDtor();
}

void AccountHeightRequest::SharedDtor() {
  if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete account_addr_;
  }
  if (this != default_instance_) {
  }
}

void AccountHeightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountHeightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountHeightRequest_descriptor_;
}

const AccountHeightRequest& AccountHeightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

AccountHeightRequest* AccountHeightRequest::default_instance_ = NULL;

AccountHeightRequest* AccountHeightRequest::New() const {
  return new AccountHeightRequest;
}

void AccountHeightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_addr()) {
      if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
        account_addr_->clear();
      }
    }
    index_ = GOOGLE_LONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountHeightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountHeightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account_addr = 1;
  if (has_account_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account_addr(), output);
  }

  // optional int64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountHeightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account_addr = 1;
  if (has_account_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account_addr(), target);
  }

  // optional int64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountHeightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account_addr = 1;
    if (has_account_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_addr());
    }

    // optional int64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountHeightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountHeightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountHeightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountHeightRequest::MergeFrom(const AccountHeightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_addr()) {
      set_account_addr(from.account_addr());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountHeightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountHeightRequest::CopyFrom(const AccountHeightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountHeightRequest::IsInitialized() const {

  return true;
}

void AccountHeightRequest::Swap(AccountHeightRequest* other) {
  if (other != this) {
    std::swap(account_addr_, other->account_addr_);
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountHeightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountHeightRequest_descriptor_;
  metadata.reflection = AccountHeightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountHeightResponse::kHeightsFieldNumber;
const int AccountHeightResponse::kAccountAddrFieldNumber;
const int AccountHeightResponse::kTypeFieldNumber;
#endif  // !_MSC_VER

AccountHeightResponse::AccountHeightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountHeightResponse::InitAsDefaultInstance() {
}

AccountHeightResponse::AccountHeightResponse(const AccountHeightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountHeightResponse::SharedCtor() {
  _cached_size_ = 0;
  account_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountHeightResponse::~AccountHeightResponse() {
  SharedDtor();
}

void AccountHeightResponse::SharedDtor() {
  if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete account_addr_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void AccountHeightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountHeightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountHeightResponse_descriptor_;
}

const AccountHeightResponse& AccountHeightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

AccountHeightResponse* AccountHeightResponse::default_instance_ = NULL;

AccountHeightResponse* AccountHeightResponse::New() const {
  return new AccountHeightResponse;
}

void AccountHeightResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_account_addr()) {
      if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
        account_addr_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  heights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountHeightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 heights = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heights;
        if (input->ExpectTag(18)) goto parse_account_addr;
        break;
      }

      // optional bytes account_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountHeightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 heights = 1;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->heights(i), output);
  }

  // optional bytes account_addr = 2;
  if (has_account_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account_addr(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountHeightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 heights = 1;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->heights(i), target);
  }

  // optional bytes account_addr = 2;
  if (has_account_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account_addr(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountHeightResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes account_addr = 2;
    if (has_account_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_addr());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  // repeated uint64 heights = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heights(i));
    }
    total_size += 1 * this->heights_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountHeightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountHeightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountHeightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountHeightResponse::MergeFrom(const AccountHeightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_account_addr()) {
      set_account_addr(from.account_addr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountHeightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountHeightResponse::CopyFrom(const AccountHeightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountHeightResponse::IsInitialized() const {

  return true;
}

void AccountHeightResponse::Swap(AccountHeightResponse* other) {
  if (other != this) {
    heights_.Swap(&other->heights_);
    std::swap(account_addr_, other->account_addr_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountHeightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountHeightResponse_descriptor_;
  metadata.reflection = AccountHeightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountAttrRequest::kAccountFieldNumber;
const int AccountAttrRequest::kAttrKeyFieldNumber;
const int AccountAttrRequest::kHeightFieldNumber;
#endif  // !_MSC_VER

AccountAttrRequest::AccountAttrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountAttrRequest::InitAsDefaultInstance() {
}

AccountAttrRequest::AccountAttrRequest(const AccountAttrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountAttrRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountAttrRequest::~AccountAttrRequest() {
  SharedDtor();
}

void AccountAttrRequest::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (this != default_instance_) {
  }
}

void AccountAttrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountAttrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountAttrRequest_descriptor_;
}

const AccountAttrRequest& AccountAttrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

AccountAttrRequest* AccountAttrRequest::default_instance_ = NULL;

AccountAttrRequest* AccountAttrRequest::New() const {
  return new AccountAttrRequest;
}

void AccountAttrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_attr_key()) {
      if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
        attr_key_->clear();
      }
    }
    height_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountAttrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_key;
        break;
      }

      // optional bytes attr_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountAttrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attr_key(), output);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountAttrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attr_key(), target);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountAttrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes attr_key = 2;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_key());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountAttrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountAttrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountAttrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountAttrRequest::MergeFrom(const AccountAttrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountAttrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAttrRequest::CopyFrom(const AccountAttrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAttrRequest::IsInitialized() const {

  return true;
}

void AccountAttrRequest::Swap(AccountAttrRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountAttrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountAttrRequest_descriptor_;
  metadata.reflection = AccountAttrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountAttrResponse::kAccountFieldNumber;
const int AccountAttrResponse::kAttrKeyFieldNumber;
const int AccountAttrResponse::kHeightFieldNumber;
const int AccountAttrResponse::kBlockFieldNumber;
#endif  // !_MSC_VER

AccountAttrResponse::AccountAttrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountAttrResponse::InitAsDefaultInstance() {
}

AccountAttrResponse::AccountAttrResponse(const AccountAttrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountAttrResponse::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  height_ = GOOGLE_ULONGLONG(0);
  block_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountAttrResponse::~AccountAttrResponse() {
  SharedDtor();
}

void AccountAttrResponse::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (block_ != &::google::protobuf::internal::kEmptyString) {
    delete block_;
  }
  if (this != default_instance_) {
  }
}

void AccountAttrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountAttrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountAttrResponse_descriptor_;
}

const AccountAttrResponse& AccountAttrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

AccountAttrResponse* AccountAttrResponse::default_instance_ = NULL;

AccountAttrResponse* AccountAttrResponse::New() const {
  return new AccountAttrResponse;
}

void AccountAttrResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_attr_key()) {
      if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
        attr_key_->clear();
      }
    }
    height_ = GOOGLE_ULONGLONG(0);
    if (has_block()) {
      if (block_ != &::google::protobuf::internal::kEmptyString) {
        block_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountAttrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_key;
        break;
      }

      // optional bytes attr_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_block;
        break;
      }

      // optional bytes block = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountAttrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attr_key(), output);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // optional bytes block = 4;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountAttrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attr_key(), target);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // optional bytes block = 4;
  if (has_block()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountAttrResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes attr_key = 2;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_key());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional bytes block = 4;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountAttrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountAttrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountAttrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountAttrResponse::MergeFrom(const AccountAttrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountAttrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAttrResponse::CopyFrom(const AccountAttrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAttrResponse::IsInitialized() const {

  return true;
}

void AccountAttrResponse::Swap(AccountAttrResponse* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(height_, other->height_);
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountAttrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountAttrResponse_descriptor_;
  metadata.reflection = AccountAttrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateVpnCountRequest::kAccountHashFieldNumber;
const int UpdateVpnCountRequest::kIpFieldNumber;
const int UpdateVpnCountRequest::kOldIpFieldNumber;
const int UpdateVpnCountRequest::kUidFieldNumber;
const int UpdateVpnCountRequest::kJustSetFieldNumber;
#endif  // !_MSC_VER

UpdateVpnCountRequest::UpdateVpnCountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateVpnCountRequest::InitAsDefaultInstance() {
}

UpdateVpnCountRequest::UpdateVpnCountRequest(const UpdateVpnCountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateVpnCountRequest::SharedCtor() {
  _cached_size_ = 0;
  account_hash_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  just_set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateVpnCountRequest::~UpdateVpnCountRequest() {
  SharedDtor();
}

void UpdateVpnCountRequest::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (old_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete old_ip_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void UpdateVpnCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVpnCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateVpnCountRequest_descriptor_;
}

const UpdateVpnCountRequest& UpdateVpnCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

UpdateVpnCountRequest* UpdateVpnCountRequest::default_instance_ = NULL;

UpdateVpnCountRequest* UpdateVpnCountRequest::New() const {
  return new UpdateVpnCountRequest;
}

void UpdateVpnCountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_hash_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_old_ip()) {
      if (old_ip_ != &::google::protobuf::internal::kEmptyString) {
        old_ip_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    just_set_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateVpnCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_hash_)));
          set_has_account_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional bytes ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_ip;
        break;
      }

      // optional bytes old_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_old_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional bytes uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_just_set;
        break;
      }

      // optional bool just_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_just_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_set_)));
          set_has_just_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateVpnCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 account_hash = 1;
  if (has_account_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_hash(), output);
  }

  // optional bytes ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ip(), output);
  }

  // optional bytes old_ip = 3;
  if (has_old_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->old_ip(), output);
  }

  // optional bytes uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->uid(), output);
  }

  // optional bool just_set = 5;
  if (has_just_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->just_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateVpnCountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 account_hash = 1;
  if (has_account_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_hash(), target);
  }

  // optional bytes ip = 2;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // optional bytes old_ip = 3;
  if (has_old_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->old_ip(), target);
  }

  // optional bytes uid = 4;
  if (has_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uid(), target);
  }

  // optional bool just_set = 5;
  if (has_just_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->just_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateVpnCountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 account_hash = 1;
    if (has_account_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_hash());
    }

    // optional bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes old_ip = 3;
    if (has_old_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->old_ip());
    }

    // optional bytes uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uid());
    }

    // optional bool just_set = 5;
    if (has_just_set()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVpnCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateVpnCountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateVpnCountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateVpnCountRequest::MergeFrom(const UpdateVpnCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_hash()) {
      set_account_hash(from.account_hash());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_old_ip()) {
      set_old_ip(from.old_ip());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_just_set()) {
      set_just_set(from.just_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateVpnCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVpnCountRequest::CopyFrom(const UpdateVpnCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnCountRequest::IsInitialized() const {

  return true;
}

void UpdateVpnCountRequest::Swap(UpdateVpnCountRequest* other) {
  if (other != this) {
    std::swap(account_hash_, other->account_hash_);
    std::swap(ip_, other->ip_);
    std::swap(old_ip_, other->old_ip_);
    std::swap(uid_, other->uid_);
    std::swap(just_set_, other->just_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateVpnCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateVpnCountRequest_descriptor_;
  metadata.reflection = UpdateVpnCountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VpnCountItem::kIpFieldNumber;
const int VpnCountItem::kCountFieldNumber;
#endif  // !_MSC_VER

VpnCountItem::VpnCountItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VpnCountItem::InitAsDefaultInstance() {
}

VpnCountItem::VpnCountItem(const VpnCountItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VpnCountItem::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VpnCountItem::~VpnCountItem() {
  SharedDtor();
}

void VpnCountItem::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void VpnCountItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VpnCountItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VpnCountItem_descriptor_;
}

const VpnCountItem& VpnCountItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

VpnCountItem* VpnCountItem::default_instance_ = NULL;

VpnCountItem* VpnCountItem::New() const {
  return new VpnCountItem;
}

void VpnCountItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VpnCountItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VpnCountItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VpnCountItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VpnCountItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VpnCountItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VpnCountItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VpnCountItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VpnCountItem::MergeFrom(const VpnCountItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VpnCountItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VpnCountItem::CopyFrom(const VpnCountItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpnCountItem::IsInitialized() const {

  return true;
}

void VpnCountItem::Swap(VpnCountItem* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VpnCountItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VpnCountItem_descriptor_;
  metadata.reflection = VpnCountItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateVpnCountResponse::kVpnNodesFieldNumber;
#endif  // !_MSC_VER

UpdateVpnCountResponse::UpdateVpnCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateVpnCountResponse::InitAsDefaultInstance() {
}

UpdateVpnCountResponse::UpdateVpnCountResponse(const UpdateVpnCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateVpnCountResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateVpnCountResponse::~UpdateVpnCountResponse() {
  SharedDtor();
}

void UpdateVpnCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateVpnCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVpnCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateVpnCountResponse_descriptor_;
}

const UpdateVpnCountResponse& UpdateVpnCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

UpdateVpnCountResponse* UpdateVpnCountResponse::default_instance_ = NULL;

UpdateVpnCountResponse* UpdateVpnCountResponse::New() const {
  return new UpdateVpnCountResponse;
}

void UpdateVpnCountResponse::Clear() {
  vpn_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateVpnCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vpn_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vpn_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vpn_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateVpnCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
  for (int i = 0; i < this->vpn_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vpn_nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateVpnCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
  for (int i = 0; i < this->vpn_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vpn_nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateVpnCountResponse::ByteSize() const {
  int total_size = 0;

  // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
  total_size += 1 * this->vpn_nodes_size();
  for (int i = 0; i < this->vpn_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vpn_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVpnCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateVpnCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateVpnCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateVpnCountResponse::MergeFrom(const UpdateVpnCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  vpn_nodes_.MergeFrom(from.vpn_nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateVpnCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVpnCountResponse::CopyFrom(const UpdateVpnCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnCountResponse::IsInitialized() const {

  return true;
}

void UpdateVpnCountResponse::Swap(UpdateVpnCountResponse* other) {
  if (other != this) {
    vpn_nodes_.Swap(&other->vpn_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateVpnCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateVpnCountResponse_descriptor_;
  metadata.reflection = UpdateVpnCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountInitInfoRequest::kIdFieldNumber;
const int GetAccountInitInfoRequest::kCountFieldNumber;
const int GetAccountInitInfoRequest::kHeightFieldNumber;
const int GetAccountInitInfoRequest::kNetIdFieldNumber;
const int GetAccountInitInfoRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

GetAccountInitInfoRequest::GetAccountInitInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountInitInfoRequest::InitAsDefaultInstance() {
}

GetAccountInitInfoRequest::GetAccountInitInfoRequest(const GetAccountInitInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountInitInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  height_ = GOOGLE_ULONGLONG(0);
  net_id_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountInitInfoRequest::~GetAccountInitInfoRequest() {
  SharedDtor();
}

void GetAccountInitInfoRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void GetAccountInitInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountInitInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountInitInfoRequest_descriptor_;
}

const GetAccountInitInfoRequest& GetAccountInitInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

GetAccountInitInfoRequest* GetAccountInitInfoRequest::default_instance_ = NULL;

GetAccountInitInfoRequest* GetAccountInitInfoRequest::New() const {
  return new GetAccountInitInfoRequest;
}

void GetAccountInitInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    count_ = 0u;
    height_ = GOOGLE_ULONGLONG(0);
    net_id_ = GOOGLE_ULONGLONG(0);
    index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountInitInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_net_id;
        break;
      }

      // optional uint64 net_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_id_)));
          set_has_net_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional uint64 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountInitInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // optional uint64 net_id = 4;
  if (has_net_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->net_id(), output);
  }

  // optional uint64 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountInitInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // optional uint64 net_id = 4;
  if (has_net_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->net_id(), target);
  }

  // optional uint64 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountInitInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional uint64 net_id = 4;
    if (has_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_id());
    }

    // optional uint64 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountInitInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountInitInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountInitInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountInitInfoRequest::MergeFrom(const GetAccountInitInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_net_id()) {
      set_net_id(from.net_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountInitInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountInitInfoRequest::CopyFrom(const GetAccountInitInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInitInfoRequest::IsInitialized() const {

  return true;
}

void GetAccountInitInfoRequest::Swap(GetAccountInitInfoRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(height_, other->height_);
    std::swap(net_id_, other->net_id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountInitInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountInitInfoRequest_descriptor_;
  metadata.reflection = GetAccountInitInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountInitInfoResponse::kBalanceFieldNumber;
const int GetAccountInitInfoResponse::kBlockListFieldNumber;
const int GetAccountInitInfoResponse::kIdFieldNumber;
const int GetAccountInitInfoResponse::kMaxIndexFieldNumber;
#endif  // !_MSC_VER

GetAccountInitInfoResponse::GetAccountInitInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountInitInfoResponse::InitAsDefaultInstance() {
}

GetAccountInitInfoResponse::GetAccountInitInfoResponse(const GetAccountInitInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountInitInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  balance_ = GOOGLE_ULONGLONG(0);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountInitInfoResponse::~GetAccountInitInfoResponse() {
  SharedDtor();
}

void GetAccountInitInfoResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void GetAccountInitInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountInitInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountInitInfoResponse_descriptor_;
}

const GetAccountInitInfoResponse& GetAccountInitInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

GetAccountInitInfoResponse* GetAccountInitInfoResponse::default_instance_ = NULL;

GetAccountInitInfoResponse* GetAccountInitInfoResponse::New() const {
  return new GetAccountInitInfoResponse;
}

void GetAccountInitInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    balance_ = GOOGLE_ULONGLONG(0);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    max_index_ = GOOGLE_ULONGLONG(0);
  }
  block_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountInitInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 balance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_list;
        break;
      }

      // repeated .zjchain.block.protobuf.Block block_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_list;
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional bytes id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_index;
        break;
      }

      // optional uint64 max_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_index_)));
          set_has_max_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountInitInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 balance = 1;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->balance(), output);
  }

  // repeated .zjchain.block.protobuf.Block block_list = 2;
  for (int i = 0; i < this->block_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block_list(i), output);
  }

  // optional bytes id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->id(), output);
  }

  // optional uint64 max_index = 4;
  if (has_max_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountInitInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 balance = 1;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->balance(), target);
  }

  // repeated .zjchain.block.protobuf.Block block_list = 2;
  for (int i = 0; i < this->block_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block_list(i), target);
  }

  // optional bytes id = 3;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id(), target);
  }

  // optional uint64 max_index = 4;
  if (has_max_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountInitInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 balance = 1;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

    // optional bytes id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint64 max_index = 4;
    if (has_max_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_index());
    }

  }
  // repeated .zjchain.block.protobuf.Block block_list = 2;
  total_size += 1 * this->block_list_size();
  for (int i = 0; i < this->block_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountInitInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountInitInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountInitInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountInitInfoResponse::MergeFrom(const GetAccountInitInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_list_.MergeFrom(from.block_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_max_index()) {
      set_max_index(from.max_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountInitInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountInitInfoResponse::CopyFrom(const GetAccountInitInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInitInfoResponse::IsInitialized() const {

  return true;
}

void GetAccountInitInfoResponse::Swap(GetAccountInitInfoResponse* other) {
  if (other != this) {
    std::swap(balance_, other->balance_);
    block_list_.Swap(&other->block_list_);
    std::swap(id_, other->id_);
    std::swap(max_index_, other->max_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountInitInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountInitInfoResponse_descriptor_;
  metadata.reflection = GetAccountInitInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateVpnActiveRequest::kIdFieldNumber;
const int UpdateVpnActiveRequest::kIpFieldNumber;
#endif  // !_MSC_VER

UpdateVpnActiveRequest::UpdateVpnActiveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateVpnActiveRequest::InitAsDefaultInstance() {
}

UpdateVpnActiveRequest::UpdateVpnActiveRequest(const UpdateVpnActiveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateVpnActiveRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateVpnActiveRequest::~UpdateVpnActiveRequest() {
  SharedDtor();
}

void UpdateVpnActiveRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void UpdateVpnActiveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVpnActiveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateVpnActiveRequest_descriptor_;
}

const UpdateVpnActiveRequest& UpdateVpnActiveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

UpdateVpnActiveRequest* UpdateVpnActiveRequest::default_instance_ = NULL;

UpdateVpnActiveRequest* UpdateVpnActiveRequest::New() const {
  return new UpdateVpnActiveRequest;
}

void UpdateVpnActiveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateVpnActiveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional bytes ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateVpnActiveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // optional bytes ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateVpnActiveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes ip = 2;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateVpnActiveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVpnActiveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateVpnActiveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateVpnActiveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateVpnActiveRequest::MergeFrom(const UpdateVpnActiveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateVpnActiveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVpnActiveRequest::CopyFrom(const UpdateVpnActiveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnActiveRequest::IsInitialized() const {

  return true;
}

void UpdateVpnActiveRequest::Swap(UpdateVpnActiveRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateVpnActiveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateVpnActiveRequest_descriptor_;
  metadata.reflection = UpdateVpnActiveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdRewardRequest::kIdFieldNumber;
const int AdRewardRequest::kRewardKeyFieldNumber;
const int AdRewardRequest::kGidFieldNumber;
#endif  // !_MSC_VER

AdRewardRequest::AdRewardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdRewardRequest::InitAsDefaultInstance() {
}

AdRewardRequest::AdRewardRequest(const AdRewardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reward_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdRewardRequest::~AdRewardRequest() {
  SharedDtor();
}

void AdRewardRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (reward_key_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_key_;
  }
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (this != default_instance_) {
  }
}

void AdRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdRewardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdRewardRequest_descriptor_;
}

const AdRewardRequest& AdRewardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

AdRewardRequest* AdRewardRequest::default_instance_ = NULL;

AdRewardRequest* AdRewardRequest::New() const {
  return new AdRewardRequest;
}

void AdRewardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_reward_key()) {
      if (reward_key_ != &::google::protobuf::internal::kEmptyString) {
        reward_key_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_key;
        break;
      }

      // optional bytes reward_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gid;
        break;
      }

      // optional bytes gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // optional bytes reward_key = 2;
  if (has_reward_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->reward_key(), output);
  }

  // optional bytes gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdRewardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes reward_key = 2;
  if (has_reward_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reward_key(), target);
  }

  // optional bytes gid = 3;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes reward_key = 2;
    if (has_reward_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reward_key());
    }

    // optional bytes gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdRewardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdRewardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdRewardRequest::MergeFrom(const AdRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reward_key()) {
      set_reward_key(from.reward_key());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdRewardRequest::CopyFrom(const AdRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdRewardRequest::IsInitialized() const {

  return true;
}

void AdRewardRequest::Swap(AdRewardRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reward_key_, other->reward_key_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdRewardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdRewardRequest_descriptor_;
  metadata.reflection = AdRewardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElectStatisticInfo::kElectHeightFieldNumber;
const int ElectStatisticInfo::kSuccTxCountFieldNumber;
const int ElectStatisticInfo::kLofLeadersFieldNumber;
#endif  // !_MSC_VER

ElectStatisticInfo::ElectStatisticInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElectStatisticInfo::InitAsDefaultInstance() {
}

ElectStatisticInfo::ElectStatisticInfo(const ElectStatisticInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElectStatisticInfo::SharedCtor() {
  _cached_size_ = 0;
  elect_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElectStatisticInfo::~ElectStatisticInfo() {
  SharedDtor();
}

void ElectStatisticInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElectStatisticInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElectStatisticInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElectStatisticInfo_descriptor_;
}

const ElectStatisticInfo& ElectStatisticInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

ElectStatisticInfo* ElectStatisticInfo::default_instance_ = NULL;

ElectStatisticInfo* ElectStatisticInfo::New() const {
  return new ElectStatisticInfo;
}

void ElectStatisticInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elect_height_ = GOOGLE_ULONGLONG(0);
  }
  succ_tx_count_.Clear();
  lof_leaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElectStatisticInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 elect_height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succ_tx_count;
        break;
      }

      // repeated uint32 succ_tx_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succ_tx_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_succ_tx_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_succ_tx_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succ_tx_count;
        if (input->ExpectTag(24)) goto parse_lof_leaders;
        break;
      }

      // repeated uint32 lof_leaders = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lof_leaders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_lof_leaders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lof_leaders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lof_leaders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElectStatisticInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 elect_height = 1;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->elect_height(), output);
  }

  // repeated uint32 succ_tx_count = 2;
  for (int i = 0; i < this->succ_tx_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->succ_tx_count(i), output);
  }

  // repeated uint32 lof_leaders = 3;
  for (int i = 0; i < this->lof_leaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->lof_leaders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElectStatisticInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 elect_height = 1;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->elect_height(), target);
  }

  // repeated uint32 succ_tx_count = 2;
  for (int i = 0; i < this->succ_tx_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->succ_tx_count(i), target);
  }

  // repeated uint32 lof_leaders = 3;
  for (int i = 0; i < this->lof_leaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->lof_leaders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElectStatisticInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 elect_height = 1;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

  }
  // repeated uint32 succ_tx_count = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->succ_tx_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->succ_tx_count(i));
    }
    total_size += 1 * this->succ_tx_count_size() + data_size;
  }

  // repeated uint32 lof_leaders = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lof_leaders_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->lof_leaders(i));
    }
    total_size += 1 * this->lof_leaders_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElectStatisticInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElectStatisticInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElectStatisticInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElectStatisticInfo::MergeFrom(const ElectStatisticInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  succ_tx_count_.MergeFrom(from.succ_tx_count_);
  lof_leaders_.MergeFrom(from.lof_leaders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElectStatisticInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectStatisticInfo::CopyFrom(const ElectStatisticInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectStatisticInfo::IsInitialized() const {

  return true;
}

void ElectStatisticInfo::Swap(ElectStatisticInfo* other) {
  if (other != this) {
    std::swap(elect_height_, other->elect_height_);
    succ_tx_count_.Swap(&other->succ_tx_count_);
    lof_leaders_.Swap(&other->lof_leaders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElectStatisticInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElectStatisticInfo_descriptor_;
  metadata.reflection = ElectStatisticInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticInfo::kTimeblockHeightFieldNumber;
const int StatisticInfo::kAllTxCountFieldNumber;
const int StatisticInfo::kElectStatisticFieldNumber;
#endif  // !_MSC_VER

StatisticInfo::StatisticInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticInfo::InitAsDefaultInstance() {
}

StatisticInfo::StatisticInfo(const StatisticInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticInfo::SharedCtor() {
  _cached_size_ = 0;
  timeblock_height_ = GOOGLE_ULONGLONG(0);
  all_tx_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticInfo::~StatisticInfo() {
  SharedDtor();
}

void StatisticInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticInfo_descriptor_;
}

const StatisticInfo& StatisticInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

StatisticInfo* StatisticInfo::default_instance_ = NULL;

StatisticInfo* StatisticInfo::New() const {
  return new StatisticInfo;
}

void StatisticInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeblock_height_ = GOOGLE_ULONGLONG(0);
    all_tx_count_ = 0u;
  }
  elect_statistic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timeblock_height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeblock_height_)));
          set_has_timeblock_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_tx_count;
        break;
      }

      // optional uint32 all_tx_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_tx_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_tx_count_)));
          set_has_all_tx_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_elect_statistic;
        break;
      }

      // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elect_statistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elect_statistic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_elect_statistic;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timeblock_height = 1;
  if (has_timeblock_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timeblock_height(), output);
  }

  // optional uint32 all_tx_count = 2;
  if (has_all_tx_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->all_tx_count(), output);
  }

  // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  for (int i = 0; i < this->elect_statistic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->elect_statistic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timeblock_height = 1;
  if (has_timeblock_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timeblock_height(), target);
  }

  // optional uint32 all_tx_count = 2;
  if (has_all_tx_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->all_tx_count(), target);
  }

  // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  for (int i = 0; i < this->elect_statistic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->elect_statistic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timeblock_height = 1;
    if (has_timeblock_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeblock_height());
    }

    // optional uint32 all_tx_count = 2;
    if (has_all_tx_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_tx_count());
    }

  }
  // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  total_size += 1 * this->elect_statistic_size();
  for (int i = 0; i < this->elect_statistic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elect_statistic(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticInfo::MergeFrom(const StatisticInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  elect_statistic_.MergeFrom(from.elect_statistic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeblock_height()) {
      set_timeblock_height(from.timeblock_height());
    }
    if (from.has_all_tx_count()) {
      set_all_tx_count(from.all_tx_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticInfo::CopyFrom(const StatisticInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticInfo::IsInitialized() const {

  return true;
}

void StatisticInfo::Swap(StatisticInfo* other) {
  if (other != this) {
    std::swap(timeblock_height_, other->timeblock_height_);
    std::swap(all_tx_count_, other->all_tx_count_);
    elect_statistic_.Swap(&other->elect_statistic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticInfo_descriptor_;
  metadata.reflection = StatisticInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshPoolHeightRequest::kHeightsFieldNumber;
#endif  // !_MSC_VER

RefreshPoolHeightRequest::RefreshPoolHeightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshPoolHeightRequest::InitAsDefaultInstance() {
}

RefreshPoolHeightRequest::RefreshPoolHeightRequest(const RefreshPoolHeightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshPoolHeightRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshPoolHeightRequest::~RefreshPoolHeightRequest() {
  SharedDtor();
}

void RefreshPoolHeightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshPoolHeightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshPoolHeightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshPoolHeightRequest_descriptor_;
}

const RefreshPoolHeightRequest& RefreshPoolHeightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

RefreshPoolHeightRequest* RefreshPoolHeightRequest::default_instance_ = NULL;

RefreshPoolHeightRequest* RefreshPoolHeightRequest::New() const {
  return new RefreshPoolHeightRequest;
}

void RefreshPoolHeightRequest::Clear() {
  heights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshPoolHeightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 heights = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heights;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshPoolHeightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 heights = 1;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->heights(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshPoolHeightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 heights = 1;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->heights(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshPoolHeightRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint64 heights = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heights(i));
    }
    total_size += 1 * this->heights_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshPoolHeightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshPoolHeightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshPoolHeightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshPoolHeightRequest::MergeFrom(const RefreshPoolHeightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshPoolHeightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshPoolHeightRequest::CopyFrom(const RefreshPoolHeightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshPoolHeightRequest::IsInitialized() const {

  return true;
}

void RefreshPoolHeightRequest::Swap(RefreshPoolHeightRequest* other) {
  if (other != this) {
    heights_.Swap(&other->heights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshPoolHeightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshPoolHeightRequest_descriptor_;
  metadata.reflection = RefreshPoolHeightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshPoolHeightResponse::kHeightsFieldNumber;
#endif  // !_MSC_VER

RefreshPoolHeightResponse::RefreshPoolHeightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshPoolHeightResponse::InitAsDefaultInstance() {
}

RefreshPoolHeightResponse::RefreshPoolHeightResponse(const RefreshPoolHeightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshPoolHeightResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshPoolHeightResponse::~RefreshPoolHeightResponse() {
  SharedDtor();
}

void RefreshPoolHeightResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshPoolHeightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshPoolHeightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshPoolHeightResponse_descriptor_;
}

const RefreshPoolHeightResponse& RefreshPoolHeightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

RefreshPoolHeightResponse* RefreshPoolHeightResponse::default_instance_ = NULL;

RefreshPoolHeightResponse* RefreshPoolHeightResponse::New() const {
  return new RefreshPoolHeightResponse;
}

void RefreshPoolHeightResponse::Clear() {
  heights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshPoolHeightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 heights = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heights;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshPoolHeightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 heights = 1;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->heights(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshPoolHeightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 heights = 1;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->heights(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshPoolHeightResponse::ByteSize() const {
  int total_size = 0;

  // repeated uint64 heights = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heights(i));
    }
    total_size += 1 * this->heights_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshPoolHeightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshPoolHeightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshPoolHeightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshPoolHeightResponse::MergeFrom(const RefreshPoolHeightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshPoolHeightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshPoolHeightResponse::CopyFrom(const RefreshPoolHeightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshPoolHeightResponse::IsInitialized() const {

  return true;
}

void RefreshPoolHeightResponse::Swap(RefreshPoolHeightResponse* other) {
  if (other != this) {
    heights_.Swap(&other->heights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshPoolHeightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshPoolHeightResponse_descriptor_;
  metadata.reflection = RefreshPoolHeightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountShardRequest::kIdFieldNumber;
#endif  // !_MSC_VER

GetAccountShardRequest::GetAccountShardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountShardRequest::InitAsDefaultInstance() {
}

GetAccountShardRequest::GetAccountShardRequest(const GetAccountShardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountShardRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountShardRequest::~GetAccountShardRequest() {
  SharedDtor();
}

void GetAccountShardRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void GetAccountShardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountShardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountShardRequest_descriptor_;
}

const GetAccountShardRequest& GetAccountShardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

GetAccountShardRequest* GetAccountShardRequest::default_instance_ = NULL;

GetAccountShardRequest* GetAccountShardRequest::New() const {
  return new GetAccountShardRequest;
}

void GetAccountShardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountShardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountShardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountShardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountShardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountShardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountShardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountShardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountShardRequest::MergeFrom(const GetAccountShardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountShardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountShardRequest::CopyFrom(const GetAccountShardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountShardRequest::IsInitialized() const {

  return true;
}

void GetAccountShardRequest::Swap(GetAccountShardRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountShardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountShardRequest_descriptor_;
  metadata.reflection = GetAccountShardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountShardReponse::kIdFieldNumber;
const int GetAccountShardReponse::kShardIdFieldNumber;
#endif  // !_MSC_VER

GetAccountShardReponse::GetAccountShardReponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountShardReponse::InitAsDefaultInstance() {
}

GetAccountShardReponse::GetAccountShardReponse(const GetAccountShardReponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountShardReponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shard_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountShardReponse::~GetAccountShardReponse() {
  SharedDtor();
}

void GetAccountShardReponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void GetAccountShardReponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountShardReponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountShardReponse_descriptor_;
}

const GetAccountShardReponse& GetAccountShardReponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

GetAccountShardReponse* GetAccountShardReponse::default_instance_ = NULL;

GetAccountShardReponse* GetAccountShardReponse::New() const {
  return new GetAccountShardReponse;
}

void GetAccountShardReponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    shard_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountShardReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shard_id;
        break;
      }

      // optional uint32 shard_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_id_)));
          set_has_shard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountShardReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // optional uint32 shard_id = 2;
  if (has_shard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountShardReponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional uint32 shard_id = 2;
  if (has_shard_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountShardReponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint32 shard_id = 2;
    if (has_shard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountShardReponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountShardReponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountShardReponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountShardReponse::MergeFrom(const GetAccountShardReponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shard_id()) {
      set_shard_id(from.shard_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountShardReponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountShardReponse::CopyFrom(const GetAccountShardReponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountShardReponse::IsInitialized() const {

  return true;
}

void GetAccountShardReponse::Swap(GetAccountShardReponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(shard_id_, other->shard_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountShardReponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountShardReponse_descriptor_;
  metadata.reflection = GetAccountShardReponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrossShardingTosMessage::kBlockFieldNumber;
#endif  // !_MSC_VER

CrossShardingTosMessage::CrossShardingTosMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrossShardingTosMessage::InitAsDefaultInstance() {
  block_ = const_cast< ::zjchain::block::protobuf::Block*>(&::zjchain::block::protobuf::Block::default_instance());
}

CrossShardingTosMessage::CrossShardingTosMessage(const CrossShardingTosMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrossShardingTosMessage::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossShardingTosMessage::~CrossShardingTosMessage() {
  SharedDtor();
}

void CrossShardingTosMessage::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void CrossShardingTosMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossShardingTosMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossShardingTosMessage_descriptor_;
}

const CrossShardingTosMessage& CrossShardingTosMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

CrossShardingTosMessage* CrossShardingTosMessage::default_instance_ = NULL;

CrossShardingTosMessage* CrossShardingTosMessage::New() const {
  return new CrossShardingTosMessage;
}

void CrossShardingTosMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossShardingTosMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrossShardingTosMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrossShardingTosMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrossShardingTosMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.block.protobuf.Block block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossShardingTosMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossShardingTosMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossShardingTosMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossShardingTosMessage::MergeFrom(const CrossShardingTosMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossShardingTosMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossShardingTosMessage::CopyFrom(const CrossShardingTosMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossShardingTosMessage::IsInitialized() const {

  return true;
}

void CrossShardingTosMessage::Swap(CrossShardingTosMessage* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossShardingTosMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossShardingTosMessage_descriptor_;
  metadata.reflection = CrossShardingTosMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrossShardingStatisticMessage::kBlockFieldNumber;
#endif  // !_MSC_VER

CrossShardingStatisticMessage::CrossShardingStatisticMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrossShardingStatisticMessage::InitAsDefaultInstance() {
  block_ = const_cast< ::zjchain::block::protobuf::Block*>(&::zjchain::block::protobuf::Block::default_instance());
}

CrossShardingStatisticMessage::CrossShardingStatisticMessage(const CrossShardingStatisticMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrossShardingStatisticMessage::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossShardingStatisticMessage::~CrossShardingStatisticMessage() {
  SharedDtor();
}

void CrossShardingStatisticMessage::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void CrossShardingStatisticMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossShardingStatisticMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossShardingStatisticMessage_descriptor_;
}

const CrossShardingStatisticMessage& CrossShardingStatisticMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

CrossShardingStatisticMessage* CrossShardingStatisticMessage::default_instance_ = NULL;

CrossShardingStatisticMessage* CrossShardingStatisticMessage::New() const {
  return new CrossShardingStatisticMessage;
}

void CrossShardingStatisticMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossShardingStatisticMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrossShardingStatisticMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrossShardingStatisticMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrossShardingStatisticMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.block.protobuf.Block block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossShardingStatisticMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossShardingStatisticMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossShardingStatisticMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossShardingStatisticMessage::MergeFrom(const CrossShardingStatisticMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossShardingStatisticMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossShardingStatisticMessage::CopyFrom(const CrossShardingStatisticMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossShardingStatisticMessage::IsInitialized() const {

  return true;
}

void CrossShardingStatisticMessage::Swap(CrossShardingStatisticMessage* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossShardingStatisticMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossShardingStatisticMessage_descriptor_;
  metadata.reflection = CrossShardingStatisticMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElectBlockMessage::kBlockFieldNumber;
#endif  // !_MSC_VER

ElectBlockMessage::ElectBlockMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElectBlockMessage::InitAsDefaultInstance() {
  block_ = const_cast< ::zjchain::block::protobuf::Block*>(&::zjchain::block::protobuf::Block::default_instance());
}

ElectBlockMessage::ElectBlockMessage(const ElectBlockMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElectBlockMessage::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElectBlockMessage::~ElectBlockMessage() {
  SharedDtor();
}

void ElectBlockMessage::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void ElectBlockMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElectBlockMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElectBlockMessage_descriptor_;
}

const ElectBlockMessage& ElectBlockMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

ElectBlockMessage* ElectBlockMessage::default_instance_ = NULL;

ElectBlockMessage* ElectBlockMessage::New() const {
  return new ElectBlockMessage;
}

void ElectBlockMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElectBlockMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElectBlockMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElectBlockMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElectBlockMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.block.protobuf.Block block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElectBlockMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElectBlockMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElectBlockMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElectBlockMessage::MergeFrom(const ElectBlockMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElectBlockMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectBlockMessage::CopyFrom(const ElectBlockMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectBlockMessage::IsInitialized() const {

  return true;
}

void ElectBlockMessage::Swap(ElectBlockMessage* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElectBlockMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElectBlockMessage_descriptor_;
  metadata.reflection = ElectBlockMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardToTxMessage::kToTxsFieldNumber;
const int ShardToTxMessage::kLeaderIdxFieldNumber;
const int ShardToTxMessage::kElectHeightFieldNumber;
const int ShardToTxMessage::kLeaderToIdxFieldNumber;
#endif  // !_MSC_VER

ShardToTxMessage::ShardToTxMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShardToTxMessage::InitAsDefaultInstance() {
}

ShardToTxMessage::ShardToTxMessage(const ShardToTxMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShardToTxMessage::SharedCtor() {
  _cached_size_ = 0;
  leader_idx_ = 0u;
  elect_height_ = GOOGLE_ULONGLONG(0);
  leader_to_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardToTxMessage::~ShardToTxMessage() {
  SharedDtor();
}

void ShardToTxMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardToTxMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardToTxMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardToTxMessage_descriptor_;
}

const ShardToTxMessage& ShardToTxMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

ShardToTxMessage* ShardToTxMessage::default_instance_ = NULL;

ShardToTxMessage* ShardToTxMessage::New() const {
  return new ShardToTxMessage;
}

void ShardToTxMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    leader_idx_ = 0u;
    elect_height_ = GOOGLE_ULONGLONG(0);
    leader_to_idx_ = 0;
  }
  to_txs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardToTxMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_txs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_to_txs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_to_txs;
        if (input->ExpectTag(16)) goto parse_leader_idx;
        break;
      }

      // optional uint32 leader_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_idx_)));
          set_has_leader_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader_to_idx;
        break;
      }

      // optional int32 leader_to_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_to_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_to_idx_)));
          set_has_leader_to_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShardToTxMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
  for (int i = 0; i < this->to_txs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->to_txs(i), output);
  }

  // optional uint32 leader_idx = 2;
  if (has_leader_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leader_idx(), output);
  }

  // optional uint64 elect_height = 3;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->elect_height(), output);
  }

  // optional int32 leader_to_idx = 4;
  if (has_leader_to_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leader_to_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShardToTxMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
  for (int i = 0; i < this->to_txs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->to_txs(i), target);
  }

  // optional uint32 leader_idx = 2;
  if (has_leader_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leader_idx(), target);
  }

  // optional uint64 elect_height = 3;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->elect_height(), target);
  }

  // optional int32 leader_to_idx = 4;
  if (has_leader_to_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leader_to_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShardToTxMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 leader_idx = 2;
    if (has_leader_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_idx());
    }

    // optional uint64 elect_height = 3;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

    // optional int32 leader_to_idx = 4;
    if (has_leader_to_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_to_idx());
    }

  }
  // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
  total_size += 1 * this->to_txs_size();
  for (int i = 0; i < this->to_txs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->to_txs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardToTxMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardToTxMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardToTxMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardToTxMessage::MergeFrom(const ShardToTxMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  to_txs_.MergeFrom(from.to_txs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_leader_idx()) {
      set_leader_idx(from.leader_idx());
    }
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
    if (from.has_leader_to_idx()) {
      set_leader_to_idx(from.leader_to_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardToTxMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardToTxMessage::CopyFrom(const ShardToTxMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardToTxMessage::IsInitialized() const {

  return true;
}

void ShardToTxMessage::Swap(ShardToTxMessage* other) {
  if (other != this) {
    to_txs_.Swap(&other->to_txs_);
    std::swap(leader_idx_, other->leader_idx_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(leader_to_idx_, other->leader_to_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardToTxMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardToTxMessage_descriptor_;
  metadata.reflection = ShardToTxMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticTxMessage::kStatisticFieldNumber;
const int StatisticTxMessage::kLeaderIdxFieldNumber;
const int StatisticTxMessage::kElectHeightFieldNumber;
const int StatisticTxMessage::kLeaderToIdxFieldNumber;
#endif  // !_MSC_VER

StatisticTxMessage::StatisticTxMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticTxMessage::InitAsDefaultInstance() {
  statistic_ = const_cast< ::zjchain::pools::protobuf::StatisticTxItem*>(&::zjchain::pools::protobuf::StatisticTxItem::default_instance());
}

StatisticTxMessage::StatisticTxMessage(const StatisticTxMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticTxMessage::SharedCtor() {
  _cached_size_ = 0;
  statistic_ = NULL;
  leader_idx_ = 0u;
  elect_height_ = GOOGLE_ULONGLONG(0);
  leader_to_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticTxMessage::~StatisticTxMessage() {
  SharedDtor();
}

void StatisticTxMessage::SharedDtor() {
  if (this != default_instance_) {
    delete statistic_;
  }
}

void StatisticTxMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticTxMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticTxMessage_descriptor_;
}

const StatisticTxMessage& StatisticTxMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

StatisticTxMessage* StatisticTxMessage::default_instance_ = NULL;

StatisticTxMessage* StatisticTxMessage::New() const {
  return new StatisticTxMessage;
}

void StatisticTxMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_statistic()) {
      if (statistic_ != NULL) statistic_->::zjchain::pools::protobuf::StatisticTxItem::Clear();
    }
    leader_idx_ = 0u;
    elect_height_ = GOOGLE_ULONGLONG(0);
    leader_to_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticTxMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leader_idx;
        break;
      }

      // optional uint32 leader_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_idx_)));
          set_has_leader_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader_to_idx;
        break;
      }

      // optional int32 leader_to_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_to_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_to_idx_)));
          set_has_leader_to_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticTxMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
  if (has_statistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statistic(), output);
  }

  // optional uint32 leader_idx = 2;
  if (has_leader_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leader_idx(), output);
  }

  // optional uint64 elect_height = 3;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->elect_height(), output);
  }

  // optional int32 leader_to_idx = 4;
  if (has_leader_to_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leader_to_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticTxMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
  if (has_statistic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statistic(), target);
  }

  // optional uint32 leader_idx = 2;
  if (has_leader_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leader_idx(), target);
  }

  // optional uint64 elect_height = 3;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->elect_height(), target);
  }

  // optional int32 leader_to_idx = 4;
  if (has_leader_to_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leader_to_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticTxMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
    if (has_statistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statistic());
    }

    // optional uint32 leader_idx = 2;
    if (has_leader_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_idx());
    }

    // optional uint64 elect_height = 3;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

    // optional int32 leader_to_idx = 4;
    if (has_leader_to_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_to_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticTxMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticTxMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticTxMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticTxMessage::MergeFrom(const StatisticTxMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statistic()) {
      mutable_statistic()->::zjchain::pools::protobuf::StatisticTxItem::MergeFrom(from.statistic());
    }
    if (from.has_leader_idx()) {
      set_leader_idx(from.leader_idx());
    }
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
    if (from.has_leader_to_idx()) {
      set_leader_to_idx(from.leader_to_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticTxMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticTxMessage::CopyFrom(const StatisticTxMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticTxMessage::IsInitialized() const {

  return true;
}

void StatisticTxMessage::Swap(StatisticTxMessage* other) {
  if (other != this) {
    std::swap(statistic_, other->statistic_);
    std::swap(leader_idx_, other->leader_idx_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(leader_to_idx_, other->leader_to_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticTxMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticTxMessage_descriptor_;
  metadata.reflection = StatisticTxMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMessage::kBlockReqFieldNumber;
const int BlockMessage::kBlockResFieldNumber;
const int BlockMessage::kHeightReqFieldNumber;
const int BlockMessage::kHeightResFieldNumber;
const int BlockMessage::kAccAttrReqFieldNumber;
const int BlockMessage::kAccAttrResFieldNumber;
const int BlockMessage::kUpVpnReqFieldNumber;
const int BlockMessage::kUpVpnResFieldNumber;
const int BlockMessage::kAccountInitReqFieldNumber;
const int BlockMessage::kAccountInitResFieldNumber;
const int BlockMessage::kVpnActiveReqFieldNumber;
const int BlockMessage::kAdRewardReqFieldNumber;
const int BlockMessage::kRefHeightsReqFieldNumber;
const int BlockMessage::kRefHeightsResFieldNumber;
const int BlockMessage::kAccShardReqFieldNumber;
const int BlockMessage::kAccShardResFieldNumber;
const int BlockMessage::kShardToFieldNumber;
const int BlockMessage::kStatisticTxFieldNumber;
#endif  // !_MSC_VER

BlockMessage::BlockMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMessage::InitAsDefaultInstance() {
  block_req_ = const_cast< ::zjchain::block::protobuf::GetTxBlockRequest*>(&::zjchain::block::protobuf::GetTxBlockRequest::default_instance());
  block_res_ = const_cast< ::zjchain::block::protobuf::GetTxBlockResponse*>(&::zjchain::block::protobuf::GetTxBlockResponse::default_instance());
  height_req_ = const_cast< ::zjchain::block::protobuf::AccountHeightRequest*>(&::zjchain::block::protobuf::AccountHeightRequest::default_instance());
  height_res_ = const_cast< ::zjchain::block::protobuf::AccountHeightResponse*>(&::zjchain::block::protobuf::AccountHeightResponse::default_instance());
  acc_attr_req_ = const_cast< ::zjchain::block::protobuf::AccountAttrRequest*>(&::zjchain::block::protobuf::AccountAttrRequest::default_instance());
  acc_attr_res_ = const_cast< ::zjchain::block::protobuf::AccountAttrResponse*>(&::zjchain::block::protobuf::AccountAttrResponse::default_instance());
  up_vpn_req_ = const_cast< ::zjchain::block::protobuf::UpdateVpnCountRequest*>(&::zjchain::block::protobuf::UpdateVpnCountRequest::default_instance());
  up_vpn_res_ = const_cast< ::zjchain::block::protobuf::UpdateVpnCountResponse*>(&::zjchain::block::protobuf::UpdateVpnCountResponse::default_instance());
  account_init_req_ = const_cast< ::zjchain::block::protobuf::GetAccountInitInfoRequest*>(&::zjchain::block::protobuf::GetAccountInitInfoRequest::default_instance());
  account_init_res_ = const_cast< ::zjchain::block::protobuf::GetAccountInitInfoResponse*>(&::zjchain::block::protobuf::GetAccountInitInfoResponse::default_instance());
  vpn_active_req_ = const_cast< ::zjchain::block::protobuf::UpdateVpnActiveRequest*>(&::zjchain::block::protobuf::UpdateVpnActiveRequest::default_instance());
  ad_reward_req_ = const_cast< ::zjchain::block::protobuf::AdRewardRequest*>(&::zjchain::block::protobuf::AdRewardRequest::default_instance());
  ref_heights_req_ = const_cast< ::zjchain::block::protobuf::RefreshPoolHeightRequest*>(&::zjchain::block::protobuf::RefreshPoolHeightRequest::default_instance());
  ref_heights_res_ = const_cast< ::zjchain::block::protobuf::RefreshPoolHeightResponse*>(&::zjchain::block::protobuf::RefreshPoolHeightResponse::default_instance());
  acc_shard_req_ = const_cast< ::zjchain::block::protobuf::GetAccountShardRequest*>(&::zjchain::block::protobuf::GetAccountShardRequest::default_instance());
  acc_shard_res_ = const_cast< ::zjchain::block::protobuf::GetAccountShardReponse*>(&::zjchain::block::protobuf::GetAccountShardReponse::default_instance());
  shard_to_ = const_cast< ::zjchain::block::protobuf::ShardToTxMessage*>(&::zjchain::block::protobuf::ShardToTxMessage::default_instance());
  statistic_tx_ = const_cast< ::zjchain::block::protobuf::StatisticTxMessage*>(&::zjchain::block::protobuf::StatisticTxMessage::default_instance());
}

BlockMessage::BlockMessage(const BlockMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMessage::SharedCtor() {
  _cached_size_ = 0;
  block_req_ = NULL;
  block_res_ = NULL;
  height_req_ = NULL;
  height_res_ = NULL;
  acc_attr_req_ = NULL;
  acc_attr_res_ = NULL;
  up_vpn_req_ = NULL;
  up_vpn_res_ = NULL;
  account_init_req_ = NULL;
  account_init_res_ = NULL;
  vpn_active_req_ = NULL;
  ad_reward_req_ = NULL;
  ref_heights_req_ = NULL;
  ref_heights_res_ = NULL;
  acc_shard_req_ = NULL;
  acc_shard_res_ = NULL;
  shard_to_ = NULL;
  statistic_tx_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMessage::~BlockMessage() {
  SharedDtor();
}

void BlockMessage::SharedDtor() {
  if (this != default_instance_) {
    delete block_req_;
    delete block_res_;
    delete height_req_;
    delete height_res_;
    delete acc_attr_req_;
    delete acc_attr_res_;
    delete up_vpn_req_;
    delete up_vpn_res_;
    delete account_init_req_;
    delete account_init_res_;
    delete vpn_active_req_;
    delete ad_reward_req_;
    delete ref_heights_req_;
    delete ref_heights_res_;
    delete acc_shard_req_;
    delete acc_shard_res_;
    delete shard_to_;
    delete statistic_tx_;
  }
}

void BlockMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMessage_descriptor_;
}

const BlockMessage& BlockMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fblock_2eproto();
  return *default_instance_;
}

BlockMessage* BlockMessage::default_instance_ = NULL;

BlockMessage* BlockMessage::New() const {
  return new BlockMessage;
}

void BlockMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_req()) {
      if (block_req_ != NULL) block_req_->::zjchain::block::protobuf::GetTxBlockRequest::Clear();
    }
    if (has_block_res()) {
      if (block_res_ != NULL) block_res_->::zjchain::block::protobuf::GetTxBlockResponse::Clear();
    }
    if (has_height_req()) {
      if (height_req_ != NULL) height_req_->::zjchain::block::protobuf::AccountHeightRequest::Clear();
    }
    if (has_height_res()) {
      if (height_res_ != NULL) height_res_->::zjchain::block::protobuf::AccountHeightResponse::Clear();
    }
    if (has_acc_attr_req()) {
      if (acc_attr_req_ != NULL) acc_attr_req_->::zjchain::block::protobuf::AccountAttrRequest::Clear();
    }
    if (has_acc_attr_res()) {
      if (acc_attr_res_ != NULL) acc_attr_res_->::zjchain::block::protobuf::AccountAttrResponse::Clear();
    }
    if (has_up_vpn_req()) {
      if (up_vpn_req_ != NULL) up_vpn_req_->::zjchain::block::protobuf::UpdateVpnCountRequest::Clear();
    }
    if (has_up_vpn_res()) {
      if (up_vpn_res_ != NULL) up_vpn_res_->::zjchain::block::protobuf::UpdateVpnCountResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_account_init_req()) {
      if (account_init_req_ != NULL) account_init_req_->::zjchain::block::protobuf::GetAccountInitInfoRequest::Clear();
    }
    if (has_account_init_res()) {
      if (account_init_res_ != NULL) account_init_res_->::zjchain::block::protobuf::GetAccountInitInfoResponse::Clear();
    }
    if (has_vpn_active_req()) {
      if (vpn_active_req_ != NULL) vpn_active_req_->::zjchain::block::protobuf::UpdateVpnActiveRequest::Clear();
    }
    if (has_ad_reward_req()) {
      if (ad_reward_req_ != NULL) ad_reward_req_->::zjchain::block::protobuf::AdRewardRequest::Clear();
    }
    if (has_ref_heights_req()) {
      if (ref_heights_req_ != NULL) ref_heights_req_->::zjchain::block::protobuf::RefreshPoolHeightRequest::Clear();
    }
    if (has_ref_heights_res()) {
      if (ref_heights_res_ != NULL) ref_heights_res_->::zjchain::block::protobuf::RefreshPoolHeightResponse::Clear();
    }
    if (has_acc_shard_req()) {
      if (acc_shard_req_ != NULL) acc_shard_req_->::zjchain::block::protobuf::GetAccountShardRequest::Clear();
    }
    if (has_acc_shard_res()) {
      if (acc_shard_res_ != NULL) acc_shard_res_->::zjchain::block::protobuf::GetAccountShardReponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_shard_to()) {
      if (shard_to_ != NULL) shard_to_->::zjchain::block::protobuf::ShardToTxMessage::Clear();
    }
    if (has_statistic_tx()) {
      if (statistic_tx_ != NULL) statistic_tx_->::zjchain::block::protobuf::StatisticTxMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_res;
        break;
      }

      // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_height_req;
        break;
      }

      // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_height_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_height_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_height_res;
        break;
      }

      // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_height_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_height_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_acc_attr_req;
        break;
      }

      // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_attr_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc_attr_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_acc_attr_res;
        break;
      }

      // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_attr_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc_attr_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_up_vpn_req;
        break;
      }

      // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_up_vpn_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up_vpn_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_up_vpn_res;
        break;
      }

      // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_up_vpn_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up_vpn_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_account_init_req;
        break;
      }

      // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_init_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_init_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_account_init_res;
        break;
      }

      // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_init_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_init_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_vpn_active_req;
        break;
      }

      // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vpn_active_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vpn_active_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ad_reward_req;
        break;
      }

      // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ad_reward_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ad_reward_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ref_heights_req;
        break;
      }

      // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref_heights_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref_heights_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ref_heights_res;
        break;
      }

      // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref_heights_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref_heights_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_acc_shard_req;
        break;
      }

      // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_shard_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc_shard_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_acc_shard_res;
        break;
      }

      // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc_shard_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc_shard_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_shard_to;
        break;
      }

      // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shard_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shard_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_statistic_tx;
        break;
      }

      // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statistic_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistic_tx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
  if (has_block_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block_req(), output);
  }

  // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
  if (has_block_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block_res(), output);
  }

  // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
  if (has_height_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->height_req(), output);
  }

  // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
  if (has_height_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->height_res(), output);
  }

  // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  if (has_acc_attr_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->acc_attr_req(), output);
  }

  // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  if (has_acc_attr_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->acc_attr_res(), output);
  }

  // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  if (has_up_vpn_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->up_vpn_req(), output);
  }

  // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  if (has_up_vpn_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->up_vpn_res(), output);
  }

  // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  if (has_account_init_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->account_init_req(), output);
  }

  // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  if (has_account_init_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->account_init_res(), output);
  }

  // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  if (has_vpn_active_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vpn_active_req(), output);
  }

  // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
  if (has_ad_reward_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->ad_reward_req(), output);
  }

  // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
  if (has_ref_heights_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->ref_heights_req(), output);
  }

  // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
  if (has_ref_heights_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ref_heights_res(), output);
  }

  // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
  if (has_acc_shard_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->acc_shard_req(), output);
  }

  // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
  if (has_acc_shard_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->acc_shard_res(), output);
  }

  // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
  if (has_shard_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->shard_to(), output);
  }

  // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
  if (has_statistic_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->statistic_tx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
  if (has_block_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block_req(), target);
  }

  // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
  if (has_block_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block_res(), target);
  }

  // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
  if (has_height_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->height_req(), target);
  }

  // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
  if (has_height_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->height_res(), target);
  }

  // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  if (has_acc_attr_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->acc_attr_req(), target);
  }

  // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  if (has_acc_attr_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->acc_attr_res(), target);
  }

  // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  if (has_up_vpn_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->up_vpn_req(), target);
  }

  // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  if (has_up_vpn_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->up_vpn_res(), target);
  }

  // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  if (has_account_init_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->account_init_req(), target);
  }

  // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  if (has_account_init_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->account_init_res(), target);
  }

  // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  if (has_vpn_active_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vpn_active_req(), target);
  }

  // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
  if (has_ad_reward_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->ad_reward_req(), target);
  }

  // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
  if (has_ref_heights_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->ref_heights_req(), target);
  }

  // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
  if (has_ref_heights_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ref_heights_res(), target);
  }

  // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
  if (has_acc_shard_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->acc_shard_req(), target);
  }

  // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
  if (has_acc_shard_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->acc_shard_res(), target);
  }

  // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
  if (has_shard_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->shard_to(), target);
  }

  // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
  if (has_statistic_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->statistic_tx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
    if (has_block_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_req());
    }

    // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
    if (has_block_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_res());
    }

    // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
    if (has_height_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->height_req());
    }

    // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
    if (has_height_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->height_res());
    }

    // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
    if (has_acc_attr_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc_attr_req());
    }

    // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
    if (has_acc_attr_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc_attr_res());
    }

    // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
    if (has_up_vpn_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->up_vpn_req());
    }

    // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
    if (has_up_vpn_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->up_vpn_res());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
    if (has_account_init_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_init_req());
    }

    // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
    if (has_account_init_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_init_res());
    }

    // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
    if (has_vpn_active_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vpn_active_req());
    }

    // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
    if (has_ad_reward_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ad_reward_req());
    }

    // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
    if (has_ref_heights_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref_heights_req());
    }

    // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
    if (has_ref_heights_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref_heights_res());
    }

    // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
    if (has_acc_shard_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc_shard_req());
    }

    // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
    if (has_acc_shard_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc_shard_res());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
    if (has_shard_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shard_to());
    }

    // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
    if (has_statistic_tx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statistic_tx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMessage::MergeFrom(const BlockMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_req()) {
      mutable_block_req()->::zjchain::block::protobuf::GetTxBlockRequest::MergeFrom(from.block_req());
    }
    if (from.has_block_res()) {
      mutable_block_res()->::zjchain::block::protobuf::GetTxBlockResponse::MergeFrom(from.block_res());
    }
    if (from.has_height_req()) {
      mutable_height_req()->::zjchain::block::protobuf::AccountHeightRequest::MergeFrom(from.height_req());
    }
    if (from.has_height_res()) {
      mutable_height_res()->::zjchain::block::protobuf::AccountHeightResponse::MergeFrom(from.height_res());
    }
    if (from.has_acc_attr_req()) {
      mutable_acc_attr_req()->::zjchain::block::protobuf::AccountAttrRequest::MergeFrom(from.acc_attr_req());
    }
    if (from.has_acc_attr_res()) {
      mutable_acc_attr_res()->::zjchain::block::protobuf::AccountAttrResponse::MergeFrom(from.acc_attr_res());
    }
    if (from.has_up_vpn_req()) {
      mutable_up_vpn_req()->::zjchain::block::protobuf::UpdateVpnCountRequest::MergeFrom(from.up_vpn_req());
    }
    if (from.has_up_vpn_res()) {
      mutable_up_vpn_res()->::zjchain::block::protobuf::UpdateVpnCountResponse::MergeFrom(from.up_vpn_res());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_account_init_req()) {
      mutable_account_init_req()->::zjchain::block::protobuf::GetAccountInitInfoRequest::MergeFrom(from.account_init_req());
    }
    if (from.has_account_init_res()) {
      mutable_account_init_res()->::zjchain::block::protobuf::GetAccountInitInfoResponse::MergeFrom(from.account_init_res());
    }
    if (from.has_vpn_active_req()) {
      mutable_vpn_active_req()->::zjchain::block::protobuf::UpdateVpnActiveRequest::MergeFrom(from.vpn_active_req());
    }
    if (from.has_ad_reward_req()) {
      mutable_ad_reward_req()->::zjchain::block::protobuf::AdRewardRequest::MergeFrom(from.ad_reward_req());
    }
    if (from.has_ref_heights_req()) {
      mutable_ref_heights_req()->::zjchain::block::protobuf::RefreshPoolHeightRequest::MergeFrom(from.ref_heights_req());
    }
    if (from.has_ref_heights_res()) {
      mutable_ref_heights_res()->::zjchain::block::protobuf::RefreshPoolHeightResponse::MergeFrom(from.ref_heights_res());
    }
    if (from.has_acc_shard_req()) {
      mutable_acc_shard_req()->::zjchain::block::protobuf::GetAccountShardRequest::MergeFrom(from.acc_shard_req());
    }
    if (from.has_acc_shard_res()) {
      mutable_acc_shard_res()->::zjchain::block::protobuf::GetAccountShardReponse::MergeFrom(from.acc_shard_res());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_shard_to()) {
      mutable_shard_to()->::zjchain::block::protobuf::ShardToTxMessage::MergeFrom(from.shard_to());
    }
    if (from.has_statistic_tx()) {
      mutable_statistic_tx()->::zjchain::block::protobuf::StatisticTxMessage::MergeFrom(from.statistic_tx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMessage::CopyFrom(const BlockMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMessage::IsInitialized() const {

  return true;
}

void BlockMessage::Swap(BlockMessage* other) {
  if (other != this) {
    std::swap(block_req_, other->block_req_);
    std::swap(block_res_, other->block_res_);
    std::swap(height_req_, other->height_req_);
    std::swap(height_res_, other->height_res_);
    std::swap(acc_attr_req_, other->acc_attr_req_);
    std::swap(acc_attr_res_, other->acc_attr_res_);
    std::swap(up_vpn_req_, other->up_vpn_req_);
    std::swap(up_vpn_res_, other->up_vpn_res_);
    std::swap(account_init_req_, other->account_init_req_);
    std::swap(account_init_res_, other->account_init_res_);
    std::swap(vpn_active_req_, other->vpn_active_req_);
    std::swap(ad_reward_req_, other->ad_reward_req_);
    std::swap(ref_heights_req_, other->ref_heights_req_);
    std::swap(ref_heights_res_, other->ref_heights_res_);
    std::swap(acc_shard_req_, other->acc_shard_req_);
    std::swap(acc_shard_res_, other->acc_shard_res_);
    std::swap(shard_to_, other->shard_to_);
    std::swap(statistic_tx_, other->statistic_tx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMessage_descriptor_;
  metadata.reflection = BlockMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace block
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
