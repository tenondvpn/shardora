// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/block.proto

#include "protos/block.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zjchain {
namespace block {
namespace protobuf {
PROTOBUF_CONSTEXPR StorageItem::StorageItem(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , val_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , val_size_(0u){}
struct StorageItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageItemDefaultTypeInternal() {}
  union {
    StorageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageItemDefaultTypeInternal _StorageItem_default_instance_;
PROTOBUF_CONSTEXPR TransferItem::TransferItem(
    ::_pbi::ConstantInitialized)
  : from_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , to_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_(uint64_t{0u}){}
struct TransferItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferItemDefaultTypeInternal() {}
  union {
    TransferItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferItemDefaultTypeInternal _TransferItem_default_instance_;
PROTOBUF_CONSTEXPR TxLog::TxLog(
    ::_pbi::ConstantInitialized)
  : topics_()
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TxLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxLogDefaultTypeInternal() {}
  union {
    TxLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxLogDefaultTypeInternal _TxLog_default_instance_;
PROTOBUF_CONSTEXPR BlockTx::BlockTx(
    ::_pbi::ConstantInitialized)
  : storages_()
  , contract_txs_()
  , events_()
  , gid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , from_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , to_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , contract_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , contract_input_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_(uint64_t{0u})
  , gas_limit_(uint64_t{0u})
  , gas_used_(uint64_t{0u})
  , gas_price_(uint64_t{0u})
  , balance_(uint64_t{0u})
  , step_(0)

  , status_(0u)
  , contract_prepayment_(uint64_t{0u}){}
struct BlockTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockTxDefaultTypeInternal() {}
  union {
    BlockTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockTxDefaultTypeInternal _BlockTx_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized)
  : tx_list_()
  , change_leader_invalid_hashs_()
  , prehash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bls_agg_sign_x_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bls_agg_sign_y_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , network_id_(0u)
  , pool_index_(0u)
  , height_(uint64_t{0u})
  , consistency_random_(uint64_t{0u})
  , electblock_height_(uint64_t{0u})
  , timeblock_height_(uint64_t{0u})
  , version_(0u)
  , is_commited_block_(false)
  , timestamp_(uint64_t{0u})
  , leader_index_(uint64_t{0u}){}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR ConsensusToTxsItem::ConsensusToTxsItem(
    ::_pbi::ConstantInitialized)
  : to_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , balance_(uint64_t{0u}){}
struct ConsensusToTxsItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusToTxsItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusToTxsItemDefaultTypeInternal() {}
  union {
    ConsensusToTxsItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusToTxsItemDefaultTypeInternal _ConsensusToTxsItem_default_instance_;
PROTOBUF_CONSTEXPR ConsensusToTxs::ConsensusToTxs(
    ::_pbi::ConstantInitialized)
  : tos_(){}
struct ConsensusToTxsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusToTxsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusToTxsDefaultTypeInternal() {}
  union {
    ConsensusToTxs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusToTxsDefaultTypeInternal _ConsensusToTxs_default_instance_;
PROTOBUF_CONSTEXPR GetTxBlockRequest::GetTxBlockRequest(
    ::_pbi::ConstantInitialized)
  : tx_gid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , block_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , height_(uint64_t{0u})
  , from_(false){}
struct GetTxBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxBlockRequestDefaultTypeInternal() {}
  union {
    GetTxBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxBlockRequestDefaultTypeInternal _GetTxBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTxBlockResponse::GetTxBlockResponse(
    ::_pbi::ConstantInitialized)
  : block_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetTxBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxBlockResponseDefaultTypeInternal() {}
  union {
    GetTxBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxBlockResponseDefaultTypeInternal _GetTxBlockResponse_default_instance_;
PROTOBUF_CONSTEXPR AccountHeightRequest::AccountHeightRequest(
    ::_pbi::ConstantInitialized)
  : account_addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(int64_t{0})
  , count_(0){}
struct AccountHeightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountHeightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountHeightRequestDefaultTypeInternal() {}
  union {
    AccountHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountHeightRequestDefaultTypeInternal _AccountHeightRequest_default_instance_;
PROTOBUF_CONSTEXPR AccountHeightResponse::AccountHeightResponse(
    ::_pbi::ConstantInitialized)
  : heights_()
  , account_addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AccountHeightResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountHeightResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountHeightResponseDefaultTypeInternal() {}
  union {
    AccountHeightResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountHeightResponseDefaultTypeInternal _AccountHeightResponse_default_instance_;
PROTOBUF_CONSTEXPR AccountAttrRequest::AccountAttrRequest(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attr_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , height_(uint64_t{0u}){}
struct AccountAttrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountAttrRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountAttrRequestDefaultTypeInternal() {}
  union {
    AccountAttrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountAttrRequestDefaultTypeInternal _AccountAttrRequest_default_instance_;
PROTOBUF_CONSTEXPR AccountAttrResponse::AccountAttrResponse(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attr_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , block_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , height_(uint64_t{0u}){}
struct AccountAttrResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountAttrResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountAttrResponseDefaultTypeInternal() {}
  union {
    AccountAttrResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountAttrResponseDefaultTypeInternal _AccountAttrResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateVpnCountRequest::UpdateVpnCountRequest(
    ::_pbi::ConstantInitialized)
  : ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , old_ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , account_hash_(uint64_t{0u})
  , just_set_(false){}
struct UpdateVpnCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateVpnCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateVpnCountRequestDefaultTypeInternal() {}
  union {
    UpdateVpnCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateVpnCountRequestDefaultTypeInternal _UpdateVpnCountRequest_default_instance_;
PROTOBUF_CONSTEXPR VpnCountItem::VpnCountItem(
    ::_pbi::ConstantInitialized)
  : ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , count_(0u){}
struct VpnCountItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VpnCountItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VpnCountItemDefaultTypeInternal() {}
  union {
    VpnCountItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VpnCountItemDefaultTypeInternal _VpnCountItem_default_instance_;
PROTOBUF_CONSTEXPR UpdateVpnCountResponse::UpdateVpnCountResponse(
    ::_pbi::ConstantInitialized)
  : vpn_nodes_(){}
struct UpdateVpnCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateVpnCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateVpnCountResponseDefaultTypeInternal() {}
  union {
    UpdateVpnCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateVpnCountResponseDefaultTypeInternal _UpdateVpnCountResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAccountInitInfoRequest::GetAccountInitInfoRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , height_(uint64_t{0u})
  , net_id_(uint64_t{0u})
  , index_(uint64_t{0u})
  , count_(0u){}
struct GetAccountInitInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountInitInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountInitInfoRequestDefaultTypeInternal() {}
  union {
    GetAccountInitInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountInitInfoRequestDefaultTypeInternal _GetAccountInitInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAccountInitInfoResponse::GetAccountInitInfoResponse(
    ::_pbi::ConstantInitialized)
  : block_list_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , balance_(uint64_t{0u})
  , max_index_(uint64_t{0u}){}
struct GetAccountInitInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountInitInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountInitInfoResponseDefaultTypeInternal() {}
  union {
    GetAccountInitInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountInitInfoResponseDefaultTypeInternal _GetAccountInitInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateVpnActiveRequest::UpdateVpnActiveRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct UpdateVpnActiveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateVpnActiveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateVpnActiveRequestDefaultTypeInternal() {}
  union {
    UpdateVpnActiveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateVpnActiveRequestDefaultTypeInternal _UpdateVpnActiveRequest_default_instance_;
PROTOBUF_CONSTEXPR AdRewardRequest::AdRewardRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reward_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , gid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AdRewardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdRewardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdRewardRequestDefaultTypeInternal() {}
  union {
    AdRewardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdRewardRequestDefaultTypeInternal _AdRewardRequest_default_instance_;
PROTOBUF_CONSTEXPR ElectStatisticInfo::ElectStatisticInfo(
    ::_pbi::ConstantInitialized)
  : succ_tx_count_()
  , lof_leaders_()
  , elect_height_(uint64_t{0u}){}
struct ElectStatisticInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElectStatisticInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElectStatisticInfoDefaultTypeInternal() {}
  union {
    ElectStatisticInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElectStatisticInfoDefaultTypeInternal _ElectStatisticInfo_default_instance_;
PROTOBUF_CONSTEXPR StatisticInfo::StatisticInfo(
    ::_pbi::ConstantInitialized)
  : elect_statistic_()
  , timeblock_height_(uint64_t{0u})
  , all_tx_count_(0u){}
struct StatisticInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticInfoDefaultTypeInternal() {}
  union {
    StatisticInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticInfoDefaultTypeInternal _StatisticInfo_default_instance_;
PROTOBUF_CONSTEXPR RefreshPoolHeightRequest::RefreshPoolHeightRequest(
    ::_pbi::ConstantInitialized)
  : heights_(){}
struct RefreshPoolHeightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshPoolHeightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshPoolHeightRequestDefaultTypeInternal() {}
  union {
    RefreshPoolHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshPoolHeightRequestDefaultTypeInternal _RefreshPoolHeightRequest_default_instance_;
PROTOBUF_CONSTEXPR RefreshPoolHeightResponse::RefreshPoolHeightResponse(
    ::_pbi::ConstantInitialized)
  : heights_(){}
struct RefreshPoolHeightResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshPoolHeightResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshPoolHeightResponseDefaultTypeInternal() {}
  union {
    RefreshPoolHeightResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshPoolHeightResponseDefaultTypeInternal _RefreshPoolHeightResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAccountShardRequest::GetAccountShardRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetAccountShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountShardRequestDefaultTypeInternal() {}
  union {
    GetAccountShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountShardRequestDefaultTypeInternal _GetAccountShardRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAccountShardReponse::GetAccountShardReponse(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , shard_id_(0u){}
struct GetAccountShardReponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountShardReponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountShardReponseDefaultTypeInternal() {}
  union {
    GetAccountShardReponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountShardReponseDefaultTypeInternal _GetAccountShardReponse_default_instance_;
PROTOBUF_CONSTEXPR CrossShardingTosMessage::CrossShardingTosMessage(
    ::_pbi::ConstantInitialized)
  : block_(nullptr){}
struct CrossShardingTosMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossShardingTosMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossShardingTosMessageDefaultTypeInternal() {}
  union {
    CrossShardingTosMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossShardingTosMessageDefaultTypeInternal _CrossShardingTosMessage_default_instance_;
PROTOBUF_CONSTEXPR CrossShardingStatisticMessage::CrossShardingStatisticMessage(
    ::_pbi::ConstantInitialized)
  : block_(nullptr){}
struct CrossShardingStatisticMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossShardingStatisticMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossShardingStatisticMessageDefaultTypeInternal() {}
  union {
    CrossShardingStatisticMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossShardingStatisticMessageDefaultTypeInternal _CrossShardingStatisticMessage_default_instance_;
PROTOBUF_CONSTEXPR ElectBlockMessage::ElectBlockMessage(
    ::_pbi::ConstantInitialized)
  : block_(nullptr){}
struct ElectBlockMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElectBlockMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElectBlockMessageDefaultTypeInternal() {}
  union {
    ElectBlockMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElectBlockMessageDefaultTypeInternal _ElectBlockMessage_default_instance_;
PROTOBUF_CONSTEXPR ShardToTxMessage::ShardToTxMessage(
    ::_pbi::ConstantInitialized)
  : to_txs_()
  , elect_height_(uint64_t{0u})
  , leader_idx_(0u)
  , leader_to_idx_(0){}
struct ShardToTxMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardToTxMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardToTxMessageDefaultTypeInternal() {}
  union {
    ShardToTxMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardToTxMessageDefaultTypeInternal _ShardToTxMessage_default_instance_;
PROTOBUF_CONSTEXPR StatisticTxMessage::StatisticTxMessage(
    ::_pbi::ConstantInitialized)
  : statistic_(nullptr)
  , elect_height_(uint64_t{0u})
  , leader_idx_(0u)
  , leader_to_idx_(0){}
struct StatisticTxMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticTxMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticTxMessageDefaultTypeInternal() {}
  union {
    StatisticTxMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticTxMessageDefaultTypeInternal _StatisticTxMessage_default_instance_;
PROTOBUF_CONSTEXPR BlockMessage::BlockMessage(
    ::_pbi::ConstantInitialized)
  : block_req_(nullptr)
  , block_res_(nullptr)
  , height_req_(nullptr)
  , height_res_(nullptr)
  , acc_attr_req_(nullptr)
  , acc_attr_res_(nullptr)
  , up_vpn_req_(nullptr)
  , up_vpn_res_(nullptr)
  , account_init_req_(nullptr)
  , account_init_res_(nullptr)
  , vpn_active_req_(nullptr)
  , ad_reward_req_(nullptr)
  , ref_heights_req_(nullptr)
  , ref_heights_res_(nullptr)
  , acc_shard_req_(nullptr)
  , acc_shard_res_(nullptr)
  , shard_to_(nullptr)
  , statistic_tx_(nullptr){}
struct BlockMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockMessageDefaultTypeInternal() {}
  union {
    BlockMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
}  // namespace protobuf
}  // namespace block
}  // namespace zjchain
static ::_pb::Metadata file_level_metadata_protos_2fblock_2eproto[32];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fblock_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fblock_2eproto = nullptr;

const uint32_t TableStruct_protos_2fblock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StorageItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StorageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StorageItem, key_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StorageItem, val_hash_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StorageItem, val_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TransferItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TransferItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TransferItem, from_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TransferItem, to_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TransferItem, amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TxLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TxLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TxLog, data_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::TxLog, topics_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, gid_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, from_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, to_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, amount_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, gas_used_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, gas_price_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, balance_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, step_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, status_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, storages_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, contract_txs_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, contract_prepayment_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, contract_code_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, contract_input_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockTx, events_),
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  ~0u,
  12,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, network_id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, pool_index_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, prehash_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, hash_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, version_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, consistency_random_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, electblock_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, timeblock_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, tx_list_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, timestamp_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, bls_agg_sign_x_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, bls_agg_sign_y_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, leader_index_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, change_leader_invalid_hashs_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::Block, is_commited_block_),
  4,
  5,
  0,
  1,
  10,
  6,
  7,
  8,
  9,
  ~0u,
  12,
  2,
  3,
  13,
  ~0u,
  11,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ConsensusToTxsItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ConsensusToTxsItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ConsensusToTxsItem, to_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ConsensusToTxsItem, balance_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ConsensusToTxs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ConsensusToTxs, tos_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockRequest, tx_gid_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockRequest, block_hash_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockRequest, from_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockRequest, height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockRequest, account_address_),
  0,
  1,
  4,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetTxBlockResponse, block_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightRequest, account_addr_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightRequest, index_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightRequest, count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightResponse, heights_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightResponse, account_addr_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountHeightResponse, type_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrRequest, account_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrRequest, attr_key_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrRequest, height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrResponse, account_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrResponse, attr_key_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrResponse, height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AccountAttrResponse, block_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountRequest, account_hash_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountRequest, old_ip_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountRequest, just_set_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::VpnCountItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::VpnCountItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::VpnCountItem, ip_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::VpnCountItem, count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnCountResponse, vpn_nodes_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoRequest, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoRequest, count_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoRequest, height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoRequest, net_id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoRequest, index_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoResponse, balance_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoResponse, block_list_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoResponse, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountInitInfoResponse, max_index_),
  1,
  ~0u,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnActiveRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnActiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnActiveRequest, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::UpdateVpnActiveRequest, ip_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AdRewardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AdRewardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AdRewardRequest, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AdRewardRequest, reward_key_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::AdRewardRequest, gid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectStatisticInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectStatisticInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectStatisticInfo, elect_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectStatisticInfo, succ_tx_count_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectStatisticInfo, lof_leaders_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticInfo, timeblock_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticInfo, all_tx_count_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticInfo, elect_statistic_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::RefreshPoolHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::RefreshPoolHeightRequest, heights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::RefreshPoolHeightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::RefreshPoolHeightResponse, heights_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountShardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountShardRequest, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountShardReponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountShardReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountShardReponse, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::GetAccountShardReponse, shard_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::CrossShardingTosMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::CrossShardingTosMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::CrossShardingTosMessage, block_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::CrossShardingStatisticMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::CrossShardingStatisticMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::CrossShardingStatisticMessage, block_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectBlockMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectBlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ElectBlockMessage, block_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ShardToTxMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ShardToTxMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ShardToTxMessage, to_txs_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ShardToTxMessage, leader_idx_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ShardToTxMessage, elect_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::ShardToTxMessage, leader_to_idx_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticTxMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticTxMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticTxMessage, statistic_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticTxMessage, leader_idx_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticTxMessage, elect_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::StatisticTxMessage, leader_to_idx_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, block_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, block_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, height_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, height_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, acc_attr_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, acc_attr_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, up_vpn_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, up_vpn_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, account_init_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, account_init_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, vpn_active_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, ad_reward_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, ref_heights_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, ref_heights_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, acc_shard_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, acc_shard_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, shard_to_),
  PROTOBUF_FIELD_OFFSET(::zjchain::block::protobuf::BlockMessage, statistic_tx_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::zjchain::block::protobuf::StorageItem)},
  { 12, 21, -1, sizeof(::zjchain::block::protobuf::TransferItem)},
  { 24, 32, -1, sizeof(::zjchain::block::protobuf::TxLog)},
  { 34, 56, -1, sizeof(::zjchain::block::protobuf::BlockTx)},
  { 72, 94, -1, sizeof(::zjchain::block::protobuf::Block)},
  { 110, 118, -1, sizeof(::zjchain::block::protobuf::ConsensusToTxsItem)},
  { 120, -1, -1, sizeof(::zjchain::block::protobuf::ConsensusToTxs)},
  { 127, 138, -1, sizeof(::zjchain::block::protobuf::GetTxBlockRequest)},
  { 143, 150, -1, sizeof(::zjchain::block::protobuf::GetTxBlockResponse)},
  { 151, 160, -1, sizeof(::zjchain::block::protobuf::AccountHeightRequest)},
  { 163, 172, -1, sizeof(::zjchain::block::protobuf::AccountHeightResponse)},
  { 175, 184, -1, sizeof(::zjchain::block::protobuf::AccountAttrRequest)},
  { 187, 197, -1, sizeof(::zjchain::block::protobuf::AccountAttrResponse)},
  { 201, 212, -1, sizeof(::zjchain::block::protobuf::UpdateVpnCountRequest)},
  { 217, 225, -1, sizeof(::zjchain::block::protobuf::VpnCountItem)},
  { 227, -1, -1, sizeof(::zjchain::block::protobuf::UpdateVpnCountResponse)},
  { 234, 245, -1, sizeof(::zjchain::block::protobuf::GetAccountInitInfoRequest)},
  { 250, 260, -1, sizeof(::zjchain::block::protobuf::GetAccountInitInfoResponse)},
  { 264, 272, -1, sizeof(::zjchain::block::protobuf::UpdateVpnActiveRequest)},
  { 274, 283, -1, sizeof(::zjchain::block::protobuf::AdRewardRequest)},
  { 286, 295, -1, sizeof(::zjchain::block::protobuf::ElectStatisticInfo)},
  { 298, 307, -1, sizeof(::zjchain::block::protobuf::StatisticInfo)},
  { 310, -1, -1, sizeof(::zjchain::block::protobuf::RefreshPoolHeightRequest)},
  { 317, -1, -1, sizeof(::zjchain::block::protobuf::RefreshPoolHeightResponse)},
  { 324, 331, -1, sizeof(::zjchain::block::protobuf::GetAccountShardRequest)},
  { 332, 340, -1, sizeof(::zjchain::block::protobuf::GetAccountShardReponse)},
  { 342, 349, -1, sizeof(::zjchain::block::protobuf::CrossShardingTosMessage)},
  { 350, 357, -1, sizeof(::zjchain::block::protobuf::CrossShardingStatisticMessage)},
  { 358, 365, -1, sizeof(::zjchain::block::protobuf::ElectBlockMessage)},
  { 366, 376, -1, sizeof(::zjchain::block::protobuf::ShardToTxMessage)},
  { 380, 390, -1, sizeof(::zjchain::block::protobuf::StatisticTxMessage)},
  { 394, 418, -1, sizeof(::zjchain::block::protobuf::BlockMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zjchain::block::protobuf::_StorageItem_default_instance_._instance,
  &::zjchain::block::protobuf::_TransferItem_default_instance_._instance,
  &::zjchain::block::protobuf::_TxLog_default_instance_._instance,
  &::zjchain::block::protobuf::_BlockTx_default_instance_._instance,
  &::zjchain::block::protobuf::_Block_default_instance_._instance,
  &::zjchain::block::protobuf::_ConsensusToTxsItem_default_instance_._instance,
  &::zjchain::block::protobuf::_ConsensusToTxs_default_instance_._instance,
  &::zjchain::block::protobuf::_GetTxBlockRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_GetTxBlockResponse_default_instance_._instance,
  &::zjchain::block::protobuf::_AccountHeightRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_AccountHeightResponse_default_instance_._instance,
  &::zjchain::block::protobuf::_AccountAttrRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_AccountAttrResponse_default_instance_._instance,
  &::zjchain::block::protobuf::_UpdateVpnCountRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_VpnCountItem_default_instance_._instance,
  &::zjchain::block::protobuf::_UpdateVpnCountResponse_default_instance_._instance,
  &::zjchain::block::protobuf::_GetAccountInitInfoRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_GetAccountInitInfoResponse_default_instance_._instance,
  &::zjchain::block::protobuf::_UpdateVpnActiveRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_AdRewardRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_ElectStatisticInfo_default_instance_._instance,
  &::zjchain::block::protobuf::_StatisticInfo_default_instance_._instance,
  &::zjchain::block::protobuf::_RefreshPoolHeightRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_RefreshPoolHeightResponse_default_instance_._instance,
  &::zjchain::block::protobuf::_GetAccountShardRequest_default_instance_._instance,
  &::zjchain::block::protobuf::_GetAccountShardReponse_default_instance_._instance,
  &::zjchain::block::protobuf::_CrossShardingTosMessage_default_instance_._instance,
  &::zjchain::block::protobuf::_CrossShardingStatisticMessage_default_instance_._instance,
  &::zjchain::block::protobuf::_ElectBlockMessage_default_instance_._instance,
  &::zjchain::block::protobuf::_ShardToTxMessage_default_instance_._instance,
  &::zjchain::block::protobuf::_StatisticTxMessage_default_instance_._instance,
  &::zjchain::block::protobuf::_BlockMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fblock_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022protos/block.proto\022\026zjchain.block.prot"
  "obuf\032\022protos/pools.proto\"A\n\013StorageItem\022"
  "\013\n\003key\030\001 \001(\014\022\020\n\010val_hash\030\002 \001(\014\022\023\n\010val_si"
  "ze\030\003 \001(\r:\0010\"8\n\014TransferItem\022\014\n\004from\030\001 \001("
  "\014\022\n\n\002to\030\002 \001(\014\022\016\n\006amount\030\003 \001(\004\"%\n\005TxLog\022\014"
  "\n\004data\030\001 \001(\014\022\016\n\006topics\030\002 \003(\014\"\267\003\n\007BlockTx"
  "\022\013\n\003gid\030\001 \001(\014\022\014\n\004from\030\002 \001(\014\022\n\n\002to\030\003 \001(\014\022"
  "\016\n\006amount\030\004 \001(\004\022\021\n\tgas_limit\030\005 \001(\004\022\020\n\010ga"
  "s_used\030\006 \001(\004\022\021\n\tgas_price\030\007 \001(\004\022\017\n\007balan"
  "ce\030\010 \001(\004\022.\n\004step\030\t \001(\0162 .zjchain.pools.p"
  "rotobuf.StepType\022\016\n\006status\030\n \001(\r\0225\n\010stor"
  "ages\030\013 \003(\0132#.zjchain.block.protobuf.Stor"
  "ageItem\022:\n\014contract_txs\030\014 \003(\0132$.zjchain."
  "block.protobuf.TransferItem\022\033\n\023contract_"
  "prepayment\030\r \001(\004\022\025\n\rcontract_code\030\016 \001(\014\022"
  "\026\n\016contract_input\030\017 \001(\014\022-\n\006events\030\020 \003(\0132"
  "\035.zjchain.block.protobuf.TxLog\"\222\003\n\005Block"
  "\022\022\n\nnetwork_id\030\001 \001(\r\022\022\n\npool_index\030\002 \001(\r"
  "\022\017\n\007prehash\030\003 \001(\014\022\014\n\004hash\030\004 \001(\014\022\017\n\007versi"
  "on\030\005 \001(\r\022\016\n\006height\030\006 \001(\004\022\032\n\022consistency_"
  "random\030\007 \001(\004\022\031\n\021electblock_height\030\010 \001(\004\022"
  "\030\n\020timeblock_height\030\t \001(\004\0220\n\007tx_list\030\n \003"
  "(\0132\037.zjchain.block.protobuf.BlockTx\022\021\n\tt"
  "imestamp\030\013 \001(\004\022\026\n\016bls_agg_sign_x\030\014 \001(\014\022\026"
  "\n\016bls_agg_sign_y\030\r \001(\014\022\024\n\014leader_index\030\016"
  " \001(\004\022#\n\033change_leader_invalid_hashs\030\017 \003("
  "\014\022 \n\021is_commited_block\030\020 \001(\010:\005false\"1\n\022C"
  "onsensusToTxsItem\022\n\n\002to\030\001 \001(\014\022\017\n\007balance"
  "\030\002 \001(\004\"I\n\016ConsensusToTxs\0227\n\003tos\030\001 \003(\0132*."
  "zjchain.block.protobuf.ConsensusToTxsIte"
  "m\"n\n\021GetTxBlockRequest\022\016\n\006tx_gid\030\001 \001(\014\022\022"
  "\n\nblock_hash\030\002 \001(\014\022\014\n\004from\030\003 \001(\010\022\016\n\006heig"
  "ht\030\004 \001(\004\022\027\n\017account_address\030\005 \001(\014\"#\n\022Get"
  "TxBlockResponse\022\r\n\005block\030\001 \001(\014\"J\n\024Accoun"
  "tHeightRequest\022\024\n\014account_addr\030\001 \001(\014\022\r\n\005"
  "index\030\002 \001(\003\022\r\n\005count\030\003 \001(\005\"L\n\025AccountHei"
  "ghtResponse\022\017\n\007heights\030\001 \003(\004\022\024\n\014account_"
  "addr\030\002 \001(\014\022\014\n\004type\030\003 \001(\014\"G\n\022AccountAttrR"
  "equest\022\017\n\007account\030\001 \001(\014\022\020\n\010attr_key\030\002 \001("
  "\014\022\016\n\006height\030\003 \001(\004\"W\n\023AccountAttrResponse"
  "\022\017\n\007account\030\001 \001(\014\022\020\n\010attr_key\030\002 \001(\014\022\016\n\006h"
  "eight\030\003 \001(\004\022\r\n\005block\030\004 \001(\014\"h\n\025UpdateVpnC"
  "ountRequest\022\024\n\014account_hash\030\001 \001(\004\022\n\n\002ip\030"
  "\002 \001(\014\022\016\n\006old_ip\030\003 \001(\014\022\013\n\003uid\030\004 \001(\014\022\020\n\010ju"
  "st_set\030\005 \001(\010\")\n\014VpnCountItem\022\n\n\002ip\030\001 \001(\014"
  "\022\r\n\005count\030\002 \001(\r\"Q\n\026UpdateVpnCountRespons"
  "e\0227\n\tvpn_nodes\030\001 \003(\0132$.zjchain.block.pro"
  "tobuf.VpnCountItem\"e\n\031GetAccountInitInfo"
  "Request\022\n\n\002id\030\001 \001(\014\022\r\n\005count\030\002 \001(\r\022\016\n\006he"
  "ight\030\003 \001(\004\022\016\n\006net_id\030\004 \001(\004\022\r\n\005index\030\005 \001("
  "\004\"\177\n\032GetAccountInitInfoResponse\022\017\n\007balan"
  "ce\030\001 \001(\004\0221\n\nblock_list\030\002 \003(\0132\035.zjchain.b"
  "lock.protobuf.Block\022\n\n\002id\030\003 \001(\014\022\021\n\tmax_i"
  "ndex\030\004 \001(\004\"0\n\026UpdateVpnActiveRequest\022\n\n\002"
  "id\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\">\n\017AdRewardRequest\022"
  "\n\n\002id\030\001 \001(\014\022\022\n\nreward_key\030\002 \001(\014\022\013\n\003gid\030\003"
  " \001(\014\"V\n\022ElectStatisticInfo\022\024\n\014elect_heig"
  "ht\030\001 \001(\004\022\025\n\rsucc_tx_count\030\002 \003(\r\022\023\n\013lof_l"
  "eaders\030\003 \003(\r\"\204\001\n\rStatisticInfo\022\030\n\020timebl"
  "ock_height\030\001 \001(\004\022\024\n\014all_tx_count\030\002 \001(\r\022C"
  "\n\017elect_statistic\030\003 \003(\0132*.zjchain.block."
  "protobuf.ElectStatisticInfo\"+\n\030RefreshPo"
  "olHeightRequest\022\017\n\007heights\030\001 \003(\004\",\n\031Refr"
  "eshPoolHeightResponse\022\017\n\007heights\030\001 \003(\004\"$"
  "\n\026GetAccountShardRequest\022\n\n\002id\030\001 \001(\014\"6\n\026"
  "GetAccountShardReponse\022\n\n\002id\030\001 \001(\014\022\020\n\010sh"
  "ard_id\030\002 \001(\r\"G\n\027CrossShardingTosMessage\022"
  ",\n\005block\030\001 \001(\0132\035.zjchain.block.protobuf."
  "Block\"M\n\035CrossShardingStatisticMessage\022,"
  "\n\005block\030\001 \001(\0132\035.zjchain.block.protobuf.B"
  "lock\"A\n\021ElectBlockMessage\022,\n\005block\030\001 \001(\013"
  "2\035.zjchain.block.protobuf.Block\"\212\001\n\020Shar"
  "dToTxMessage\0225\n\006to_txs\030\001 \003(\0132%.zjchain.p"
  "ools.protobuf.ShardToTxItem\022\022\n\nleader_id"
  "x\030\002 \001(\r\022\024\n\014elect_height\030\003 \001(\004\022\025\n\rleader_"
  "to_idx\030\004 \001(\005\"\221\001\n\022StatisticTxMessage\022:\n\ts"
  "tatistic\030\001 \001(\0132\'.zjchain.pools.protobuf."
  "StatisticTxItem\022\022\n\nleader_idx\030\002 \001(\r\022\024\n\014e"
  "lect_height\030\003 \001(\004\022\025\n\rleader_to_idx\030\004 \001(\005"
  "\"\342\t\n\014BlockMessage\022<\n\tblock_req\030\001 \001(\0132).z"
  "jchain.block.protobuf.GetTxBlockRequest\022"
  "=\n\tblock_res\030\002 \001(\0132*.zjchain.block.proto"
  "buf.GetTxBlockResponse\022@\n\nheight_req\030\003 \001"
  "(\0132,.zjchain.block.protobuf.AccountHeigh"
  "tRequest\022A\n\nheight_res\030\004 \001(\0132-.zjchain.b"
  "lock.protobuf.AccountHeightResponse\022@\n\014a"
  "cc_attr_req\030\005 \001(\0132*.zjchain.block.protob"
  "uf.AccountAttrRequest\022A\n\014acc_attr_res\030\006 "
  "\001(\0132+.zjchain.block.protobuf.AccountAttr"
  "Response\022A\n\nup_vpn_req\030\007 \001(\0132-.zjchain.b"
  "lock.protobuf.UpdateVpnCountRequest\022B\n\nu"
  "p_vpn_res\030\010 \001(\0132..zjchain.block.protobuf"
  ".UpdateVpnCountResponse\022K\n\020account_init_"
  "req\030\t \001(\01321.zjchain.block.protobuf.GetAc"
  "countInitInfoRequest\022L\n\020account_init_res"
  "\030\n \001(\01322.zjchain.block.protobuf.GetAccou"
  "ntInitInfoResponse\022F\n\016vpn_active_req\030\013 \001"
  "(\0132..zjchain.block.protobuf.UpdateVpnAct"
  "iveRequest\022>\n\rad_reward_req\030\014 \001(\0132\'.zjch"
  "ain.block.protobuf.AdRewardRequest\022I\n\017re"
  "f_heights_req\030\r \001(\01320.zjchain.block.prot"
  "obuf.RefreshPoolHeightRequest\022J\n\017ref_hei"
  "ghts_res\030\016 \001(\01321.zjchain.block.protobuf."
  "RefreshPoolHeightResponse\022E\n\racc_shard_r"
  "eq\030\017 \001(\0132..zjchain.block.protobuf.GetAcc"
  "ountShardRequest\022E\n\racc_shard_res\030\020 \001(\0132"
  "..zjchain.block.protobuf.GetAccountShard"
  "Reponse\022:\n\010shard_to\030\021 \001(\0132(.zjchain.bloc"
  "k.protobuf.ShardToTxMessage\022@\n\014statistic"
  "_tx\030\022 \001(\0132*.zjchain.block.protobuf.Stati"
  "sticTxMessage"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fblock_2eproto_deps[1] = {
  &::descriptor_table_protos_2fpools_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fblock_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fblock_2eproto = {
    false, false, 4413, descriptor_table_protodef_protos_2fblock_2eproto,
    "protos/block.proto",
    &descriptor_table_protos_2fblock_2eproto_once, descriptor_table_protos_2fblock_2eproto_deps, 1, 32,
    schemas, file_default_instances, TableStruct_protos_2fblock_2eproto::offsets,
    file_level_metadata_protos_2fblock_2eproto, file_level_enum_descriptors_protos_2fblock_2eproto,
    file_level_service_descriptors_protos_2fblock_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fblock_2eproto_getter() {
  return &descriptor_table_protos_2fblock_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fblock_2eproto(&descriptor_table_protos_2fblock_2eproto);
namespace zjchain {
namespace block {
namespace protobuf {

// ===================================================================

class StorageItem::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageItem>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StorageItem::StorageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.StorageItem)
}
StorageItem::StorageItem(const StorageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  val_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    val_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_val_hash()) {
    val_hash_.Set(from._internal_val_hash(), 
      GetArenaForAllocation());
  }
  val_size_ = from.val_size_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.StorageItem)
}

inline void StorageItem::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
val_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  val_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
val_size_ = 0u;
}

StorageItem::~StorageItem() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.StorageItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  val_hash_.Destroy();
}

void StorageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StorageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.StorageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      val_hash_.ClearNonDefaultToEmpty();
    }
  }
  val_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes val_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_val_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 val_size = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_val_size(&has_bits);
          val_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.StorageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional bytes val_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_val_hash(), target);
  }

  // optional uint32 val_size = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_val_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.StorageItem)
  return target;
}

size_t StorageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.StorageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

    // optional bytes val_hash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_val_hash());
    }

    // optional uint32 val_size = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_val_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StorageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StorageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StorageItem::GetClassData() const { return &_class_data_; }

void StorageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StorageItem *>(to)->MergeFrom(
      static_cast<const StorageItem &>(from));
}


void StorageItem::MergeFrom(const StorageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.StorageItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_val_hash(from._internal_val_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      val_size_ = from.val_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StorageItem::CopyFrom(const StorageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.StorageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageItem::IsInitialized() const {
  return true;
}

void StorageItem::InternalSwap(StorageItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &val_hash_, lhs_arena,
      &other->val_hash_, rhs_arena
  );
  swap(val_size_, other->val_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[0]);
}

// ===================================================================

class TransferItem::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferItem>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TransferItem::TransferItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.TransferItem)
}
TransferItem::TransferItem(const TransferItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from()) {
    from_.Set(from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_to()) {
    to_.Set(from._internal_to(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.TransferItem)
}

inline void TransferItem::SharedCtor() {
from_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = uint64_t{0u};
}

TransferItem::~TransferItem() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.TransferItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.Destroy();
  to_.Destroy();
}

void TransferItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferItem::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.TransferItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_.ClearNonDefaultToEmpty();
    }
  }
  amount_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.TransferItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // optional bytes to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.TransferItem)
  return target;
}

size_t TransferItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.TransferItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_from());
    }

    // optional bytes to = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_to());
    }

    // optional uint64 amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransferItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferItem::GetClassData() const { return &_class_data_; }

void TransferItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransferItem *>(to)->MergeFrom(
      static_cast<const TransferItem &>(from));
}


void TransferItem::MergeFrom(const TransferItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.TransferItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from(from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to(from._internal_to());
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferItem::CopyFrom(const TransferItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.TransferItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferItem::IsInitialized() const {
  return true;
}

void TransferItem::InternalSwap(TransferItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[1]);
}

// ===================================================================

class TxLog::_Internal {
 public:
  using HasBits = decltype(std::declval<TxLog>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TxLog::TxLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  topics_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.TxLog)
}
TxLog::TxLog(const TxLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.TxLog)
}

inline void TxLog::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxLog::~TxLog() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.TxLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void TxLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxLog::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.TxLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.TxLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.TxLog)
  return target;
}

size_t TxLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.TxLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topics_.size());
  for (int i = 0, n = topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      topics_.Get(i));
  }

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxLog::GetClassData() const { return &_class_data_; }

void TxLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxLog *>(to)->MergeFrom(
      static_cast<const TxLog &>(from));
}


void TxLog::MergeFrom(const TxLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.TxLog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxLog::CopyFrom(const TxLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.TxLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxLog::IsInitialized() const {
  return true;
}

void TxLog::InternalSwap(TxLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topics_.InternalSwap(&other->topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[2]);
}

// ===================================================================

class BlockTx::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockTx>()._has_bits_);
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gas_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gas_used(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gas_price(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_contract_prepayment(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_contract_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_input(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BlockTx::BlockTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  storages_(arena),
  contract_txs_(arena),
  events_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.BlockTx)
}
BlockTx::BlockTx(const BlockTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      storages_(from.storages_),
      contract_txs_(from.contract_txs_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gid()) {
    gid_.Set(from._internal_gid(), 
      GetArenaForAllocation());
  }
  from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from()) {
    from_.Set(from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_to()) {
    to_.Set(from._internal_to(), 
      GetArenaForAllocation());
  }
  contract_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contract_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contract_code()) {
    contract_code_.Set(from._internal_contract_code(), 
      GetArenaForAllocation());
  }
  contract_input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contract_input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contract_input()) {
    contract_input_.Set(from._internal_contract_input(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_prepayment_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(contract_prepayment_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.BlockTx)
}

inline void BlockTx::SharedCtor() {
gid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
from_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contract_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contract_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contract_input_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contract_input_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contract_prepayment_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(contract_prepayment_));
}

BlockTx::~BlockTx() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.BlockTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gid_.Destroy();
  from_.Destroy();
  to_.Destroy();
  contract_code_.Destroy();
  contract_input_.Destroy();
}

void BlockTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockTx::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.BlockTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storages_.Clear();
  contract_txs_.Clear();
  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      to_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      contract_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      contract_input_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gas_used_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(gas_used_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&gas_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contract_prepayment_) -
        reinterpret_cast<char*>(&gas_price_)) + sizeof(contract_prepayment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gas_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gas_limit(&has_bits);
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gas_used = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_gas_used(&has_bits);
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gas_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_gas_price(&has_bits);
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 balance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.pools.protobuf.StepType step = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zjchain::pools::protobuf::StepType_IsValid(val))) {
            _internal_set_step(static_cast<::zjchain::pools::protobuf::StepType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.block.protobuf.StorageItem storages = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_storages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 contract_prepayment = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_contract_prepayment(&has_bits);
          contract_prepayment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes contract_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_contract_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes contract_input = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_contract_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.block.protobuf.TxLog events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.BlockTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_gid(), target);
  }

  // optional bytes from = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_from(), target);
  }

  // optional bytes to = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_to(), target);
  }

  // optional uint64 amount = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  // optional uint64 gas_limit = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_limit(), target);
  }

  // optional uint64 gas_used = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // optional uint64 gas_price = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gas_price(), target);
  }

  // optional uint64 balance = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_balance(), target);
  }

  // optional .zjchain.pools.protobuf.StepType step = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_step(), target);
  }

  // optional uint32 status = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_status(), target);
  }

  // repeated .zjchain.block.protobuf.StorageItem storages = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_storages_size()); i < n; i++) {
    const auto& repfield = this->_internal_storages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contract_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_contract_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 contract_prepayment = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_contract_prepayment(), target);
  }

  // optional bytes contract_code = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_contract_code(), target);
  }

  // optional bytes contract_input = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_contract_input(), target);
  }

  // repeated .zjchain.block.protobuf.TxLog events = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.BlockTx)
  return target;
}

size_t BlockTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.BlockTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.StorageItem storages = 11;
  total_size += 1UL * this->_internal_storages_size();
  for (const auto& msg : this->storages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
  total_size += 1UL * this->_internal_contract_txs_size();
  for (const auto& msg : this->contract_txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zjchain.block.protobuf.TxLog events = 16;
  total_size += 2UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gid());
    }

    // optional bytes from = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_from());
    }

    // optional bytes to = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_to());
    }

    // optional bytes contract_code = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contract_code());
    }

    // optional bytes contract_input = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contract_input());
    }

    // optional uint64 amount = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
    }

    // optional uint64 gas_limit = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_limit());
    }

    // optional uint64 gas_used = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 gas_price = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_price());
    }

    // optional uint64 balance = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
    }

    // optional .zjchain.pools.protobuf.StepType step = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_step());
    }

    // optional uint32 status = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

    // optional uint64 contract_prepayment = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_contract_prepayment());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockTx::GetClassData() const { return &_class_data_; }

void BlockTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockTx *>(to)->MergeFrom(
      static_cast<const BlockTx &>(from));
}


void BlockTx::MergeFrom(const BlockTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.BlockTx)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  storages_.MergeFrom(from.storages_);
  contract_txs_.MergeFrom(from.contract_txs_);
  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gid(from._internal_gid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_from(from._internal_from());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_to(from._internal_to());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_contract_code(from._internal_contract_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_contract_input(from._internal_contract_input());
    }
    if (cached_has_bits & 0x00000020u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000040u) {
      gas_limit_ = from.gas_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      gas_used_ = from.gas_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      gas_price_ = from.gas_price_;
    }
    if (cached_has_bits & 0x00000200u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000400u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000800u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00001000u) {
      contract_prepayment_ = from.contract_prepayment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockTx::CopyFrom(const BlockTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.BlockTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockTx::IsInitialized() const {
  return true;
}

void BlockTx::InternalSwap(BlockTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  storages_.InternalSwap(&other->storages_);
  contract_txs_.InternalSwap(&other->contract_txs_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &gid_, lhs_arena,
      &other->gid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &contract_code_, lhs_arena,
      &other->contract_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &contract_input_, lhs_arena,
      &other->contract_input_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockTx, contract_prepayment_)
      + sizeof(BlockTx::contract_prepayment_)
      - PROTOBUF_FIELD_OFFSET(BlockTx, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[3]);
}

// ===================================================================

class Block::_Internal {
 public:
  using HasBits = decltype(std::declval<Block>()._has_bits_);
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pool_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prehash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_consistency_random(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_electblock_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timeblock_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bls_agg_sign_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bls_agg_sign_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leader_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_commited_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tx_list_(arena),
  change_leader_invalid_hashs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tx_list_(from.tx_list_),
      change_leader_invalid_hashs_(from.change_leader_invalid_hashs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prehash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prehash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prehash()) {
    prehash_.Set(from._internal_prehash(), 
      GetArenaForAllocation());
  }
  hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hash()) {
    hash_.Set(from._internal_hash(), 
      GetArenaForAllocation());
  }
  bls_agg_sign_x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bls_agg_sign_x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bls_agg_sign_x()) {
    bls_agg_sign_x_.Set(from._internal_bls_agg_sign_x(), 
      GetArenaForAllocation());
  }
  bls_agg_sign_y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bls_agg_sign_y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bls_agg_sign_y()) {
    bls_agg_sign_y_.Set(from._internal_bls_agg_sign_y(), 
      GetArenaForAllocation());
  }
  ::memcpy(&network_id_, &from.network_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_index_) -
    reinterpret_cast<char*>(&network_id_)) + sizeof(leader_index_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.Block)
}

inline void Block::SharedCtor() {
prehash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prehash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bls_agg_sign_x_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bls_agg_sign_x_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bls_agg_sign_y_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bls_agg_sign_y_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&network_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leader_index_) -
    reinterpret_cast<char*>(&network_id_)) + sizeof(leader_index_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prehash_.Destroy();
  hash_.Destroy();
  bls_agg_sign_x_.Destroy();
  bls_agg_sign_y_.Destroy();
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_list_.Clear();
  change_leader_invalid_hashs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      prehash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bls_agg_sign_x_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      bls_agg_sign_y_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&network_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&consistency_random_) -
        reinterpret_cast<char*>(&network_id_)) + sizeof(consistency_random_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&electblock_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_index_) -
        reinterpret_cast<char*>(&electblock_height_)) + sizeof(leader_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 network_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_network_id(&has_bits);
          network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pool_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pool_index(&has_bits);
          pool_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes prehash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prehash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 consistency_random = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_consistency_random(&has_bits);
          consistency_random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 electblock_height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_electblock_height(&has_bits);
          electblock_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timeblock_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timeblock_height(&has_bits);
          timeblock_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tx_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bls_agg_sign_x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_bls_agg_sign_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bls_agg_sign_y = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_bls_agg_sign_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 leader_index = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_leader_index(&has_bits);
          leader_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes change_leader_invalid_hashs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_change_leader_invalid_hashs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_commited_block = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_commited_block(&has_bits);
          is_commited_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 network_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_network_id(), target);
  }

  // optional uint32 pool_index = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pool_index(), target);
  }

  // optional bytes prehash = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prehash(), target);
  }

  // optional bytes hash = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // optional uint32 version = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_version(), target);
  }

  // optional uint64 height = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_height(), target);
  }

  // optional uint64 consistency_random = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_consistency_random(), target);
  }

  // optional uint64 electblock_height = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_electblock_height(), target);
  }

  // optional uint64 timeblock_height = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_timeblock_height(), target);
  }

  // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tx_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_tx_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 timestamp = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_timestamp(), target);
  }

  // optional bytes bls_agg_sign_x = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_bls_agg_sign_x(), target);
  }

  // optional bytes bls_agg_sign_y = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_bls_agg_sign_y(), target);
  }

  // optional uint64 leader_index = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_leader_index(), target);
  }

  // repeated bytes change_leader_invalid_hashs = 15;
  for (int i = 0, n = this->_internal_change_leader_invalid_hashs_size(); i < n; i++) {
    const auto& s = this->_internal_change_leader_invalid_hashs(i);
    target = stream->WriteBytes(15, s, target);
  }

  // optional bool is_commited_block = 16 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_commited_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
  total_size += 1UL * this->_internal_tx_list_size();
  for (const auto& msg : this->tx_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes change_leader_invalid_hashs = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(change_leader_invalid_hashs_.size());
  for (int i = 0, n = change_leader_invalid_hashs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      change_leader_invalid_hashs_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes prehash = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prehash());
    }

    // optional bytes hash = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
    }

    // optional bytes bls_agg_sign_x = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bls_agg_sign_x());
    }

    // optional bytes bls_agg_sign_y = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bls_agg_sign_y());
    }

    // optional uint32 network_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_network_id());
    }

    // optional uint32 pool_index = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pool_index());
    }

    // optional uint64 height = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

    // optional uint64 consistency_random = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_consistency_random());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 electblock_height = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_electblock_height());
    }

    // optional uint64 timeblock_height = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeblock_height());
    }

    // optional uint32 version = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional bool is_commited_block = 16 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional uint64 timestamp = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 leader_index = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leader_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tx_list_.MergeFrom(from.tx_list_);
  change_leader_invalid_hashs_.MergeFrom(from.change_leader_invalid_hashs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_prehash(from._internal_prehash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bls_agg_sign_x(from._internal_bls_agg_sign_x());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_bls_agg_sign_y(from._internal_bls_agg_sign_y());
    }
    if (cached_has_bits & 0x00000010u) {
      network_id_ = from.network_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      pool_index_ = from.pool_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      consistency_random_ = from.consistency_random_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      electblock_height_ = from.electblock_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      timeblock_height_ = from.timeblock_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_commited_block_ = from.is_commited_block_;
    }
    if (cached_has_bits & 0x00001000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      leader_index_ = from.leader_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tx_list_.InternalSwap(&other->tx_list_);
  change_leader_invalid_hashs_.InternalSwap(&other->change_leader_invalid_hashs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &prehash_, lhs_arena,
      &other->prehash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bls_agg_sign_x_, lhs_arena,
      &other->bls_agg_sign_x_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bls_agg_sign_y_, lhs_arena,
      &other->bls_agg_sign_y_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, leader_index_)
      + sizeof(Block::leader_index_)
      - PROTOBUF_FIELD_OFFSET(Block, network_id_)>(
          reinterpret_cast<char*>(&network_id_),
          reinterpret_cast<char*>(&other->network_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[4]);
}

// ===================================================================

class ConsensusToTxsItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsensusToTxsItem>()._has_bits_);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConsensusToTxsItem::ConsensusToTxsItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.ConsensusToTxsItem)
}
ConsensusToTxsItem::ConsensusToTxsItem(const ConsensusToTxsItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_to()) {
    to_.Set(from._internal_to(), 
      GetArenaForAllocation());
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.ConsensusToTxsItem)
}

inline void ConsensusToTxsItem::SharedCtor() {
to_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
balance_ = uint64_t{0u};
}

ConsensusToTxsItem::~ConsensusToTxsItem() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.ConsensusToTxsItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusToTxsItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.Destroy();
}

void ConsensusToTxsItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConsensusToTxsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.ConsensusToTxsItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    to_.ClearNonDefaultToEmpty();
  }
  balance_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusToTxsItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusToTxsItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.ConsensusToTxsItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes to = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_to(), target);
  }

  // optional uint64 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.ConsensusToTxsItem)
  return target;
}

size_t ConsensusToTxsItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.ConsensusToTxsItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes to = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_to());
    }

    // optional uint64 balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusToTxsItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConsensusToTxsItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusToTxsItem::GetClassData() const { return &_class_data_; }

void ConsensusToTxsItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConsensusToTxsItem *>(to)->MergeFrom(
      static_cast<const ConsensusToTxsItem &>(from));
}


void ConsensusToTxsItem::MergeFrom(const ConsensusToTxsItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.ConsensusToTxsItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_to(from._internal_to());
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusToTxsItem::CopyFrom(const ConsensusToTxsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.ConsensusToTxsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusToTxsItem::IsInitialized() const {
  return true;
}

void ConsensusToTxsItem::InternalSwap(ConsensusToTxsItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  swap(balance_, other->balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusToTxsItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[5]);
}

// ===================================================================

class ConsensusToTxs::_Internal {
 public:
};

ConsensusToTxs::ConsensusToTxs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.ConsensusToTxs)
}
ConsensusToTxs::ConsensusToTxs(const ConsensusToTxs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tos_(from.tos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.ConsensusToTxs)
}

inline void ConsensusToTxs::SharedCtor() {
}

ConsensusToTxs::~ConsensusToTxs() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.ConsensusToTxs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusToTxs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConsensusToTxs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConsensusToTxs::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.ConsensusToTxs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusToTxs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusToTxs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.ConsensusToTxs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tos_size()); i < n; i++) {
    const auto& repfield = this->_internal_tos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.ConsensusToTxs)
  return target;
}

size_t ConsensusToTxs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.ConsensusToTxs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
  total_size += 1UL * this->_internal_tos_size();
  for (const auto& msg : this->tos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusToTxs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConsensusToTxs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusToTxs::GetClassData() const { return &_class_data_; }

void ConsensusToTxs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConsensusToTxs *>(to)->MergeFrom(
      static_cast<const ConsensusToTxs &>(from));
}


void ConsensusToTxs::MergeFrom(const ConsensusToTxs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.ConsensusToTxs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tos_.MergeFrom(from.tos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusToTxs::CopyFrom(const ConsensusToTxs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.ConsensusToTxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusToTxs::IsInitialized() const {
  return true;
}

void ConsensusToTxs::InternalSwap(ConsensusToTxs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tos_.InternalSwap(&other->tos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusToTxs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[6]);
}

// ===================================================================

class GetTxBlockRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTxBlockRequest>()._has_bits_);
  static void set_has_tx_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_block_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_account_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GetTxBlockRequest::GetTxBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.GetTxBlockRequest)
}
GetTxBlockRequest::GetTxBlockRequest(const GetTxBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_gid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tx_gid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tx_gid()) {
    tx_gid_.Set(from._internal_tx_gid(), 
      GetArenaForAllocation());
  }
  block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_block_hash()) {
    block_hash_.Set(from._internal_block_hash(), 
      GetArenaForAllocation());
  }
  account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_address()) {
    account_address_.Set(from._internal_account_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&height_)) + sizeof(from_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.GetTxBlockRequest)
}

inline void GetTxBlockRequest::SharedCtor() {
tx_gid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tx_gid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
block_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  block_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&height_)) + sizeof(from_));
}

GetTxBlockRequest::~GetTxBlockRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.GetTxBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_gid_.Destroy();
  block_hash_.Destroy();
  account_address_.Destroy();
}

void GetTxBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTxBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.GetTxBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tx_gid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      block_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      account_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_) -
        reinterpret_cast<char*>(&height_)) + sizeof(from_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes tx_gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_gid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes account_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_account_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTxBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.GetTxBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes tx_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_gid(), target);
  }

  // optional bytes block_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_hash(), target);
  }

  // optional bool from = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_from(), target);
  }

  // optional uint64 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  // optional bytes account_address = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_account_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.GetTxBlockRequest)
  return target;
}

size_t GetTxBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.GetTxBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes tx_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tx_gid());
    }

    // optional bytes block_hash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_block_hash());
    }

    // optional bytes account_address = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_account_address());
    }

    // optional uint64 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

    // optional bool from = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTxBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxBlockRequest::GetClassData() const { return &_class_data_; }

void GetTxBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTxBlockRequest *>(to)->MergeFrom(
      static_cast<const GetTxBlockRequest &>(from));
}


void GetTxBlockRequest::MergeFrom(const GetTxBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.GetTxBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tx_gid(from._internal_tx_gid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_block_hash(from._internal_block_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_account_address(from._internal_account_address());
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxBlockRequest::CopyFrom(const GetTxBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.GetTxBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxBlockRequest::IsInitialized() const {
  return true;
}

void GetTxBlockRequest::InternalSwap(GetTxBlockRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tx_gid_, lhs_arena,
      &other->tx_gid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &block_hash_, lhs_arena,
      &other->block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_address_, lhs_arena,
      &other->account_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTxBlockRequest, from_)
      + sizeof(GetTxBlockRequest::from_)
      - PROTOBUF_FIELD_OFFSET(GetTxBlockRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[7]);
}

// ===================================================================

class GetTxBlockResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTxBlockResponse>()._has_bits_);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetTxBlockResponse::GetTxBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.GetTxBlockResponse)
}
GetTxBlockResponse::GetTxBlockResponse(const GetTxBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_block()) {
    block_.Set(from._internal_block(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.GetTxBlockResponse)
}

inline void GetTxBlockResponse::SharedCtor() {
block_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  block_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTxBlockResponse::~GetTxBlockResponse() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.GetTxBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_.Destroy();
}

void GetTxBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTxBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.GetTxBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    block_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTxBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.GetTxBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.GetTxBlockResponse)
  return target;
}

size_t GetTxBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.GetTxBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes block = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTxBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxBlockResponse::GetClassData() const { return &_class_data_; }

void GetTxBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTxBlockResponse *>(to)->MergeFrom(
      static_cast<const GetTxBlockResponse &>(from));
}


void GetTxBlockResponse::MergeFrom(const GetTxBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.GetTxBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_set_block(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxBlockResponse::CopyFrom(const GetTxBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.GetTxBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxBlockResponse::IsInitialized() const {
  return true;
}

void GetTxBlockResponse::InternalSwap(GetTxBlockResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &block_, lhs_arena,
      &other->block_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[8]);
}

// ===================================================================

class AccountHeightRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountHeightRequest>()._has_bits_);
  static void set_has_account_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AccountHeightRequest::AccountHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.AccountHeightRequest)
}
AccountHeightRequest::AccountHeightRequest(const AccountHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_addr()) {
    account_addr_.Set(from._internal_account_addr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.AccountHeightRequest)
}

inline void AccountHeightRequest::SharedCtor() {
account_addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&index_)) + sizeof(count_));
}

AccountHeightRequest::~AccountHeightRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.AccountHeightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_addr_.Destroy();
}

void AccountHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.AccountHeightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    account_addr_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&index_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountHeightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes account_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountHeightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.AccountHeightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account_addr(), target);
  }

  // optional int64 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_index(), target);
  }

  // optional int32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.AccountHeightRequest)
  return target;
}

size_t AccountHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.AccountHeightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes account_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_account_addr());
    }

    // optional int64 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
    }

    // optional int32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountHeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountHeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountHeightRequest::GetClassData() const { return &_class_data_; }

void AccountHeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountHeightRequest *>(to)->MergeFrom(
      static_cast<const AccountHeightRequest &>(from));
}


void AccountHeightRequest::MergeFrom(const AccountHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.AccountHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account_addr(from._internal_account_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountHeightRequest::CopyFrom(const AccountHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.AccountHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountHeightRequest::IsInitialized() const {
  return true;
}

void AccountHeightRequest::InternalSwap(AccountHeightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_addr_, lhs_arena,
      &other->account_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountHeightRequest, count_)
      + sizeof(AccountHeightRequest::count_)
      - PROTOBUF_FIELD_OFFSET(AccountHeightRequest, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountHeightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[9]);
}

// ===================================================================

class AccountHeightResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountHeightResponse>()._has_bits_);
  static void set_has_account_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AccountHeightResponse::AccountHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  heights_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.AccountHeightResponse)
}
AccountHeightResponse::AccountHeightResponse(const AccountHeightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      heights_(from.heights_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_addr()) {
    account_addr_.Set(from._internal_account_addr(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.AccountHeightResponse)
}

inline void AccountHeightResponse::SharedCtor() {
account_addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountHeightResponse::~AccountHeightResponse() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.AccountHeightResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountHeightResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_addr_.Destroy();
  type_.Destroy();
}

void AccountHeightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountHeightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.AccountHeightResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountHeightResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 heights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_heights(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes account_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountHeightResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.AccountHeightResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  for (int i = 0, n = this->_internal_heights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_heights(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes account_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account_addr(), target);
  }

  // optional bytes type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.AccountHeightResponse)
  return target;
}

size_t AccountHeightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.AccountHeightResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->heights_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_heights_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes account_addr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_account_addr());
    }

    // optional bytes type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountHeightResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountHeightResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountHeightResponse::GetClassData() const { return &_class_data_; }

void AccountHeightResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountHeightResponse *>(to)->MergeFrom(
      static_cast<const AccountHeightResponse &>(from));
}


void AccountHeightResponse::MergeFrom(const AccountHeightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.AccountHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account_addr(from._internal_account_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountHeightResponse::CopyFrom(const AccountHeightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.AccountHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountHeightResponse::IsInitialized() const {
  return true;
}

void AccountHeightResponse::InternalSwap(AccountHeightResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  heights_.InternalSwap(&other->heights_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_addr_, lhs_arena,
      &other->account_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountHeightResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[10]);
}

// ===================================================================

class AccountAttrRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountAttrRequest>()._has_bits_);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attr_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AccountAttrRequest::AccountAttrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.AccountAttrRequest)
}
AccountAttrRequest::AccountAttrRequest(const AccountAttrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  attr_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attr_key()) {
    attr_key_.Set(from._internal_attr_key(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.AccountAttrRequest)
}

inline void AccountAttrRequest::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
height_ = uint64_t{0u};
}

AccountAttrRequest::~AccountAttrRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.AccountAttrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountAttrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  attr_key_.Destroy();
}

void AccountAttrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountAttrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.AccountAttrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attr_key_.ClearNonDefaultToEmpty();
    }
  }
  height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountAttrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attr_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attr_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountAttrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.AccountAttrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_attr_key(), target);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.AccountAttrRequest)
  return target;
}

size_t AccountAttrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.AccountAttrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_account());
    }

    // optional bytes attr_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attr_key());
    }

    // optional uint64 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountAttrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountAttrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountAttrRequest::GetClassData() const { return &_class_data_; }

void AccountAttrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountAttrRequest *>(to)->MergeFrom(
      static_cast<const AccountAttrRequest &>(from));
}


void AccountAttrRequest::MergeFrom(const AccountAttrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.AccountAttrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account(from._internal_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_attr_key(from._internal_attr_key());
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountAttrRequest::CopyFrom(const AccountAttrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.AccountAttrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAttrRequest::IsInitialized() const {
  return true;
}

void AccountAttrRequest::InternalSwap(AccountAttrRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &attr_key_, lhs_arena,
      &other->attr_key_, rhs_arena
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountAttrRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[11]);
}

// ===================================================================

class AccountAttrResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountAttrResponse>()._has_bits_);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attr_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AccountAttrResponse::AccountAttrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.AccountAttrResponse)
}
AccountAttrResponse::AccountAttrResponse(const AccountAttrResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  attr_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attr_key()) {
    attr_key_.Set(from._internal_attr_key(), 
      GetArenaForAllocation());
  }
  block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_block()) {
    block_.Set(from._internal_block(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.AccountAttrResponse)
}

inline void AccountAttrResponse::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
block_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  block_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
height_ = uint64_t{0u};
}

AccountAttrResponse::~AccountAttrResponse() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.AccountAttrResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountAttrResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  attr_key_.Destroy();
  block_.Destroy();
}

void AccountAttrResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountAttrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.AccountAttrResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attr_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      block_.ClearNonDefaultToEmpty();
    }
  }
  height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountAttrResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attr_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attr_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountAttrResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.AccountAttrResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_attr_key(), target);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // optional bytes block = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.AccountAttrResponse)
  return target;
}

size_t AccountAttrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.AccountAttrResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_account());
    }

    // optional bytes attr_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attr_key());
    }

    // optional bytes block = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_block());
    }

    // optional uint64 height = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountAttrResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountAttrResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountAttrResponse::GetClassData() const { return &_class_data_; }

void AccountAttrResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountAttrResponse *>(to)->MergeFrom(
      static_cast<const AccountAttrResponse &>(from));
}


void AccountAttrResponse::MergeFrom(const AccountAttrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.AccountAttrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account(from._internal_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_attr_key(from._internal_attr_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_block(from._internal_block());
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountAttrResponse::CopyFrom(const AccountAttrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.AccountAttrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAttrResponse::IsInitialized() const {
  return true;
}

void AccountAttrResponse::InternalSwap(AccountAttrResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &attr_key_, lhs_arena,
      &other->attr_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &block_, lhs_arena,
      &other->block_, rhs_arena
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountAttrResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[12]);
}

// ===================================================================

class UpdateVpnCountRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateVpnCountRequest>()._has_bits_);
  static void set_has_account_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_just_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

UpdateVpnCountRequest::UpdateVpnCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.UpdateVpnCountRequest)
}
UpdateVpnCountRequest::UpdateVpnCountRequest(const UpdateVpnCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  old_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    old_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_ip()) {
    old_ip_.Set(from._internal_old_ip(), 
      GetArenaForAllocation());
  }
  uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uid()) {
    uid_.Set(from._internal_uid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_hash_, &from.account_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&just_set_) -
    reinterpret_cast<char*>(&account_hash_)) + sizeof(just_set_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.UpdateVpnCountRequest)
}

inline void UpdateVpnCountRequest::SharedCtor() {
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
old_ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  old_ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&just_set_) -
    reinterpret_cast<char*>(&account_hash_)) + sizeof(just_set_));
}

UpdateVpnCountRequest::~UpdateVpnCountRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.UpdateVpnCountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateVpnCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.Destroy();
  old_ip_.Destroy();
  uid_.Destroy();
}

void UpdateVpnCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVpnCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.UpdateVpnCountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      old_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      uid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&account_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&just_set_) -
        reinterpret_cast<char*>(&account_hash_)) + sizeof(just_set_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVpnCountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 account_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_hash(&has_bits);
          account_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes old_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_old_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool just_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_just_set(&has_bits);
          just_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateVpnCountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.UpdateVpnCountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account_hash = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account_hash(), target);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional bytes old_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_old_ip(), target);
  }

  // optional bytes uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_uid(), target);
  }

  // optional bool just_set = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_just_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.UpdateVpnCountRequest)
  return target;
}

size_t UpdateVpnCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.UpdateVpnCountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ip());
    }

    // optional bytes old_ip = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_old_ip());
    }

    // optional bytes uid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uid());
    }

    // optional uint64 account_hash = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_account_hash());
    }

    // optional bool just_set = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVpnCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVpnCountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVpnCountRequest::GetClassData() const { return &_class_data_; }

void UpdateVpnCountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateVpnCountRequest *>(to)->MergeFrom(
      static_cast<const UpdateVpnCountRequest &>(from));
}


void UpdateVpnCountRequest::MergeFrom(const UpdateVpnCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.UpdateVpnCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_old_ip(from._internal_old_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_uid(from._internal_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      account_hash_ = from.account_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      just_set_ = from.just_set_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVpnCountRequest::CopyFrom(const UpdateVpnCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.UpdateVpnCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnCountRequest::IsInitialized() const {
  return true;
}

void UpdateVpnCountRequest::InternalSwap(UpdateVpnCountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &old_ip_, lhs_arena,
      &other->old_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uid_, lhs_arena,
      &other->uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateVpnCountRequest, just_set_)
      + sizeof(UpdateVpnCountRequest::just_set_)
      - PROTOBUF_FIELD_OFFSET(UpdateVpnCountRequest, account_hash_)>(
          reinterpret_cast<char*>(&account_hash_),
          reinterpret_cast<char*>(&other->account_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVpnCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[13]);
}

// ===================================================================

class VpnCountItem::_Internal {
 public:
  using HasBits = decltype(std::declval<VpnCountItem>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VpnCountItem::VpnCountItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.VpnCountItem)
}
VpnCountItem::VpnCountItem(const VpnCountItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.VpnCountItem)
}

inline void VpnCountItem::SharedCtor() {
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = 0u;
}

VpnCountItem::~VpnCountItem() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.VpnCountItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VpnCountItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.Destroy();
}

void VpnCountItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VpnCountItem::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.VpnCountItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmpty();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VpnCountItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VpnCountItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.VpnCountItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.VpnCountItem)
  return target;
}

size_t VpnCountItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.VpnCountItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ip());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VpnCountItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VpnCountItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VpnCountItem::GetClassData() const { return &_class_data_; }

void VpnCountItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VpnCountItem *>(to)->MergeFrom(
      static_cast<const VpnCountItem &>(from));
}


void VpnCountItem::MergeFrom(const VpnCountItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.VpnCountItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VpnCountItem::CopyFrom(const VpnCountItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.VpnCountItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpnCountItem::IsInitialized() const {
  return true;
}

void VpnCountItem::InternalSwap(VpnCountItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VpnCountItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[14]);
}

// ===================================================================

class UpdateVpnCountResponse::_Internal {
 public:
};

UpdateVpnCountResponse::UpdateVpnCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vpn_nodes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.UpdateVpnCountResponse)
}
UpdateVpnCountResponse::UpdateVpnCountResponse(const UpdateVpnCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vpn_nodes_(from.vpn_nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.UpdateVpnCountResponse)
}

inline void UpdateVpnCountResponse::SharedCtor() {
}

UpdateVpnCountResponse::~UpdateVpnCountResponse() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.UpdateVpnCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateVpnCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateVpnCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVpnCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.UpdateVpnCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vpn_nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVpnCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vpn_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateVpnCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.UpdateVpnCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vpn_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_vpn_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.UpdateVpnCountResponse)
  return target;
}

size_t UpdateVpnCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.UpdateVpnCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
  total_size += 1UL * this->_internal_vpn_nodes_size();
  for (const auto& msg : this->vpn_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVpnCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVpnCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVpnCountResponse::GetClassData() const { return &_class_data_; }

void UpdateVpnCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateVpnCountResponse *>(to)->MergeFrom(
      static_cast<const UpdateVpnCountResponse &>(from));
}


void UpdateVpnCountResponse::MergeFrom(const UpdateVpnCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.UpdateVpnCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vpn_nodes_.MergeFrom(from.vpn_nodes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVpnCountResponse::CopyFrom(const UpdateVpnCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.UpdateVpnCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnCountResponse::IsInitialized() const {
  return true;
}

void UpdateVpnCountResponse::InternalSwap(UpdateVpnCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vpn_nodes_.InternalSwap(&other->vpn_nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVpnCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[15]);
}

// ===================================================================

class GetAccountInitInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccountInitInfoRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_net_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GetAccountInitInfoRequest::GetAccountInitInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.GetAccountInitInfoRequest)
}
GetAccountInitInfoRequest::GetAccountInitInfoRequest(const GetAccountInitInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&height_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.GetAccountInitInfoRequest)
}

inline void GetAccountInitInfoRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&height_)) + sizeof(count_));
}

GetAccountInitInfoRequest::~GetAccountInitInfoRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.GetAccountInitInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountInitInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void GetAccountInitInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountInitInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.GetAccountInitInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&height_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountInitInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 net_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_net_id(&has_bits);
          net_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountInitInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.GetAccountInitInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // optional uint64 net_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_net_id(), target);
  }

  // optional uint64 index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.GetAccountInitInfoRequest)
  return target;
}

size_t GetAccountInitInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.GetAccountInitInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional uint64 height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

    // optional uint64 net_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_net_id());
    }

    // optional uint64 index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountInitInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountInitInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountInitInfoRequest::GetClassData() const { return &_class_data_; }

void GetAccountInitInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountInitInfoRequest *>(to)->MergeFrom(
      static_cast<const GetAccountInitInfoRequest &>(from));
}


void GetAccountInitInfoRequest::MergeFrom(const GetAccountInitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.GetAccountInitInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      net_id_ = from.net_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountInitInfoRequest::CopyFrom(const GetAccountInitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.GetAccountInitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInitInfoRequest::IsInitialized() const {
  return true;
}

void GetAccountInitInfoRequest::InternalSwap(GetAccountInitInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccountInitInfoRequest, count_)
      + sizeof(GetAccountInitInfoRequest::count_)
      - PROTOBUF_FIELD_OFFSET(GetAccountInitInfoRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountInitInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[16]);
}

// ===================================================================

class GetAccountInitInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccountInitInfoResponse>()._has_bits_);
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GetAccountInitInfoResponse::GetAccountInitInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.GetAccountInitInfoResponse)
}
GetAccountInitInfoResponse::GetAccountInitInfoResponse(const GetAccountInitInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      block_list_(from.block_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_index_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(max_index_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.GetAccountInitInfoResponse)
}

inline void GetAccountInitInfoResponse::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_index_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(max_index_));
}

GetAccountInitInfoResponse::~GetAccountInitInfoResponse() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.GetAccountInitInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountInitInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void GetAccountInitInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountInitInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.GetAccountInitInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&balance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_index_) -
        reinterpret_cast<char*>(&balance_)) + sizeof(max_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountInitInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.block.protobuf.Block block_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_index(&has_bits);
          max_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountInitInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.GetAccountInitInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 balance = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_balance(), target);
  }

  // repeated .zjchain.block.protobuf.Block block_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_block_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_block_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional uint64 max_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_max_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.GetAccountInitInfoResponse)
  return target;
}

size_t GetAccountInitInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.GetAccountInitInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.Block block_list = 2;
  total_size += 1UL * this->_internal_block_list_size();
  for (const auto& msg : this->block_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional uint64 balance = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
    }

    // optional uint64 max_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountInitInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountInitInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountInitInfoResponse::GetClassData() const { return &_class_data_; }

void GetAccountInitInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountInitInfoResponse *>(to)->MergeFrom(
      static_cast<const GetAccountInitInfoResponse &>(from));
}


void GetAccountInitInfoResponse::MergeFrom(const GetAccountInitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.GetAccountInitInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  block_list_.MergeFrom(from.block_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_index_ = from.max_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountInitInfoResponse::CopyFrom(const GetAccountInitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.GetAccountInitInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInitInfoResponse::IsInitialized() const {
  return true;
}

void GetAccountInitInfoResponse::InternalSwap(GetAccountInitInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  block_list_.InternalSwap(&other->block_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccountInitInfoResponse, max_index_)
      + sizeof(GetAccountInitInfoResponse::max_index_)
      - PROTOBUF_FIELD_OFFSET(GetAccountInitInfoResponse, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountInitInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[17]);
}

// ===================================================================

class UpdateVpnActiveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateVpnActiveRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UpdateVpnActiveRequest::UpdateVpnActiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.UpdateVpnActiveRequest)
}
UpdateVpnActiveRequest::UpdateVpnActiveRequest(const UpdateVpnActiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.UpdateVpnActiveRequest)
}

inline void UpdateVpnActiveRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateVpnActiveRequest::~UpdateVpnActiveRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.UpdateVpnActiveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateVpnActiveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  ip_.Destroy();
}

void UpdateVpnActiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVpnActiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.UpdateVpnActiveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVpnActiveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateVpnActiveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.UpdateVpnActiveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.UpdateVpnActiveRequest)
  return target;
}

size_t UpdateVpnActiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.UpdateVpnActiveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional bytes ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ip());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVpnActiveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVpnActiveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVpnActiveRequest::GetClassData() const { return &_class_data_; }

void UpdateVpnActiveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateVpnActiveRequest *>(to)->MergeFrom(
      static_cast<const UpdateVpnActiveRequest &>(from));
}


void UpdateVpnActiveRequest::MergeFrom(const UpdateVpnActiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.UpdateVpnActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVpnActiveRequest::CopyFrom(const UpdateVpnActiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.UpdateVpnActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnActiveRequest::IsInitialized() const {
  return true;
}

void UpdateVpnActiveRequest::InternalSwap(UpdateVpnActiveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVpnActiveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[18]);
}

// ===================================================================

class AdRewardRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AdRewardRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reward_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AdRewardRequest::AdRewardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.AdRewardRequest)
}
AdRewardRequest::AdRewardRequest(const AdRewardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  reward_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reward_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reward_key()) {
    reward_key_.Set(from._internal_reward_key(), 
      GetArenaForAllocation());
  }
  gid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gid()) {
    gid_.Set(from._internal_gid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.AdRewardRequest)
}

inline void AdRewardRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reward_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reward_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdRewardRequest::~AdRewardRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.AdRewardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdRewardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  reward_key_.Destroy();
  gid_.Destroy();
}

void AdRewardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdRewardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.AdRewardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reward_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      gid_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdRewardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes reward_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reward_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes gid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdRewardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.AdRewardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional bytes reward_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_reward_key(), target);
  }

  // optional bytes gid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.AdRewardRequest)
  return target;
}

size_t AdRewardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.AdRewardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional bytes reward_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reward_key());
    }

    // optional bytes gid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdRewardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdRewardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdRewardRequest::GetClassData() const { return &_class_data_; }

void AdRewardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdRewardRequest *>(to)->MergeFrom(
      static_cast<const AdRewardRequest &>(from));
}


void AdRewardRequest::MergeFrom(const AdRewardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.AdRewardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reward_key(from._internal_reward_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_gid(from._internal_gid());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdRewardRequest::CopyFrom(const AdRewardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.AdRewardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdRewardRequest::IsInitialized() const {
  return true;
}

void AdRewardRequest::InternalSwap(AdRewardRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reward_key_, lhs_arena,
      &other->reward_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &gid_, lhs_arena,
      &other->gid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AdRewardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[19]);
}

// ===================================================================

class ElectStatisticInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ElectStatisticInfo>()._has_bits_);
  static void set_has_elect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ElectStatisticInfo::ElectStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  succ_tx_count_(arena),
  lof_leaders_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.ElectStatisticInfo)
}
ElectStatisticInfo::ElectStatisticInfo(const ElectStatisticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      succ_tx_count_(from.succ_tx_count_),
      lof_leaders_(from.lof_leaders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  elect_height_ = from.elect_height_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.ElectStatisticInfo)
}

inline void ElectStatisticInfo::SharedCtor() {
elect_height_ = uint64_t{0u};
}

ElectStatisticInfo::~ElectStatisticInfo() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.ElectStatisticInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElectStatisticInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ElectStatisticInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElectStatisticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.ElectStatisticInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succ_tx_count_.Clear();
  lof_leaders_.Clear();
  elect_height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectStatisticInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 elect_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_elect_height(&has_bits);
          elect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 succ_tx_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_succ_tx_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_succ_tx_count(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 lof_leaders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_lof_leaders(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lof_leaders(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElectStatisticInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.ElectStatisticInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 elect_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_elect_height(), target);
  }

  // repeated uint32 succ_tx_count = 2;
  for (int i = 0, n = this->_internal_succ_tx_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_succ_tx_count(i), target);
  }

  // repeated uint32 lof_leaders = 3;
  for (int i = 0, n = this->_internal_lof_leaders_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lof_leaders(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.ElectStatisticInfo)
  return target;
}

size_t ElectStatisticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.ElectStatisticInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 succ_tx_count = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->succ_tx_count_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_succ_tx_count_size());
    total_size += data_size;
  }

  // repeated uint32 lof_leaders = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->lof_leaders_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_lof_leaders_size());
    total_size += data_size;
  }

  // optional uint64 elect_height = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elect_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElectStatisticInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ElectStatisticInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElectStatisticInfo::GetClassData() const { return &_class_data_; }

void ElectStatisticInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ElectStatisticInfo *>(to)->MergeFrom(
      static_cast<const ElectStatisticInfo &>(from));
}


void ElectStatisticInfo::MergeFrom(const ElectStatisticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.ElectStatisticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  succ_tx_count_.MergeFrom(from.succ_tx_count_);
  lof_leaders_.MergeFrom(from.lof_leaders_);
  if (from._internal_has_elect_height()) {
    _internal_set_elect_height(from._internal_elect_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElectStatisticInfo::CopyFrom(const ElectStatisticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.ElectStatisticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectStatisticInfo::IsInitialized() const {
  return true;
}

void ElectStatisticInfo::InternalSwap(ElectStatisticInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  succ_tx_count_.InternalSwap(&other->succ_tx_count_);
  lof_leaders_.InternalSwap(&other->lof_leaders_);
  swap(elect_height_, other->elect_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectStatisticInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[20]);
}

// ===================================================================

class StatisticInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<StatisticInfo>()._has_bits_);
  static void set_has_timeblock_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_all_tx_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StatisticInfo::StatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  elect_statistic_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.StatisticInfo)
}
StatisticInfo::StatisticInfo(const StatisticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elect_statistic_(from.elect_statistic_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timeblock_height_, &from.timeblock_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_tx_count_) -
    reinterpret_cast<char*>(&timeblock_height_)) + sizeof(all_tx_count_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.StatisticInfo)
}

inline void StatisticInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timeblock_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&all_tx_count_) -
    reinterpret_cast<char*>(&timeblock_height_)) + sizeof(all_tx_count_));
}

StatisticInfo::~StatisticInfo() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.StatisticInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatisticInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatisticInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatisticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.StatisticInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elect_statistic_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timeblock_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&all_tx_count_) -
        reinterpret_cast<char*>(&timeblock_height_)) + sizeof(all_tx_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 timeblock_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timeblock_height(&has_bits);
          timeblock_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 all_tx_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_all_tx_count(&has_bits);
          all_tx_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elect_statistic(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatisticInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.StatisticInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timeblock_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timeblock_height(), target);
  }

  // optional uint32 all_tx_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_all_tx_count(), target);
  }

  // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elect_statistic_size()); i < n; i++) {
    const auto& repfield = this->_internal_elect_statistic(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.StatisticInfo)
  return target;
}

size_t StatisticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.StatisticInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  total_size += 1UL * this->_internal_elect_statistic_size();
  for (const auto& msg : this->elect_statistic_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 timeblock_height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeblock_height());
    }

    // optional uint32 all_tx_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_all_tx_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatisticInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticInfo::GetClassData() const { return &_class_data_; }

void StatisticInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatisticInfo *>(to)->MergeFrom(
      static_cast<const StatisticInfo &>(from));
}


void StatisticInfo::MergeFrom(const StatisticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.StatisticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  elect_statistic_.MergeFrom(from.elect_statistic_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeblock_height_ = from.timeblock_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      all_tx_count_ = from.all_tx_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticInfo::CopyFrom(const StatisticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.StatisticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticInfo::IsInitialized() const {
  return true;
}

void StatisticInfo::InternalSwap(StatisticInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elect_statistic_.InternalSwap(&other->elect_statistic_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatisticInfo, all_tx_count_)
      + sizeof(StatisticInfo::all_tx_count_)
      - PROTOBUF_FIELD_OFFSET(StatisticInfo, timeblock_height_)>(
          reinterpret_cast<char*>(&timeblock_height_),
          reinterpret_cast<char*>(&other->timeblock_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[21]);
}

// ===================================================================

class RefreshPoolHeightRequest::_Internal {
 public:
};

RefreshPoolHeightRequest::RefreshPoolHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  heights_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.RefreshPoolHeightRequest)
}
RefreshPoolHeightRequest::RefreshPoolHeightRequest(const RefreshPoolHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heights_(from.heights_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.RefreshPoolHeightRequest)
}

inline void RefreshPoolHeightRequest::SharedCtor() {
}

RefreshPoolHeightRequest::~RefreshPoolHeightRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.RefreshPoolHeightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RefreshPoolHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RefreshPoolHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RefreshPoolHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.RefreshPoolHeightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshPoolHeightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 heights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_heights(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefreshPoolHeightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.RefreshPoolHeightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  for (int i = 0, n = this->_internal_heights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_heights(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.RefreshPoolHeightRequest)
  return target;
}

size_t RefreshPoolHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.RefreshPoolHeightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->heights_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_heights_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefreshPoolHeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RefreshPoolHeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefreshPoolHeightRequest::GetClassData() const { return &_class_data_; }

void RefreshPoolHeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RefreshPoolHeightRequest *>(to)->MergeFrom(
      static_cast<const RefreshPoolHeightRequest &>(from));
}


void RefreshPoolHeightRequest::MergeFrom(const RefreshPoolHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.RefreshPoolHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshPoolHeightRequest::CopyFrom(const RefreshPoolHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.RefreshPoolHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshPoolHeightRequest::IsInitialized() const {
  return true;
}

void RefreshPoolHeightRequest::InternalSwap(RefreshPoolHeightRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  heights_.InternalSwap(&other->heights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshPoolHeightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[22]);
}

// ===================================================================

class RefreshPoolHeightResponse::_Internal {
 public:
};

RefreshPoolHeightResponse::RefreshPoolHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  heights_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.RefreshPoolHeightResponse)
}
RefreshPoolHeightResponse::RefreshPoolHeightResponse(const RefreshPoolHeightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heights_(from.heights_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.RefreshPoolHeightResponse)
}

inline void RefreshPoolHeightResponse::SharedCtor() {
}

RefreshPoolHeightResponse::~RefreshPoolHeightResponse() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.RefreshPoolHeightResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RefreshPoolHeightResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RefreshPoolHeightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RefreshPoolHeightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.RefreshPoolHeightResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshPoolHeightResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 heights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_heights(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RefreshPoolHeightResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.RefreshPoolHeightResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  for (int i = 0, n = this->_internal_heights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_heights(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.RefreshPoolHeightResponse)
  return target;
}

size_t RefreshPoolHeightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.RefreshPoolHeightResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->heights_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_heights_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RefreshPoolHeightResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RefreshPoolHeightResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RefreshPoolHeightResponse::GetClassData() const { return &_class_data_; }

void RefreshPoolHeightResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RefreshPoolHeightResponse *>(to)->MergeFrom(
      static_cast<const RefreshPoolHeightResponse &>(from));
}


void RefreshPoolHeightResponse::MergeFrom(const RefreshPoolHeightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.RefreshPoolHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshPoolHeightResponse::CopyFrom(const RefreshPoolHeightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.RefreshPoolHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshPoolHeightResponse::IsInitialized() const {
  return true;
}

void RefreshPoolHeightResponse::InternalSwap(RefreshPoolHeightResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  heights_.InternalSwap(&other->heights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshPoolHeightResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[23]);
}

// ===================================================================

class GetAccountShardRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccountShardRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAccountShardRequest::GetAccountShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.GetAccountShardRequest)
}
GetAccountShardRequest::GetAccountShardRequest(const GetAccountShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.GetAccountShardRequest)
}

inline void GetAccountShardRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccountShardRequest::~GetAccountShardRequest() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.GetAccountShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void GetAccountShardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.GetAccountShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.GetAccountShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.GetAccountShardRequest)
  return target;
}

size_t GetAccountShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.GetAccountShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountShardRequest::GetClassData() const { return &_class_data_; }

void GetAccountShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountShardRequest *>(to)->MergeFrom(
      static_cast<const GetAccountShardRequest &>(from));
}


void GetAccountShardRequest::MergeFrom(const GetAccountShardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.GetAccountShardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountShardRequest::CopyFrom(const GetAccountShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.GetAccountShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountShardRequest::IsInitialized() const {
  return true;
}

void GetAccountShardRequest::InternalSwap(GetAccountShardRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[24]);
}

// ===================================================================

class GetAccountShardReponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccountShardReponse>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shard_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetAccountShardReponse::GetAccountShardReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.GetAccountShardReponse)
}
GetAccountShardReponse::GetAccountShardReponse(const GetAccountShardReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.GetAccountShardReponse)
}

inline void GetAccountShardReponse::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
shard_id_ = 0u;
}

GetAccountShardReponse::~GetAccountShardReponse() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.GetAccountShardReponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountShardReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void GetAccountShardReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountShardReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.GetAccountShardReponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  shard_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountShardReponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shard_id(&has_bits);
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountShardReponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.GetAccountShardReponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 shard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.GetAccountShardReponse)
  return target;
}

size_t GetAccountShardReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.GetAccountShardReponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional uint32 shard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shard_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountShardReponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAccountShardReponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountShardReponse::GetClassData() const { return &_class_data_; }

void GetAccountShardReponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAccountShardReponse *>(to)->MergeFrom(
      static_cast<const GetAccountShardReponse &>(from));
}


void GetAccountShardReponse::MergeFrom(const GetAccountShardReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.GetAccountShardReponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      shard_id_ = from.shard_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountShardReponse::CopyFrom(const GetAccountShardReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.GetAccountShardReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountShardReponse::IsInitialized() const {
  return true;
}

void GetAccountShardReponse::InternalSwap(GetAccountShardReponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(shard_id_, other->shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountShardReponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[25]);
}

// ===================================================================

class CrossShardingTosMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CrossShardingTosMessage>()._has_bits_);
  static const ::zjchain::block::protobuf::Block& block(const CrossShardingTosMessage* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zjchain::block::protobuf::Block&
CrossShardingTosMessage::_Internal::block(const CrossShardingTosMessage* msg) {
  return *msg->block_;
}
CrossShardingTosMessage::CrossShardingTosMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.CrossShardingTosMessage)
}
CrossShardingTosMessage::CrossShardingTosMessage(const CrossShardingTosMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::zjchain::block::protobuf::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.CrossShardingTosMessage)
}

inline void CrossShardingTosMessage::SharedCtor() {
block_ = nullptr;
}

CrossShardingTosMessage::~CrossShardingTosMessage() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.CrossShardingTosMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossShardingTosMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void CrossShardingTosMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrossShardingTosMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.CrossShardingTosMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossShardingTosMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossShardingTosMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.CrossShardingTosMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.CrossShardingTosMessage)
  return target;
}

size_t CrossShardingTosMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.CrossShardingTosMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zjchain.block.protobuf.Block block = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossShardingTosMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CrossShardingTosMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossShardingTosMessage::GetClassData() const { return &_class_data_; }

void CrossShardingTosMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CrossShardingTosMessage *>(to)->MergeFrom(
      static_cast<const CrossShardingTosMessage &>(from));
}


void CrossShardingTosMessage::MergeFrom(const CrossShardingTosMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.CrossShardingTosMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossShardingTosMessage::CopyFrom(const CrossShardingTosMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.CrossShardingTosMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossShardingTosMessage::IsInitialized() const {
  return true;
}

void CrossShardingTosMessage::InternalSwap(CrossShardingTosMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossShardingTosMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[26]);
}

// ===================================================================

class CrossShardingStatisticMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CrossShardingStatisticMessage>()._has_bits_);
  static const ::zjchain::block::protobuf::Block& block(const CrossShardingStatisticMessage* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zjchain::block::protobuf::Block&
CrossShardingStatisticMessage::_Internal::block(const CrossShardingStatisticMessage* msg) {
  return *msg->block_;
}
CrossShardingStatisticMessage::CrossShardingStatisticMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.CrossShardingStatisticMessage)
}
CrossShardingStatisticMessage::CrossShardingStatisticMessage(const CrossShardingStatisticMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::zjchain::block::protobuf::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.CrossShardingStatisticMessage)
}

inline void CrossShardingStatisticMessage::SharedCtor() {
block_ = nullptr;
}

CrossShardingStatisticMessage::~CrossShardingStatisticMessage() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.CrossShardingStatisticMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossShardingStatisticMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void CrossShardingStatisticMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrossShardingStatisticMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.CrossShardingStatisticMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossShardingStatisticMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossShardingStatisticMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.CrossShardingStatisticMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.CrossShardingStatisticMessage)
  return target;
}

size_t CrossShardingStatisticMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.CrossShardingStatisticMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zjchain.block.protobuf.Block block = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossShardingStatisticMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CrossShardingStatisticMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossShardingStatisticMessage::GetClassData() const { return &_class_data_; }

void CrossShardingStatisticMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CrossShardingStatisticMessage *>(to)->MergeFrom(
      static_cast<const CrossShardingStatisticMessage &>(from));
}


void CrossShardingStatisticMessage::MergeFrom(const CrossShardingStatisticMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.CrossShardingStatisticMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossShardingStatisticMessage::CopyFrom(const CrossShardingStatisticMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.CrossShardingStatisticMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossShardingStatisticMessage::IsInitialized() const {
  return true;
}

void CrossShardingStatisticMessage::InternalSwap(CrossShardingStatisticMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossShardingStatisticMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[27]);
}

// ===================================================================

class ElectBlockMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ElectBlockMessage>()._has_bits_);
  static const ::zjchain::block::protobuf::Block& block(const ElectBlockMessage* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zjchain::block::protobuf::Block&
ElectBlockMessage::_Internal::block(const ElectBlockMessage* msg) {
  return *msg->block_;
}
ElectBlockMessage::ElectBlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.ElectBlockMessage)
}
ElectBlockMessage::ElectBlockMessage(const ElectBlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::zjchain::block::protobuf::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.ElectBlockMessage)
}

inline void ElectBlockMessage::SharedCtor() {
block_ = nullptr;
}

ElectBlockMessage::~ElectBlockMessage() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.ElectBlockMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElectBlockMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void ElectBlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElectBlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.ElectBlockMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectBlockMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElectBlockMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.ElectBlockMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.ElectBlockMessage)
  return target;
}

size_t ElectBlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.ElectBlockMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zjchain.block.protobuf.Block block = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElectBlockMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ElectBlockMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElectBlockMessage::GetClassData() const { return &_class_data_; }

void ElectBlockMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ElectBlockMessage *>(to)->MergeFrom(
      static_cast<const ElectBlockMessage &>(from));
}


void ElectBlockMessage::MergeFrom(const ElectBlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.ElectBlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElectBlockMessage::CopyFrom(const ElectBlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.ElectBlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectBlockMessage::IsInitialized() const {
  return true;
}

void ElectBlockMessage::InternalSwap(ElectBlockMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectBlockMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[28]);
}

// ===================================================================

class ShardToTxMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ShardToTxMessage>()._has_bits_);
  static void set_has_leader_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_elect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leader_to_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void ShardToTxMessage::clear_to_txs() {
  to_txs_.Clear();
}
ShardToTxMessage::ShardToTxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  to_txs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.ShardToTxMessage)
}
ShardToTxMessage::ShardToTxMessage(const ShardToTxMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      to_txs_(from.to_txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&elect_height_, &from.elect_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_to_idx_) -
    reinterpret_cast<char*>(&elect_height_)) + sizeof(leader_to_idx_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.ShardToTxMessage)
}

inline void ShardToTxMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&elect_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leader_to_idx_) -
    reinterpret_cast<char*>(&elect_height_)) + sizeof(leader_to_idx_));
}

ShardToTxMessage::~ShardToTxMessage() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.ShardToTxMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardToTxMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardToTxMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShardToTxMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.ShardToTxMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_txs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&elect_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_to_idx_) -
        reinterpret_cast<char*>(&elect_height_)) + sizeof(leader_to_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardToTxMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_to_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leader_idx(&has_bits);
          leader_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 elect_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elect_height(&has_bits);
          elect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leader_to_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_leader_to_idx(&has_bits);
          leader_to_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardToTxMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.ShardToTxMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_to_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_to_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 leader_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leader_idx(), target);
  }

  // optional uint64 elect_height = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_elect_height(), target);
  }

  // optional int32 leader_to_idx = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_leader_to_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.ShardToTxMessage)
  return target;
}

size_t ShardToTxMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.ShardToTxMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
  total_size += 1UL * this->_internal_to_txs_size();
  for (const auto& msg : this->to_txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 elect_height = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elect_height());
    }

    // optional uint32 leader_idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_idx());
    }

    // optional int32 leader_to_idx = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leader_to_idx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardToTxMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShardToTxMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardToTxMessage::GetClassData() const { return &_class_data_; }

void ShardToTxMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShardToTxMessage *>(to)->MergeFrom(
      static_cast<const ShardToTxMessage &>(from));
}


void ShardToTxMessage::MergeFrom(const ShardToTxMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.ShardToTxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  to_txs_.MergeFrom(from.to_txs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      elect_height_ = from.elect_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      leader_idx_ = from.leader_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      leader_to_idx_ = from.leader_to_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardToTxMessage::CopyFrom(const ShardToTxMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.ShardToTxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardToTxMessage::IsInitialized() const {
  return true;
}

void ShardToTxMessage::InternalSwap(ShardToTxMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_txs_.InternalSwap(&other->to_txs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardToTxMessage, leader_to_idx_)
      + sizeof(ShardToTxMessage::leader_to_idx_)
      - PROTOBUF_FIELD_OFFSET(ShardToTxMessage, elect_height_)>(
          reinterpret_cast<char*>(&elect_height_),
          reinterpret_cast<char*>(&other->elect_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardToTxMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[29]);
}

// ===================================================================

class StatisticTxMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StatisticTxMessage>()._has_bits_);
  static const ::zjchain::pools::protobuf::StatisticTxItem& statistic(const StatisticTxMessage* msg);
  static void set_has_statistic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leader_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_elect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leader_to_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zjchain::pools::protobuf::StatisticTxItem&
StatisticTxMessage::_Internal::statistic(const StatisticTxMessage* msg) {
  return *msg->statistic_;
}
void StatisticTxMessage::clear_statistic() {
  if (statistic_ != nullptr) statistic_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StatisticTxMessage::StatisticTxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.StatisticTxMessage)
}
StatisticTxMessage::StatisticTxMessage(const StatisticTxMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statistic()) {
    statistic_ = new ::zjchain::pools::protobuf::StatisticTxItem(*from.statistic_);
  } else {
    statistic_ = nullptr;
  }
  ::memcpy(&elect_height_, &from.elect_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_to_idx_) -
    reinterpret_cast<char*>(&elect_height_)) + sizeof(leader_to_idx_));
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.StatisticTxMessage)
}

inline void StatisticTxMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statistic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leader_to_idx_) -
    reinterpret_cast<char*>(&statistic_)) + sizeof(leader_to_idx_));
}

StatisticTxMessage::~StatisticTxMessage() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.StatisticTxMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatisticTxMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete statistic_;
}

void StatisticTxMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatisticTxMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.StatisticTxMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(statistic_ != nullptr);
    statistic_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&elect_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_to_idx_) -
        reinterpret_cast<char*>(&elect_height_)) + sizeof(leader_to_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticTxMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leader_idx(&has_bits);
          leader_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 elect_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elect_height(&has_bits);
          elect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leader_to_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_leader_to_idx(&has_bits);
          leader_to_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatisticTxMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.StatisticTxMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::statistic(this),
        _Internal::statistic(this).GetCachedSize(), target, stream);
  }

  // optional uint32 leader_idx = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leader_idx(), target);
  }

  // optional uint64 elect_height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_elect_height(), target);
  }

  // optional int32 leader_to_idx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_leader_to_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.StatisticTxMessage)
  return target;
}

size_t StatisticTxMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.StatisticTxMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statistic_);
    }

    // optional uint64 elect_height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elect_height());
    }

    // optional uint32 leader_idx = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_idx());
    }

    // optional int32 leader_to_idx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leader_to_idx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticTxMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatisticTxMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticTxMessage::GetClassData() const { return &_class_data_; }

void StatisticTxMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatisticTxMessage *>(to)->MergeFrom(
      static_cast<const StatisticTxMessage &>(from));
}


void StatisticTxMessage::MergeFrom(const StatisticTxMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.StatisticTxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_statistic()->::zjchain::pools::protobuf::StatisticTxItem::MergeFrom(from._internal_statistic());
    }
    if (cached_has_bits & 0x00000002u) {
      elect_height_ = from.elect_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      leader_idx_ = from.leader_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      leader_to_idx_ = from.leader_to_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticTxMessage::CopyFrom(const StatisticTxMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.StatisticTxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticTxMessage::IsInitialized() const {
  return true;
}

void StatisticTxMessage::InternalSwap(StatisticTxMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatisticTxMessage, leader_to_idx_)
      + sizeof(StatisticTxMessage::leader_to_idx_)
      - PROTOBUF_FIELD_OFFSET(StatisticTxMessage, statistic_)>(
          reinterpret_cast<char*>(&statistic_),
          reinterpret_cast<char*>(&other->statistic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticTxMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[30]);
}

// ===================================================================

class BlockMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockMessage>()._has_bits_);
  static const ::zjchain::block::protobuf::GetTxBlockRequest& block_req(const BlockMessage* msg);
  static void set_has_block_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zjchain::block::protobuf::GetTxBlockResponse& block_res(const BlockMessage* msg);
  static void set_has_block_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zjchain::block::protobuf::AccountHeightRequest& height_req(const BlockMessage* msg);
  static void set_has_height_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zjchain::block::protobuf::AccountHeightResponse& height_res(const BlockMessage* msg);
  static void set_has_height_res(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zjchain::block::protobuf::AccountAttrRequest& acc_attr_req(const BlockMessage* msg);
  static void set_has_acc_attr_req(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zjchain::block::protobuf::AccountAttrResponse& acc_attr_res(const BlockMessage* msg);
  static void set_has_acc_attr_res(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zjchain::block::protobuf::UpdateVpnCountRequest& up_vpn_req(const BlockMessage* msg);
  static void set_has_up_vpn_req(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zjchain::block::protobuf::UpdateVpnCountResponse& up_vpn_res(const BlockMessage* msg);
  static void set_has_up_vpn_res(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::zjchain::block::protobuf::GetAccountInitInfoRequest& account_init_req(const BlockMessage* msg);
  static void set_has_account_init_req(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::zjchain::block::protobuf::GetAccountInitInfoResponse& account_init_res(const BlockMessage* msg);
  static void set_has_account_init_res(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::zjchain::block::protobuf::UpdateVpnActiveRequest& vpn_active_req(const BlockMessage* msg);
  static void set_has_vpn_active_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::zjchain::block::protobuf::AdRewardRequest& ad_reward_req(const BlockMessage* msg);
  static void set_has_ad_reward_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::zjchain::block::protobuf::RefreshPoolHeightRequest& ref_heights_req(const BlockMessage* msg);
  static void set_has_ref_heights_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::zjchain::block::protobuf::RefreshPoolHeightResponse& ref_heights_res(const BlockMessage* msg);
  static void set_has_ref_heights_res(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::zjchain::block::protobuf::GetAccountShardRequest& acc_shard_req(const BlockMessage* msg);
  static void set_has_acc_shard_req(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::zjchain::block::protobuf::GetAccountShardReponse& acc_shard_res(const BlockMessage* msg);
  static void set_has_acc_shard_res(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::zjchain::block::protobuf::ShardToTxMessage& shard_to(const BlockMessage* msg);
  static void set_has_shard_to(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::zjchain::block::protobuf::StatisticTxMessage& statistic_tx(const BlockMessage* msg);
  static void set_has_statistic_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::zjchain::block::protobuf::GetTxBlockRequest&
BlockMessage::_Internal::block_req(const BlockMessage* msg) {
  return *msg->block_req_;
}
const ::zjchain::block::protobuf::GetTxBlockResponse&
BlockMessage::_Internal::block_res(const BlockMessage* msg) {
  return *msg->block_res_;
}
const ::zjchain::block::protobuf::AccountHeightRequest&
BlockMessage::_Internal::height_req(const BlockMessage* msg) {
  return *msg->height_req_;
}
const ::zjchain::block::protobuf::AccountHeightResponse&
BlockMessage::_Internal::height_res(const BlockMessage* msg) {
  return *msg->height_res_;
}
const ::zjchain::block::protobuf::AccountAttrRequest&
BlockMessage::_Internal::acc_attr_req(const BlockMessage* msg) {
  return *msg->acc_attr_req_;
}
const ::zjchain::block::protobuf::AccountAttrResponse&
BlockMessage::_Internal::acc_attr_res(const BlockMessage* msg) {
  return *msg->acc_attr_res_;
}
const ::zjchain::block::protobuf::UpdateVpnCountRequest&
BlockMessage::_Internal::up_vpn_req(const BlockMessage* msg) {
  return *msg->up_vpn_req_;
}
const ::zjchain::block::protobuf::UpdateVpnCountResponse&
BlockMessage::_Internal::up_vpn_res(const BlockMessage* msg) {
  return *msg->up_vpn_res_;
}
const ::zjchain::block::protobuf::GetAccountInitInfoRequest&
BlockMessage::_Internal::account_init_req(const BlockMessage* msg) {
  return *msg->account_init_req_;
}
const ::zjchain::block::protobuf::GetAccountInitInfoResponse&
BlockMessage::_Internal::account_init_res(const BlockMessage* msg) {
  return *msg->account_init_res_;
}
const ::zjchain::block::protobuf::UpdateVpnActiveRequest&
BlockMessage::_Internal::vpn_active_req(const BlockMessage* msg) {
  return *msg->vpn_active_req_;
}
const ::zjchain::block::protobuf::AdRewardRequest&
BlockMessage::_Internal::ad_reward_req(const BlockMessage* msg) {
  return *msg->ad_reward_req_;
}
const ::zjchain::block::protobuf::RefreshPoolHeightRequest&
BlockMessage::_Internal::ref_heights_req(const BlockMessage* msg) {
  return *msg->ref_heights_req_;
}
const ::zjchain::block::protobuf::RefreshPoolHeightResponse&
BlockMessage::_Internal::ref_heights_res(const BlockMessage* msg) {
  return *msg->ref_heights_res_;
}
const ::zjchain::block::protobuf::GetAccountShardRequest&
BlockMessage::_Internal::acc_shard_req(const BlockMessage* msg) {
  return *msg->acc_shard_req_;
}
const ::zjchain::block::protobuf::GetAccountShardReponse&
BlockMessage::_Internal::acc_shard_res(const BlockMessage* msg) {
  return *msg->acc_shard_res_;
}
const ::zjchain::block::protobuf::ShardToTxMessage&
BlockMessage::_Internal::shard_to(const BlockMessage* msg) {
  return *msg->shard_to_;
}
const ::zjchain::block::protobuf::StatisticTxMessage&
BlockMessage::_Internal::statistic_tx(const BlockMessage* msg) {
  return *msg->statistic_tx_;
}
BlockMessage::BlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.block.protobuf.BlockMessage)
}
BlockMessage::BlockMessage(const BlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_req()) {
    block_req_ = new ::zjchain::block::protobuf::GetTxBlockRequest(*from.block_req_);
  } else {
    block_req_ = nullptr;
  }
  if (from._internal_has_block_res()) {
    block_res_ = new ::zjchain::block::protobuf::GetTxBlockResponse(*from.block_res_);
  } else {
    block_res_ = nullptr;
  }
  if (from._internal_has_height_req()) {
    height_req_ = new ::zjchain::block::protobuf::AccountHeightRequest(*from.height_req_);
  } else {
    height_req_ = nullptr;
  }
  if (from._internal_has_height_res()) {
    height_res_ = new ::zjchain::block::protobuf::AccountHeightResponse(*from.height_res_);
  } else {
    height_res_ = nullptr;
  }
  if (from._internal_has_acc_attr_req()) {
    acc_attr_req_ = new ::zjchain::block::protobuf::AccountAttrRequest(*from.acc_attr_req_);
  } else {
    acc_attr_req_ = nullptr;
  }
  if (from._internal_has_acc_attr_res()) {
    acc_attr_res_ = new ::zjchain::block::protobuf::AccountAttrResponse(*from.acc_attr_res_);
  } else {
    acc_attr_res_ = nullptr;
  }
  if (from._internal_has_up_vpn_req()) {
    up_vpn_req_ = new ::zjchain::block::protobuf::UpdateVpnCountRequest(*from.up_vpn_req_);
  } else {
    up_vpn_req_ = nullptr;
  }
  if (from._internal_has_up_vpn_res()) {
    up_vpn_res_ = new ::zjchain::block::protobuf::UpdateVpnCountResponse(*from.up_vpn_res_);
  } else {
    up_vpn_res_ = nullptr;
  }
  if (from._internal_has_account_init_req()) {
    account_init_req_ = new ::zjchain::block::protobuf::GetAccountInitInfoRequest(*from.account_init_req_);
  } else {
    account_init_req_ = nullptr;
  }
  if (from._internal_has_account_init_res()) {
    account_init_res_ = new ::zjchain::block::protobuf::GetAccountInitInfoResponse(*from.account_init_res_);
  } else {
    account_init_res_ = nullptr;
  }
  if (from._internal_has_vpn_active_req()) {
    vpn_active_req_ = new ::zjchain::block::protobuf::UpdateVpnActiveRequest(*from.vpn_active_req_);
  } else {
    vpn_active_req_ = nullptr;
  }
  if (from._internal_has_ad_reward_req()) {
    ad_reward_req_ = new ::zjchain::block::protobuf::AdRewardRequest(*from.ad_reward_req_);
  } else {
    ad_reward_req_ = nullptr;
  }
  if (from._internal_has_ref_heights_req()) {
    ref_heights_req_ = new ::zjchain::block::protobuf::RefreshPoolHeightRequest(*from.ref_heights_req_);
  } else {
    ref_heights_req_ = nullptr;
  }
  if (from._internal_has_ref_heights_res()) {
    ref_heights_res_ = new ::zjchain::block::protobuf::RefreshPoolHeightResponse(*from.ref_heights_res_);
  } else {
    ref_heights_res_ = nullptr;
  }
  if (from._internal_has_acc_shard_req()) {
    acc_shard_req_ = new ::zjchain::block::protobuf::GetAccountShardRequest(*from.acc_shard_req_);
  } else {
    acc_shard_req_ = nullptr;
  }
  if (from._internal_has_acc_shard_res()) {
    acc_shard_res_ = new ::zjchain::block::protobuf::GetAccountShardReponse(*from.acc_shard_res_);
  } else {
    acc_shard_res_ = nullptr;
  }
  if (from._internal_has_shard_to()) {
    shard_to_ = new ::zjchain::block::protobuf::ShardToTxMessage(*from.shard_to_);
  } else {
    shard_to_ = nullptr;
  }
  if (from._internal_has_statistic_tx()) {
    statistic_tx_ = new ::zjchain::block::protobuf::StatisticTxMessage(*from.statistic_tx_);
  } else {
    statistic_tx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.block.protobuf.BlockMessage)
}

inline void BlockMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&statistic_tx_) -
    reinterpret_cast<char*>(&block_req_)) + sizeof(statistic_tx_));
}

BlockMessage::~BlockMessage() {
  // @@protoc_insertion_point(destructor:zjchain.block.protobuf.BlockMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_req_;
  if (this != internal_default_instance()) delete block_res_;
  if (this != internal_default_instance()) delete height_req_;
  if (this != internal_default_instance()) delete height_res_;
  if (this != internal_default_instance()) delete acc_attr_req_;
  if (this != internal_default_instance()) delete acc_attr_res_;
  if (this != internal_default_instance()) delete up_vpn_req_;
  if (this != internal_default_instance()) delete up_vpn_res_;
  if (this != internal_default_instance()) delete account_init_req_;
  if (this != internal_default_instance()) delete account_init_res_;
  if (this != internal_default_instance()) delete vpn_active_req_;
  if (this != internal_default_instance()) delete ad_reward_req_;
  if (this != internal_default_instance()) delete ref_heights_req_;
  if (this != internal_default_instance()) delete ref_heights_res_;
  if (this != internal_default_instance()) delete acc_shard_req_;
  if (this != internal_default_instance()) delete acc_shard_res_;
  if (this != internal_default_instance()) delete shard_to_;
  if (this != internal_default_instance()) delete statistic_tx_;
}

void BlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.block.protobuf.BlockMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(block_req_ != nullptr);
      block_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(block_res_ != nullptr);
      block_res_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(height_req_ != nullptr);
      height_req_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(height_res_ != nullptr);
      height_res_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(acc_attr_req_ != nullptr);
      acc_attr_req_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(acc_attr_res_ != nullptr);
      acc_attr_res_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(up_vpn_req_ != nullptr);
      up_vpn_req_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(up_vpn_res_ != nullptr);
      up_vpn_res_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(account_init_req_ != nullptr);
      account_init_req_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(account_init_res_ != nullptr);
      account_init_res_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(vpn_active_req_ != nullptr);
      vpn_active_req_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(ad_reward_req_ != nullptr);
      ad_reward_req_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(ref_heights_req_ != nullptr);
      ref_heights_req_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(ref_heights_res_ != nullptr);
      ref_heights_res_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(acc_shard_req_ != nullptr);
      acc_shard_req_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(acc_shard_res_ != nullptr);
      acc_shard_res_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(shard_to_ != nullptr);
      shard_to_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(statistic_tx_ != nullptr);
      statistic_tx_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_height_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_height_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_attr_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_attr_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_up_vpn_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_up_vpn_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_init_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_init_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpn_active_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ad_reward_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref_heights_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref_heights_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_shard_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_shard_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistic_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.block.protobuf.BlockMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block_req(this),
        _Internal::block_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::block_res(this),
        _Internal::block_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::height_req(this),
        _Internal::height_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::height_res(this),
        _Internal::height_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::acc_attr_req(this),
        _Internal::acc_attr_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::acc_attr_res(this),
        _Internal::acc_attr_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::up_vpn_req(this),
        _Internal::up_vpn_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::up_vpn_res(this),
        _Internal::up_vpn_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::account_init_req(this),
        _Internal::account_init_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::account_init_res(this),
        _Internal::account_init_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::vpn_active_req(this),
        _Internal::vpn_active_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::ad_reward_req(this),
        _Internal::ad_reward_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::ref_heights_req(this),
        _Internal::ref_heights_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ref_heights_res(this),
        _Internal::ref_heights_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::acc_shard_req(this),
        _Internal::acc_shard_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::acc_shard_res(this),
        _Internal::acc_shard_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::shard_to(this),
        _Internal::shard_to(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::statistic_tx(this),
        _Internal::statistic_tx(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.block.protobuf.BlockMessage)
  return target;
}

size_t BlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.block.protobuf.BlockMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *block_req_);
    }

    // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *block_res_);
    }

    // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *height_req_);
    }

    // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *height_res_);
    }

    // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acc_attr_req_);
    }

    // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acc_attr_res_);
    }

    // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *up_vpn_req_);
    }

    // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *up_vpn_res_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_init_req_);
    }

    // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_init_res_);
    }

    // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vpn_active_req_);
    }

    // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ad_reward_req_);
    }

    // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_heights_req_);
    }

    // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ref_heights_res_);
    }

    // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acc_shard_req_);
    }

    // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acc_shard_res_);
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shard_to_);
    }

    // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statistic_tx_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMessage::GetClassData() const { return &_class_data_; }

void BlockMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockMessage *>(to)->MergeFrom(
      static_cast<const BlockMessage &>(from));
}


void BlockMessage::MergeFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.block.protobuf.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_block_req()->::zjchain::block::protobuf::GetTxBlockRequest::MergeFrom(from._internal_block_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_block_res()->::zjchain::block::protobuf::GetTxBlockResponse::MergeFrom(from._internal_block_res());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_height_req()->::zjchain::block::protobuf::AccountHeightRequest::MergeFrom(from._internal_height_req());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_height_res()->::zjchain::block::protobuf::AccountHeightResponse::MergeFrom(from._internal_height_res());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_acc_attr_req()->::zjchain::block::protobuf::AccountAttrRequest::MergeFrom(from._internal_acc_attr_req());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_acc_attr_res()->::zjchain::block::protobuf::AccountAttrResponse::MergeFrom(from._internal_acc_attr_res());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_up_vpn_req()->::zjchain::block::protobuf::UpdateVpnCountRequest::MergeFrom(from._internal_up_vpn_req());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_up_vpn_res()->::zjchain::block::protobuf::UpdateVpnCountResponse::MergeFrom(from._internal_up_vpn_res());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_account_init_req()->::zjchain::block::protobuf::GetAccountInitInfoRequest::MergeFrom(from._internal_account_init_req());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_account_init_res()->::zjchain::block::protobuf::GetAccountInitInfoResponse::MergeFrom(from._internal_account_init_res());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_vpn_active_req()->::zjchain::block::protobuf::UpdateVpnActiveRequest::MergeFrom(from._internal_vpn_active_req());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_ad_reward_req()->::zjchain::block::protobuf::AdRewardRequest::MergeFrom(from._internal_ad_reward_req());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_ref_heights_req()->::zjchain::block::protobuf::RefreshPoolHeightRequest::MergeFrom(from._internal_ref_heights_req());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_ref_heights_res()->::zjchain::block::protobuf::RefreshPoolHeightResponse::MergeFrom(from._internal_ref_heights_res());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_acc_shard_req()->::zjchain::block::protobuf::GetAccountShardRequest::MergeFrom(from._internal_acc_shard_req());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_acc_shard_res()->::zjchain::block::protobuf::GetAccountShardReponse::MergeFrom(from._internal_acc_shard_res());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_shard_to()->::zjchain::block::protobuf::ShardToTxMessage::MergeFrom(from._internal_shard_to());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_statistic_tx()->::zjchain::block::protobuf::StatisticTxMessage::MergeFrom(from._internal_statistic_tx());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMessage::CopyFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.block.protobuf.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMessage::IsInitialized() const {
  return true;
}

void BlockMessage::InternalSwap(BlockMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMessage, statistic_tx_)
      + sizeof(BlockMessage::statistic_tx_)
      - PROTOBUF_FIELD_OFFSET(BlockMessage, block_req_)>(
          reinterpret_cast<char*>(&block_req_),
          reinterpret_cast<char*>(&other->block_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fblock_2eproto_getter, &descriptor_table_protos_2fblock_2eproto_once,
      file_level_metadata_protos_2fblock_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace block
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::StorageItem*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::StorageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::StorageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::TransferItem*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::TransferItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::TransferItem >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::TxLog*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::TxLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::TxLog >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::BlockTx*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::BlockTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::BlockTx >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::Block*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::ConsensusToTxsItem*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::ConsensusToTxsItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::ConsensusToTxsItem >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::ConsensusToTxs*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::ConsensusToTxs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::ConsensusToTxs >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::GetTxBlockRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::GetTxBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::GetTxBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::GetTxBlockResponse*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::GetTxBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::GetTxBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::AccountHeightRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::AccountHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::AccountHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::AccountHeightResponse*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::AccountHeightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::AccountHeightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::AccountAttrRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::AccountAttrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::AccountAttrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::AccountAttrResponse*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::AccountAttrResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::AccountAttrResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::UpdateVpnCountRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::UpdateVpnCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::UpdateVpnCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::VpnCountItem*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::VpnCountItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::VpnCountItem >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::UpdateVpnCountResponse*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::UpdateVpnCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::UpdateVpnCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::GetAccountInitInfoRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::GetAccountInitInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::GetAccountInitInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::GetAccountInitInfoResponse*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::GetAccountInitInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::GetAccountInitInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::UpdateVpnActiveRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::UpdateVpnActiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::UpdateVpnActiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::AdRewardRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::AdRewardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::AdRewardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::ElectStatisticInfo*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::ElectStatisticInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::ElectStatisticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::StatisticInfo*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::StatisticInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::StatisticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::RefreshPoolHeightRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::RefreshPoolHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::RefreshPoolHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::RefreshPoolHeightResponse*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::RefreshPoolHeightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::RefreshPoolHeightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::GetAccountShardRequest*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::GetAccountShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::GetAccountShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::GetAccountShardReponse*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::GetAccountShardReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::GetAccountShardReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::CrossShardingTosMessage*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::CrossShardingTosMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::CrossShardingTosMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::CrossShardingStatisticMessage*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::CrossShardingStatisticMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::CrossShardingStatisticMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::ElectBlockMessage*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::ElectBlockMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::ElectBlockMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::ShardToTxMessage*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::ShardToTxMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::ShardToTxMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::StatisticTxMessage*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::StatisticTxMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::StatisticTxMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::block::protobuf::BlockMessage*
Arena::CreateMaybeMessage< ::zjchain::block::protobuf::BlockMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::block::protobuf::BlockMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
