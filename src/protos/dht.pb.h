// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/dht.proto

#ifndef PROTOBUF_INCLUDED_protos_2fdht_2eproto
#define PROTOBUF_INCLUDED_protos_2fdht_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fdht_2eproto 

namespace protobuf_protos_2fdht_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fdht_2eproto
namespace zjchain {
namespace dht {
namespace protobuf {
class BootstrapRequest;
class BootstrapRequestDefaultTypeInternal;
extern BootstrapRequestDefaultTypeInternal _BootstrapRequest_default_instance_;
class BootstrapResponse;
class BootstrapResponseDefaultTypeInternal;
extern BootstrapResponseDefaultTypeInternal _BootstrapResponse_default_instance_;
class ConnectReqeust;
class ConnectReqeustDefaultTypeInternal;
extern ConnectReqeustDefaultTypeInternal _ConnectReqeust_default_instance_;
class DhtMessage;
class DhtMessageDefaultTypeInternal;
extern DhtMessageDefaultTypeInternal _DhtMessage_default_instance_;
class HeartbeatRequest;
class HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class HeartbeatResponse;
class HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class RefreshNeighborsRequest;
class RefreshNeighborsRequestDefaultTypeInternal;
extern RefreshNeighborsRequestDefaultTypeInternal _RefreshNeighborsRequest_default_instance_;
class RefreshNeighborsResponse;
class RefreshNeighborsResponseDefaultTypeInternal;
extern RefreshNeighborsResponseDefaultTypeInternal _RefreshNeighborsResponse_default_instance_;
class TimerRequest;
class TimerRequestDefaultTypeInternal;
extern TimerRequestDefaultTypeInternal _TimerRequest_default_instance_;
}  // namespace protobuf
}  // namespace dht
}  // namespace zjchain
namespace google {
namespace protobuf {
template<> ::zjchain::dht::protobuf::BootstrapRequest* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::BootstrapRequest>(Arena*);
template<> ::zjchain::dht::protobuf::BootstrapResponse* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::BootstrapResponse>(Arena*);
template<> ::zjchain::dht::protobuf::ConnectReqeust* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::ConnectReqeust>(Arena*);
template<> ::zjchain::dht::protobuf::DhtMessage* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::DhtMessage>(Arena*);
template<> ::zjchain::dht::protobuf::HeartbeatRequest* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::HeartbeatRequest>(Arena*);
template<> ::zjchain::dht::protobuf::HeartbeatResponse* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::HeartbeatResponse>(Arena*);
template<> ::zjchain::dht::protobuf::NodeInfo* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::NodeInfo>(Arena*);
template<> ::zjchain::dht::protobuf::RefreshNeighborsRequest* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::RefreshNeighborsRequest>(Arena*);
template<> ::zjchain::dht::protobuf::RefreshNeighborsResponse* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::RefreshNeighborsResponse>(Arena*);
template<> ::zjchain::dht::protobuf::TimerRequest* Arena::CreateMaybeMessage<::zjchain::dht::protobuf::TimerRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zjchain {
namespace dht {
namespace protobuf {

// ===================================================================

class BootstrapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.BootstrapRequest) */ {
 public:
  BootstrapRequest();
  virtual ~BootstrapRequest();

  BootstrapRequest(const BootstrapRequest& from);

  inline BootstrapRequest& operator=(const BootstrapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BootstrapRequest(BootstrapRequest&& from) noexcept
    : BootstrapRequest() {
    *this = ::std::move(from);
  }

  inline BootstrapRequest& operator=(BootstrapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapRequest* internal_default_instance() {
    return reinterpret_cast<const BootstrapRequest*>(
               &_BootstrapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BootstrapRequest* other);
  friend void swap(BootstrapRequest& a, BootstrapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BootstrapRequest* New() const final {
    return CreateMaybeMessage<BootstrapRequest>(NULL);
  }

  BootstrapRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BootstrapRequest& from);
  void MergeFrom(const BootstrapRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional string public_ip = 2;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 2;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const char* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional int32 public_port = 3;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 3;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.BootstrapRequest)
 private:
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BootstrapResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.BootstrapResponse) */ {
 public:
  BootstrapResponse();
  virtual ~BootstrapResponse();

  BootstrapResponse(const BootstrapResponse& from);

  inline BootstrapResponse& operator=(const BootstrapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BootstrapResponse(BootstrapResponse&& from) noexcept
    : BootstrapResponse() {
    *this = ::std::move(from);
  }

  inline BootstrapResponse& operator=(BootstrapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapResponse* internal_default_instance() {
    return reinterpret_cast<const BootstrapResponse*>(
               &_BootstrapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BootstrapResponse* other);
  friend void swap(BootstrapResponse& a, BootstrapResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BootstrapResponse* New() const final {
    return CreateMaybeMessage<BootstrapResponse>(NULL);
  }

  BootstrapResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BootstrapResponse& from);
  void MergeFrom(const BootstrapResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional string public_ip = 2;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 2;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const char* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional int32 public_port = 3;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 3;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.BootstrapResponse)
 private:
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(NULL);
  }

  NodeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 1;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional bytes pubkey = 3;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 3;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional int32 public_port = 2;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 2;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.NodeInfo)
 private:
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();
  void set_has_pubkey();
  void clear_has_pubkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshNeighborsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.RefreshNeighborsRequest) */ {
 public:
  RefreshNeighborsRequest();
  virtual ~RefreshNeighborsRequest();

  RefreshNeighborsRequest(const RefreshNeighborsRequest& from);

  inline RefreshNeighborsRequest& operator=(const RefreshNeighborsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshNeighborsRequest(RefreshNeighborsRequest&& from) noexcept
    : RefreshNeighborsRequest() {
    *this = ::std::move(from);
  }

  inline RefreshNeighborsRequest& operator=(RefreshNeighborsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshNeighborsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshNeighborsRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshNeighborsRequest*>(
               &_RefreshNeighborsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RefreshNeighborsRequest* other);
  friend void swap(RefreshNeighborsRequest& a, RefreshNeighborsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshNeighborsRequest* New() const final {
    return CreateMaybeMessage<RefreshNeighborsRequest>(NULL);
  }

  RefreshNeighborsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshNeighborsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RefreshNeighborsRequest& from);
  void MergeFrom(const RefreshNeighborsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshNeighborsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bloomfilter = 2;
  int bloomfilter_size() const;
  void clear_bloomfilter();
  static const int kBloomfilterFieldNumber = 2;
  ::google::protobuf::uint64 bloomfilter(int index) const;
  void set_bloomfilter(int index, ::google::protobuf::uint64 value);
  void add_bloomfilter(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bloomfilter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bloomfilter();

  // optional bytes pubkey = 3;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 3;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional string public_ip = 4;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 4;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const char* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional uint32 count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional int32 public_port = 5;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 5;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.RefreshNeighborsRequest)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bloomfilter_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshNeighborsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.RefreshNeighborsResponse) */ {
 public:
  RefreshNeighborsResponse();
  virtual ~RefreshNeighborsResponse();

  RefreshNeighborsResponse(const RefreshNeighborsResponse& from);

  inline RefreshNeighborsResponse& operator=(const RefreshNeighborsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshNeighborsResponse(RefreshNeighborsResponse&& from) noexcept
    : RefreshNeighborsResponse() {
    *this = ::std::move(from);
  }

  inline RefreshNeighborsResponse& operator=(RefreshNeighborsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshNeighborsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshNeighborsResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshNeighborsResponse*>(
               &_RefreshNeighborsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RefreshNeighborsResponse* other);
  friend void swap(RefreshNeighborsResponse& a, RefreshNeighborsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshNeighborsResponse* New() const final {
    return CreateMaybeMessage<RefreshNeighborsResponse>(NULL);
  }

  RefreshNeighborsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshNeighborsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RefreshNeighborsResponse& from);
  void MergeFrom(const RefreshNeighborsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshNeighborsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.dht.protobuf.NodeInfo nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::zjchain::dht::protobuf::NodeInfo* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::zjchain::dht::protobuf::NodeInfo >*
      mutable_nodes();
  const ::zjchain::dht::protobuf::NodeInfo& nodes(int index) const;
  ::zjchain::dht::protobuf::NodeInfo* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::zjchain::dht::protobuf::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.RefreshNeighborsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::dht::protobuf::NodeInfo > nodes_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.HeartbeatRequest) */ {
 public:
  HeartbeatRequest();
  virtual ~HeartbeatRequest();

  HeartbeatRequest(const HeartbeatRequest& from);

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatRequest(HeartbeatRequest&& from) noexcept
    : HeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
               &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(HeartbeatRequest* other);
  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatRequest* New() const final {
    return CreateMaybeMessage<HeartbeatRequest>(NULL);
  }

  HeartbeatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartbeatRequest& from);
  void MergeFrom(const HeartbeatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 dht_key_hash = 1;
  bool has_dht_key_hash() const;
  void clear_dht_key_hash();
  static const int kDhtKeyHashFieldNumber = 1;
  ::google::protobuf::uint64 dht_key_hash() const;
  void set_dht_key_hash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.HeartbeatRequest)
 private:
  void set_has_dht_key_hash();
  void clear_has_dht_key_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 dht_key_hash_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.HeartbeatResponse) */ {
 public:
  HeartbeatResponse();
  virtual ~HeartbeatResponse();

  HeartbeatResponse(const HeartbeatResponse& from);

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatResponse(HeartbeatResponse&& from) noexcept
    : HeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
               &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(HeartbeatResponse* other);
  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatResponse* New() const final {
    return CreateMaybeMessage<HeartbeatResponse>(NULL);
  }

  HeartbeatResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartbeatResponse& from);
  void MergeFrom(const HeartbeatResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 dht_key_hash = 1;
  bool has_dht_key_hash() const;
  void clear_dht_key_hash();
  static const int kDhtKeyHashFieldNumber = 1;
  ::google::protobuf::uint64 dht_key_hash() const;
  void set_dht_key_hash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.HeartbeatResponse)
 private:
  void set_has_dht_key_hash();
  void clear_has_dht_key_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 dht_key_hash_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectReqeust : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.ConnectReqeust) */ {
 public:
  ConnectReqeust();
  virtual ~ConnectReqeust();

  ConnectReqeust(const ConnectReqeust& from);

  inline ConnectReqeust& operator=(const ConnectReqeust& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectReqeust(ConnectReqeust&& from) noexcept
    : ConnectReqeust() {
    *this = ::std::move(from);
  }

  inline ConnectReqeust& operator=(ConnectReqeust&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectReqeust& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectReqeust* internal_default_instance() {
    return reinterpret_cast<const ConnectReqeust*>(
               &_ConnectReqeust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConnectReqeust* other);
  friend void swap(ConnectReqeust& a, ConnectReqeust& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectReqeust* New() const final {
    return CreateMaybeMessage<ConnectReqeust>(NULL);
  }

  ConnectReqeust* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectReqeust>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectReqeust& from);
  void MergeFrom(const ConnectReqeust& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectReqeust* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional string public_ip = 3;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 3;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const char* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional bool is_response = 2;
  bool has_is_response() const;
  void clear_is_response();
  static const int kIsResponseFieldNumber = 2;
  bool is_response() const;
  void set_is_response(bool value);

  // optional int32 public_port = 4;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 4;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.ConnectReqeust)
 private:
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_is_response();
  void clear_has_is_response();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  bool is_response_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.TimerRequest) */ {
 public:
  TimerRequest();
  virtual ~TimerRequest();

  TimerRequest(const TimerRequest& from);

  inline TimerRequest& operator=(const TimerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimerRequest(TimerRequest&& from) noexcept
    : TimerRequest() {
    *this = ::std::move(from);
  }

  inline TimerRequest& operator=(TimerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerRequest* internal_default_instance() {
    return reinterpret_cast<const TimerRequest*>(
               &_TimerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TimerRequest* other);
  friend void swap(TimerRequest& a, TimerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimerRequest* New() const final {
    return CreateMaybeMessage<TimerRequest>(NULL);
  }

  TimerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimerRequest& from);
  void MergeFrom(const TimerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tm_milli = 1;
  bool has_tm_milli() const;
  void clear_tm_milli();
  static const int kTmMilliFieldNumber = 1;
  ::google::protobuf::uint64 tm_milli() const;
  void set_tm_milli(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.TimerRequest)
 private:
  void set_has_tm_milli();
  void clear_has_tm_milli();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 tm_milli_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DhtMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.dht.protobuf.DhtMessage) */ {
 public:
  DhtMessage();
  virtual ~DhtMessage();

  DhtMessage(const DhtMessage& from);

  inline DhtMessage& operator=(const DhtMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DhtMessage(DhtMessage&& from) noexcept
    : DhtMessage() {
    *this = ::std::move(from);
  }

  inline DhtMessage& operator=(DhtMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DhtMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DhtMessage* internal_default_instance() {
    return reinterpret_cast<const DhtMessage*>(
               &_DhtMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DhtMessage* other);
  friend void swap(DhtMessage& a, DhtMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DhtMessage* New() const final {
    return CreateMaybeMessage<DhtMessage>(NULL);
  }

  DhtMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DhtMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DhtMessage& from);
  void MergeFrom(const DhtMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DhtMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.dht.protobuf.BootstrapRequest bootstrap_req = 1;
  bool has_bootstrap_req() const;
  void clear_bootstrap_req();
  static const int kBootstrapReqFieldNumber = 1;
  private:
  const ::zjchain::dht::protobuf::BootstrapRequest& _internal_bootstrap_req() const;
  public:
  const ::zjchain::dht::protobuf::BootstrapRequest& bootstrap_req() const;
  ::zjchain::dht::protobuf::BootstrapRequest* release_bootstrap_req();
  ::zjchain::dht::protobuf::BootstrapRequest* mutable_bootstrap_req();
  void set_allocated_bootstrap_req(::zjchain::dht::protobuf::BootstrapRequest* bootstrap_req);

  // optional .zjchain.dht.protobuf.BootstrapResponse bootstrap_res = 2;
  bool has_bootstrap_res() const;
  void clear_bootstrap_res();
  static const int kBootstrapResFieldNumber = 2;
  private:
  const ::zjchain::dht::protobuf::BootstrapResponse& _internal_bootstrap_res() const;
  public:
  const ::zjchain::dht::protobuf::BootstrapResponse& bootstrap_res() const;
  ::zjchain::dht::protobuf::BootstrapResponse* release_bootstrap_res();
  ::zjchain::dht::protobuf::BootstrapResponse* mutable_bootstrap_res();
  void set_allocated_bootstrap_res(::zjchain::dht::protobuf::BootstrapResponse* bootstrap_res);

  // optional .zjchain.dht.protobuf.RefreshNeighborsRequest refresh_neighbors_req = 3;
  bool has_refresh_neighbors_req() const;
  void clear_refresh_neighbors_req();
  static const int kRefreshNeighborsReqFieldNumber = 3;
  private:
  const ::zjchain::dht::protobuf::RefreshNeighborsRequest& _internal_refresh_neighbors_req() const;
  public:
  const ::zjchain::dht::protobuf::RefreshNeighborsRequest& refresh_neighbors_req() const;
  ::zjchain::dht::protobuf::RefreshNeighborsRequest* release_refresh_neighbors_req();
  ::zjchain::dht::protobuf::RefreshNeighborsRequest* mutable_refresh_neighbors_req();
  void set_allocated_refresh_neighbors_req(::zjchain::dht::protobuf::RefreshNeighborsRequest* refresh_neighbors_req);

  // optional .zjchain.dht.protobuf.RefreshNeighborsResponse refresh_neighbors_res = 4;
  bool has_refresh_neighbors_res() const;
  void clear_refresh_neighbors_res();
  static const int kRefreshNeighborsResFieldNumber = 4;
  private:
  const ::zjchain::dht::protobuf::RefreshNeighborsResponse& _internal_refresh_neighbors_res() const;
  public:
  const ::zjchain::dht::protobuf::RefreshNeighborsResponse& refresh_neighbors_res() const;
  ::zjchain::dht::protobuf::RefreshNeighborsResponse* release_refresh_neighbors_res();
  ::zjchain::dht::protobuf::RefreshNeighborsResponse* mutable_refresh_neighbors_res();
  void set_allocated_refresh_neighbors_res(::zjchain::dht::protobuf::RefreshNeighborsResponse* refresh_neighbors_res);

  // optional .zjchain.dht.protobuf.ConnectReqeust connect_req = 5;
  bool has_connect_req() const;
  void clear_connect_req();
  static const int kConnectReqFieldNumber = 5;
  private:
  const ::zjchain::dht::protobuf::ConnectReqeust& _internal_connect_req() const;
  public:
  const ::zjchain::dht::protobuf::ConnectReqeust& connect_req() const;
  ::zjchain::dht::protobuf::ConnectReqeust* release_connect_req();
  ::zjchain::dht::protobuf::ConnectReqeust* mutable_connect_req();
  void set_allocated_connect_req(::zjchain::dht::protobuf::ConnectReqeust* connect_req);

  // optional .zjchain.dht.protobuf.HeartbeatRequest heartbeat_req = 6;
  bool has_heartbeat_req() const;
  void clear_heartbeat_req();
  static const int kHeartbeatReqFieldNumber = 6;
  private:
  const ::zjchain::dht::protobuf::HeartbeatRequest& _internal_heartbeat_req() const;
  public:
  const ::zjchain::dht::protobuf::HeartbeatRequest& heartbeat_req() const;
  ::zjchain::dht::protobuf::HeartbeatRequest* release_heartbeat_req();
  ::zjchain::dht::protobuf::HeartbeatRequest* mutable_heartbeat_req();
  void set_allocated_heartbeat_req(::zjchain::dht::protobuf::HeartbeatRequest* heartbeat_req);

  // optional .zjchain.dht.protobuf.HeartbeatResponse heartbeat_res = 7;
  bool has_heartbeat_res() const;
  void clear_heartbeat_res();
  static const int kHeartbeatResFieldNumber = 7;
  private:
  const ::zjchain::dht::protobuf::HeartbeatResponse& _internal_heartbeat_res() const;
  public:
  const ::zjchain::dht::protobuf::HeartbeatResponse& heartbeat_res() const;
  ::zjchain::dht::protobuf::HeartbeatResponse* release_heartbeat_res();
  ::zjchain::dht::protobuf::HeartbeatResponse* mutable_heartbeat_res();
  void set_allocated_heartbeat_res(::zjchain::dht::protobuf::HeartbeatResponse* heartbeat_res);

  // optional .zjchain.dht.protobuf.TimerRequest timer = 8;
  bool has_timer() const;
  void clear_timer();
  static const int kTimerFieldNumber = 8;
  private:
  const ::zjchain::dht::protobuf::TimerRequest& _internal_timer() const;
  public:
  const ::zjchain::dht::protobuf::TimerRequest& timer() const;
  ::zjchain::dht::protobuf::TimerRequest* release_timer();
  ::zjchain::dht::protobuf::TimerRequest* mutable_timer();
  void set_allocated_timer(::zjchain::dht::protobuf::TimerRequest* timer);

  // @@protoc_insertion_point(class_scope:zjchain.dht.protobuf.DhtMessage)
 private:
  void set_has_bootstrap_req();
  void clear_has_bootstrap_req();
  void set_has_bootstrap_res();
  void clear_has_bootstrap_res();
  void set_has_refresh_neighbors_req();
  void clear_has_refresh_neighbors_req();
  void set_has_refresh_neighbors_res();
  void clear_has_refresh_neighbors_res();
  void set_has_connect_req();
  void clear_has_connect_req();
  void set_has_heartbeat_req();
  void clear_has_heartbeat_req();
  void set_has_heartbeat_res();
  void clear_has_heartbeat_res();
  void set_has_timer();
  void clear_has_timer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zjchain::dht::protobuf::BootstrapRequest* bootstrap_req_;
  ::zjchain::dht::protobuf::BootstrapResponse* bootstrap_res_;
  ::zjchain::dht::protobuf::RefreshNeighborsRequest* refresh_neighbors_req_;
  ::zjchain::dht::protobuf::RefreshNeighborsResponse* refresh_neighbors_res_;
  ::zjchain::dht::protobuf::ConnectReqeust* connect_req_;
  ::zjchain::dht::protobuf::HeartbeatRequest* heartbeat_req_;
  ::zjchain::dht::protobuf::HeartbeatResponse* heartbeat_res_;
  ::zjchain::dht::protobuf::TimerRequest* timer_;
  friend struct ::protobuf_protos_2fdht_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BootstrapRequest

// optional bytes pubkey = 1;
inline bool BootstrapRequest::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BootstrapRequest::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BootstrapRequest::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BootstrapRequest::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& BootstrapRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.BootstrapRequest.pubkey)
  return pubkey_.GetNoArena();
}
inline void BootstrapRequest::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.BootstrapRequest.pubkey)
}
#if LANG_CXX11
inline void BootstrapRequest::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.BootstrapRequest.pubkey)
}
#endif
inline void BootstrapRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.BootstrapRequest.pubkey)
}
inline void BootstrapRequest::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.BootstrapRequest.pubkey)
}
inline ::std::string* BootstrapRequest::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.BootstrapRequest.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.BootstrapRequest.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapRequest::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.BootstrapRequest.pubkey)
}

// optional string public_ip = 2;
inline bool BootstrapRequest::has_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BootstrapRequest::set_has_public_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BootstrapRequest::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BootstrapRequest::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& BootstrapRequest::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.BootstrapRequest.public_ip)
  return public_ip_.GetNoArena();
}
inline void BootstrapRequest::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.BootstrapRequest.public_ip)
}
#if LANG_CXX11
inline void BootstrapRequest::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.BootstrapRequest.public_ip)
}
#endif
inline void BootstrapRequest::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.BootstrapRequest.public_ip)
}
inline void BootstrapRequest::set_public_ip(const char* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.BootstrapRequest.public_ip)
}
inline ::std::string* BootstrapRequest::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.BootstrapRequest.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapRequest::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.BootstrapRequest.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapRequest::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.BootstrapRequest.public_ip)
}

// optional int32 public_port = 3;
inline bool BootstrapRequest::has_public_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BootstrapRequest::set_has_public_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BootstrapRequest::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BootstrapRequest::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 BootstrapRequest::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.BootstrapRequest.public_port)
  return public_port_;
}
inline void BootstrapRequest::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.BootstrapRequest.public_port)
}

// -------------------------------------------------------------------

// BootstrapResponse

// optional bytes pubkey = 1;
inline bool BootstrapResponse::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BootstrapResponse::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BootstrapResponse::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BootstrapResponse::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& BootstrapResponse::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.BootstrapResponse.pubkey)
  return pubkey_.GetNoArena();
}
inline void BootstrapResponse::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.BootstrapResponse.pubkey)
}
#if LANG_CXX11
inline void BootstrapResponse::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.BootstrapResponse.pubkey)
}
#endif
inline void BootstrapResponse::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.BootstrapResponse.pubkey)
}
inline void BootstrapResponse::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.BootstrapResponse.pubkey)
}
inline ::std::string* BootstrapResponse::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.BootstrapResponse.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapResponse::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.BootstrapResponse.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapResponse::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.BootstrapResponse.pubkey)
}

// optional string public_ip = 2;
inline bool BootstrapResponse::has_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BootstrapResponse::set_has_public_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BootstrapResponse::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BootstrapResponse::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& BootstrapResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.BootstrapResponse.public_ip)
  return public_ip_.GetNoArena();
}
inline void BootstrapResponse::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.BootstrapResponse.public_ip)
}
#if LANG_CXX11
inline void BootstrapResponse::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.BootstrapResponse.public_ip)
}
#endif
inline void BootstrapResponse::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.BootstrapResponse.public_ip)
}
inline void BootstrapResponse::set_public_ip(const char* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.BootstrapResponse.public_ip)
}
inline ::std::string* BootstrapResponse::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.BootstrapResponse.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapResponse::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.BootstrapResponse.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapResponse::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.BootstrapResponse.public_ip)
}

// optional int32 public_port = 3;
inline bool BootstrapResponse::has_public_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BootstrapResponse::set_has_public_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BootstrapResponse::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BootstrapResponse::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 BootstrapResponse::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.BootstrapResponse.public_port)
  return public_port_;
}
inline void BootstrapResponse::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.BootstrapResponse.public_port)
}

// -------------------------------------------------------------------

// NodeInfo

// optional bytes public_ip = 1;
inline bool NodeInfo::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& NodeInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.NodeInfo.public_ip)
  return public_ip_.GetNoArena();
}
inline void NodeInfo::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.NodeInfo.public_ip)
}
#if LANG_CXX11
inline void NodeInfo::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.NodeInfo.public_ip)
}
#endif
inline void NodeInfo::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.NodeInfo.public_ip)
}
inline void NodeInfo::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.NodeInfo.public_ip)
}
inline ::std::string* NodeInfo::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.NodeInfo.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.NodeInfo.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.NodeInfo.public_ip)
}

// optional int32 public_port = 2;
inline bool NodeInfo::has_public_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeInfo::set_has_public_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeInfo::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeInfo::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 NodeInfo::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.NodeInfo.public_port)
  return public_port_;
}
inline void NodeInfo::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.NodeInfo.public_port)
}

// optional bytes pubkey = 3;
inline bool NodeInfo::has_pubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_pubkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& NodeInfo::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.NodeInfo.pubkey)
  return pubkey_.GetNoArena();
}
inline void NodeInfo::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.NodeInfo.pubkey)
}
#if LANG_CXX11
inline void NodeInfo::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.NodeInfo.pubkey)
}
#endif
inline void NodeInfo::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.NodeInfo.pubkey)
}
inline void NodeInfo::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.NodeInfo.pubkey)
}
inline ::std::string* NodeInfo::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.NodeInfo.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.NodeInfo.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.NodeInfo.pubkey)
}

// -------------------------------------------------------------------

// RefreshNeighborsRequest

// optional uint32 count = 1;
inline bool RefreshNeighborsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefreshNeighborsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefreshNeighborsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefreshNeighborsRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 RefreshNeighborsRequest::count() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.RefreshNeighborsRequest.count)
  return count_;
}
inline void RefreshNeighborsRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.RefreshNeighborsRequest.count)
}

// repeated uint64 bloomfilter = 2;
inline int RefreshNeighborsRequest::bloomfilter_size() const {
  return bloomfilter_.size();
}
inline void RefreshNeighborsRequest::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline ::google::protobuf::uint64 RefreshNeighborsRequest::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.RefreshNeighborsRequest.bloomfilter)
  return bloomfilter_.Get(index);
}
inline void RefreshNeighborsRequest::set_bloomfilter(int index, ::google::protobuf::uint64 value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.RefreshNeighborsRequest.bloomfilter)
}
inline void RefreshNeighborsRequest::add_bloomfilter(::google::protobuf::uint64 value) {
  bloomfilter_.Add(value);
  // @@protoc_insertion_point(field_add:zjchain.dht.protobuf.RefreshNeighborsRequest.bloomfilter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RefreshNeighborsRequest::bloomfilter() const {
  // @@protoc_insertion_point(field_list:zjchain.dht.protobuf.RefreshNeighborsRequest.bloomfilter)
  return bloomfilter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RefreshNeighborsRequest::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.dht.protobuf.RefreshNeighborsRequest.bloomfilter)
  return &bloomfilter_;
}

// optional bytes pubkey = 3;
inline bool RefreshNeighborsRequest::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshNeighborsRequest::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshNeighborsRequest::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshNeighborsRequest::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& RefreshNeighborsRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
  return pubkey_.GetNoArena();
}
inline void RefreshNeighborsRequest::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
}
#if LANG_CXX11
inline void RefreshNeighborsRequest::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
}
#endif
inline void RefreshNeighborsRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
}
inline void RefreshNeighborsRequest::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
}
inline ::std::string* RefreshNeighborsRequest::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefreshNeighborsRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefreshNeighborsRequest::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.RefreshNeighborsRequest.pubkey)
}

// optional string public_ip = 4;
inline bool RefreshNeighborsRequest::has_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshNeighborsRequest::set_has_public_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshNeighborsRequest::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshNeighborsRequest::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& RefreshNeighborsRequest::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
  return public_ip_.GetNoArena();
}
inline void RefreshNeighborsRequest::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
}
#if LANG_CXX11
inline void RefreshNeighborsRequest::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
}
#endif
inline void RefreshNeighborsRequest::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
}
inline void RefreshNeighborsRequest::set_public_ip(const char* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
}
inline ::std::string* RefreshNeighborsRequest::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefreshNeighborsRequest::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefreshNeighborsRequest::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.RefreshNeighborsRequest.public_ip)
}

// optional int32 public_port = 5;
inline bool RefreshNeighborsRequest::has_public_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RefreshNeighborsRequest::set_has_public_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RefreshNeighborsRequest::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RefreshNeighborsRequest::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 RefreshNeighborsRequest::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.RefreshNeighborsRequest.public_port)
  return public_port_;
}
inline void RefreshNeighborsRequest::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.RefreshNeighborsRequest.public_port)
}

// -------------------------------------------------------------------

// RefreshNeighborsResponse

// repeated .zjchain.dht.protobuf.NodeInfo nodes = 1;
inline int RefreshNeighborsResponse::nodes_size() const {
  return nodes_.size();
}
inline void RefreshNeighborsResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::zjchain::dht::protobuf::NodeInfo* RefreshNeighborsResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.RefreshNeighborsResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::dht::protobuf::NodeInfo >*
RefreshNeighborsResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.dht.protobuf.RefreshNeighborsResponse.nodes)
  return &nodes_;
}
inline const ::zjchain::dht::protobuf::NodeInfo& RefreshNeighborsResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.RefreshNeighborsResponse.nodes)
  return nodes_.Get(index);
}
inline ::zjchain::dht::protobuf::NodeInfo* RefreshNeighborsResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:zjchain.dht.protobuf.RefreshNeighborsResponse.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::dht::protobuf::NodeInfo >&
RefreshNeighborsResponse::nodes() const {
  // @@protoc_insertion_point(field_list:zjchain.dht.protobuf.RefreshNeighborsResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// HeartbeatRequest

// optional uint64 dht_key_hash = 1;
inline bool HeartbeatRequest::has_dht_key_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatRequest::set_has_dht_key_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatRequest::clear_has_dht_key_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatRequest::clear_dht_key_hash() {
  dht_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_dht_key_hash();
}
inline ::google::protobuf::uint64 HeartbeatRequest::dht_key_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.HeartbeatRequest.dht_key_hash)
  return dht_key_hash_;
}
inline void HeartbeatRequest::set_dht_key_hash(::google::protobuf::uint64 value) {
  set_has_dht_key_hash();
  dht_key_hash_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.HeartbeatRequest.dht_key_hash)
}

// -------------------------------------------------------------------

// HeartbeatResponse

// optional uint64 dht_key_hash = 1;
inline bool HeartbeatResponse::has_dht_key_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatResponse::set_has_dht_key_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatResponse::clear_has_dht_key_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatResponse::clear_dht_key_hash() {
  dht_key_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_dht_key_hash();
}
inline ::google::protobuf::uint64 HeartbeatResponse::dht_key_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.HeartbeatResponse.dht_key_hash)
  return dht_key_hash_;
}
inline void HeartbeatResponse::set_dht_key_hash(::google::protobuf::uint64 value) {
  set_has_dht_key_hash();
  dht_key_hash_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.HeartbeatResponse.dht_key_hash)
}

// -------------------------------------------------------------------

// ConnectReqeust

// optional bytes pubkey = 1;
inline bool ConnectReqeust::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectReqeust::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectReqeust::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectReqeust::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& ConnectReqeust::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.ConnectReqeust.pubkey)
  return pubkey_.GetNoArena();
}
inline void ConnectReqeust::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.ConnectReqeust.pubkey)
}
#if LANG_CXX11
inline void ConnectReqeust::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.ConnectReqeust.pubkey)
}
#endif
inline void ConnectReqeust::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.ConnectReqeust.pubkey)
}
inline void ConnectReqeust::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.ConnectReqeust.pubkey)
}
inline ::std::string* ConnectReqeust::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.ConnectReqeust.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectReqeust::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.ConnectReqeust.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectReqeust::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.ConnectReqeust.pubkey)
}

// optional bool is_response = 2;
inline bool ConnectReqeust::has_is_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectReqeust::set_has_is_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectReqeust::clear_has_is_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectReqeust::clear_is_response() {
  is_response_ = false;
  clear_has_is_response();
}
inline bool ConnectReqeust::is_response() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.ConnectReqeust.is_response)
  return is_response_;
}
inline void ConnectReqeust::set_is_response(bool value) {
  set_has_is_response();
  is_response_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.ConnectReqeust.is_response)
}

// optional string public_ip = 3;
inline bool ConnectReqeust::has_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectReqeust::set_has_public_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectReqeust::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectReqeust::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& ConnectReqeust::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.ConnectReqeust.public_ip)
  return public_ip_.GetNoArena();
}
inline void ConnectReqeust::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.ConnectReqeust.public_ip)
}
#if LANG_CXX11
inline void ConnectReqeust::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.dht.protobuf.ConnectReqeust.public_ip)
}
#endif
inline void ConnectReqeust::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.dht.protobuf.ConnectReqeust.public_ip)
}
inline void ConnectReqeust::set_public_ip(const char* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.dht.protobuf.ConnectReqeust.public_ip)
}
inline ::std::string* ConnectReqeust::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.ConnectReqeust.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectReqeust::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.ConnectReqeust.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectReqeust::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.ConnectReqeust.public_ip)
}

// optional int32 public_port = 4;
inline bool ConnectReqeust::has_public_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectReqeust::set_has_public_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectReqeust::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectReqeust::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 ConnectReqeust::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.ConnectReqeust.public_port)
  return public_port_;
}
inline void ConnectReqeust::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.ConnectReqeust.public_port)
}

// -------------------------------------------------------------------

// TimerRequest

// optional uint64 tm_milli = 1;
inline bool TimerRequest::has_tm_milli() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimerRequest::set_has_tm_milli() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimerRequest::clear_has_tm_milli() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimerRequest::clear_tm_milli() {
  tm_milli_ = GOOGLE_ULONGLONG(0);
  clear_has_tm_milli();
}
inline ::google::protobuf::uint64 TimerRequest::tm_milli() const {
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.TimerRequest.tm_milli)
  return tm_milli_;
}
inline void TimerRequest::set_tm_milli(::google::protobuf::uint64 value) {
  set_has_tm_milli();
  tm_milli_ = value;
  // @@protoc_insertion_point(field_set:zjchain.dht.protobuf.TimerRequest.tm_milli)
}

// -------------------------------------------------------------------

// DhtMessage

// optional .zjchain.dht.protobuf.BootstrapRequest bootstrap_req = 1;
inline bool DhtMessage::has_bootstrap_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DhtMessage::set_has_bootstrap_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DhtMessage::clear_has_bootstrap_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DhtMessage::clear_bootstrap_req() {
  if (bootstrap_req_ != NULL) bootstrap_req_->Clear();
  clear_has_bootstrap_req();
}
inline const ::zjchain::dht::protobuf::BootstrapRequest& DhtMessage::_internal_bootstrap_req() const {
  return *bootstrap_req_;
}
inline const ::zjchain::dht::protobuf::BootstrapRequest& DhtMessage::bootstrap_req() const {
  const ::zjchain::dht::protobuf::BootstrapRequest* p = bootstrap_req_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.bootstrap_req)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::BootstrapRequest*>(
      &::zjchain::dht::protobuf::_BootstrapRequest_default_instance_);
}
inline ::zjchain::dht::protobuf::BootstrapRequest* DhtMessage::release_bootstrap_req() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.bootstrap_req)
  clear_has_bootstrap_req();
  ::zjchain::dht::protobuf::BootstrapRequest* temp = bootstrap_req_;
  bootstrap_req_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::BootstrapRequest* DhtMessage::mutable_bootstrap_req() {
  set_has_bootstrap_req();
  if (bootstrap_req_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::BootstrapRequest>(GetArenaNoVirtual());
    bootstrap_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.bootstrap_req)
  return bootstrap_req_;
}
inline void DhtMessage::set_allocated_bootstrap_req(::zjchain::dht::protobuf::BootstrapRequest* bootstrap_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bootstrap_req_;
  }
  if (bootstrap_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bootstrap_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bootstrap_req, submessage_arena);
    }
    set_has_bootstrap_req();
  } else {
    clear_has_bootstrap_req();
  }
  bootstrap_req_ = bootstrap_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.bootstrap_req)
}

// optional .zjchain.dht.protobuf.BootstrapResponse bootstrap_res = 2;
inline bool DhtMessage::has_bootstrap_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DhtMessage::set_has_bootstrap_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DhtMessage::clear_has_bootstrap_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DhtMessage::clear_bootstrap_res() {
  if (bootstrap_res_ != NULL) bootstrap_res_->Clear();
  clear_has_bootstrap_res();
}
inline const ::zjchain::dht::protobuf::BootstrapResponse& DhtMessage::_internal_bootstrap_res() const {
  return *bootstrap_res_;
}
inline const ::zjchain::dht::protobuf::BootstrapResponse& DhtMessage::bootstrap_res() const {
  const ::zjchain::dht::protobuf::BootstrapResponse* p = bootstrap_res_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.bootstrap_res)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::BootstrapResponse*>(
      &::zjchain::dht::protobuf::_BootstrapResponse_default_instance_);
}
inline ::zjchain::dht::protobuf::BootstrapResponse* DhtMessage::release_bootstrap_res() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.bootstrap_res)
  clear_has_bootstrap_res();
  ::zjchain::dht::protobuf::BootstrapResponse* temp = bootstrap_res_;
  bootstrap_res_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::BootstrapResponse* DhtMessage::mutable_bootstrap_res() {
  set_has_bootstrap_res();
  if (bootstrap_res_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::BootstrapResponse>(GetArenaNoVirtual());
    bootstrap_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.bootstrap_res)
  return bootstrap_res_;
}
inline void DhtMessage::set_allocated_bootstrap_res(::zjchain::dht::protobuf::BootstrapResponse* bootstrap_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bootstrap_res_;
  }
  if (bootstrap_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bootstrap_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bootstrap_res, submessage_arena);
    }
    set_has_bootstrap_res();
  } else {
    clear_has_bootstrap_res();
  }
  bootstrap_res_ = bootstrap_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.bootstrap_res)
}

// optional .zjchain.dht.protobuf.RefreshNeighborsRequest refresh_neighbors_req = 3;
inline bool DhtMessage::has_refresh_neighbors_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DhtMessage::set_has_refresh_neighbors_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DhtMessage::clear_has_refresh_neighbors_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DhtMessage::clear_refresh_neighbors_req() {
  if (refresh_neighbors_req_ != NULL) refresh_neighbors_req_->Clear();
  clear_has_refresh_neighbors_req();
}
inline const ::zjchain::dht::protobuf::RefreshNeighborsRequest& DhtMessage::_internal_refresh_neighbors_req() const {
  return *refresh_neighbors_req_;
}
inline const ::zjchain::dht::protobuf::RefreshNeighborsRequest& DhtMessage::refresh_neighbors_req() const {
  const ::zjchain::dht::protobuf::RefreshNeighborsRequest* p = refresh_neighbors_req_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_req)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::RefreshNeighborsRequest*>(
      &::zjchain::dht::protobuf::_RefreshNeighborsRequest_default_instance_);
}
inline ::zjchain::dht::protobuf::RefreshNeighborsRequest* DhtMessage::release_refresh_neighbors_req() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_req)
  clear_has_refresh_neighbors_req();
  ::zjchain::dht::protobuf::RefreshNeighborsRequest* temp = refresh_neighbors_req_;
  refresh_neighbors_req_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::RefreshNeighborsRequest* DhtMessage::mutable_refresh_neighbors_req() {
  set_has_refresh_neighbors_req();
  if (refresh_neighbors_req_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::RefreshNeighborsRequest>(GetArenaNoVirtual());
    refresh_neighbors_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_req)
  return refresh_neighbors_req_;
}
inline void DhtMessage::set_allocated_refresh_neighbors_req(::zjchain::dht::protobuf::RefreshNeighborsRequest* refresh_neighbors_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete refresh_neighbors_req_;
  }
  if (refresh_neighbors_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refresh_neighbors_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refresh_neighbors_req, submessage_arena);
    }
    set_has_refresh_neighbors_req();
  } else {
    clear_has_refresh_neighbors_req();
  }
  refresh_neighbors_req_ = refresh_neighbors_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_req)
}

// optional .zjchain.dht.protobuf.RefreshNeighborsResponse refresh_neighbors_res = 4;
inline bool DhtMessage::has_refresh_neighbors_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DhtMessage::set_has_refresh_neighbors_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DhtMessage::clear_has_refresh_neighbors_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DhtMessage::clear_refresh_neighbors_res() {
  if (refresh_neighbors_res_ != NULL) refresh_neighbors_res_->Clear();
  clear_has_refresh_neighbors_res();
}
inline const ::zjchain::dht::protobuf::RefreshNeighborsResponse& DhtMessage::_internal_refresh_neighbors_res() const {
  return *refresh_neighbors_res_;
}
inline const ::zjchain::dht::protobuf::RefreshNeighborsResponse& DhtMessage::refresh_neighbors_res() const {
  const ::zjchain::dht::protobuf::RefreshNeighborsResponse* p = refresh_neighbors_res_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_res)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::RefreshNeighborsResponse*>(
      &::zjchain::dht::protobuf::_RefreshNeighborsResponse_default_instance_);
}
inline ::zjchain::dht::protobuf::RefreshNeighborsResponse* DhtMessage::release_refresh_neighbors_res() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_res)
  clear_has_refresh_neighbors_res();
  ::zjchain::dht::protobuf::RefreshNeighborsResponse* temp = refresh_neighbors_res_;
  refresh_neighbors_res_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::RefreshNeighborsResponse* DhtMessage::mutable_refresh_neighbors_res() {
  set_has_refresh_neighbors_res();
  if (refresh_neighbors_res_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::RefreshNeighborsResponse>(GetArenaNoVirtual());
    refresh_neighbors_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_res)
  return refresh_neighbors_res_;
}
inline void DhtMessage::set_allocated_refresh_neighbors_res(::zjchain::dht::protobuf::RefreshNeighborsResponse* refresh_neighbors_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete refresh_neighbors_res_;
  }
  if (refresh_neighbors_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refresh_neighbors_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refresh_neighbors_res, submessage_arena);
    }
    set_has_refresh_neighbors_res();
  } else {
    clear_has_refresh_neighbors_res();
  }
  refresh_neighbors_res_ = refresh_neighbors_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.refresh_neighbors_res)
}

// optional .zjchain.dht.protobuf.ConnectReqeust connect_req = 5;
inline bool DhtMessage::has_connect_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DhtMessage::set_has_connect_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DhtMessage::clear_has_connect_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DhtMessage::clear_connect_req() {
  if (connect_req_ != NULL) connect_req_->Clear();
  clear_has_connect_req();
}
inline const ::zjchain::dht::protobuf::ConnectReqeust& DhtMessage::_internal_connect_req() const {
  return *connect_req_;
}
inline const ::zjchain::dht::protobuf::ConnectReqeust& DhtMessage::connect_req() const {
  const ::zjchain::dht::protobuf::ConnectReqeust* p = connect_req_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.connect_req)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::ConnectReqeust*>(
      &::zjchain::dht::protobuf::_ConnectReqeust_default_instance_);
}
inline ::zjchain::dht::protobuf::ConnectReqeust* DhtMessage::release_connect_req() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.connect_req)
  clear_has_connect_req();
  ::zjchain::dht::protobuf::ConnectReqeust* temp = connect_req_;
  connect_req_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::ConnectReqeust* DhtMessage::mutable_connect_req() {
  set_has_connect_req();
  if (connect_req_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::ConnectReqeust>(GetArenaNoVirtual());
    connect_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.connect_req)
  return connect_req_;
}
inline void DhtMessage::set_allocated_connect_req(::zjchain::dht::protobuf::ConnectReqeust* connect_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connect_req_;
  }
  if (connect_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connect_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connect_req, submessage_arena);
    }
    set_has_connect_req();
  } else {
    clear_has_connect_req();
  }
  connect_req_ = connect_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.connect_req)
}

// optional .zjchain.dht.protobuf.HeartbeatRequest heartbeat_req = 6;
inline bool DhtMessage::has_heartbeat_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DhtMessage::set_has_heartbeat_req() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DhtMessage::clear_has_heartbeat_req() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DhtMessage::clear_heartbeat_req() {
  if (heartbeat_req_ != NULL) heartbeat_req_->Clear();
  clear_has_heartbeat_req();
}
inline const ::zjchain::dht::protobuf::HeartbeatRequest& DhtMessage::_internal_heartbeat_req() const {
  return *heartbeat_req_;
}
inline const ::zjchain::dht::protobuf::HeartbeatRequest& DhtMessage::heartbeat_req() const {
  const ::zjchain::dht::protobuf::HeartbeatRequest* p = heartbeat_req_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.heartbeat_req)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::HeartbeatRequest*>(
      &::zjchain::dht::protobuf::_HeartbeatRequest_default_instance_);
}
inline ::zjchain::dht::protobuf::HeartbeatRequest* DhtMessage::release_heartbeat_req() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.heartbeat_req)
  clear_has_heartbeat_req();
  ::zjchain::dht::protobuf::HeartbeatRequest* temp = heartbeat_req_;
  heartbeat_req_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::HeartbeatRequest* DhtMessage::mutable_heartbeat_req() {
  set_has_heartbeat_req();
  if (heartbeat_req_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::HeartbeatRequest>(GetArenaNoVirtual());
    heartbeat_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.heartbeat_req)
  return heartbeat_req_;
}
inline void DhtMessage::set_allocated_heartbeat_req(::zjchain::dht::protobuf::HeartbeatRequest* heartbeat_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete heartbeat_req_;
  }
  if (heartbeat_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heartbeat_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heartbeat_req, submessage_arena);
    }
    set_has_heartbeat_req();
  } else {
    clear_has_heartbeat_req();
  }
  heartbeat_req_ = heartbeat_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.heartbeat_req)
}

// optional .zjchain.dht.protobuf.HeartbeatResponse heartbeat_res = 7;
inline bool DhtMessage::has_heartbeat_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DhtMessage::set_has_heartbeat_res() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DhtMessage::clear_has_heartbeat_res() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DhtMessage::clear_heartbeat_res() {
  if (heartbeat_res_ != NULL) heartbeat_res_->Clear();
  clear_has_heartbeat_res();
}
inline const ::zjchain::dht::protobuf::HeartbeatResponse& DhtMessage::_internal_heartbeat_res() const {
  return *heartbeat_res_;
}
inline const ::zjchain::dht::protobuf::HeartbeatResponse& DhtMessage::heartbeat_res() const {
  const ::zjchain::dht::protobuf::HeartbeatResponse* p = heartbeat_res_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.heartbeat_res)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::HeartbeatResponse*>(
      &::zjchain::dht::protobuf::_HeartbeatResponse_default_instance_);
}
inline ::zjchain::dht::protobuf::HeartbeatResponse* DhtMessage::release_heartbeat_res() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.heartbeat_res)
  clear_has_heartbeat_res();
  ::zjchain::dht::protobuf::HeartbeatResponse* temp = heartbeat_res_;
  heartbeat_res_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::HeartbeatResponse* DhtMessage::mutable_heartbeat_res() {
  set_has_heartbeat_res();
  if (heartbeat_res_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::HeartbeatResponse>(GetArenaNoVirtual());
    heartbeat_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.heartbeat_res)
  return heartbeat_res_;
}
inline void DhtMessage::set_allocated_heartbeat_res(::zjchain::dht::protobuf::HeartbeatResponse* heartbeat_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete heartbeat_res_;
  }
  if (heartbeat_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heartbeat_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heartbeat_res, submessage_arena);
    }
    set_has_heartbeat_res();
  } else {
    clear_has_heartbeat_res();
  }
  heartbeat_res_ = heartbeat_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.heartbeat_res)
}

// optional .zjchain.dht.protobuf.TimerRequest timer = 8;
inline bool DhtMessage::has_timer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DhtMessage::set_has_timer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DhtMessage::clear_has_timer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DhtMessage::clear_timer() {
  if (timer_ != NULL) timer_->Clear();
  clear_has_timer();
}
inline const ::zjchain::dht::protobuf::TimerRequest& DhtMessage::_internal_timer() const {
  return *timer_;
}
inline const ::zjchain::dht::protobuf::TimerRequest& DhtMessage::timer() const {
  const ::zjchain::dht::protobuf::TimerRequest* p = timer_;
  // @@protoc_insertion_point(field_get:zjchain.dht.protobuf.DhtMessage.timer)
  return p != NULL ? *p : *reinterpret_cast<const ::zjchain::dht::protobuf::TimerRequest*>(
      &::zjchain::dht::protobuf::_TimerRequest_default_instance_);
}
inline ::zjchain::dht::protobuf::TimerRequest* DhtMessage::release_timer() {
  // @@protoc_insertion_point(field_release:zjchain.dht.protobuf.DhtMessage.timer)
  clear_has_timer();
  ::zjchain::dht::protobuf::TimerRequest* temp = timer_;
  timer_ = NULL;
  return temp;
}
inline ::zjchain::dht::protobuf::TimerRequest* DhtMessage::mutable_timer() {
  set_has_timer();
  if (timer_ == NULL) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::TimerRequest>(GetArenaNoVirtual());
    timer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zjchain.dht.protobuf.DhtMessage.timer)
  return timer_;
}
inline void DhtMessage::set_allocated_timer(::zjchain::dht::protobuf::TimerRequest* timer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timer_;
  }
  if (timer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timer, submessage_arena);
    }
    set_has_timer();
  } else {
    clear_has_timer();
  }
  timer_ = timer;
  // @@protoc_insertion_point(field_set_allocated:zjchain.dht.protobuf.DhtMessage.timer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace dht
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fdht_2eproto
