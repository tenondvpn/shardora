// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/address.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/address.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace address {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* AddressInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AddressType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2faddress_2eproto() {
  protobuf_AddDesc_protos_2faddress_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/address.proto");
  GOOGLE_CHECK(file != NULL);
  AddressInfo_descriptor_ = file->message_type(0);
  static const int AddressInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, pool_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, bytes_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, latest_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, g2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, elect_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, destructed_),
  };
  AddressInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressInfo_descriptor_,
      AddressInfo::default_instance_,
      AddressInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressInfo));
  AddressType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2faddress_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressInfo_descriptor_, &AddressInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2faddress_2eproto() {
  delete AddressInfo::default_instance_;
  delete AddressInfo_reflection_;
}

void protobuf_AddDesc_protos_2faddress_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zjchain::bls::protobuf::protobuf_AddDesc_protos_2fbls_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024protos/address.proto\022\030zjchain.address."
    "protobuf\032\020protos/bls.proto\"\274\002\n\013AddressIn"
    "fo\022\016\n\006pubkey\030\001 \001(\014\022\017\n\007balance\030\002 \001(\004\022\023\n\013s"
    "harding_id\030\003 \001(\r\022\022\n\npool_index\030\004 \001(\r\022\014\n\004"
    "addr\030\005 \001(\014\0223\n\004type\030\006 \001(\0162%.zjchain.addre"
    "ss.protobuf.AddressType\022\022\n\nbytes_code\030\007 "
    "\001(\014\022\025\n\rlatest_height\030\010 \001(\004\022\021\n\006credit\030\t \001"
    "(\005:\0010\022/\n\003g2s\030\n \003(\0132\".zjchain.bls.protobu"
    "f.BlsPublicKey\022\035\n\telect_pos\030\013 \001(\r:\n42949"
    "67295\022\022\n\ndestructed\030\014 \001(\010*\225\001\n\013AddressTyp"
    "e\022\013\n\007kNormal\020\000\022\r\n\tkContract\020\001\022\016\n\nkRootEl"
    "ect\020\002\022\016\n\nkRootTimer\020\003\022\016\n\nkStatistic\020\004\022\020\n"
    "\014kToTxAddress\020\005\022\025\n\021kLocalToTxAddress\020\006\022\021"
    "\n\rkElectAddress\020\007", 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/address.proto", &protobuf_RegisterTypes);
  AddressInfo::default_instance_ = new AddressInfo();
  AddressInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2faddress_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2faddress_2eproto {
  StaticDescriptorInitializer_protos_2faddress_2eproto() {
    protobuf_AddDesc_protos_2faddress_2eproto();
  }
} static_descriptor_initializer_protos_2faddress_2eproto_;
const ::google::protobuf::EnumDescriptor* AddressType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressType_descriptor_;
}
bool AddressType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AddressInfo::kPubkeyFieldNumber;
const int AddressInfo::kBalanceFieldNumber;
const int AddressInfo::kShardingIdFieldNumber;
const int AddressInfo::kPoolIndexFieldNumber;
const int AddressInfo::kAddrFieldNumber;
const int AddressInfo::kTypeFieldNumber;
const int AddressInfo::kBytesCodeFieldNumber;
const int AddressInfo::kLatestHeightFieldNumber;
const int AddressInfo::kCreditFieldNumber;
const int AddressInfo::kG2SFieldNumber;
const int AddressInfo::kElectPosFieldNumber;
const int AddressInfo::kDestructedFieldNumber;
#endif  // !_MSC_VER

AddressInfo::AddressInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddressInfo::InitAsDefaultInstance() {
}

AddressInfo::AddressInfo(const AddressInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddressInfo::SharedCtor() {
  _cached_size_ = 0;
  pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  balance_ = GOOGLE_ULONGLONG(0);
  sharding_id_ = 0u;
  pool_index_ = 0u;
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  bytes_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latest_height_ = GOOGLE_ULONGLONG(0);
  credit_ = 0;
  elect_pos_ = 4294967295u;
  destructed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressInfo::~AddressInfo() {
  SharedDtor();
}

void AddressInfo::SharedDtor() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (bytes_code_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_code_;
  }
  if (this != default_instance_) {
  }
}

void AddressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressInfo_descriptor_;
}

const AddressInfo& AddressInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2faddress_2eproto();
  return *default_instance_;
}

AddressInfo* AddressInfo::default_instance_ = NULL;

AddressInfo* AddressInfo::New() const {
  return new AddressInfo;
}

void AddressInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pubkey()) {
      if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
        pubkey_->clear();
      }
    }
    balance_ = GOOGLE_ULONGLONG(0);
    sharding_id_ = 0u;
    pool_index_ = 0u;
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    type_ = 0;
    if (has_bytes_code()) {
      if (bytes_code_ != &::google::protobuf::internal::kEmptyString) {
        bytes_code_->clear();
      }
    }
    latest_height_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    credit_ = 0;
    elect_pos_ = 4294967295u;
    destructed_ = false;
  }
  g2s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pubkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_balance;
        break;
      }

      // optional uint64 balance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sharding_id;
        break;
      }

      // optional uint32 sharding_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharding_id_)));
          set_has_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pool_index;
        break;
      }

      // optional uint32 pool_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
          set_has_pool_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_addr;
        break;
      }

      // optional bytes addr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .zjchain.address.protobuf.AddressType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zjchain::address::protobuf::AddressType_IsValid(value)) {
            set_type(static_cast< ::zjchain::address::protobuf::AddressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bytes_code;
        break;
      }

      // optional bytes bytes_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_latest_height;
        break;
      }

      // optional uint64 latest_height = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latest_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &latest_height_)));
          set_has_latest_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_credit;
        break;
      }

      // optional int32 credit = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_g2s;
        break;
      }

      // repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_g2s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_g2s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_g2s;
        if (input->ExpectTag(88)) goto parse_elect_pos;
        break;
      }

      // optional uint32 elect_pos = 11 [default = 4294967295];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elect_pos_)));
          set_has_elect_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_destructed;
        break;
      }

      // optional bool destructed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destructed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destructed_)));
          set_has_destructed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes pubkey = 1;
  if (has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->pubkey(), output);
  }

  // optional uint64 balance = 2;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->balance(), output);
  }

  // optional uint32 sharding_id = 3;
  if (has_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sharding_id(), output);
  }

  // optional uint32 pool_index = 4;
  if (has_pool_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pool_index(), output);
  }

  // optional bytes addr = 5;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->addr(), output);
  }

  // optional .zjchain.address.protobuf.AddressType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional bytes bytes_code = 7;
  if (has_bytes_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->bytes_code(), output);
  }

  // optional uint64 latest_height = 8;
  if (has_latest_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->latest_height(), output);
  }

  // optional int32 credit = 9 [default = 0];
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->credit(), output);
  }

  // repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
  for (int i = 0; i < this->g2s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->g2s(i), output);
  }

  // optional uint32 elect_pos = 11 [default = 4294967295];
  if (has_elect_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->elect_pos(), output);
  }

  // optional bool destructed = 12;
  if (has_destructed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->destructed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddressInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes pubkey = 1;
  if (has_pubkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pubkey(), target);
  }

  // optional uint64 balance = 2;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->balance(), target);
  }

  // optional uint32 sharding_id = 3;
  if (has_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sharding_id(), target);
  }

  // optional uint32 pool_index = 4;
  if (has_pool_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pool_index(), target);
  }

  // optional bytes addr = 5;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->addr(), target);
  }

  // optional .zjchain.address.protobuf.AddressType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional bytes bytes_code = 7;
  if (has_bytes_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->bytes_code(), target);
  }

  // optional uint64 latest_height = 8;
  if (has_latest_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->latest_height(), target);
  }

  // optional int32 credit = 9 [default = 0];
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->credit(), target);
  }

  // repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
  for (int i = 0; i < this->g2s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->g2s(i), target);
  }

  // optional uint32 elect_pos = 11 [default = 4294967295];
  if (has_elect_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->elect_pos(), target);
  }

  // optional bool destructed = 12;
  if (has_destructed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->destructed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddressInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes pubkey = 1;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional uint64 balance = 2;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

    // optional uint32 sharding_id = 3;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharding_id());
    }

    // optional uint32 pool_index = 4;
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

    // optional bytes addr = 5;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addr());
    }

    // optional .zjchain.address.protobuf.AddressType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes bytes_code = 7;
    if (has_bytes_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_code());
    }

    // optional uint64 latest_height = 8;
    if (has_latest_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->latest_height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 credit = 9 [default = 0];
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional uint32 elect_pos = 11 [default = 4294967295];
    if (has_elect_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elect_pos());
    }

    // optional bool destructed = 12;
    if (has_destructed()) {
      total_size += 1 + 1;
    }

  }
  // repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
  total_size += 1 * this->g2s_size();
  for (int i = 0; i < this->g2s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->g2s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressInfo::MergeFrom(const AddressInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  g2s_.MergeFrom(from.g2s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pubkey()) {
      set_pubkey(from.pubkey());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_sharding_id()) {
      set_sharding_id(from.sharding_id());
    }
    if (from.has_pool_index()) {
      set_pool_index(from.pool_index());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bytes_code()) {
      set_bytes_code(from.bytes_code());
    }
    if (from.has_latest_height()) {
      set_latest_height(from.latest_height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_elect_pos()) {
      set_elect_pos(from.elect_pos());
    }
    if (from.has_destructed()) {
      set_destructed(from.destructed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressInfo::CopyFrom(const AddressInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressInfo::IsInitialized() const {

  return true;
}

void AddressInfo::Swap(AddressInfo* other) {
  if (other != this) {
    std::swap(pubkey_, other->pubkey_);
    std::swap(balance_, other->balance_);
    std::swap(sharding_id_, other->sharding_id_);
    std::swap(pool_index_, other->pool_index_);
    std::swap(addr_, other->addr_);
    std::swap(type_, other->type_);
    std::swap(bytes_code_, other->bytes_code_);
    std::swap(latest_height_, other->latest_height_);
    std::swap(credit_, other->credit_);
    g2s_.Swap(&other->g2s_);
    std::swap(elect_pos_, other->elect_pos_);
    std::swap(destructed_, other->destructed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressInfo_descriptor_;
  metadata.reflection = AddressInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace address
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
