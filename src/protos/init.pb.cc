// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/init.proto

#include "protos/init.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zjchain {
namespace init {
namespace protobuf {
PROTOBUF_CONSTEXPR GetAddressInfoRequest::GetAddressInfoRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetAddressInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAddressInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAddressInfoRequestDefaultTypeInternal() {}
  union {
    GetAddressInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAddressInfoRequestDefaultTypeInternal _GetAddressInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAddressInfoResponse::GetAddressInfoResponse(
    ::_pbi::ConstantInitialized)
  : block_(nullptr){}
struct GetAddressInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAddressInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAddressInfoResponseDefaultTypeInternal() {}
  union {
    GetAddressInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAddressInfoResponseDefaultTypeInternal _GetAddressInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR InvalidLeaderPools::InvalidLeaderPools(
    ::_pbi::ConstantInitialized)
  : pools_()
  , elect_height_(uint64_t{0u})
  , member_index_(0u)
  , mod_num_(0)
  , leader_idx_(0u)
  , version_(0u){}
struct InvalidLeaderPoolsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvalidLeaderPoolsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvalidLeaderPoolsDefaultTypeInternal() {}
  union {
    InvalidLeaderPools _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvalidLeaderPoolsDefaultTypeInternal _InvalidLeaderPools_default_instance_;
PROTOBUF_CONSTEXPR GenesisInitBlsInfo::GenesisInitBlsInfo(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bls_enc_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bls_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , prikey_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , join_info_(nullptr)
  , local_poly_(nullptr)
  , height_(uint64_t{0u})
  , shard_id_(0u){}
struct GenesisInitBlsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisInitBlsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisInitBlsInfoDefaultTypeInternal() {}
  union {
    GenesisInitBlsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisInitBlsInfoDefaultTypeInternal _GenesisInitBlsInfo_default_instance_;
PROTOBUF_CONSTEXPR InitMessage::InitMessage(
    ::_pbi::ConstantInitialized)
  : addr_req_(nullptr)
  , addr_res_(nullptr)
  , pools_(nullptr){}
struct InitMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitMessageDefaultTypeInternal() {}
  union {
    InitMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitMessageDefaultTypeInternal _InitMessage_default_instance_;
}  // namespace protobuf
}  // namespace init
}  // namespace zjchain
static ::_pb::Metadata file_level_metadata_protos_2finit_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2finit_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2finit_2eproto = nullptr;

const uint32_t TableStruct_protos_2finit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GetAddressInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GetAddressInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GetAddressInfoRequest, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GetAddressInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GetAddressInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GetAddressInfoResponse, block_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, pools_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, elect_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, member_index_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, mod_num_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, leader_idx_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InvalidLeaderPools, version_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, shard_id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, bls_enc_data_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, bls_hash_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, join_info_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, local_poly_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::GenesisInitBlsInfo, prikey_),
  6,
  7,
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InitMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InitMessage, addr_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InitMessage, addr_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::init::protobuf::InitMessage, pools_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::zjchain::init::protobuf::GetAddressInfoRequest)},
  { 8, 15, -1, sizeof(::zjchain::init::protobuf::GetAddressInfoResponse)},
  { 16, 28, -1, sizeof(::zjchain::init::protobuf::InvalidLeaderPools)},
  { 34, 48, -1, sizeof(::zjchain::init::protobuf::GenesisInitBlsInfo)},
  { 56, 65, -1, sizeof(::zjchain::init::protobuf::InitMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zjchain::init::protobuf::_GetAddressInfoRequest_default_instance_._instance,
  &::zjchain::init::protobuf::_GetAddressInfoResponse_default_instance_._instance,
  &::zjchain::init::protobuf::_InvalidLeaderPools_default_instance_._instance,
  &::zjchain::init::protobuf::_GenesisInitBlsInfo_default_instance_._instance,
  &::zjchain::init::protobuf::_InitMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2finit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021protos/init.proto\022\025zjchain.init.protob"
  "uf\032\020protos/bls.proto\032\022protos/block.proto"
  "\"#\n\025GetAddressInfoRequest\022\n\n\002id\030\001 \001(\014\"F\n"
  "\026GetAddressInfoResponse\022,\n\005block\030\001 \001(\0132\035"
  ".zjchain.block.protobuf.Block\"\205\001\n\022Invali"
  "dLeaderPools\022\r\n\005pools\030\001 \003(\005\022\024\n\014elect_hei"
  "ght\030\002 \001(\004\022\024\n\014member_index\030\003 \001(\r\022\017\n\007mod_n"
  "um\030\004 \001(\005\022\022\n\nleader_idx\030\005 \001(\r\022\017\n\007version\030"
  "\006 \001(\r\"\355\001\n\022GenesisInitBlsInfo\022\016\n\006height\030\001"
  " \001(\004\022\020\n\010shard_id\030\002 \001(\r\022\n\n\002id\030\003 \001(\014\022\024\n\014bl"
  "s_enc_data\030\004 \001(\014\022\020\n\010bls_hash\030\005 \001(\014\0226\n\tjo"
  "in_info\030\006 \001(\0132#.zjchain.bls.protobuf.Joi"
  "nElectInfo\0229\n\nlocal_poly\030\007 \001(\0132%.zjchain"
  ".bls.protobuf.LocalPolynomial\022\016\n\006prikey\030"
  "\010 \001(\014\"\310\001\n\013InitMessage\022>\n\010addr_req\030\001 \001(\0132"
  ",.zjchain.init.protobuf.GetAddressInfoRe"
  "quest\022\?\n\010addr_res\030\002 \001(\0132-.zjchain.init.p"
  "rotobuf.GetAddressInfoResponse\0228\n\005pools\030"
  "\003 \001(\0132).zjchain.init.protobuf.InvalidLea"
  "derPools"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2finit_2eproto_deps[2] = {
  &::descriptor_table_protos_2fblock_2eproto,
  &::descriptor_table_protos_2fbls_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2finit_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2finit_2eproto = {
    false, false, 768, descriptor_table_protodef_protos_2finit_2eproto,
    "protos/init.proto",
    &descriptor_table_protos_2finit_2eproto_once, descriptor_table_protos_2finit_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_protos_2finit_2eproto::offsets,
    file_level_metadata_protos_2finit_2eproto, file_level_enum_descriptors_protos_2finit_2eproto,
    file_level_service_descriptors_protos_2finit_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2finit_2eproto_getter() {
  return &descriptor_table_protos_2finit_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2finit_2eproto(&descriptor_table_protos_2finit_2eproto);
namespace zjchain {
namespace init {
namespace protobuf {

// ===================================================================

class GetAddressInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAddressInfoRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAddressInfoRequest::GetAddressInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.init.protobuf.GetAddressInfoRequest)
}
GetAddressInfoRequest::GetAddressInfoRequest(const GetAddressInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.init.protobuf.GetAddressInfoRequest)
}

inline void GetAddressInfoRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAddressInfoRequest::~GetAddressInfoRequest() {
  // @@protoc_insertion_point(destructor:zjchain.init.protobuf.GetAddressInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAddressInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void GetAddressInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAddressInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.init.protobuf.GetAddressInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAddressInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAddressInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.init.protobuf.GetAddressInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.init.protobuf.GetAddressInfoRequest)
  return target;
}

size_t GetAddressInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.init.protobuf.GetAddressInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAddressInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAddressInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAddressInfoRequest::GetClassData() const { return &_class_data_; }

void GetAddressInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAddressInfoRequest *>(to)->MergeFrom(
      static_cast<const GetAddressInfoRequest &>(from));
}


void GetAddressInfoRequest::MergeFrom(const GetAddressInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.init.protobuf.GetAddressInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAddressInfoRequest::CopyFrom(const GetAddressInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.init.protobuf.GetAddressInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressInfoRequest::IsInitialized() const {
  return true;
}

void GetAddressInfoRequest::InternalSwap(GetAddressInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2finit_2eproto_getter, &descriptor_table_protos_2finit_2eproto_once,
      file_level_metadata_protos_2finit_2eproto[0]);
}

// ===================================================================

class GetAddressInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAddressInfoResponse>()._has_bits_);
  static const ::zjchain::block::protobuf::Block& block(const GetAddressInfoResponse* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zjchain::block::protobuf::Block&
GetAddressInfoResponse::_Internal::block(const GetAddressInfoResponse* msg) {
  return *msg->block_;
}
void GetAddressInfoResponse::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetAddressInfoResponse::GetAddressInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.init.protobuf.GetAddressInfoResponse)
}
GetAddressInfoResponse::GetAddressInfoResponse(const GetAddressInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::zjchain::block::protobuf::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.init.protobuf.GetAddressInfoResponse)
}

inline void GetAddressInfoResponse::SharedCtor() {
block_ = nullptr;
}

GetAddressInfoResponse::~GetAddressInfoResponse() {
  // @@protoc_insertion_point(destructor:zjchain.init.protobuf.GetAddressInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAddressInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void GetAddressInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAddressInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.init.protobuf.GetAddressInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAddressInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAddressInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.init.protobuf.GetAddressInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.init.protobuf.GetAddressInfoResponse)
  return target;
}

size_t GetAddressInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.init.protobuf.GetAddressInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zjchain.block.protobuf.Block block = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAddressInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAddressInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAddressInfoResponse::GetClassData() const { return &_class_data_; }

void GetAddressInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAddressInfoResponse *>(to)->MergeFrom(
      static_cast<const GetAddressInfoResponse &>(from));
}


void GetAddressInfoResponse::MergeFrom(const GetAddressInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.init.protobuf.GetAddressInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAddressInfoResponse::CopyFrom(const GetAddressInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.init.protobuf.GetAddressInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressInfoResponse::IsInitialized() const {
  return true;
}

void GetAddressInfoResponse::InternalSwap(GetAddressInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2finit_2eproto_getter, &descriptor_table_protos_2finit_2eproto_once,
      file_level_metadata_protos_2finit_2eproto[1]);
}

// ===================================================================

class InvalidLeaderPools::_Internal {
 public:
  using HasBits = decltype(std::declval<InvalidLeaderPools>()._has_bits_);
  static void set_has_elect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_member_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mod_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leader_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

InvalidLeaderPools::InvalidLeaderPools(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pools_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.init.protobuf.InvalidLeaderPools)
}
InvalidLeaderPools::InvalidLeaderPools(const InvalidLeaderPools& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pools_(from.pools_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&elect_height_, &from.elect_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&elect_height_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:zjchain.init.protobuf.InvalidLeaderPools)
}

inline void InvalidLeaderPools::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&elect_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&elect_height_)) + sizeof(version_));
}

InvalidLeaderPools::~InvalidLeaderPools() {
  // @@protoc_insertion_point(destructor:zjchain.init.protobuf.InvalidLeaderPools)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvalidLeaderPools::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvalidLeaderPools::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvalidLeaderPools::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.init.protobuf.InvalidLeaderPools)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pools_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&elect_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&elect_height_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvalidLeaderPools::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 pools = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pools(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pools(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 elect_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_elect_height(&has_bits);
          elect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 member_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_member_index(&has_bits);
          member_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mod_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mod_num(&has_bits);
          mod_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_leader_idx(&has_bits);
          leader_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvalidLeaderPools::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.init.protobuf.InvalidLeaderPools)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pools = 1;
  for (int i = 0, n = this->_internal_pools_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pools(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 elect_height = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_elect_height(), target);
  }

  // optional uint32 member_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_member_index(), target);
  }

  // optional int32 mod_num = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mod_num(), target);
  }

  // optional uint32 leader_idx = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_leader_idx(), target);
  }

  // optional uint32 version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.init.protobuf.InvalidLeaderPools)
  return target;
}

size_t InvalidLeaderPools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.init.protobuf.InvalidLeaderPools)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pools = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->pools_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pools_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 elect_height = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elect_height());
    }

    // optional uint32 member_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_index());
    }

    // optional int32 mod_num = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mod_num());
    }

    // optional uint32 leader_idx = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_idx());
    }

    // optional uint32 version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvalidLeaderPools::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvalidLeaderPools::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvalidLeaderPools::GetClassData() const { return &_class_data_; }

void InvalidLeaderPools::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvalidLeaderPools *>(to)->MergeFrom(
      static_cast<const InvalidLeaderPools &>(from));
}


void InvalidLeaderPools::MergeFrom(const InvalidLeaderPools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.init.protobuf.InvalidLeaderPools)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pools_.MergeFrom(from.pools_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      elect_height_ = from.elect_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      member_index_ = from.member_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      mod_num_ = from.mod_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      leader_idx_ = from.leader_idx_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvalidLeaderPools::CopyFrom(const InvalidLeaderPools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.init.protobuf.InvalidLeaderPools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidLeaderPools::IsInitialized() const {
  return true;
}

void InvalidLeaderPools::InternalSwap(InvalidLeaderPools* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pools_.InternalSwap(&other->pools_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvalidLeaderPools, version_)
      + sizeof(InvalidLeaderPools::version_)
      - PROTOBUF_FIELD_OFFSET(InvalidLeaderPools, elect_height_)>(
          reinterpret_cast<char*>(&elect_height_),
          reinterpret_cast<char*>(&other->elect_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvalidLeaderPools::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2finit_2eproto_getter, &descriptor_table_protos_2finit_2eproto_once,
      file_level_metadata_protos_2finit_2eproto[2]);
}

// ===================================================================

class GenesisInitBlsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisInitBlsInfo>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_shard_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bls_enc_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bls_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zjchain::bls::protobuf::JoinElectInfo& join_info(const GenesisInitBlsInfo* msg);
  static void set_has_join_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zjchain::bls::protobuf::LocalPolynomial& local_poly(const GenesisInitBlsInfo* msg);
  static void set_has_local_poly(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prikey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zjchain::bls::protobuf::JoinElectInfo&
GenesisInitBlsInfo::_Internal::join_info(const GenesisInitBlsInfo* msg) {
  return *msg->join_info_;
}
const ::zjchain::bls::protobuf::LocalPolynomial&
GenesisInitBlsInfo::_Internal::local_poly(const GenesisInitBlsInfo* msg) {
  return *msg->local_poly_;
}
void GenesisInitBlsInfo::clear_join_info() {
  if (join_info_ != nullptr) join_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GenesisInitBlsInfo::clear_local_poly() {
  if (local_poly_ != nullptr) local_poly_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
GenesisInitBlsInfo::GenesisInitBlsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.init.protobuf.GenesisInitBlsInfo)
}
GenesisInitBlsInfo::GenesisInitBlsInfo(const GenesisInitBlsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  bls_enc_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bls_enc_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bls_enc_data()) {
    bls_enc_data_.Set(from._internal_bls_enc_data(), 
      GetArenaForAllocation());
  }
  bls_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bls_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bls_hash()) {
    bls_hash_.Set(from._internal_bls_hash(), 
      GetArenaForAllocation());
  }
  prikey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prikey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prikey()) {
    prikey_.Set(from._internal_prikey(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_join_info()) {
    join_info_ = new ::zjchain::bls::protobuf::JoinElectInfo(*from.join_info_);
  } else {
    join_info_ = nullptr;
  }
  if (from._internal_has_local_poly()) {
    local_poly_ = new ::zjchain::bls::protobuf::LocalPolynomial(*from.local_poly_);
  } else {
    local_poly_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_id_) -
    reinterpret_cast<char*>(&height_)) + sizeof(shard_id_));
  // @@protoc_insertion_point(copy_constructor:zjchain.init.protobuf.GenesisInitBlsInfo)
}

inline void GenesisInitBlsInfo::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bls_enc_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bls_enc_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bls_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bls_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prikey_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prikey_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&join_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shard_id_) -
    reinterpret_cast<char*>(&join_info_)) + sizeof(shard_id_));
}

GenesisInitBlsInfo::~GenesisInitBlsInfo() {
  // @@protoc_insertion_point(destructor:zjchain.init.protobuf.GenesisInitBlsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisInitBlsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  bls_enc_data_.Destroy();
  bls_hash_.Destroy();
  prikey_.Destroy();
  if (this != internal_default_instance()) delete join_info_;
  if (this != internal_default_instance()) delete local_poly_;
}

void GenesisInitBlsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisInitBlsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.init.protobuf.GenesisInitBlsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bls_enc_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bls_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      prikey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(join_info_ != nullptr);
      join_info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(local_poly_ != nullptr);
      local_poly_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shard_id_) -
        reinterpret_cast<char*>(&height_)) + sizeof(shard_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisInitBlsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shard_id(&has_bits);
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bls_enc_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bls_enc_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bls_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bls_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.bls.protobuf.JoinElectInfo join_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.bls.protobuf.LocalPolynomial local_poly = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_poly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes prikey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_prikey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenesisInitBlsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.init.protobuf.GenesisInitBlsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 height = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // optional uint32 shard_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shard_id(), target);
  }

  // optional bytes id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional bytes bls_enc_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bls_enc_data(), target);
  }

  // optional bytes bls_hash = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bls_hash(), target);
  }

  // optional .zjchain.bls.protobuf.JoinElectInfo join_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::join_info(this),
        _Internal::join_info(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.bls.protobuf.LocalPolynomial local_poly = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::local_poly(this),
        _Internal::local_poly(this).GetCachedSize(), target, stream);
  }

  // optional bytes prikey = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_prikey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.init.protobuf.GenesisInitBlsInfo)
  return target;
}

size_t GenesisInitBlsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.init.protobuf.GenesisInitBlsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional bytes bls_enc_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bls_enc_data());
    }

    // optional bytes bls_hash = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bls_hash());
    }

    // optional bytes prikey = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prikey());
    }

    // optional .zjchain.bls.protobuf.JoinElectInfo join_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *join_info_);
    }

    // optional .zjchain.bls.protobuf.LocalPolynomial local_poly = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_poly_);
    }

    // optional uint64 height = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

    // optional uint32 shard_id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shard_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisInitBlsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisInitBlsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisInitBlsInfo::GetClassData() const { return &_class_data_; }

void GenesisInitBlsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenesisInitBlsInfo *>(to)->MergeFrom(
      static_cast<const GenesisInitBlsInfo &>(from));
}


void GenesisInitBlsInfo::MergeFrom(const GenesisInitBlsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.init.protobuf.GenesisInitBlsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bls_enc_data(from._internal_bls_enc_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bls_hash(from._internal_bls_hash());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_prikey(from._internal_prikey());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_join_info()->::zjchain::bls::protobuf::JoinElectInfo::MergeFrom(from._internal_join_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_local_poly()->::zjchain::bls::protobuf::LocalPolynomial::MergeFrom(from._internal_local_poly());
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      shard_id_ = from.shard_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisInitBlsInfo::CopyFrom(const GenesisInitBlsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.init.protobuf.GenesisInitBlsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisInitBlsInfo::IsInitialized() const {
  return true;
}

void GenesisInitBlsInfo::InternalSwap(GenesisInitBlsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bls_enc_data_, lhs_arena,
      &other->bls_enc_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bls_hash_, lhs_arena,
      &other->bls_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &prikey_, lhs_arena,
      &other->prikey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisInitBlsInfo, shard_id_)
      + sizeof(GenesisInitBlsInfo::shard_id_)
      - PROTOBUF_FIELD_OFFSET(GenesisInitBlsInfo, join_info_)>(
          reinterpret_cast<char*>(&join_info_),
          reinterpret_cast<char*>(&other->join_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisInitBlsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2finit_2eproto_getter, &descriptor_table_protos_2finit_2eproto_once,
      file_level_metadata_protos_2finit_2eproto[3]);
}

// ===================================================================

class InitMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InitMessage>()._has_bits_);
  static const ::zjchain::init::protobuf::GetAddressInfoRequest& addr_req(const InitMessage* msg);
  static void set_has_addr_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zjchain::init::protobuf::GetAddressInfoResponse& addr_res(const InitMessage* msg);
  static void set_has_addr_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zjchain::init::protobuf::InvalidLeaderPools& pools(const InitMessage* msg);
  static void set_has_pools(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zjchain::init::protobuf::GetAddressInfoRequest&
InitMessage::_Internal::addr_req(const InitMessage* msg) {
  return *msg->addr_req_;
}
const ::zjchain::init::protobuf::GetAddressInfoResponse&
InitMessage::_Internal::addr_res(const InitMessage* msg) {
  return *msg->addr_res_;
}
const ::zjchain::init::protobuf::InvalidLeaderPools&
InitMessage::_Internal::pools(const InitMessage* msg) {
  return *msg->pools_;
}
InitMessage::InitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.init.protobuf.InitMessage)
}
InitMessage::InitMessage(const InitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_addr_req()) {
    addr_req_ = new ::zjchain::init::protobuf::GetAddressInfoRequest(*from.addr_req_);
  } else {
    addr_req_ = nullptr;
  }
  if (from._internal_has_addr_res()) {
    addr_res_ = new ::zjchain::init::protobuf::GetAddressInfoResponse(*from.addr_res_);
  } else {
    addr_res_ = nullptr;
  }
  if (from._internal_has_pools()) {
    pools_ = new ::zjchain::init::protobuf::InvalidLeaderPools(*from.pools_);
  } else {
    pools_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.init.protobuf.InitMessage)
}

inline void InitMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&addr_req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pools_) -
    reinterpret_cast<char*>(&addr_req_)) + sizeof(pools_));
}

InitMessage::~InitMessage() {
  // @@protoc_insertion_point(destructor:zjchain.init.protobuf.InitMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete addr_req_;
  if (this != internal_default_instance()) delete addr_res_;
  if (this != internal_default_instance()) delete pools_;
}

void InitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.init.protobuf.InitMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(addr_req_ != nullptr);
      addr_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(addr_res_ != nullptr);
      addr_res_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pools_ != nullptr);
      pools_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.init.protobuf.GetAddressInfoRequest addr_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.init.protobuf.GetAddressInfoResponse addr_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.init.protobuf.InvalidLeaderPools pools = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pools(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.init.protobuf.InitMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.init.protobuf.GetAddressInfoRequest addr_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::addr_req(this),
        _Internal::addr_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.init.protobuf.GetAddressInfoResponse addr_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::addr_res(this),
        _Internal::addr_res(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.init.protobuf.InvalidLeaderPools pools = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pools(this),
        _Internal::pools(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.init.protobuf.InitMessage)
  return target;
}

size_t InitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.init.protobuf.InitMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .zjchain.init.protobuf.GetAddressInfoRequest addr_req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *addr_req_);
    }

    // optional .zjchain.init.protobuf.GetAddressInfoResponse addr_res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *addr_res_);
    }

    // optional .zjchain.init.protobuf.InvalidLeaderPools pools = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pools_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitMessage::GetClassData() const { return &_class_data_; }

void InitMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitMessage *>(to)->MergeFrom(
      static_cast<const InitMessage &>(from));
}


void InitMessage::MergeFrom(const InitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.init.protobuf.InitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_addr_req()->::zjchain::init::protobuf::GetAddressInfoRequest::MergeFrom(from._internal_addr_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_addr_res()->::zjchain::init::protobuf::GetAddressInfoResponse::MergeFrom(from._internal_addr_res());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pools()->::zjchain::init::protobuf::InvalidLeaderPools::MergeFrom(from._internal_pools());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitMessage::CopyFrom(const InitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.init.protobuf.InitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitMessage::IsInitialized() const {
  return true;
}

void InitMessage::InternalSwap(InitMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitMessage, pools_)
      + sizeof(InitMessage::pools_)
      - PROTOBUF_FIELD_OFFSET(InitMessage, addr_req_)>(
          reinterpret_cast<char*>(&addr_req_),
          reinterpret_cast<char*>(&other->addr_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2finit_2eproto_getter, &descriptor_table_protos_2finit_2eproto_once,
      file_level_metadata_protos_2finit_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace init
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zjchain::init::protobuf::GetAddressInfoRequest*
Arena::CreateMaybeMessage< ::zjchain::init::protobuf::GetAddressInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::init::protobuf::GetAddressInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::init::protobuf::GetAddressInfoResponse*
Arena::CreateMaybeMessage< ::zjchain::init::protobuf::GetAddressInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::init::protobuf::GetAddressInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::init::protobuf::InvalidLeaderPools*
Arena::CreateMaybeMessage< ::zjchain::init::protobuf::InvalidLeaderPools >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::init::protobuf::InvalidLeaderPools >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::init::protobuf::GenesisInitBlsInfo*
Arena::CreateMaybeMessage< ::zjchain::init::protobuf::GenesisInitBlsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::init::protobuf::GenesisInitBlsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::init::protobuf::InitMessage*
Arena::CreateMaybeMessage< ::zjchain::init::protobuf::InitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::init::protobuf::InitMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
