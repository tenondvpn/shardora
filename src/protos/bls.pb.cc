// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/bls.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/bls.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace bls {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* VerifyVecItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyVecItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlsPublicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlsPublicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyVecBrdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyVecBrdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinElectBlsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinElectBlsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinElectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinElectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalPolynomial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalPolynomial_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalBlsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalBlsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlsVerifyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlsVerifyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyVecBrdRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyVecBrdRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapSecKeyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapSecKeyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapSecKeyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapSecKeyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapSecKeyRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapSecKeyRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgainstParticipant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgainstParticipant_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckVerfiyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckVerfiyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckSwapKeyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckSwapKeyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlsMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2fbls_2eproto() {
  protobuf_AddDesc_protos_2fbls_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/bls.proto");
  GOOGLE_CHECK(file != NULL);
  VerifyVecItem_descriptor_ = file->message_type(0);
  static const int VerifyVecItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, x_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, x_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, y_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, y_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, z_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, z_c1_),
  };
  VerifyVecItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyVecItem_descriptor_,
      VerifyVecItem::default_instance_,
      VerifyVecItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyVecItem));
  BlsPublicKey_descriptor_ = file->message_type(1);
  static const int BlsPublicKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, x_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, x_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, y_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, y_c1_),
  };
  BlsPublicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlsPublicKey_descriptor_,
      BlsPublicKey::default_instance_,
      BlsPublicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlsPublicKey));
  VerifyVecBrdReq_descriptor_ = file->message_type(2);
  static const int VerifyVecBrdReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdReq, verify_vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdReq, change_idx_),
  };
  VerifyVecBrdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyVecBrdReq_descriptor_,
      VerifyVecBrdReq::default_instance_,
      VerifyVecBrdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyVecBrdReq));
  JoinElectBlsInfo_descriptor_ = file->message_type(3);
  static const int JoinElectBlsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectBlsInfo, verified_g2_),
  };
  JoinElectBlsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinElectBlsInfo_descriptor_,
      JoinElectBlsInfo::default_instance_,
      JoinElectBlsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectBlsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectBlsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinElectBlsInfo));
  JoinElectInfo_descriptor_ = file->message_type(4);
  static const int JoinElectInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectInfo, shard_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectInfo, member_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectInfo, change_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectInfo, g2_req_),
  };
  JoinElectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinElectInfo_descriptor_,
      JoinElectInfo::default_instance_,
      JoinElectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinElectInfo));
  LocalPolynomial_descriptor_ = file->message_type(5);
  static const int LocalPolynomial_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalPolynomial, polynomial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalPolynomial, change_idx_),
  };
  LocalPolynomial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalPolynomial_descriptor_,
      LocalPolynomial::default_instance_,
      LocalPolynomial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalPolynomial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalPolynomial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalPolynomial));
  LocalBlsItem_descriptor_ = file->message_type(6);
  static const int LocalBlsItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalBlsItem, polynomial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalBlsItem, verify_vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalBlsItem, valid_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalBlsItem, valid_n_),
  };
  LocalBlsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalBlsItem_descriptor_,
      LocalBlsItem::default_instance_,
      LocalBlsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalBlsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalBlsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalBlsItem));
  BlsVerifyValue_descriptor_ = file->message_type(7);
  static const int BlsVerifyValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsVerifyValue, verify_vec_),
  };
  BlsVerifyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlsVerifyValue_descriptor_,
      BlsVerifyValue::default_instance_,
      BlsVerifyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsVerifyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsVerifyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlsVerifyValue));
  VerifyVecBrdRes_descriptor_ = file->message_type(8);
  static const int VerifyVecBrdRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdRes, public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdRes, public_port_),
  };
  VerifyVecBrdRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyVecBrdRes_descriptor_,
      VerifyVecBrdRes::default_instance_,
      VerifyVecBrdRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecBrdRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyVecBrdRes));
  SwapSecKeyItem_descriptor_ = file->message_type(9);
  static const int SwapSecKeyItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyItem, sec_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyItem, sec_key_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyItem, old_g2_),
  };
  SwapSecKeyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapSecKeyItem_descriptor_,
      SwapSecKeyItem::default_instance_,
      SwapSecKeyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapSecKeyItem));
  SwapSecKeyReq_descriptor_ = file->message_type(10);
  static const int SwapSecKeyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyReq, keys_),
  };
  SwapSecKeyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapSecKeyReq_descriptor_,
      SwapSecKeyReq::default_instance_,
      SwapSecKeyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapSecKeyReq));
  SwapSecKeyRes_descriptor_ = file->message_type(11);
  static const int SwapSecKeyRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyRes, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyRes, sec_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyRes, sec_key_len_),
  };
  SwapSecKeyRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapSecKeyRes_descriptor_,
      SwapSecKeyRes::default_instance_,
      SwapSecKeyRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapSecKeyRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapSecKeyRes));
  AgainstParticipant_descriptor_ = file->message_type(12);
  static const int AgainstParticipant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgainstParticipant, against_index_),
  };
  AgainstParticipant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgainstParticipant_descriptor_,
      AgainstParticipant::default_instance_,
      AgainstParticipant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgainstParticipant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgainstParticipant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgainstParticipant));
  FinishBroadcast_descriptor_ = file->message_type(13);
  static const int FinishBroadcast_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, bitmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, common_pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, bls_sign_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, bls_sign_y_),
  };
  FinishBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishBroadcast_descriptor_,
      FinishBroadcast::default_instance_,
      FinishBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishBroadcast));
  CheckVerfiyReq_descriptor_ = file->message_type(14);
  static const int CheckVerfiyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVerfiyReq, index_),
  };
  CheckVerfiyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckVerfiyReq_descriptor_,
      CheckVerfiyReq::default_instance_,
      CheckVerfiyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVerfiyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVerfiyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVerfiyReq));
  CheckSwapKeyReq_descriptor_ = file->message_type(15);
  static const int CheckSwapKeyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSwapKeyReq, index_),
  };
  CheckSwapKeyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckSwapKeyReq_descriptor_,
      CheckSwapKeyReq::default_instance_,
      CheckSwapKeyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSwapKeyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSwapKeyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckSwapKeyReq));
  BlsMessage_descriptor_ = file->message_type(16);
  static const int BlsMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, verify_brd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, swap_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, finish_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, check_verify_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, check_swapkey_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, elect_height_),
  };
  BlsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlsMessage_descriptor_,
      BlsMessage::default_instance_,
      BlsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlsMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2fbls_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyVecItem_descriptor_, &VerifyVecItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlsPublicKey_descriptor_, &BlsPublicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyVecBrdReq_descriptor_, &VerifyVecBrdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinElectBlsInfo_descriptor_, &JoinElectBlsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinElectInfo_descriptor_, &JoinElectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalPolynomial_descriptor_, &LocalPolynomial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalBlsItem_descriptor_, &LocalBlsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlsVerifyValue_descriptor_, &BlsVerifyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyVecBrdRes_descriptor_, &VerifyVecBrdRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapSecKeyItem_descriptor_, &SwapSecKeyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapSecKeyReq_descriptor_, &SwapSecKeyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapSecKeyRes_descriptor_, &SwapSecKeyRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgainstParticipant_descriptor_, &AgainstParticipant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishBroadcast_descriptor_, &FinishBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVerfiyReq_descriptor_, &CheckVerfiyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckSwapKeyReq_descriptor_, &CheckSwapKeyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlsMessage_descriptor_, &BlsMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2fbls_2eproto() {
  delete VerifyVecItem::default_instance_;
  delete VerifyVecItem_reflection_;
  delete BlsPublicKey::default_instance_;
  delete BlsPublicKey_reflection_;
  delete VerifyVecBrdReq::default_instance_;
  delete VerifyVecBrdReq_reflection_;
  delete JoinElectBlsInfo::default_instance_;
  delete JoinElectBlsInfo_reflection_;
  delete JoinElectInfo::default_instance_;
  delete JoinElectInfo_reflection_;
  delete LocalPolynomial::default_instance_;
  delete LocalPolynomial_reflection_;
  delete LocalBlsItem::default_instance_;
  delete LocalBlsItem_reflection_;
  delete BlsVerifyValue::default_instance_;
  delete BlsVerifyValue_reflection_;
  delete VerifyVecBrdRes::default_instance_;
  delete VerifyVecBrdRes_reflection_;
  delete SwapSecKeyItem::default_instance_;
  delete SwapSecKeyItem_reflection_;
  delete SwapSecKeyReq::default_instance_;
  delete SwapSecKeyReq_reflection_;
  delete SwapSecKeyRes::default_instance_;
  delete SwapSecKeyRes_reflection_;
  delete AgainstParticipant::default_instance_;
  delete AgainstParticipant_reflection_;
  delete FinishBroadcast::default_instance_;
  delete FinishBroadcast_reflection_;
  delete CheckVerfiyReq::default_instance_;
  delete CheckVerfiyReq_reflection_;
  delete CheckSwapKeyReq::default_instance_;
  delete CheckSwapKeyReq_reflection_;
  delete BlsMessage::default_instance_;
  delete BlsMessage_reflection_;
}

void protobuf_AddDesc_protos_2fbls_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020protos/bls.proto\022\024zjchain.bls.protobuf"
    "\"c\n\rVerifyVecItem\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004x_c1\030"
    "\002 \001(\014\022\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\022\014\n\004z_c"
    "0\030\005 \001(\014\022\014\n\004z_c1\030\006 \001(\014\"F\n\014BlsPublicKey\022\014\n"
    "\004x_c0\030\001 \001(\014\022\014\n\004x_c1\030\002 \001(\014\022\014\n\004y_c0\030\003 \001(\014\022"
    "\014\n\004y_c1\030\004 \001(\014\"^\n\017VerifyVecBrdReq\0227\n\nveri"
    "fy_vec\030\001 \003(\0132#.zjchain.bls.protobuf.Veri"
    "fyVecItem\022\022\n\nchange_idx\030\002 \001(\r\"L\n\020JoinEle"
    "ctBlsInfo\0228\n\013verified_g2\030\001 \001(\0132#.zjchain"
    ".bls.protobuf.VerifyVecItem\"\200\001\n\rJoinElec"
    "tInfo\022\020\n\010shard_id\030\001 \001(\r\022\022\n\nmember_idx\030\002 "
    "\001(\r\022\022\n\nchange_idx\030\003 \001(\r\0225\n\006g2_req\030\004 \001(\0132"
    "%.zjchain.bls.protobuf.VerifyVecBrdReq\"<"
    "\n\017LocalPolynomial\022\022\n\npolynomial\030\001 \003(\014\022\025\n"
    "\nchange_idx\030\002 \001(\r:\0010\"}\n\014LocalBlsItem\022\022\n\n"
    "polynomial\030\001 \003(\014\0227\n\nverify_vec\030\002 \003(\0132#.z"
    "jchain.bls.protobuf.VerifyVecItem\022\017\n\007val"
    "id_t\030\003 \001(\r\022\017\n\007valid_n\030\004 \001(\r\"I\n\016BlsVerify"
    "Value\0227\n\nverify_vec\030\001 \003(\0132#.zjchain.bls."
    "protobuf.VerifyVecItem\"9\n\017VerifyVecBrdRe"
    "s\022\021\n\tpublic_ip\030\001 \001(\014\022\023\n\013public_port\030\002 \001("
    "\r\"j\n\016SwapSecKeyItem\022\017\n\007sec_key\030\001 \001(\014\022\023\n\013"
    "sec_key_len\030\002 \001(\r\0222\n\006old_g2\030\003 \001(\0132\".zjch"
    "ain.bls.protobuf.BlsPublicKey\"C\n\rSwapSec"
    "KeyReq\0222\n\004keys\030\001 \003(\0132$.zjchain.bls.proto"
    "buf.SwapSecKeyItem\"D\n\rSwapSecKeyRes\022\r\n\005i"
    "ndex\030\001 \001(\r\022\017\n\007sec_key\030\002 \001(\014\022\023\n\013sec_key_l"
    "en\030\003 \001(\r\"+\n\022AgainstParticipant\022\025\n\ragains"
    "t_index\030\001 \001(\r\"\314\001\n\017FinishBroadcast\022\016\n\006bit"
    "map\030\001 \003(\004\0222\n\006pubkey\030\002 \001(\0132\".zjchain.bls."
    "protobuf.BlsPublicKey\0229\n\rcommon_pubkey\030\003"
    " \001(\0132\".zjchain.bls.protobuf.BlsPublicKey"
    "\022\022\n\nnetwork_id\030\004 \001(\r\022\022\n\nbls_sign_x\030\005 \001(\014"
    "\022\022\n\nbls_sign_y\030\006 \001(\014\"\037\n\016CheckVerfiyReq\022\r"
    "\n\005index\030\001 \001(\r\" \n\017CheckSwapKeyReq\022\r\n\005inde"
    "x\030\001 \001(\r\"\340\002\n\nBlsMessage\0229\n\nverify_brd\030\001 \001"
    "(\0132%.zjchain.bls.protobuf.VerifyVecBrdRe"
    "q\0225\n\010swap_req\030\002 \001(\0132#.zjchain.bls.protob"
    "uf.SwapSecKeyReq\0229\n\nfinish_req\030\003 \001(\0132%.z"
    "jchain.bls.protobuf.FinishBroadcast\022>\n\020c"
    "heck_verify_req\030\004 \001(\0132$.zjchain.bls.prot"
    "obuf.CheckVerfiyReq\022@\n\021check_swapkey_req"
    "\030\005 \001(\0132%.zjchain.bls.protobuf.CheckSwapK"
    "eyReq\022\r\n\005index\030\006 \001(\r\022\024\n\014elect_height\030\007 \001"
    "(\004", 1762);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/bls.proto", &protobuf_RegisterTypes);
  VerifyVecItem::default_instance_ = new VerifyVecItem();
  BlsPublicKey::default_instance_ = new BlsPublicKey();
  VerifyVecBrdReq::default_instance_ = new VerifyVecBrdReq();
  JoinElectBlsInfo::default_instance_ = new JoinElectBlsInfo();
  JoinElectInfo::default_instance_ = new JoinElectInfo();
  LocalPolynomial::default_instance_ = new LocalPolynomial();
  LocalBlsItem::default_instance_ = new LocalBlsItem();
  BlsVerifyValue::default_instance_ = new BlsVerifyValue();
  VerifyVecBrdRes::default_instance_ = new VerifyVecBrdRes();
  SwapSecKeyItem::default_instance_ = new SwapSecKeyItem();
  SwapSecKeyReq::default_instance_ = new SwapSecKeyReq();
  SwapSecKeyRes::default_instance_ = new SwapSecKeyRes();
  AgainstParticipant::default_instance_ = new AgainstParticipant();
  FinishBroadcast::default_instance_ = new FinishBroadcast();
  CheckVerfiyReq::default_instance_ = new CheckVerfiyReq();
  CheckSwapKeyReq::default_instance_ = new CheckSwapKeyReq();
  BlsMessage::default_instance_ = new BlsMessage();
  VerifyVecItem::default_instance_->InitAsDefaultInstance();
  BlsPublicKey::default_instance_->InitAsDefaultInstance();
  VerifyVecBrdReq::default_instance_->InitAsDefaultInstance();
  JoinElectBlsInfo::default_instance_->InitAsDefaultInstance();
  JoinElectInfo::default_instance_->InitAsDefaultInstance();
  LocalPolynomial::default_instance_->InitAsDefaultInstance();
  LocalBlsItem::default_instance_->InitAsDefaultInstance();
  BlsVerifyValue::default_instance_->InitAsDefaultInstance();
  VerifyVecBrdRes::default_instance_->InitAsDefaultInstance();
  SwapSecKeyItem::default_instance_->InitAsDefaultInstance();
  SwapSecKeyReq::default_instance_->InitAsDefaultInstance();
  SwapSecKeyRes::default_instance_->InitAsDefaultInstance();
  AgainstParticipant::default_instance_->InitAsDefaultInstance();
  FinishBroadcast::default_instance_->InitAsDefaultInstance();
  CheckVerfiyReq::default_instance_->InitAsDefaultInstance();
  CheckSwapKeyReq::default_instance_->InitAsDefaultInstance();
  BlsMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2fbls_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2fbls_2eproto {
  StaticDescriptorInitializer_protos_2fbls_2eproto() {
    protobuf_AddDesc_protos_2fbls_2eproto();
  }
} static_descriptor_initializer_protos_2fbls_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VerifyVecItem::kXC0FieldNumber;
const int VerifyVecItem::kXC1FieldNumber;
const int VerifyVecItem::kYC0FieldNumber;
const int VerifyVecItem::kYC1FieldNumber;
const int VerifyVecItem::kZC0FieldNumber;
const int VerifyVecItem::kZC1FieldNumber;
#endif  // !_MSC_VER

VerifyVecItem::VerifyVecItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyVecItem::InitAsDefaultInstance() {
}

VerifyVecItem::VerifyVecItem(const VerifyVecItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyVecItem::SharedCtor() {
  _cached_size_ = 0;
  x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyVecItem::~VerifyVecItem() {
  SharedDtor();
}

void VerifyVecItem::SharedDtor() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (z_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete z_c0_;
  }
  if (z_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete z_c1_;
  }
  if (this != default_instance_) {
  }
}

void VerifyVecItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyVecItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyVecItem_descriptor_;
}

const VerifyVecItem& VerifyVecItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

VerifyVecItem* VerifyVecItem::default_instance_ = NULL;

VerifyVecItem* VerifyVecItem::New() const {
  return new VerifyVecItem;
}

void VerifyVecItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x_c0()) {
      if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
        x_c0_->clear();
      }
    }
    if (has_x_c1()) {
      if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
        x_c1_->clear();
      }
    }
    if (has_y_c0()) {
      if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
        y_c0_->clear();
      }
    }
    if (has_y_c1()) {
      if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
        y_c1_->clear();
      }
    }
    if (has_z_c0()) {
      if (z_c0_ != &::google::protobuf::internal::kEmptyString) {
        z_c0_->clear();
      }
    }
    if (has_z_c1()) {
      if (z_c1_ != &::google::protobuf::internal::kEmptyString) {
        z_c1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyVecItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes x_c0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x_c1;
        break;
      }

      // optional bytes x_c1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y_c0;
        break;
      }

      // optional bytes y_c0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y_c1;
        break;
      }

      // optional bytes y_c1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z_c0;
        break;
      }

      // optional bytes z_c0 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z_c0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_z_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_z_c1;
        break;
      }

      // optional bytes z_c1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_z_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyVecItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->x_c0(), output);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->x_c1(), output);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->y_c0(), output);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->y_c1(), output);
  }

  // optional bytes z_c0 = 5;
  if (has_z_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->z_c0(), output);
  }

  // optional bytes z_c1 = 6;
  if (has_z_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->z_c1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyVecItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->y_c1(), target);
  }

  // optional bytes z_c0 = 5;
  if (has_z_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->z_c0(), target);
  }

  // optional bytes z_c1 = 6;
  if (has_z_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->z_c1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyVecItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes x_c0 = 1;
    if (has_x_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c0());
    }

    // optional bytes x_c1 = 2;
    if (has_x_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c1());
    }

    // optional bytes y_c0 = 3;
    if (has_y_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c0());
    }

    // optional bytes y_c1 = 4;
    if (has_y_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c1());
    }

    // optional bytes z_c0 = 5;
    if (has_z_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->z_c0());
    }

    // optional bytes z_c1 = 6;
    if (has_z_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->z_c1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyVecItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyVecItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyVecItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyVecItem::MergeFrom(const VerifyVecItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_c0()) {
      set_x_c0(from.x_c0());
    }
    if (from.has_x_c1()) {
      set_x_c1(from.x_c1());
    }
    if (from.has_y_c0()) {
      set_y_c0(from.y_c0());
    }
    if (from.has_y_c1()) {
      set_y_c1(from.y_c1());
    }
    if (from.has_z_c0()) {
      set_z_c0(from.z_c0());
    }
    if (from.has_z_c1()) {
      set_z_c1(from.z_c1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyVecItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyVecItem::CopyFrom(const VerifyVecItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyVecItem::IsInitialized() const {

  return true;
}

void VerifyVecItem::Swap(VerifyVecItem* other) {
  if (other != this) {
    std::swap(x_c0_, other->x_c0_);
    std::swap(x_c1_, other->x_c1_);
    std::swap(y_c0_, other->y_c0_);
    std::swap(y_c1_, other->y_c1_);
    std::swap(z_c0_, other->z_c0_);
    std::swap(z_c1_, other->z_c1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyVecItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyVecItem_descriptor_;
  metadata.reflection = VerifyVecItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlsPublicKey::kXC0FieldNumber;
const int BlsPublicKey::kXC1FieldNumber;
const int BlsPublicKey::kYC0FieldNumber;
const int BlsPublicKey::kYC1FieldNumber;
#endif  // !_MSC_VER

BlsPublicKey::BlsPublicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlsPublicKey::InitAsDefaultInstance() {
}

BlsPublicKey::BlsPublicKey(const BlsPublicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlsPublicKey::SharedCtor() {
  _cached_size_ = 0;
  x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlsPublicKey::~BlsPublicKey() {
  SharedDtor();
}

void BlsPublicKey::SharedDtor() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (this != default_instance_) {
  }
}

void BlsPublicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlsPublicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlsPublicKey_descriptor_;
}

const BlsPublicKey& BlsPublicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

BlsPublicKey* BlsPublicKey::default_instance_ = NULL;

BlsPublicKey* BlsPublicKey::New() const {
  return new BlsPublicKey;
}

void BlsPublicKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x_c0()) {
      if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
        x_c0_->clear();
      }
    }
    if (has_x_c1()) {
      if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
        x_c1_->clear();
      }
    }
    if (has_y_c0()) {
      if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
        y_c0_->clear();
      }
    }
    if (has_y_c1()) {
      if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
        y_c1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlsPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes x_c0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x_c1;
        break;
      }

      // optional bytes x_c1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y_c0;
        break;
      }

      // optional bytes y_c0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y_c1;
        break;
      }

      // optional bytes y_c1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlsPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->x_c0(), output);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->x_c1(), output);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->y_c0(), output);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->y_c1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlsPublicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->y_c1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlsPublicKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes x_c0 = 1;
    if (has_x_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c0());
    }

    // optional bytes x_c1 = 2;
    if (has_x_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c1());
    }

    // optional bytes y_c0 = 3;
    if (has_y_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c0());
    }

    // optional bytes y_c1 = 4;
    if (has_y_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlsPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlsPublicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlsPublicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlsPublicKey::MergeFrom(const BlsPublicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_c0()) {
      set_x_c0(from.x_c0());
    }
    if (from.has_x_c1()) {
      set_x_c1(from.x_c1());
    }
    if (from.has_y_c0()) {
      set_y_c0(from.y_c0());
    }
    if (from.has_y_c1()) {
      set_y_c1(from.y_c1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlsPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlsPublicKey::CopyFrom(const BlsPublicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlsPublicKey::IsInitialized() const {

  return true;
}

void BlsPublicKey::Swap(BlsPublicKey* other) {
  if (other != this) {
    std::swap(x_c0_, other->x_c0_);
    std::swap(x_c1_, other->x_c1_);
    std::swap(y_c0_, other->y_c0_);
    std::swap(y_c1_, other->y_c1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlsPublicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlsPublicKey_descriptor_;
  metadata.reflection = BlsPublicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyVecBrdReq::kVerifyVecFieldNumber;
const int VerifyVecBrdReq::kChangeIdxFieldNumber;
#endif  // !_MSC_VER

VerifyVecBrdReq::VerifyVecBrdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyVecBrdReq::InitAsDefaultInstance() {
}

VerifyVecBrdReq::VerifyVecBrdReq(const VerifyVecBrdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyVecBrdReq::SharedCtor() {
  _cached_size_ = 0;
  change_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyVecBrdReq::~VerifyVecBrdReq() {
  SharedDtor();
}

void VerifyVecBrdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerifyVecBrdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyVecBrdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyVecBrdReq_descriptor_;
}

const VerifyVecBrdReq& VerifyVecBrdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

VerifyVecBrdReq* VerifyVecBrdReq::default_instance_ = NULL;

VerifyVecBrdReq* VerifyVecBrdReq::New() const {
  return new VerifyVecBrdReq;
}

void VerifyVecBrdReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    change_idx_ = 0u;
  }
  verify_vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyVecBrdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_verify_vec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_verify_vec;
        if (input->ExpectTag(16)) goto parse_change_idx;
        break;
      }

      // optional uint32 change_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_idx_)));
          set_has_change_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyVecBrdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  for (int i = 0; i < this->verify_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->verify_vec(i), output);
  }

  // optional uint32 change_idx = 2;
  if (has_change_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyVecBrdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  for (int i = 0; i < this->verify_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->verify_vec(i), target);
  }

  // optional uint32 change_idx = 2;
  if (has_change_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyVecBrdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 change_idx = 2;
    if (has_change_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_idx());
    }

  }
  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  total_size += 1 * this->verify_vec_size();
  for (int i = 0; i < this->verify_vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verify_vec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyVecBrdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyVecBrdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyVecBrdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyVecBrdReq::MergeFrom(const VerifyVecBrdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  verify_vec_.MergeFrom(from.verify_vec_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_change_idx()) {
      set_change_idx(from.change_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyVecBrdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyVecBrdReq::CopyFrom(const VerifyVecBrdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyVecBrdReq::IsInitialized() const {

  return true;
}

void VerifyVecBrdReq::Swap(VerifyVecBrdReq* other) {
  if (other != this) {
    verify_vec_.Swap(&other->verify_vec_);
    std::swap(change_idx_, other->change_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyVecBrdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyVecBrdReq_descriptor_;
  metadata.reflection = VerifyVecBrdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinElectBlsInfo::kVerifiedG2FieldNumber;
#endif  // !_MSC_VER

JoinElectBlsInfo::JoinElectBlsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinElectBlsInfo::InitAsDefaultInstance() {
  verified_g2_ = const_cast< ::zjchain::bls::protobuf::VerifyVecItem*>(&::zjchain::bls::protobuf::VerifyVecItem::default_instance());
}

JoinElectBlsInfo::JoinElectBlsInfo(const JoinElectBlsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinElectBlsInfo::SharedCtor() {
  _cached_size_ = 0;
  verified_g2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinElectBlsInfo::~JoinElectBlsInfo() {
  SharedDtor();
}

void JoinElectBlsInfo::SharedDtor() {
  if (this != default_instance_) {
    delete verified_g2_;
  }
}

void JoinElectBlsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinElectBlsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinElectBlsInfo_descriptor_;
}

const JoinElectBlsInfo& JoinElectBlsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

JoinElectBlsInfo* JoinElectBlsInfo::default_instance_ = NULL;

JoinElectBlsInfo* JoinElectBlsInfo::New() const {
  return new JoinElectBlsInfo;
}

void JoinElectBlsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_verified_g2()) {
      if (verified_g2_ != NULL) verified_g2_->::zjchain::bls::protobuf::VerifyVecItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinElectBlsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.bls.protobuf.VerifyVecItem verified_g2 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verified_g2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinElectBlsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.bls.protobuf.VerifyVecItem verified_g2 = 1;
  if (has_verified_g2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->verified_g2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinElectBlsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.bls.protobuf.VerifyVecItem verified_g2 = 1;
  if (has_verified_g2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->verified_g2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinElectBlsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.bls.protobuf.VerifyVecItem verified_g2 = 1;
    if (has_verified_g2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verified_g2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinElectBlsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinElectBlsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinElectBlsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinElectBlsInfo::MergeFrom(const JoinElectBlsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verified_g2()) {
      mutable_verified_g2()->::zjchain::bls::protobuf::VerifyVecItem::MergeFrom(from.verified_g2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinElectBlsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinElectBlsInfo::CopyFrom(const JoinElectBlsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinElectBlsInfo::IsInitialized() const {

  return true;
}

void JoinElectBlsInfo::Swap(JoinElectBlsInfo* other) {
  if (other != this) {
    std::swap(verified_g2_, other->verified_g2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinElectBlsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinElectBlsInfo_descriptor_;
  metadata.reflection = JoinElectBlsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinElectInfo::kShardIdFieldNumber;
const int JoinElectInfo::kMemberIdxFieldNumber;
const int JoinElectInfo::kChangeIdxFieldNumber;
const int JoinElectInfo::kG2ReqFieldNumber;
#endif  // !_MSC_VER

JoinElectInfo::JoinElectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinElectInfo::InitAsDefaultInstance() {
  g2_req_ = const_cast< ::zjchain::bls::protobuf::VerifyVecBrdReq*>(&::zjchain::bls::protobuf::VerifyVecBrdReq::default_instance());
}

JoinElectInfo::JoinElectInfo(const JoinElectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinElectInfo::SharedCtor() {
  _cached_size_ = 0;
  shard_id_ = 0u;
  member_idx_ = 0u;
  change_idx_ = 0u;
  g2_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinElectInfo::~JoinElectInfo() {
  SharedDtor();
}

void JoinElectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete g2_req_;
  }
}

void JoinElectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinElectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinElectInfo_descriptor_;
}

const JoinElectInfo& JoinElectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

JoinElectInfo* JoinElectInfo::default_instance_ = NULL;

JoinElectInfo* JoinElectInfo::New() const {
  return new JoinElectInfo;
}

void JoinElectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shard_id_ = 0u;
    member_idx_ = 0u;
    change_idx_ = 0u;
    if (has_g2_req()) {
      if (g2_req_ != NULL) g2_req_->::zjchain::bls::protobuf::VerifyVecBrdReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinElectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shard_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_id_)));
          set_has_shard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_member_idx;
        break;
      }

      // optional uint32 member_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_idx_)));
          set_has_member_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change_idx;
        break;
      }

      // optional uint32 change_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_idx_)));
          set_has_change_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_g2_req;
        break;
      }

      // optional .zjchain.bls.protobuf.VerifyVecBrdReq g2_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_g2_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g2_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinElectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shard_id = 1;
  if (has_shard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shard_id(), output);
  }

  // optional uint32 member_idx = 2;
  if (has_member_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_idx(), output);
  }

  // optional uint32 change_idx = 3;
  if (has_change_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->change_idx(), output);
  }

  // optional .zjchain.bls.protobuf.VerifyVecBrdReq g2_req = 4;
  if (has_g2_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->g2_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinElectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shard_id = 1;
  if (has_shard_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shard_id(), target);
  }

  // optional uint32 member_idx = 2;
  if (has_member_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_idx(), target);
  }

  // optional uint32 change_idx = 3;
  if (has_change_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->change_idx(), target);
  }

  // optional .zjchain.bls.protobuf.VerifyVecBrdReq g2_req = 4;
  if (has_g2_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->g2_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinElectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shard_id = 1;
    if (has_shard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard_id());
    }

    // optional uint32 member_idx = 2;
    if (has_member_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_idx());
    }

    // optional uint32 change_idx = 3;
    if (has_change_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_idx());
    }

    // optional .zjchain.bls.protobuf.VerifyVecBrdReq g2_req = 4;
    if (has_g2_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->g2_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinElectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinElectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinElectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinElectInfo::MergeFrom(const JoinElectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shard_id()) {
      set_shard_id(from.shard_id());
    }
    if (from.has_member_idx()) {
      set_member_idx(from.member_idx());
    }
    if (from.has_change_idx()) {
      set_change_idx(from.change_idx());
    }
    if (from.has_g2_req()) {
      mutable_g2_req()->::zjchain::bls::protobuf::VerifyVecBrdReq::MergeFrom(from.g2_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinElectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinElectInfo::CopyFrom(const JoinElectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinElectInfo::IsInitialized() const {

  return true;
}

void JoinElectInfo::Swap(JoinElectInfo* other) {
  if (other != this) {
    std::swap(shard_id_, other->shard_id_);
    std::swap(member_idx_, other->member_idx_);
    std::swap(change_idx_, other->change_idx_);
    std::swap(g2_req_, other->g2_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinElectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinElectInfo_descriptor_;
  metadata.reflection = JoinElectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalPolynomial::kPolynomialFieldNumber;
const int LocalPolynomial::kChangeIdxFieldNumber;
#endif  // !_MSC_VER

LocalPolynomial::LocalPolynomial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalPolynomial::InitAsDefaultInstance() {
}

LocalPolynomial::LocalPolynomial(const LocalPolynomial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalPolynomial::SharedCtor() {
  _cached_size_ = 0;
  change_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalPolynomial::~LocalPolynomial() {
  SharedDtor();
}

void LocalPolynomial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalPolynomial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalPolynomial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalPolynomial_descriptor_;
}

const LocalPolynomial& LocalPolynomial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

LocalPolynomial* LocalPolynomial::default_instance_ = NULL;

LocalPolynomial* LocalPolynomial::New() const {
  return new LocalPolynomial;
}

void LocalPolynomial::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    change_idx_ = 0u;
  }
  polynomial_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalPolynomial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes polynomial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polynomial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_polynomial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_polynomial;
        if (input->ExpectTag(16)) goto parse_change_idx;
        break;
      }

      // optional uint32 change_idx = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_idx_)));
          set_has_change_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalPolynomial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes polynomial = 1;
  for (int i = 0; i < this->polynomial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->polynomial(i), output);
  }

  // optional uint32 change_idx = 2 [default = 0];
  if (has_change_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalPolynomial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes polynomial = 1;
  for (int i = 0; i < this->polynomial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->polynomial(i), target);
  }

  // optional uint32 change_idx = 2 [default = 0];
  if (has_change_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalPolynomial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 change_idx = 2 [default = 0];
    if (has_change_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_idx());
    }

  }
  // repeated bytes polynomial = 1;
  total_size += 1 * this->polynomial_size();
  for (int i = 0; i < this->polynomial_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->polynomial(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalPolynomial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalPolynomial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalPolynomial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalPolynomial::MergeFrom(const LocalPolynomial& from) {
  GOOGLE_CHECK_NE(&from, this);
  polynomial_.MergeFrom(from.polynomial_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_change_idx()) {
      set_change_idx(from.change_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalPolynomial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPolynomial::CopyFrom(const LocalPolynomial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPolynomial::IsInitialized() const {

  return true;
}

void LocalPolynomial::Swap(LocalPolynomial* other) {
  if (other != this) {
    polynomial_.Swap(&other->polynomial_);
    std::swap(change_idx_, other->change_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalPolynomial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalPolynomial_descriptor_;
  metadata.reflection = LocalPolynomial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalBlsItem::kPolynomialFieldNumber;
const int LocalBlsItem::kVerifyVecFieldNumber;
const int LocalBlsItem::kValidTFieldNumber;
const int LocalBlsItem::kValidNFieldNumber;
#endif  // !_MSC_VER

LocalBlsItem::LocalBlsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalBlsItem::InitAsDefaultInstance() {
}

LocalBlsItem::LocalBlsItem(const LocalBlsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalBlsItem::SharedCtor() {
  _cached_size_ = 0;
  valid_t_ = 0u;
  valid_n_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalBlsItem::~LocalBlsItem() {
  SharedDtor();
}

void LocalBlsItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalBlsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalBlsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalBlsItem_descriptor_;
}

const LocalBlsItem& LocalBlsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

LocalBlsItem* LocalBlsItem::default_instance_ = NULL;

LocalBlsItem* LocalBlsItem::New() const {
  return new LocalBlsItem;
}

void LocalBlsItem::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    valid_t_ = 0u;
    valid_n_ = 0u;
  }
  polynomial_.Clear();
  verify_vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalBlsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes polynomial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polynomial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_polynomial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_polynomial;
        if (input->ExpectTag(18)) goto parse_verify_vec;
        break;
      }

      // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_verify_vec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verify_vec;
        if (input->ExpectTag(24)) goto parse_valid_t;
        break;
      }

      // optional uint32 valid_t = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_t_)));
          set_has_valid_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valid_n;
        break;
      }

      // optional uint32 valid_n = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_n_)));
          set_has_valid_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalBlsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes polynomial = 1;
  for (int i = 0; i < this->polynomial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->polynomial(i), output);
  }

  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 2;
  for (int i = 0; i < this->verify_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->verify_vec(i), output);
  }

  // optional uint32 valid_t = 3;
  if (has_valid_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_t(), output);
  }

  // optional uint32 valid_n = 4;
  if (has_valid_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->valid_n(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalBlsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes polynomial = 1;
  for (int i = 0; i < this->polynomial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->polynomial(i), target);
  }

  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 2;
  for (int i = 0; i < this->verify_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->verify_vec(i), target);
  }

  // optional uint32 valid_t = 3;
  if (has_valid_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_t(), target);
  }

  // optional uint32 valid_n = 4;
  if (has_valid_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->valid_n(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalBlsItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 valid_t = 3;
    if (has_valid_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_t());
    }

    // optional uint32 valid_n = 4;
    if (has_valid_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_n());
    }

  }
  // repeated bytes polynomial = 1;
  total_size += 1 * this->polynomial_size();
  for (int i = 0; i < this->polynomial_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->polynomial(i));
  }

  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 2;
  total_size += 1 * this->verify_vec_size();
  for (int i = 0; i < this->verify_vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verify_vec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalBlsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalBlsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalBlsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalBlsItem::MergeFrom(const LocalBlsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  polynomial_.MergeFrom(from.polynomial_);
  verify_vec_.MergeFrom(from.verify_vec_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_valid_t()) {
      set_valid_t(from.valid_t());
    }
    if (from.has_valid_n()) {
      set_valid_n(from.valid_n());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalBlsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalBlsItem::CopyFrom(const LocalBlsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalBlsItem::IsInitialized() const {

  return true;
}

void LocalBlsItem::Swap(LocalBlsItem* other) {
  if (other != this) {
    polynomial_.Swap(&other->polynomial_);
    verify_vec_.Swap(&other->verify_vec_);
    std::swap(valid_t_, other->valid_t_);
    std::swap(valid_n_, other->valid_n_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalBlsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalBlsItem_descriptor_;
  metadata.reflection = LocalBlsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlsVerifyValue::kVerifyVecFieldNumber;
#endif  // !_MSC_VER

BlsVerifyValue::BlsVerifyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlsVerifyValue::InitAsDefaultInstance() {
}

BlsVerifyValue::BlsVerifyValue(const BlsVerifyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlsVerifyValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlsVerifyValue::~BlsVerifyValue() {
  SharedDtor();
}

void BlsVerifyValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlsVerifyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlsVerifyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlsVerifyValue_descriptor_;
}

const BlsVerifyValue& BlsVerifyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

BlsVerifyValue* BlsVerifyValue::default_instance_ = NULL;

BlsVerifyValue* BlsVerifyValue::New() const {
  return new BlsVerifyValue;
}

void BlsVerifyValue::Clear() {
  verify_vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlsVerifyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_verify_vec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_verify_vec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlsVerifyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  for (int i = 0; i < this->verify_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->verify_vec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlsVerifyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  for (int i = 0; i < this->verify_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->verify_vec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlsVerifyValue::ByteSize() const {
  int total_size = 0;

  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  total_size += 1 * this->verify_vec_size();
  for (int i = 0; i < this->verify_vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verify_vec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlsVerifyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlsVerifyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlsVerifyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlsVerifyValue::MergeFrom(const BlsVerifyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  verify_vec_.MergeFrom(from.verify_vec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlsVerifyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlsVerifyValue::CopyFrom(const BlsVerifyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlsVerifyValue::IsInitialized() const {

  return true;
}

void BlsVerifyValue::Swap(BlsVerifyValue* other) {
  if (other != this) {
    verify_vec_.Swap(&other->verify_vec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlsVerifyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlsVerifyValue_descriptor_;
  metadata.reflection = BlsVerifyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyVecBrdRes::kPublicIpFieldNumber;
const int VerifyVecBrdRes::kPublicPortFieldNumber;
#endif  // !_MSC_VER

VerifyVecBrdRes::VerifyVecBrdRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyVecBrdRes::InitAsDefaultInstance() {
}

VerifyVecBrdRes::VerifyVecBrdRes(const VerifyVecBrdRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyVecBrdRes::SharedCtor() {
  _cached_size_ = 0;
  public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyVecBrdRes::~VerifyVecBrdRes() {
  SharedDtor();
}

void VerifyVecBrdRes::SharedDtor() {
  if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete public_ip_;
  }
  if (this != default_instance_) {
  }
}

void VerifyVecBrdRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyVecBrdRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyVecBrdRes_descriptor_;
}

const VerifyVecBrdRes& VerifyVecBrdRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

VerifyVecBrdRes* VerifyVecBrdRes::default_instance_ = NULL;

VerifyVecBrdRes* VerifyVecBrdRes::New() const {
  return new VerifyVecBrdRes;
}

void VerifyVecBrdRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_public_ip()) {
      if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
        public_ip_->clear();
      }
    }
    public_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyVecBrdRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_public_port;
        break;
      }

      // optional uint32 public_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_port_)));
          set_has_public_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyVecBrdRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes public_ip = 1;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->public_ip(), output);
  }

  // optional uint32 public_port = 2;
  if (has_public_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyVecBrdRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes public_ip = 1;
  if (has_public_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_ip(), target);
  }

  // optional uint32 public_port = 2;
  if (has_public_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->public_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyVecBrdRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes public_ip = 1;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional uint32 public_port = 2;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyVecBrdRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyVecBrdRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyVecBrdRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyVecBrdRes::MergeFrom(const VerifyVecBrdRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_public_port()) {
      set_public_port(from.public_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyVecBrdRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyVecBrdRes::CopyFrom(const VerifyVecBrdRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyVecBrdRes::IsInitialized() const {

  return true;
}

void VerifyVecBrdRes::Swap(VerifyVecBrdRes* other) {
  if (other != this) {
    std::swap(public_ip_, other->public_ip_);
    std::swap(public_port_, other->public_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyVecBrdRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyVecBrdRes_descriptor_;
  metadata.reflection = VerifyVecBrdRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapSecKeyItem::kSecKeyFieldNumber;
const int SwapSecKeyItem::kSecKeyLenFieldNumber;
const int SwapSecKeyItem::kOldG2FieldNumber;
#endif  // !_MSC_VER

SwapSecKeyItem::SwapSecKeyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapSecKeyItem::InitAsDefaultInstance() {
  old_g2_ = const_cast< ::zjchain::bls::protobuf::BlsPublicKey*>(&::zjchain::bls::protobuf::BlsPublicKey::default_instance());
}

SwapSecKeyItem::SwapSecKeyItem(const SwapSecKeyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapSecKeyItem::SharedCtor() {
  _cached_size_ = 0;
  sec_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sec_key_len_ = 0u;
  old_g2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapSecKeyItem::~SwapSecKeyItem() {
  SharedDtor();
}

void SwapSecKeyItem::SharedDtor() {
  if (sec_key_ != &::google::protobuf::internal::kEmptyString) {
    delete sec_key_;
  }
  if (this != default_instance_) {
    delete old_g2_;
  }
}

void SwapSecKeyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapSecKeyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapSecKeyItem_descriptor_;
}

const SwapSecKeyItem& SwapSecKeyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

SwapSecKeyItem* SwapSecKeyItem::default_instance_ = NULL;

SwapSecKeyItem* SwapSecKeyItem::New() const {
  return new SwapSecKeyItem;
}

void SwapSecKeyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sec_key()) {
      if (sec_key_ != &::google::protobuf::internal::kEmptyString) {
        sec_key_->clear();
      }
    }
    sec_key_len_ = 0u;
    if (has_old_g2()) {
      if (old_g2_ != NULL) old_g2_->::zjchain::bls::protobuf::BlsPublicKey::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapSecKeyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sec_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sec_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sec_key_len;
        break;
      }

      // optional uint32 sec_key_len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec_key_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_key_len_)));
          set_has_sec_key_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_g2;
        break;
      }

      // optional .zjchain.bls.protobuf.BlsPublicKey old_g2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_g2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_g2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapSecKeyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sec_key = 1;
  if (has_sec_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sec_key(), output);
  }

  // optional uint32 sec_key_len = 2;
  if (has_sec_key_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sec_key_len(), output);
  }

  // optional .zjchain.bls.protobuf.BlsPublicKey old_g2 = 3;
  if (has_old_g2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_g2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapSecKeyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes sec_key = 1;
  if (has_sec_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sec_key(), target);
  }

  // optional uint32 sec_key_len = 2;
  if (has_sec_key_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sec_key_len(), target);
  }

  // optional .zjchain.bls.protobuf.BlsPublicKey old_g2 = 3;
  if (has_old_g2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_g2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapSecKeyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sec_key = 1;
    if (has_sec_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sec_key());
    }

    // optional uint32 sec_key_len = 2;
    if (has_sec_key_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sec_key_len());
    }

    // optional .zjchain.bls.protobuf.BlsPublicKey old_g2 = 3;
    if (has_old_g2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_g2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapSecKeyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapSecKeyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapSecKeyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapSecKeyItem::MergeFrom(const SwapSecKeyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sec_key()) {
      set_sec_key(from.sec_key());
    }
    if (from.has_sec_key_len()) {
      set_sec_key_len(from.sec_key_len());
    }
    if (from.has_old_g2()) {
      mutable_old_g2()->::zjchain::bls::protobuf::BlsPublicKey::MergeFrom(from.old_g2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapSecKeyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSecKeyItem::CopyFrom(const SwapSecKeyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSecKeyItem::IsInitialized() const {

  return true;
}

void SwapSecKeyItem::Swap(SwapSecKeyItem* other) {
  if (other != this) {
    std::swap(sec_key_, other->sec_key_);
    std::swap(sec_key_len_, other->sec_key_len_);
    std::swap(old_g2_, other->old_g2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapSecKeyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapSecKeyItem_descriptor_;
  metadata.reflection = SwapSecKeyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapSecKeyReq::kKeysFieldNumber;
#endif  // !_MSC_VER

SwapSecKeyReq::SwapSecKeyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapSecKeyReq::InitAsDefaultInstance() {
}

SwapSecKeyReq::SwapSecKeyReq(const SwapSecKeyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapSecKeyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapSecKeyReq::~SwapSecKeyReq() {
  SharedDtor();
}

void SwapSecKeyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwapSecKeyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapSecKeyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapSecKeyReq_descriptor_;
}

const SwapSecKeyReq& SwapSecKeyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

SwapSecKeyReq* SwapSecKeyReq::default_instance_ = NULL;

SwapSecKeyReq* SwapSecKeyReq::New() const {
  return new SwapSecKeyReq;
}

void SwapSecKeyReq::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapSecKeyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.bls.protobuf.SwapSecKeyItem keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapSecKeyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.bls.protobuf.SwapSecKeyItem keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapSecKeyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.bls.protobuf.SwapSecKeyItem keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapSecKeyReq::ByteSize() const {
  int total_size = 0;

  // repeated .zjchain.bls.protobuf.SwapSecKeyItem keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapSecKeyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapSecKeyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapSecKeyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapSecKeyReq::MergeFrom(const SwapSecKeyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapSecKeyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSecKeyReq::CopyFrom(const SwapSecKeyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSecKeyReq::IsInitialized() const {

  return true;
}

void SwapSecKeyReq::Swap(SwapSecKeyReq* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapSecKeyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapSecKeyReq_descriptor_;
  metadata.reflection = SwapSecKeyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapSecKeyRes::kIndexFieldNumber;
const int SwapSecKeyRes::kSecKeyFieldNumber;
const int SwapSecKeyRes::kSecKeyLenFieldNumber;
#endif  // !_MSC_VER

SwapSecKeyRes::SwapSecKeyRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapSecKeyRes::InitAsDefaultInstance() {
}

SwapSecKeyRes::SwapSecKeyRes(const SwapSecKeyRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapSecKeyRes::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  sec_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sec_key_len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapSecKeyRes::~SwapSecKeyRes() {
  SharedDtor();
}

void SwapSecKeyRes::SharedDtor() {
  if (sec_key_ != &::google::protobuf::internal::kEmptyString) {
    delete sec_key_;
  }
  if (this != default_instance_) {
  }
}

void SwapSecKeyRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapSecKeyRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapSecKeyRes_descriptor_;
}

const SwapSecKeyRes& SwapSecKeyRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

SwapSecKeyRes* SwapSecKeyRes::default_instance_ = NULL;

SwapSecKeyRes* SwapSecKeyRes::New() const {
  return new SwapSecKeyRes;
}

void SwapSecKeyRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_sec_key()) {
      if (sec_key_ != &::google::protobuf::internal::kEmptyString) {
        sec_key_->clear();
      }
    }
    sec_key_len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapSecKeyRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sec_key;
        break;
      }

      // optional bytes sec_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sec_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sec_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sec_key_len;
        break;
      }

      // optional uint32 sec_key_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec_key_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_key_len_)));
          set_has_sec_key_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapSecKeyRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional bytes sec_key = 2;
  if (has_sec_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sec_key(), output);
  }

  // optional uint32 sec_key_len = 3;
  if (has_sec_key_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sec_key_len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapSecKeyRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional bytes sec_key = 2;
  if (has_sec_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sec_key(), target);
  }

  // optional uint32 sec_key_len = 3;
  if (has_sec_key_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sec_key_len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapSecKeyRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional bytes sec_key = 2;
    if (has_sec_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sec_key());
    }

    // optional uint32 sec_key_len = 3;
    if (has_sec_key_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sec_key_len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapSecKeyRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapSecKeyRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapSecKeyRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapSecKeyRes::MergeFrom(const SwapSecKeyRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sec_key()) {
      set_sec_key(from.sec_key());
    }
    if (from.has_sec_key_len()) {
      set_sec_key_len(from.sec_key_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapSecKeyRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSecKeyRes::CopyFrom(const SwapSecKeyRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSecKeyRes::IsInitialized() const {

  return true;
}

void SwapSecKeyRes::Swap(SwapSecKeyRes* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(sec_key_, other->sec_key_);
    std::swap(sec_key_len_, other->sec_key_len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapSecKeyRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapSecKeyRes_descriptor_;
  metadata.reflection = SwapSecKeyRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgainstParticipant::kAgainstIndexFieldNumber;
#endif  // !_MSC_VER

AgainstParticipant::AgainstParticipant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgainstParticipant::InitAsDefaultInstance() {
}

AgainstParticipant::AgainstParticipant(const AgainstParticipant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgainstParticipant::SharedCtor() {
  _cached_size_ = 0;
  against_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgainstParticipant::~AgainstParticipant() {
  SharedDtor();
}

void AgainstParticipant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgainstParticipant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgainstParticipant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgainstParticipant_descriptor_;
}

const AgainstParticipant& AgainstParticipant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

AgainstParticipant* AgainstParticipant::default_instance_ = NULL;

AgainstParticipant* AgainstParticipant::New() const {
  return new AgainstParticipant;
}

void AgainstParticipant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    against_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgainstParticipant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 against_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &against_index_)));
          set_has_against_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgainstParticipant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 against_index = 1;
  if (has_against_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->against_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgainstParticipant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 against_index = 1;
  if (has_against_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->against_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgainstParticipant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 against_index = 1;
    if (has_against_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->against_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgainstParticipant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgainstParticipant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgainstParticipant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgainstParticipant::MergeFrom(const AgainstParticipant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_against_index()) {
      set_against_index(from.against_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgainstParticipant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgainstParticipant::CopyFrom(const AgainstParticipant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgainstParticipant::IsInitialized() const {

  return true;
}

void AgainstParticipant::Swap(AgainstParticipant* other) {
  if (other != this) {
    std::swap(against_index_, other->against_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgainstParticipant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgainstParticipant_descriptor_;
  metadata.reflection = AgainstParticipant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishBroadcast::kBitmapFieldNumber;
const int FinishBroadcast::kPubkeyFieldNumber;
const int FinishBroadcast::kCommonPubkeyFieldNumber;
const int FinishBroadcast::kNetworkIdFieldNumber;
const int FinishBroadcast::kBlsSignXFieldNumber;
const int FinishBroadcast::kBlsSignYFieldNumber;
#endif  // !_MSC_VER

FinishBroadcast::FinishBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishBroadcast::InitAsDefaultInstance() {
  pubkey_ = const_cast< ::zjchain::bls::protobuf::BlsPublicKey*>(&::zjchain::bls::protobuf::BlsPublicKey::default_instance());
  common_pubkey_ = const_cast< ::zjchain::bls::protobuf::BlsPublicKey*>(&::zjchain::bls::protobuf::BlsPublicKey::default_instance());
}

FinishBroadcast::FinishBroadcast(const FinishBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishBroadcast::SharedCtor() {
  _cached_size_ = 0;
  pubkey_ = NULL;
  common_pubkey_ = NULL;
  network_id_ = 0u;
  bls_sign_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bls_sign_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishBroadcast::~FinishBroadcast() {
  SharedDtor();
}

void FinishBroadcast::SharedDtor() {
  if (bls_sign_x_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_sign_x_;
  }
  if (bls_sign_y_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_sign_y_;
  }
  if (this != default_instance_) {
    delete pubkey_;
    delete common_pubkey_;
  }
}

void FinishBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishBroadcast_descriptor_;
}

const FinishBroadcast& FinishBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

FinishBroadcast* FinishBroadcast::default_instance_ = NULL;

FinishBroadcast* FinishBroadcast::New() const {
  return new FinishBroadcast;
}

void FinishBroadcast::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_pubkey()) {
      if (pubkey_ != NULL) pubkey_->::zjchain::bls::protobuf::BlsPublicKey::Clear();
    }
    if (has_common_pubkey()) {
      if (common_pubkey_ != NULL) common_pubkey_->::zjchain::bls::protobuf::BlsPublicKey::Clear();
    }
    network_id_ = 0u;
    if (has_bls_sign_x()) {
      if (bls_sign_x_ != &::google::protobuf::internal::kEmptyString) {
        bls_sign_x_->clear();
      }
    }
    if (has_bls_sign_y()) {
      if (bls_sign_y_ != &::google::protobuf::internal::kEmptyString) {
        bls_sign_y_->clear();
      }
    }
  }
  bitmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 bitmap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitmap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_bitmap())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bitmap())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_bitmap;
        if (input->ExpectTag(18)) goto parse_pubkey;
        break;
      }

      // optional .zjchain.bls.protobuf.BlsPublicKey pubkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_common_pubkey;
        break;
      }

      // optional .zjchain.bls.protobuf.BlsPublicKey common_pubkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_network_id;
        break;
      }

      // optional uint32 network_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_id_)));
          set_has_network_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bls_sign_x;
        break;
      }

      // optional bytes bls_sign_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_sign_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bls_sign_y;
        break;
      }

      // optional bytes bls_sign_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_sign_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 bitmap = 1;
  for (int i = 0; i < this->bitmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->bitmap(i), output);
  }

  // optional .zjchain.bls.protobuf.BlsPublicKey pubkey = 2;
  if (has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pubkey(), output);
  }

  // optional .zjchain.bls.protobuf.BlsPublicKey common_pubkey = 3;
  if (has_common_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->common_pubkey(), output);
  }

  // optional uint32 network_id = 4;
  if (has_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->network_id(), output);
  }

  // optional bytes bls_sign_x = 5;
  if (has_bls_sign_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->bls_sign_x(), output);
  }

  // optional bytes bls_sign_y = 6;
  if (has_bls_sign_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->bls_sign_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 bitmap = 1;
  for (int i = 0; i < this->bitmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->bitmap(i), target);
  }

  // optional .zjchain.bls.protobuf.BlsPublicKey pubkey = 2;
  if (has_pubkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pubkey(), target);
  }

  // optional .zjchain.bls.protobuf.BlsPublicKey common_pubkey = 3;
  if (has_common_pubkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->common_pubkey(), target);
  }

  // optional uint32 network_id = 4;
  if (has_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->network_id(), target);
  }

  // optional bytes bls_sign_x = 5;
  if (has_bls_sign_x()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bls_sign_x(), target);
  }

  // optional bytes bls_sign_y = 6;
  if (has_bls_sign_y()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->bls_sign_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .zjchain.bls.protobuf.BlsPublicKey pubkey = 2;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pubkey());
    }

    // optional .zjchain.bls.protobuf.BlsPublicKey common_pubkey = 3;
    if (has_common_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_pubkey());
    }

    // optional uint32 network_id = 4;
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_id());
    }

    // optional bytes bls_sign_x = 5;
    if (has_bls_sign_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_x());
    }

    // optional bytes bls_sign_y = 6;
    if (has_bls_sign_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_y());
    }

  }
  // repeated uint64 bitmap = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bitmap_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->bitmap(i));
    }
    total_size += 1 * this->bitmap_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishBroadcast::MergeFrom(const FinishBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  bitmap_.MergeFrom(from.bitmap_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pubkey()) {
      mutable_pubkey()->::zjchain::bls::protobuf::BlsPublicKey::MergeFrom(from.pubkey());
    }
    if (from.has_common_pubkey()) {
      mutable_common_pubkey()->::zjchain::bls::protobuf::BlsPublicKey::MergeFrom(from.common_pubkey());
    }
    if (from.has_network_id()) {
      set_network_id(from.network_id());
    }
    if (from.has_bls_sign_x()) {
      set_bls_sign_x(from.bls_sign_x());
    }
    if (from.has_bls_sign_y()) {
      set_bls_sign_y(from.bls_sign_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishBroadcast::CopyFrom(const FinishBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishBroadcast::IsInitialized() const {

  return true;
}

void FinishBroadcast::Swap(FinishBroadcast* other) {
  if (other != this) {
    bitmap_.Swap(&other->bitmap_);
    std::swap(pubkey_, other->pubkey_);
    std::swap(common_pubkey_, other->common_pubkey_);
    std::swap(network_id_, other->network_id_);
    std::swap(bls_sign_x_, other->bls_sign_x_);
    std::swap(bls_sign_y_, other->bls_sign_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishBroadcast_descriptor_;
  metadata.reflection = FinishBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckVerfiyReq::kIndexFieldNumber;
#endif  // !_MSC_VER

CheckVerfiyReq::CheckVerfiyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckVerfiyReq::InitAsDefaultInstance() {
}

CheckVerfiyReq::CheckVerfiyReq(const CheckVerfiyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckVerfiyReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVerfiyReq::~CheckVerfiyReq() {
  SharedDtor();
}

void CheckVerfiyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckVerfiyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVerfiyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVerfiyReq_descriptor_;
}

const CheckVerfiyReq& CheckVerfiyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

CheckVerfiyReq* CheckVerfiyReq::default_instance_ = NULL;

CheckVerfiyReq* CheckVerfiyReq::New() const {
  return new CheckVerfiyReq;
}

void CheckVerfiyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVerfiyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckVerfiyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckVerfiyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckVerfiyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVerfiyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVerfiyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckVerfiyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVerfiyReq::MergeFrom(const CheckVerfiyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVerfiyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVerfiyReq::CopyFrom(const CheckVerfiyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVerfiyReq::IsInitialized() const {

  return true;
}

void CheckVerfiyReq::Swap(CheckVerfiyReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckVerfiyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckVerfiyReq_descriptor_;
  metadata.reflection = CheckVerfiyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckSwapKeyReq::kIndexFieldNumber;
#endif  // !_MSC_VER

CheckSwapKeyReq::CheckSwapKeyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckSwapKeyReq::InitAsDefaultInstance() {
}

CheckSwapKeyReq::CheckSwapKeyReq(const CheckSwapKeyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckSwapKeyReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckSwapKeyReq::~CheckSwapKeyReq() {
  SharedDtor();
}

void CheckSwapKeyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckSwapKeyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckSwapKeyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckSwapKeyReq_descriptor_;
}

const CheckSwapKeyReq& CheckSwapKeyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

CheckSwapKeyReq* CheckSwapKeyReq::default_instance_ = NULL;

CheckSwapKeyReq* CheckSwapKeyReq::New() const {
  return new CheckSwapKeyReq;
}

void CheckSwapKeyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckSwapKeyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckSwapKeyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckSwapKeyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckSwapKeyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckSwapKeyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckSwapKeyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckSwapKeyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckSwapKeyReq::MergeFrom(const CheckSwapKeyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckSwapKeyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckSwapKeyReq::CopyFrom(const CheckSwapKeyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckSwapKeyReq::IsInitialized() const {

  return true;
}

void CheckSwapKeyReq::Swap(CheckSwapKeyReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckSwapKeyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckSwapKeyReq_descriptor_;
  metadata.reflection = CheckSwapKeyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlsMessage::kVerifyBrdFieldNumber;
const int BlsMessage::kSwapReqFieldNumber;
const int BlsMessage::kFinishReqFieldNumber;
const int BlsMessage::kCheckVerifyReqFieldNumber;
const int BlsMessage::kCheckSwapkeyReqFieldNumber;
const int BlsMessage::kIndexFieldNumber;
const int BlsMessage::kElectHeightFieldNumber;
#endif  // !_MSC_VER

BlsMessage::BlsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlsMessage::InitAsDefaultInstance() {
  verify_brd_ = const_cast< ::zjchain::bls::protobuf::VerifyVecBrdReq*>(&::zjchain::bls::protobuf::VerifyVecBrdReq::default_instance());
  swap_req_ = const_cast< ::zjchain::bls::protobuf::SwapSecKeyReq*>(&::zjchain::bls::protobuf::SwapSecKeyReq::default_instance());
  finish_req_ = const_cast< ::zjchain::bls::protobuf::FinishBroadcast*>(&::zjchain::bls::protobuf::FinishBroadcast::default_instance());
  check_verify_req_ = const_cast< ::zjchain::bls::protobuf::CheckVerfiyReq*>(&::zjchain::bls::protobuf::CheckVerfiyReq::default_instance());
  check_swapkey_req_ = const_cast< ::zjchain::bls::protobuf::CheckSwapKeyReq*>(&::zjchain::bls::protobuf::CheckSwapKeyReq::default_instance());
}

BlsMessage::BlsMessage(const BlsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlsMessage::SharedCtor() {
  _cached_size_ = 0;
  verify_brd_ = NULL;
  swap_req_ = NULL;
  finish_req_ = NULL;
  check_verify_req_ = NULL;
  check_swapkey_req_ = NULL;
  index_ = 0u;
  elect_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlsMessage::~BlsMessage() {
  SharedDtor();
}

void BlsMessage::SharedDtor() {
  if (this != default_instance_) {
    delete verify_brd_;
    delete swap_req_;
    delete finish_req_;
    delete check_verify_req_;
    delete check_swapkey_req_;
  }
}

void BlsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlsMessage_descriptor_;
}

const BlsMessage& BlsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fbls_2eproto();
  return *default_instance_;
}

BlsMessage* BlsMessage::default_instance_ = NULL;

BlsMessage* BlsMessage::New() const {
  return new BlsMessage;
}

void BlsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_verify_brd()) {
      if (verify_brd_ != NULL) verify_brd_->::zjchain::bls::protobuf::VerifyVecBrdReq::Clear();
    }
    if (has_swap_req()) {
      if (swap_req_ != NULL) swap_req_->::zjchain::bls::protobuf::SwapSecKeyReq::Clear();
    }
    if (has_finish_req()) {
      if (finish_req_ != NULL) finish_req_->::zjchain::bls::protobuf::FinishBroadcast::Clear();
    }
    if (has_check_verify_req()) {
      if (check_verify_req_ != NULL) check_verify_req_->::zjchain::bls::protobuf::CheckVerfiyReq::Clear();
    }
    if (has_check_swapkey_req()) {
      if (check_swapkey_req_ != NULL) check_swapkey_req_->::zjchain::bls::protobuf::CheckSwapKeyReq::Clear();
    }
    index_ = 0u;
    elect_height_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_brd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_swap_req;
        break;
      }

      // optional .zjchain.bls.protobuf.SwapSecKeyReq swap_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swap_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swap_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_finish_req;
        break;
      }

      // optional .zjchain.bls.protobuf.FinishBroadcast finish_req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finish_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_check_verify_req;
        break;
      }

      // optional .zjchain.bls.protobuf.CheckVerfiyReq check_verify_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check_verify_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_verify_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_check_swapkey_req;
        break;
      }

      // optional .zjchain.bls.protobuf.CheckSwapKeyReq check_swapkey_req = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check_swapkey_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_swapkey_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // optional uint32 index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
  if (has_verify_brd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->verify_brd(), output);
  }

  // optional .zjchain.bls.protobuf.SwapSecKeyReq swap_req = 2;
  if (has_swap_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->swap_req(), output);
  }

  // optional .zjchain.bls.protobuf.FinishBroadcast finish_req = 3;
  if (has_finish_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->finish_req(), output);
  }

  // optional .zjchain.bls.protobuf.CheckVerfiyReq check_verify_req = 4;
  if (has_check_verify_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->check_verify_req(), output);
  }

  // optional .zjchain.bls.protobuf.CheckSwapKeyReq check_swapkey_req = 5;
  if (has_check_swapkey_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->check_swapkey_req(), output);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->index(), output);
  }

  // optional uint64 elect_height = 7;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->elect_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
  if (has_verify_brd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->verify_brd(), target);
  }

  // optional .zjchain.bls.protobuf.SwapSecKeyReq swap_req = 2;
  if (has_swap_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->swap_req(), target);
  }

  // optional .zjchain.bls.protobuf.FinishBroadcast finish_req = 3;
  if (has_finish_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->finish_req(), target);
  }

  // optional .zjchain.bls.protobuf.CheckVerfiyReq check_verify_req = 4;
  if (has_check_verify_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->check_verify_req(), target);
  }

  // optional .zjchain.bls.protobuf.CheckSwapKeyReq check_swapkey_req = 5;
  if (has_check_swapkey_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->check_swapkey_req(), target);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->index(), target);
  }

  // optional uint64 elect_height = 7;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->elect_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlsMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
    if (has_verify_brd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verify_brd());
    }

    // optional .zjchain.bls.protobuf.SwapSecKeyReq swap_req = 2;
    if (has_swap_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swap_req());
    }

    // optional .zjchain.bls.protobuf.FinishBroadcast finish_req = 3;
    if (has_finish_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_req());
    }

    // optional .zjchain.bls.protobuf.CheckVerfiyReq check_verify_req = 4;
    if (has_check_verify_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_verify_req());
    }

    // optional .zjchain.bls.protobuf.CheckSwapKeyReq check_swapkey_req = 5;
    if (has_check_swapkey_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_swapkey_req());
    }

    // optional uint32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint64 elect_height = 7;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlsMessage::MergeFrom(const BlsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verify_brd()) {
      mutable_verify_brd()->::zjchain::bls::protobuf::VerifyVecBrdReq::MergeFrom(from.verify_brd());
    }
    if (from.has_swap_req()) {
      mutable_swap_req()->::zjchain::bls::protobuf::SwapSecKeyReq::MergeFrom(from.swap_req());
    }
    if (from.has_finish_req()) {
      mutable_finish_req()->::zjchain::bls::protobuf::FinishBroadcast::MergeFrom(from.finish_req());
    }
    if (from.has_check_verify_req()) {
      mutable_check_verify_req()->::zjchain::bls::protobuf::CheckVerfiyReq::MergeFrom(from.check_verify_req());
    }
    if (from.has_check_swapkey_req()) {
      mutable_check_swapkey_req()->::zjchain::bls::protobuf::CheckSwapKeyReq::MergeFrom(from.check_swapkey_req());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlsMessage::CopyFrom(const BlsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlsMessage::IsInitialized() const {

  return true;
}

void BlsMessage::Swap(BlsMessage* other) {
  if (other != this) {
    std::swap(verify_brd_, other->verify_brd_);
    std::swap(swap_req_, other->swap_req_);
    std::swap(finish_req_, other->finish_req_);
    std::swap(check_verify_req_, other->check_verify_req_);
    std::swap(check_swapkey_req_, other->check_swapkey_req_);
    std::swap(index_, other->index_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlsMessage_descriptor_;
  metadata.reflection = BlsMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace bls
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
