// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/init.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2finit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2finit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/bls.pb.h"
#include "protos/block.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2finit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2finit_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2finit_2eproto;
namespace zjchain {
namespace init {
namespace protobuf {
class GenesisInitBlsInfo;
struct GenesisInitBlsInfoDefaultTypeInternal;
extern GenesisInitBlsInfoDefaultTypeInternal _GenesisInitBlsInfo_default_instance_;
class GetAddressInfoRequest;
struct GetAddressInfoRequestDefaultTypeInternal;
extern GetAddressInfoRequestDefaultTypeInternal _GetAddressInfoRequest_default_instance_;
class GetAddressInfoResponse;
struct GetAddressInfoResponseDefaultTypeInternal;
extern GetAddressInfoResponseDefaultTypeInternal _GetAddressInfoResponse_default_instance_;
class InitMessage;
struct InitMessageDefaultTypeInternal;
extern InitMessageDefaultTypeInternal _InitMessage_default_instance_;
class InvalidLeaderPools;
struct InvalidLeaderPoolsDefaultTypeInternal;
extern InvalidLeaderPoolsDefaultTypeInternal _InvalidLeaderPools_default_instance_;
}  // namespace protobuf
}  // namespace init
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::init::protobuf::GenesisInitBlsInfo* Arena::CreateMaybeMessage<::zjchain::init::protobuf::GenesisInitBlsInfo>(Arena*);
template<> ::zjchain::init::protobuf::GetAddressInfoRequest* Arena::CreateMaybeMessage<::zjchain::init::protobuf::GetAddressInfoRequest>(Arena*);
template<> ::zjchain::init::protobuf::GetAddressInfoResponse* Arena::CreateMaybeMessage<::zjchain::init::protobuf::GetAddressInfoResponse>(Arena*);
template<> ::zjchain::init::protobuf::InitMessage* Arena::CreateMaybeMessage<::zjchain::init::protobuf::InitMessage>(Arena*);
template<> ::zjchain::init::protobuf::InvalidLeaderPools* Arena::CreateMaybeMessage<::zjchain::init::protobuf::InvalidLeaderPools>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace init {
namespace protobuf {

// ===================================================================

class GetAddressInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.init.protobuf.GetAddressInfoRequest) */ {
 public:
  inline GetAddressInfoRequest() : GetAddressInfoRequest(nullptr) {}
  ~GetAddressInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAddressInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAddressInfoRequest(const GetAddressInfoRequest& from);
  GetAddressInfoRequest(GetAddressInfoRequest&& from) noexcept
    : GetAddressInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressInfoRequest& operator=(const GetAddressInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressInfoRequest& operator=(GetAddressInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAddressInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAddressInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressInfoRequest*>(
               &_GetAddressInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAddressInfoRequest& a, GetAddressInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAddressInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAddressInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAddressInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAddressInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.init.protobuf.GetAddressInfoRequest";
  }
  protected:
  explicit GetAddressInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.init.protobuf.GetAddressInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_protos_2finit_2eproto;
};
// -------------------------------------------------------------------

class GetAddressInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.init.protobuf.GetAddressInfoResponse) */ {
 public:
  inline GetAddressInfoResponse() : GetAddressInfoResponse(nullptr) {}
  ~GetAddressInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAddressInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAddressInfoResponse(const GetAddressInfoResponse& from);
  GetAddressInfoResponse(GetAddressInfoResponse&& from) noexcept
    : GetAddressInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressInfoResponse& operator=(const GetAddressInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressInfoResponse& operator=(GetAddressInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAddressInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAddressInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressInfoResponse*>(
               &_GetAddressInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAddressInfoResponse& a, GetAddressInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAddressInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAddressInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAddressInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAddressInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.init.protobuf.GetAddressInfoResponse";
  }
  protected:
  explicit GetAddressInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // optional .zjchain.block.protobuf.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::zjchain::block::protobuf::Block& block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::Block* release_block();
  ::zjchain::block::protobuf::Block* mutable_block();
  void set_allocated_block(::zjchain::block::protobuf::Block* block);
  private:
  const ::zjchain::block::protobuf::Block& _internal_block() const;
  ::zjchain::block::protobuf::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::zjchain::block::protobuf::Block* block);
  ::zjchain::block::protobuf::Block* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:zjchain.init.protobuf.GetAddressInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::block::protobuf::Block* block_;
  friend struct ::TableStruct_protos_2finit_2eproto;
};
// -------------------------------------------------------------------

class InvalidLeaderPools final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.init.protobuf.InvalidLeaderPools) */ {
 public:
  inline InvalidLeaderPools() : InvalidLeaderPools(nullptr) {}
  ~InvalidLeaderPools() override;
  explicit PROTOBUF_CONSTEXPR InvalidLeaderPools(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvalidLeaderPools(const InvalidLeaderPools& from);
  InvalidLeaderPools(InvalidLeaderPools&& from) noexcept
    : InvalidLeaderPools() {
    *this = ::std::move(from);
  }

  inline InvalidLeaderPools& operator=(const InvalidLeaderPools& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvalidLeaderPools& operator=(InvalidLeaderPools&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvalidLeaderPools& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvalidLeaderPools* internal_default_instance() {
    return reinterpret_cast<const InvalidLeaderPools*>(
               &_InvalidLeaderPools_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InvalidLeaderPools& a, InvalidLeaderPools& b) {
    a.Swap(&b);
  }
  inline void Swap(InvalidLeaderPools* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvalidLeaderPools* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvalidLeaderPools* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvalidLeaderPools>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvalidLeaderPools& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvalidLeaderPools& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvalidLeaderPools* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.init.protobuf.InvalidLeaderPools";
  }
  protected:
  explicit InvalidLeaderPools(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolsFieldNumber = 1,
    kElectHeightFieldNumber = 2,
    kMemberIndexFieldNumber = 3,
    kModNumFieldNumber = 4,
    kLeaderIdxFieldNumber = 5,
    kVersionFieldNumber = 6,
  };
  // repeated int32 pools = 1;
  int pools_size() const;
  private:
  int _internal_pools_size() const;
  public:
  void clear_pools();
  private:
  int32_t _internal_pools(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_pools() const;
  void _internal_add_pools(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_pools();
  public:
  int32_t pools(int index) const;
  void set_pools(int index, int32_t value);
  void add_pools(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      pools() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_pools();

  // optional uint64 elect_height = 2;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // optional uint32 member_index = 3;
  bool has_member_index() const;
  private:
  bool _internal_has_member_index() const;
  public:
  void clear_member_index();
  uint32_t member_index() const;
  void set_member_index(uint32_t value);
  private:
  uint32_t _internal_member_index() const;
  void _internal_set_member_index(uint32_t value);
  public:

  // optional int32 mod_num = 4;
  bool has_mod_num() const;
  private:
  bool _internal_has_mod_num() const;
  public:
  void clear_mod_num();
  int32_t mod_num() const;
  void set_mod_num(int32_t value);
  private:
  int32_t _internal_mod_num() const;
  void _internal_set_mod_num(int32_t value);
  public:

  // optional uint32 leader_idx = 5;
  bool has_leader_idx() const;
  private:
  bool _internal_has_leader_idx() const;
  public:
  void clear_leader_idx();
  uint32_t leader_idx() const;
  void set_leader_idx(uint32_t value);
  private:
  uint32_t _internal_leader_idx() const;
  void _internal_set_leader_idx(uint32_t value);
  public:

  // optional uint32 version = 6;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.init.protobuf.InvalidLeaderPools)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > pools_;
  uint64_t elect_height_;
  uint32_t member_index_;
  int32_t mod_num_;
  uint32_t leader_idx_;
  uint32_t version_;
  friend struct ::TableStruct_protos_2finit_2eproto;
};
// -------------------------------------------------------------------

class GenesisInitBlsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.init.protobuf.GenesisInitBlsInfo) */ {
 public:
  inline GenesisInitBlsInfo() : GenesisInitBlsInfo(nullptr) {}
  ~GenesisInitBlsInfo() override;
  explicit PROTOBUF_CONSTEXPR GenesisInitBlsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisInitBlsInfo(const GenesisInitBlsInfo& from);
  GenesisInitBlsInfo(GenesisInitBlsInfo&& from) noexcept
    : GenesisInitBlsInfo() {
    *this = ::std::move(from);
  }

  inline GenesisInitBlsInfo& operator=(const GenesisInitBlsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisInitBlsInfo& operator=(GenesisInitBlsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisInitBlsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisInitBlsInfo* internal_default_instance() {
    return reinterpret_cast<const GenesisInitBlsInfo*>(
               &_GenesisInitBlsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GenesisInitBlsInfo& a, GenesisInitBlsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisInitBlsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisInitBlsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisInitBlsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisInitBlsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisInitBlsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisInitBlsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisInitBlsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.init.protobuf.GenesisInitBlsInfo";
  }
  protected:
  explicit GenesisInitBlsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kBlsEncDataFieldNumber = 4,
    kBlsHashFieldNumber = 5,
    kPrikeyFieldNumber = 8,
    kJoinInfoFieldNumber = 6,
    kLocalPolyFieldNumber = 7,
    kHeightFieldNumber = 1,
    kShardIdFieldNumber = 2,
  };
  // optional bytes id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes bls_enc_data = 4;
  bool has_bls_enc_data() const;
  private:
  bool _internal_has_bls_enc_data() const;
  public:
  void clear_bls_enc_data();
  const std::string& bls_enc_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_enc_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_enc_data();
  PROTOBUF_NODISCARD std::string* release_bls_enc_data();
  void set_allocated_bls_enc_data(std::string* bls_enc_data);
  private:
  const std::string& _internal_bls_enc_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_enc_data(const std::string& value);
  std::string* _internal_mutable_bls_enc_data();
  public:

  // optional bytes bls_hash = 5;
  bool has_bls_hash() const;
  private:
  bool _internal_has_bls_hash() const;
  public:
  void clear_bls_hash();
  const std::string& bls_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_hash();
  PROTOBUF_NODISCARD std::string* release_bls_hash();
  void set_allocated_bls_hash(std::string* bls_hash);
  private:
  const std::string& _internal_bls_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_hash(const std::string& value);
  std::string* _internal_mutable_bls_hash();
  public:

  // optional bytes prikey = 8;
  bool has_prikey() const;
  private:
  bool _internal_has_prikey() const;
  public:
  void clear_prikey();
  const std::string& prikey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prikey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prikey();
  PROTOBUF_NODISCARD std::string* release_prikey();
  void set_allocated_prikey(std::string* prikey);
  private:
  const std::string& _internal_prikey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prikey(const std::string& value);
  std::string* _internal_mutable_prikey();
  public:

  // optional .zjchain.bls.protobuf.JoinElectInfo join_info = 6;
  bool has_join_info() const;
  private:
  bool _internal_has_join_info() const;
  public:
  void clear_join_info();
  const ::zjchain::bls::protobuf::JoinElectInfo& join_info() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::JoinElectInfo* release_join_info();
  ::zjchain::bls::protobuf::JoinElectInfo* mutable_join_info();
  void set_allocated_join_info(::zjchain::bls::protobuf::JoinElectInfo* join_info);
  private:
  const ::zjchain::bls::protobuf::JoinElectInfo& _internal_join_info() const;
  ::zjchain::bls::protobuf::JoinElectInfo* _internal_mutable_join_info();
  public:
  void unsafe_arena_set_allocated_join_info(
      ::zjchain::bls::protobuf::JoinElectInfo* join_info);
  ::zjchain::bls::protobuf::JoinElectInfo* unsafe_arena_release_join_info();

  // optional .zjchain.bls.protobuf.LocalPolynomial local_poly = 7;
  bool has_local_poly() const;
  private:
  bool _internal_has_local_poly() const;
  public:
  void clear_local_poly();
  const ::zjchain::bls::protobuf::LocalPolynomial& local_poly() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::LocalPolynomial* release_local_poly();
  ::zjchain::bls::protobuf::LocalPolynomial* mutable_local_poly();
  void set_allocated_local_poly(::zjchain::bls::protobuf::LocalPolynomial* local_poly);
  private:
  const ::zjchain::bls::protobuf::LocalPolynomial& _internal_local_poly() const;
  ::zjchain::bls::protobuf::LocalPolynomial* _internal_mutable_local_poly();
  public:
  void unsafe_arena_set_allocated_local_poly(
      ::zjchain::bls::protobuf::LocalPolynomial* local_poly);
  ::zjchain::bls::protobuf::LocalPolynomial* unsafe_arena_release_local_poly();

  // optional uint64 height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // optional uint32 shard_id = 2;
  bool has_shard_id() const;
  private:
  bool _internal_has_shard_id() const;
  public:
  void clear_shard_id();
  uint32_t shard_id() const;
  void set_shard_id(uint32_t value);
  private:
  uint32_t _internal_shard_id() const;
  void _internal_set_shard_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.init.protobuf.GenesisInitBlsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_enc_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prikey_;
  ::zjchain::bls::protobuf::JoinElectInfo* join_info_;
  ::zjchain::bls::protobuf::LocalPolynomial* local_poly_;
  uint64_t height_;
  uint32_t shard_id_;
  friend struct ::TableStruct_protos_2finit_2eproto;
};
// -------------------------------------------------------------------

class InitMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.init.protobuf.InitMessage) */ {
 public:
  inline InitMessage() : InitMessage(nullptr) {}
  ~InitMessage() override;
  explicit PROTOBUF_CONSTEXPR InitMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitMessage(const InitMessage& from);
  InitMessage(InitMessage&& from) noexcept
    : InitMessage() {
    *this = ::std::move(from);
  }

  inline InitMessage& operator=(const InitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitMessage& operator=(InitMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitMessage* internal_default_instance() {
    return reinterpret_cast<const InitMessage*>(
               &_InitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InitMessage& a, InitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.init.protobuf.InitMessage";
  }
  protected:
  explicit InitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrReqFieldNumber = 1,
    kAddrResFieldNumber = 2,
    kPoolsFieldNumber = 3,
  };
  // optional .zjchain.init.protobuf.GetAddressInfoRequest addr_req = 1;
  bool has_addr_req() const;
  private:
  bool _internal_has_addr_req() const;
  public:
  void clear_addr_req();
  const ::zjchain::init::protobuf::GetAddressInfoRequest& addr_req() const;
  PROTOBUF_NODISCARD ::zjchain::init::protobuf::GetAddressInfoRequest* release_addr_req();
  ::zjchain::init::protobuf::GetAddressInfoRequest* mutable_addr_req();
  void set_allocated_addr_req(::zjchain::init::protobuf::GetAddressInfoRequest* addr_req);
  private:
  const ::zjchain::init::protobuf::GetAddressInfoRequest& _internal_addr_req() const;
  ::zjchain::init::protobuf::GetAddressInfoRequest* _internal_mutable_addr_req();
  public:
  void unsafe_arena_set_allocated_addr_req(
      ::zjchain::init::protobuf::GetAddressInfoRequest* addr_req);
  ::zjchain::init::protobuf::GetAddressInfoRequest* unsafe_arena_release_addr_req();

  // optional .zjchain.init.protobuf.GetAddressInfoResponse addr_res = 2;
  bool has_addr_res() const;
  private:
  bool _internal_has_addr_res() const;
  public:
  void clear_addr_res();
  const ::zjchain::init::protobuf::GetAddressInfoResponse& addr_res() const;
  PROTOBUF_NODISCARD ::zjchain::init::protobuf::GetAddressInfoResponse* release_addr_res();
  ::zjchain::init::protobuf::GetAddressInfoResponse* mutable_addr_res();
  void set_allocated_addr_res(::zjchain::init::protobuf::GetAddressInfoResponse* addr_res);
  private:
  const ::zjchain::init::protobuf::GetAddressInfoResponse& _internal_addr_res() const;
  ::zjchain::init::protobuf::GetAddressInfoResponse* _internal_mutable_addr_res();
  public:
  void unsafe_arena_set_allocated_addr_res(
      ::zjchain::init::protobuf::GetAddressInfoResponse* addr_res);
  ::zjchain::init::protobuf::GetAddressInfoResponse* unsafe_arena_release_addr_res();

  // optional .zjchain.init.protobuf.InvalidLeaderPools pools = 3;
  bool has_pools() const;
  private:
  bool _internal_has_pools() const;
  public:
  void clear_pools();
  const ::zjchain::init::protobuf::InvalidLeaderPools& pools() const;
  PROTOBUF_NODISCARD ::zjchain::init::protobuf::InvalidLeaderPools* release_pools();
  ::zjchain::init::protobuf::InvalidLeaderPools* mutable_pools();
  void set_allocated_pools(::zjchain::init::protobuf::InvalidLeaderPools* pools);
  private:
  const ::zjchain::init::protobuf::InvalidLeaderPools& _internal_pools() const;
  ::zjchain::init::protobuf::InvalidLeaderPools* _internal_mutable_pools();
  public:
  void unsafe_arena_set_allocated_pools(
      ::zjchain::init::protobuf::InvalidLeaderPools* pools);
  ::zjchain::init::protobuf::InvalidLeaderPools* unsafe_arena_release_pools();

  // @@protoc_insertion_point(class_scope:zjchain.init.protobuf.InitMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::init::protobuf::GetAddressInfoRequest* addr_req_;
  ::zjchain::init::protobuf::GetAddressInfoResponse* addr_res_;
  ::zjchain::init::protobuf::InvalidLeaderPools* pools_;
  friend struct ::TableStruct_protos_2finit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAddressInfoRequest

// optional bytes id = 1;
inline bool GetAddressInfoRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAddressInfoRequest::has_id() const {
  return _internal_has_id();
}
inline void GetAddressInfoRequest::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAddressInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GetAddressInfoRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAddressInfoRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.GetAddressInfoRequest.id)
}
inline std::string* GetAddressInfoRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GetAddressInfoRequest.id)
  return _s;
}
inline const std::string& GetAddressInfoRequest::_internal_id() const {
  return id_.Get();
}
inline void GetAddressInfoRequest::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAddressInfoRequest::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAddressInfoRequest::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GetAddressInfoRequest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAddressInfoRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GetAddressInfoRequest.id)
}

// -------------------------------------------------------------------

// GetAddressInfoResponse

// optional .zjchain.block.protobuf.Block block = 1;
inline bool GetAddressInfoResponse::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool GetAddressInfoResponse::has_block() const {
  return _internal_has_block();
}
inline const ::zjchain::block::protobuf::Block& GetAddressInfoResponse::_internal_block() const {
  const ::zjchain::block::protobuf::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::Block&>(
      ::zjchain::block::protobuf::_Block_default_instance_);
}
inline const ::zjchain::block::protobuf::Block& GetAddressInfoResponse::block() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GetAddressInfoResponse.block)
  return _internal_block();
}
inline void GetAddressInfoResponse::unsafe_arena_set_allocated_block(
    ::zjchain::block::protobuf::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.init.protobuf.GetAddressInfoResponse.block)
}
inline ::zjchain::block::protobuf::Block* GetAddressInfoResponse::release_block() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::Block* GetAddressInfoResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GetAddressInfoResponse.block)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::Block* GetAddressInfoResponse::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::zjchain::block::protobuf::Block* GetAddressInfoResponse::mutable_block() {
  ::zjchain::block::protobuf::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GetAddressInfoResponse.block)
  return _msg;
}
inline void GetAddressInfoResponse::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GetAddressInfoResponse.block)
}

// -------------------------------------------------------------------

// InvalidLeaderPools

// repeated int32 pools = 1;
inline int InvalidLeaderPools::_internal_pools_size() const {
  return pools_.size();
}
inline int InvalidLeaderPools::pools_size() const {
  return _internal_pools_size();
}
inline void InvalidLeaderPools::clear_pools() {
  pools_.Clear();
}
inline int32_t InvalidLeaderPools::_internal_pools(int index) const {
  return pools_.Get(index);
}
inline int32_t InvalidLeaderPools::pools(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InvalidLeaderPools.pools)
  return _internal_pools(index);
}
inline void InvalidLeaderPools::set_pools(int index, int32_t value) {
  pools_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.InvalidLeaderPools.pools)
}
inline void InvalidLeaderPools::_internal_add_pools(int32_t value) {
  pools_.Add(value);
}
inline void InvalidLeaderPools::add_pools(int32_t value) {
  _internal_add_pools(value);
  // @@protoc_insertion_point(field_add:zjchain.init.protobuf.InvalidLeaderPools.pools)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
InvalidLeaderPools::_internal_pools() const {
  return pools_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
InvalidLeaderPools::pools() const {
  // @@protoc_insertion_point(field_list:zjchain.init.protobuf.InvalidLeaderPools.pools)
  return _internal_pools();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
InvalidLeaderPools::_internal_mutable_pools() {
  return &pools_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
InvalidLeaderPools::mutable_pools() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.init.protobuf.InvalidLeaderPools.pools)
  return _internal_mutable_pools();
}

// optional uint64 elect_height = 2;
inline bool InvalidLeaderPools::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvalidLeaderPools::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void InvalidLeaderPools::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t InvalidLeaderPools::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t InvalidLeaderPools::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InvalidLeaderPools.elect_height)
  return _internal_elect_height();
}
inline void InvalidLeaderPools::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  elect_height_ = value;
}
inline void InvalidLeaderPools::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.InvalidLeaderPools.elect_height)
}

// optional uint32 member_index = 3;
inline bool InvalidLeaderPools::_internal_has_member_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InvalidLeaderPools::has_member_index() const {
  return _internal_has_member_index();
}
inline void InvalidLeaderPools::clear_member_index() {
  member_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t InvalidLeaderPools::_internal_member_index() const {
  return member_index_;
}
inline uint32_t InvalidLeaderPools::member_index() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InvalidLeaderPools.member_index)
  return _internal_member_index();
}
inline void InvalidLeaderPools::_internal_set_member_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  member_index_ = value;
}
inline void InvalidLeaderPools::set_member_index(uint32_t value) {
  _internal_set_member_index(value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.InvalidLeaderPools.member_index)
}

// optional int32 mod_num = 4;
inline bool InvalidLeaderPools::_internal_has_mod_num() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InvalidLeaderPools::has_mod_num() const {
  return _internal_has_mod_num();
}
inline void InvalidLeaderPools::clear_mod_num() {
  mod_num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t InvalidLeaderPools::_internal_mod_num() const {
  return mod_num_;
}
inline int32_t InvalidLeaderPools::mod_num() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InvalidLeaderPools.mod_num)
  return _internal_mod_num();
}
inline void InvalidLeaderPools::_internal_set_mod_num(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  mod_num_ = value;
}
inline void InvalidLeaderPools::set_mod_num(int32_t value) {
  _internal_set_mod_num(value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.InvalidLeaderPools.mod_num)
}

// optional uint32 leader_idx = 5;
inline bool InvalidLeaderPools::_internal_has_leader_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InvalidLeaderPools::has_leader_idx() const {
  return _internal_has_leader_idx();
}
inline void InvalidLeaderPools::clear_leader_idx() {
  leader_idx_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t InvalidLeaderPools::_internal_leader_idx() const {
  return leader_idx_;
}
inline uint32_t InvalidLeaderPools::leader_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InvalidLeaderPools.leader_idx)
  return _internal_leader_idx();
}
inline void InvalidLeaderPools::_internal_set_leader_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  leader_idx_ = value;
}
inline void InvalidLeaderPools::set_leader_idx(uint32_t value) {
  _internal_set_leader_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.InvalidLeaderPools.leader_idx)
}

// optional uint32 version = 6;
inline bool InvalidLeaderPools::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InvalidLeaderPools::has_version() const {
  return _internal_has_version();
}
inline void InvalidLeaderPools::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t InvalidLeaderPools::_internal_version() const {
  return version_;
}
inline uint32_t InvalidLeaderPools::version() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InvalidLeaderPools.version)
  return _internal_version();
}
inline void InvalidLeaderPools::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  version_ = value;
}
inline void InvalidLeaderPools::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.InvalidLeaderPools.version)
}

// -------------------------------------------------------------------

// GenesisInitBlsInfo

// optional uint64 height = 1;
inline bool GenesisInitBlsInfo::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GenesisInitBlsInfo::has_height() const {
  return _internal_has_height();
}
inline void GenesisInitBlsInfo::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t GenesisInitBlsInfo::_internal_height() const {
  return height_;
}
inline uint64_t GenesisInitBlsInfo::height() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.height)
  return _internal_height();
}
inline void GenesisInitBlsInfo::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  height_ = value;
}
inline void GenesisInitBlsInfo::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.GenesisInitBlsInfo.height)
}

// optional uint32 shard_id = 2;
inline bool GenesisInitBlsInfo::_internal_has_shard_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GenesisInitBlsInfo::has_shard_id() const {
  return _internal_has_shard_id();
}
inline void GenesisInitBlsInfo::clear_shard_id() {
  shard_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t GenesisInitBlsInfo::_internal_shard_id() const {
  return shard_id_;
}
inline uint32_t GenesisInitBlsInfo::shard_id() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.shard_id)
  return _internal_shard_id();
}
inline void GenesisInitBlsInfo::_internal_set_shard_id(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  shard_id_ = value;
}
inline void GenesisInitBlsInfo::set_shard_id(uint32_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.GenesisInitBlsInfo.shard_id)
}

// optional bytes id = 3;
inline bool GenesisInitBlsInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenesisInitBlsInfo::has_id() const {
  return _internal_has_id();
}
inline void GenesisInitBlsInfo::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenesisInitBlsInfo::id() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisInitBlsInfo::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.GenesisInitBlsInfo.id)
}
inline std::string* GenesisInitBlsInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GenesisInitBlsInfo.id)
  return _s;
}
inline const std::string& GenesisInitBlsInfo::_internal_id() const {
  return id_.Get();
}
inline void GenesisInitBlsInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GenesisInitBlsInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GenesisInitBlsInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.id)
}

// optional bytes bls_enc_data = 4;
inline bool GenesisInitBlsInfo::_internal_has_bls_enc_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GenesisInitBlsInfo::has_bls_enc_data() const {
  return _internal_has_bls_enc_data();
}
inline void GenesisInitBlsInfo::clear_bls_enc_data() {
  bls_enc_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenesisInitBlsInfo::bls_enc_data() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.bls_enc_data)
  return _internal_bls_enc_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisInitBlsInfo::set_bls_enc_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 bls_enc_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.GenesisInitBlsInfo.bls_enc_data)
}
inline std::string* GenesisInitBlsInfo::mutable_bls_enc_data() {
  std::string* _s = _internal_mutable_bls_enc_data();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GenesisInitBlsInfo.bls_enc_data)
  return _s;
}
inline const std::string& GenesisInitBlsInfo::_internal_bls_enc_data() const {
  return bls_enc_data_.Get();
}
inline void GenesisInitBlsInfo::_internal_set_bls_enc_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bls_enc_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::_internal_mutable_bls_enc_data() {
  _has_bits_[0] |= 0x00000002u;
  return bls_enc_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::release_bls_enc_data() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GenesisInitBlsInfo.bls_enc_data)
  if (!_internal_has_bls_enc_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = bls_enc_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_enc_data_.IsDefault()) {
    bls_enc_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GenesisInitBlsInfo::set_allocated_bls_enc_data(std::string* bls_enc_data) {
  if (bls_enc_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bls_enc_data_.SetAllocated(bls_enc_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_enc_data_.IsDefault()) {
    bls_enc_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.bls_enc_data)
}

// optional bytes bls_hash = 5;
inline bool GenesisInitBlsInfo::_internal_has_bls_hash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GenesisInitBlsInfo::has_bls_hash() const {
  return _internal_has_bls_hash();
}
inline void GenesisInitBlsInfo::clear_bls_hash() {
  bls_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GenesisInitBlsInfo::bls_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.bls_hash)
  return _internal_bls_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisInitBlsInfo::set_bls_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 bls_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.GenesisInitBlsInfo.bls_hash)
}
inline std::string* GenesisInitBlsInfo::mutable_bls_hash() {
  std::string* _s = _internal_mutable_bls_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GenesisInitBlsInfo.bls_hash)
  return _s;
}
inline const std::string& GenesisInitBlsInfo::_internal_bls_hash() const {
  return bls_hash_.Get();
}
inline void GenesisInitBlsInfo::_internal_set_bls_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  bls_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::_internal_mutable_bls_hash() {
  _has_bits_[0] |= 0x00000004u;
  return bls_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::release_bls_hash() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GenesisInitBlsInfo.bls_hash)
  if (!_internal_has_bls_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = bls_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_hash_.IsDefault()) {
    bls_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GenesisInitBlsInfo::set_allocated_bls_hash(std::string* bls_hash) {
  if (bls_hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bls_hash_.SetAllocated(bls_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_hash_.IsDefault()) {
    bls_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.bls_hash)
}

// optional .zjchain.bls.protobuf.JoinElectInfo join_info = 6;
inline bool GenesisInitBlsInfo::_internal_has_join_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || join_info_ != nullptr);
  return value;
}
inline bool GenesisInitBlsInfo::has_join_info() const {
  return _internal_has_join_info();
}
inline const ::zjchain::bls::protobuf::JoinElectInfo& GenesisInitBlsInfo::_internal_join_info() const {
  const ::zjchain::bls::protobuf::JoinElectInfo* p = join_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::JoinElectInfo&>(
      ::zjchain::bls::protobuf::_JoinElectInfo_default_instance_);
}
inline const ::zjchain::bls::protobuf::JoinElectInfo& GenesisInitBlsInfo::join_info() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.join_info)
  return _internal_join_info();
}
inline void GenesisInitBlsInfo::unsafe_arena_set_allocated_join_info(
    ::zjchain::bls::protobuf::JoinElectInfo* join_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(join_info_);
  }
  join_info_ = join_info;
  if (join_info) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.join_info)
}
inline ::zjchain::bls::protobuf::JoinElectInfo* GenesisInitBlsInfo::release_join_info() {
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::bls::protobuf::JoinElectInfo* temp = join_info_;
  join_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::JoinElectInfo* GenesisInitBlsInfo::unsafe_arena_release_join_info() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GenesisInitBlsInfo.join_info)
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::bls::protobuf::JoinElectInfo* temp = join_info_;
  join_info_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::JoinElectInfo* GenesisInitBlsInfo::_internal_mutable_join_info() {
  _has_bits_[0] |= 0x00000010u;
  if (join_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::JoinElectInfo>(GetArenaForAllocation());
    join_info_ = p;
  }
  return join_info_;
}
inline ::zjchain::bls::protobuf::JoinElectInfo* GenesisInitBlsInfo::mutable_join_info() {
  ::zjchain::bls::protobuf::JoinElectInfo* _msg = _internal_mutable_join_info();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GenesisInitBlsInfo.join_info)
  return _msg;
}
inline void GenesisInitBlsInfo::set_allocated_join_info(::zjchain::bls::protobuf::JoinElectInfo* join_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(join_info_);
  }
  if (join_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(join_info));
    if (message_arena != submessage_arena) {
      join_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  join_info_ = join_info;
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.join_info)
}

// optional .zjchain.bls.protobuf.LocalPolynomial local_poly = 7;
inline bool GenesisInitBlsInfo::_internal_has_local_poly() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || local_poly_ != nullptr);
  return value;
}
inline bool GenesisInitBlsInfo::has_local_poly() const {
  return _internal_has_local_poly();
}
inline const ::zjchain::bls::protobuf::LocalPolynomial& GenesisInitBlsInfo::_internal_local_poly() const {
  const ::zjchain::bls::protobuf::LocalPolynomial* p = local_poly_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::LocalPolynomial&>(
      ::zjchain::bls::protobuf::_LocalPolynomial_default_instance_);
}
inline const ::zjchain::bls::protobuf::LocalPolynomial& GenesisInitBlsInfo::local_poly() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.local_poly)
  return _internal_local_poly();
}
inline void GenesisInitBlsInfo::unsafe_arena_set_allocated_local_poly(
    ::zjchain::bls::protobuf::LocalPolynomial* local_poly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_poly_);
  }
  local_poly_ = local_poly;
  if (local_poly) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.local_poly)
}
inline ::zjchain::bls::protobuf::LocalPolynomial* GenesisInitBlsInfo::release_local_poly() {
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::bls::protobuf::LocalPolynomial* temp = local_poly_;
  local_poly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::LocalPolynomial* GenesisInitBlsInfo::unsafe_arena_release_local_poly() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GenesisInitBlsInfo.local_poly)
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::bls::protobuf::LocalPolynomial* temp = local_poly_;
  local_poly_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::LocalPolynomial* GenesisInitBlsInfo::_internal_mutable_local_poly() {
  _has_bits_[0] |= 0x00000020u;
  if (local_poly_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::LocalPolynomial>(GetArenaForAllocation());
    local_poly_ = p;
  }
  return local_poly_;
}
inline ::zjchain::bls::protobuf::LocalPolynomial* GenesisInitBlsInfo::mutable_local_poly() {
  ::zjchain::bls::protobuf::LocalPolynomial* _msg = _internal_mutable_local_poly();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GenesisInitBlsInfo.local_poly)
  return _msg;
}
inline void GenesisInitBlsInfo::set_allocated_local_poly(::zjchain::bls::protobuf::LocalPolynomial* local_poly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_poly_);
  }
  if (local_poly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_poly));
    if (message_arena != submessage_arena) {
      local_poly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_poly, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  local_poly_ = local_poly;
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.local_poly)
}

// optional bytes prikey = 8;
inline bool GenesisInitBlsInfo::_internal_has_prikey() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GenesisInitBlsInfo::has_prikey() const {
  return _internal_has_prikey();
}
inline void GenesisInitBlsInfo::clear_prikey() {
  prikey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GenesisInitBlsInfo::prikey() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.GenesisInitBlsInfo.prikey)
  return _internal_prikey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisInitBlsInfo::set_prikey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 prikey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.init.protobuf.GenesisInitBlsInfo.prikey)
}
inline std::string* GenesisInitBlsInfo::mutable_prikey() {
  std::string* _s = _internal_mutable_prikey();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.GenesisInitBlsInfo.prikey)
  return _s;
}
inline const std::string& GenesisInitBlsInfo::_internal_prikey() const {
  return prikey_.Get();
}
inline void GenesisInitBlsInfo::_internal_set_prikey(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prikey_.Set(value, GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::_internal_mutable_prikey() {
  _has_bits_[0] |= 0x00000008u;
  return prikey_.Mutable(GetArenaForAllocation());
}
inline std::string* GenesisInitBlsInfo::release_prikey() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.GenesisInitBlsInfo.prikey)
  if (!_internal_has_prikey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = prikey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prikey_.IsDefault()) {
    prikey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GenesisInitBlsInfo::set_allocated_prikey(std::string* prikey) {
  if (prikey != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prikey_.SetAllocated(prikey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prikey_.IsDefault()) {
    prikey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.GenesisInitBlsInfo.prikey)
}

// -------------------------------------------------------------------

// InitMessage

// optional .zjchain.init.protobuf.GetAddressInfoRequest addr_req = 1;
inline bool InitMessage::_internal_has_addr_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || addr_req_ != nullptr);
  return value;
}
inline bool InitMessage::has_addr_req() const {
  return _internal_has_addr_req();
}
inline void InitMessage::clear_addr_req() {
  if (addr_req_ != nullptr) addr_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::init::protobuf::GetAddressInfoRequest& InitMessage::_internal_addr_req() const {
  const ::zjchain::init::protobuf::GetAddressInfoRequest* p = addr_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::init::protobuf::GetAddressInfoRequest&>(
      ::zjchain::init::protobuf::_GetAddressInfoRequest_default_instance_);
}
inline const ::zjchain::init::protobuf::GetAddressInfoRequest& InitMessage::addr_req() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InitMessage.addr_req)
  return _internal_addr_req();
}
inline void InitMessage::unsafe_arena_set_allocated_addr_req(
    ::zjchain::init::protobuf::GetAddressInfoRequest* addr_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addr_req_);
  }
  addr_req_ = addr_req;
  if (addr_req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.init.protobuf.InitMessage.addr_req)
}
inline ::zjchain::init::protobuf::GetAddressInfoRequest* InitMessage::release_addr_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::init::protobuf::GetAddressInfoRequest* temp = addr_req_;
  addr_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::init::protobuf::GetAddressInfoRequest* InitMessage::unsafe_arena_release_addr_req() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.InitMessage.addr_req)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::init::protobuf::GetAddressInfoRequest* temp = addr_req_;
  addr_req_ = nullptr;
  return temp;
}
inline ::zjchain::init::protobuf::GetAddressInfoRequest* InitMessage::_internal_mutable_addr_req() {
  _has_bits_[0] |= 0x00000001u;
  if (addr_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::init::protobuf::GetAddressInfoRequest>(GetArenaForAllocation());
    addr_req_ = p;
  }
  return addr_req_;
}
inline ::zjchain::init::protobuf::GetAddressInfoRequest* InitMessage::mutable_addr_req() {
  ::zjchain::init::protobuf::GetAddressInfoRequest* _msg = _internal_mutable_addr_req();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.InitMessage.addr_req)
  return _msg;
}
inline void InitMessage::set_allocated_addr_req(::zjchain::init::protobuf::GetAddressInfoRequest* addr_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete addr_req_;
  }
  if (addr_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addr_req);
    if (message_arena != submessage_arena) {
      addr_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addr_req_ = addr_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.InitMessage.addr_req)
}

// optional .zjchain.init.protobuf.GetAddressInfoResponse addr_res = 2;
inline bool InitMessage::_internal_has_addr_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || addr_res_ != nullptr);
  return value;
}
inline bool InitMessage::has_addr_res() const {
  return _internal_has_addr_res();
}
inline void InitMessage::clear_addr_res() {
  if (addr_res_ != nullptr) addr_res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::init::protobuf::GetAddressInfoResponse& InitMessage::_internal_addr_res() const {
  const ::zjchain::init::protobuf::GetAddressInfoResponse* p = addr_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::init::protobuf::GetAddressInfoResponse&>(
      ::zjchain::init::protobuf::_GetAddressInfoResponse_default_instance_);
}
inline const ::zjchain::init::protobuf::GetAddressInfoResponse& InitMessage::addr_res() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InitMessage.addr_res)
  return _internal_addr_res();
}
inline void InitMessage::unsafe_arena_set_allocated_addr_res(
    ::zjchain::init::protobuf::GetAddressInfoResponse* addr_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addr_res_);
  }
  addr_res_ = addr_res;
  if (addr_res) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.init.protobuf.InitMessage.addr_res)
}
inline ::zjchain::init::protobuf::GetAddressInfoResponse* InitMessage::release_addr_res() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::init::protobuf::GetAddressInfoResponse* temp = addr_res_;
  addr_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::init::protobuf::GetAddressInfoResponse* InitMessage::unsafe_arena_release_addr_res() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.InitMessage.addr_res)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::init::protobuf::GetAddressInfoResponse* temp = addr_res_;
  addr_res_ = nullptr;
  return temp;
}
inline ::zjchain::init::protobuf::GetAddressInfoResponse* InitMessage::_internal_mutable_addr_res() {
  _has_bits_[0] |= 0x00000002u;
  if (addr_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::init::protobuf::GetAddressInfoResponse>(GetArenaForAllocation());
    addr_res_ = p;
  }
  return addr_res_;
}
inline ::zjchain::init::protobuf::GetAddressInfoResponse* InitMessage::mutable_addr_res() {
  ::zjchain::init::protobuf::GetAddressInfoResponse* _msg = _internal_mutable_addr_res();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.InitMessage.addr_res)
  return _msg;
}
inline void InitMessage::set_allocated_addr_res(::zjchain::init::protobuf::GetAddressInfoResponse* addr_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete addr_res_;
  }
  if (addr_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addr_res);
    if (message_arena != submessage_arena) {
      addr_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  addr_res_ = addr_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.InitMessage.addr_res)
}

// optional .zjchain.init.protobuf.InvalidLeaderPools pools = 3;
inline bool InitMessage::_internal_has_pools() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pools_ != nullptr);
  return value;
}
inline bool InitMessage::has_pools() const {
  return _internal_has_pools();
}
inline void InitMessage::clear_pools() {
  if (pools_ != nullptr) pools_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zjchain::init::protobuf::InvalidLeaderPools& InitMessage::_internal_pools() const {
  const ::zjchain::init::protobuf::InvalidLeaderPools* p = pools_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::init::protobuf::InvalidLeaderPools&>(
      ::zjchain::init::protobuf::_InvalidLeaderPools_default_instance_);
}
inline const ::zjchain::init::protobuf::InvalidLeaderPools& InitMessage::pools() const {
  // @@protoc_insertion_point(field_get:zjchain.init.protobuf.InitMessage.pools)
  return _internal_pools();
}
inline void InitMessage::unsafe_arena_set_allocated_pools(
    ::zjchain::init::protobuf::InvalidLeaderPools* pools) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pools_);
  }
  pools_ = pools;
  if (pools) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.init.protobuf.InitMessage.pools)
}
inline ::zjchain::init::protobuf::InvalidLeaderPools* InitMessage::release_pools() {
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::init::protobuf::InvalidLeaderPools* temp = pools_;
  pools_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::init::protobuf::InvalidLeaderPools* InitMessage::unsafe_arena_release_pools() {
  // @@protoc_insertion_point(field_release:zjchain.init.protobuf.InitMessage.pools)
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::init::protobuf::InvalidLeaderPools* temp = pools_;
  pools_ = nullptr;
  return temp;
}
inline ::zjchain::init::protobuf::InvalidLeaderPools* InitMessage::_internal_mutable_pools() {
  _has_bits_[0] |= 0x00000004u;
  if (pools_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::init::protobuf::InvalidLeaderPools>(GetArenaForAllocation());
    pools_ = p;
  }
  return pools_;
}
inline ::zjchain::init::protobuf::InvalidLeaderPools* InitMessage::mutable_pools() {
  ::zjchain::init::protobuf::InvalidLeaderPools* _msg = _internal_mutable_pools();
  // @@protoc_insertion_point(field_mutable:zjchain.init.protobuf.InitMessage.pools)
  return _msg;
}
inline void InitMessage::set_allocated_pools(::zjchain::init::protobuf::InvalidLeaderPools* pools) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pools_;
  }
  if (pools) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pools);
    if (message_arena != submessage_arena) {
      pools = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pools, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pools_ = pools;
  // @@protoc_insertion_point(field_set_allocated:zjchain.init.protobuf.InitMessage.pools)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace init
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2finit_2eproto
