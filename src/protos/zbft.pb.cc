// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/zbft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/zbft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace zbft {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* TxBft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxBft_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZbftMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZbftMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2fzbft_2eproto() {
  protobuf_AddDesc_protos_2fzbft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/zbft.proto");
  GOOGLE_CHECK(file != NULL);
  TxBft_descriptor_ = file->message_type(0);
  static const int TxBft_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxBft, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxBft, prepare_final_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxBft, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxBft, tx_hash_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxBft, tx_type_),
  };
  TxBft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxBft_descriptor_,
      TxBft::default_instance_,
      TxBft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxBft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxBft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxBft));
  ZbftMessage_descriptor_ = file->message_type(1);
  static const int ZbftMessage_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, prepare_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, precommit_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, commit_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, leader_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, net_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, agree_precommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, agree_commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, pool_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, tx_bft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, member_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, backup_enc_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, elect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, bls_sign_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, bls_sign_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, prepare_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, prepare_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, sync_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, oppose_prepare_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, invaid_txs_),
  };
  ZbftMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZbftMessage_descriptor_,
      ZbftMessage::default_instance_,
      ZbftMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZbftMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZbftMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2fzbft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxBft_descriptor_, &TxBft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZbftMessage_descriptor_, &ZbftMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2fzbft_2eproto() {
  delete TxBft::default_instance_;
  delete TxBft_reflection_;
  delete ZbftMessage::default_instance_;
  delete ZbftMessage_reflection_;
}

void protobuf_AddDesc_protos_2fzbft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zjchain::block::protobuf::protobuf_AddDesc_protos_2fblock_2eproto();
  ::zjchain::pools::protobuf::protobuf_AddDesc_protos_2fpools_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021protos/zbft.proto\022\025zjchain.zbft.protob"
    "uf\032\022protos/block.proto\032\022protos/pools.pro"
    "to\"\267\001\n\005TxBft\022,\n\005block\030\001 \001(\0132\035.zjchain.bl"
    "ock.protobuf.Block\022\032\n\022prepare_final_hash"
    "\030\002 \001(\014\022\016\n\006height\030\003 \001(\004\022\024\n\014tx_hash_list\030\004"
    " \003(\014\022>\n\007tx_type\030\005 \001(\0162 .zjchain.pools.pr"
    "otobuf.StepType:\013kNormalFrom\"\251\004\n\013ZbftMes"
    "sage\022\023\n\013prepare_gid\030\001 \001(\014\022\025\n\rprecommit_g"
    "id\030\002 \001(\014\022\022\n\ncommit_gid\030\003 \001(\014\022\026\n\nleader_i"
    "dx\030\004 \001(\005:\002-1\022\016\n\006net_id\030\005 \001(\r\022\036\n\017agree_pr"
    "ecommit\030\006 \001(\010:\005false\022\033\n\014agree_commit\030\007 \001"
    "(\010:\005false\022\036\n\npool_index\030\010 \001(\r:\n429496729"
    "5\022\r\n\005error\030\t \001(\005\022,\n\006tx_bft\030\n \001(\0132\034.zjcha"
    "in.zbft.protobuf.TxBft\022\024\n\014member_index\030\013"
    " \001(\r\022\027\n\017backup_enc_data\030\014 \001(\014\022\024\n\014elect_h"
    "eight\030\r \001(\004\022\022\n\nbls_sign_x\030\016 \001(\014\022\022\n\nbls_s"
    "ign_y\030\017 \001(\014\022\026\n\016prepare_height\030\020 \001(\004\022\024\n\014p"
    "repare_hash\030\021 \001(\014\022,\n\005block\030\022 \001(\0132\035.zjcha"
    "in.block.protobuf.Block\022\022\n\nsync_block\030\023 "
    "\001(\010\022\013\n\003ips\030\024 \003(\r\022\032\n\022oppose_prepare_gid\030\025"
    " \001(\014\022\022\n\ninvaid_txs\030\026 \003(\r", 824);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/zbft.proto", &protobuf_RegisterTypes);
  TxBft::default_instance_ = new TxBft();
  ZbftMessage::default_instance_ = new ZbftMessage();
  TxBft::default_instance_->InitAsDefaultInstance();
  ZbftMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2fzbft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2fzbft_2eproto {
  StaticDescriptorInitializer_protos_2fzbft_2eproto() {
    protobuf_AddDesc_protos_2fzbft_2eproto();
  }
} static_descriptor_initializer_protos_2fzbft_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TxBft::kBlockFieldNumber;
const int TxBft::kPrepareFinalHashFieldNumber;
const int TxBft::kHeightFieldNumber;
const int TxBft::kTxHashListFieldNumber;
const int TxBft::kTxTypeFieldNumber;
#endif  // !_MSC_VER

TxBft::TxBft()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxBft::InitAsDefaultInstance() {
  block_ = const_cast< ::zjchain::block::protobuf::Block*>(&::zjchain::block::protobuf::Block::default_instance());
}

TxBft::TxBft(const TxBft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxBft::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  prepare_final_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  height_ = GOOGLE_ULONGLONG(0);
  tx_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxBft::~TxBft() {
  SharedDtor();
}

void TxBft::SharedDtor() {
  if (prepare_final_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete prepare_final_hash_;
  }
  if (this != default_instance_) {
    delete block_;
  }
}

void TxBft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxBft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxBft_descriptor_;
}

const TxBft& TxBft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fzbft_2eproto();
  return *default_instance_;
}

TxBft* TxBft::default_instance_ = NULL;

TxBft* TxBft::New() const {
  return new TxBft;
}

void TxBft::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
    }
    if (has_prepare_final_hash()) {
      if (prepare_final_hash_ != &::google::protobuf::internal::kEmptyString) {
        prepare_final_hash_->clear();
      }
    }
    height_ = GOOGLE_ULONGLONG(0);
    tx_type_ = 0;
  }
  tx_hash_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxBft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prepare_final_hash;
        break;
      }

      // optional bytes prepare_final_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prepare_final_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prepare_final_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tx_hash_list;
        break;
      }

      // repeated bytes tx_hash_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx_hash_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tx_hash_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tx_hash_list;
        if (input->ExpectTag(40)) goto parse_tx_type;
        break;
      }

      // optional .zjchain.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zjchain::pools::protobuf::StepType_IsValid(value)) {
            set_tx_type(static_cast< ::zjchain::pools::protobuf::StepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxBft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  // optional bytes prepare_final_hash = 2;
  if (has_prepare_final_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->prepare_final_hash(), output);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // repeated bytes tx_hash_list = 4;
  for (int i = 0; i < this->tx_hash_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->tx_hash_list(i), output);
  }

  // optional .zjchain.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
  if (has_tx_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tx_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxBft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  // optional bytes prepare_final_hash = 2;
  if (has_prepare_final_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->prepare_final_hash(), target);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // repeated bytes tx_hash_list = 4;
  for (int i = 0; i < this->tx_hash_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->tx_hash_list(i), target);
  }

  // optional .zjchain.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
  if (has_tx_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tx_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxBft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.block.protobuf.Block block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

    // optional bytes prepare_final_hash = 2;
    if (has_prepare_final_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prepare_final_hash());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional .zjchain.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
    if (has_tx_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_type());
    }

  }
  // repeated bytes tx_hash_list = 4;
  total_size += 1 * this->tx_hash_list_size();
  for (int i = 0; i < this->tx_hash_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tx_hash_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxBft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxBft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxBft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxBft::MergeFrom(const TxBft& from) {
  GOOGLE_CHECK_NE(&from, this);
  tx_hash_list_.MergeFrom(from.tx_hash_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
    }
    if (from.has_prepare_final_hash()) {
      set_prepare_final_hash(from.prepare_final_hash());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_tx_type()) {
      set_tx_type(from.tx_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxBft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxBft::CopyFrom(const TxBft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxBft::IsInitialized() const {

  return true;
}

void TxBft::Swap(TxBft* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(prepare_final_hash_, other->prepare_final_hash_);
    std::swap(height_, other->height_);
    tx_hash_list_.Swap(&other->tx_hash_list_);
    std::swap(tx_type_, other->tx_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxBft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxBft_descriptor_;
  metadata.reflection = TxBft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZbftMessage::kPrepareGidFieldNumber;
const int ZbftMessage::kPrecommitGidFieldNumber;
const int ZbftMessage::kCommitGidFieldNumber;
const int ZbftMessage::kLeaderIdxFieldNumber;
const int ZbftMessage::kNetIdFieldNumber;
const int ZbftMessage::kAgreePrecommitFieldNumber;
const int ZbftMessage::kAgreeCommitFieldNumber;
const int ZbftMessage::kPoolIndexFieldNumber;
const int ZbftMessage::kErrorFieldNumber;
const int ZbftMessage::kTxBftFieldNumber;
const int ZbftMessage::kMemberIndexFieldNumber;
const int ZbftMessage::kBackupEncDataFieldNumber;
const int ZbftMessage::kElectHeightFieldNumber;
const int ZbftMessage::kBlsSignXFieldNumber;
const int ZbftMessage::kBlsSignYFieldNumber;
const int ZbftMessage::kPrepareHeightFieldNumber;
const int ZbftMessage::kPrepareHashFieldNumber;
const int ZbftMessage::kBlockFieldNumber;
const int ZbftMessage::kSyncBlockFieldNumber;
const int ZbftMessage::kIpsFieldNumber;
const int ZbftMessage::kOpposePrepareGidFieldNumber;
const int ZbftMessage::kInvaidTxsFieldNumber;
#endif  // !_MSC_VER

ZbftMessage::ZbftMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZbftMessage::InitAsDefaultInstance() {
  tx_bft_ = const_cast< ::zjchain::zbft::protobuf::TxBft*>(&::zjchain::zbft::protobuf::TxBft::default_instance());
  block_ = const_cast< ::zjchain::block::protobuf::Block*>(&::zjchain::block::protobuf::Block::default_instance());
}

ZbftMessage::ZbftMessage(const ZbftMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZbftMessage::SharedCtor() {
  _cached_size_ = 0;
  prepare_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precommit_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commit_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_idx_ = -1;
  net_id_ = 0u;
  agree_precommit_ = false;
  agree_commit_ = false;
  pool_index_ = 4294967295u;
  error_ = 0;
  tx_bft_ = NULL;
  member_index_ = 0u;
  backup_enc_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elect_height_ = GOOGLE_ULONGLONG(0);
  bls_sign_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bls_sign_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prepare_height_ = GOOGLE_ULONGLONG(0);
  prepare_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_ = NULL;
  sync_block_ = false;
  oppose_prepare_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZbftMessage::~ZbftMessage() {
  SharedDtor();
}

void ZbftMessage::SharedDtor() {
  if (prepare_gid_ != &::google::protobuf::internal::kEmptyString) {
    delete prepare_gid_;
  }
  if (precommit_gid_ != &::google::protobuf::internal::kEmptyString) {
    delete precommit_gid_;
  }
  if (commit_gid_ != &::google::protobuf::internal::kEmptyString) {
    delete commit_gid_;
  }
  if (backup_enc_data_ != &::google::protobuf::internal::kEmptyString) {
    delete backup_enc_data_;
  }
  if (bls_sign_x_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_sign_x_;
  }
  if (bls_sign_y_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_sign_y_;
  }
  if (prepare_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete prepare_hash_;
  }
  if (oppose_prepare_gid_ != &::google::protobuf::internal::kEmptyString) {
    delete oppose_prepare_gid_;
  }
  if (this != default_instance_) {
    delete tx_bft_;
    delete block_;
  }
}

void ZbftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZbftMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZbftMessage_descriptor_;
}

const ZbftMessage& ZbftMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fzbft_2eproto();
  return *default_instance_;
}

ZbftMessage* ZbftMessage::default_instance_ = NULL;

ZbftMessage* ZbftMessage::New() const {
  return new ZbftMessage;
}

void ZbftMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prepare_gid()) {
      if (prepare_gid_ != &::google::protobuf::internal::kEmptyString) {
        prepare_gid_->clear();
      }
    }
    if (has_precommit_gid()) {
      if (precommit_gid_ != &::google::protobuf::internal::kEmptyString) {
        precommit_gid_->clear();
      }
    }
    if (has_commit_gid()) {
      if (commit_gid_ != &::google::protobuf::internal::kEmptyString) {
        commit_gid_->clear();
      }
    }
    leader_idx_ = -1;
    net_id_ = 0u;
    agree_precommit_ = false;
    agree_commit_ = false;
    pool_index_ = 4294967295u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    error_ = 0;
    if (has_tx_bft()) {
      if (tx_bft_ != NULL) tx_bft_->::zjchain::zbft::protobuf::TxBft::Clear();
    }
    member_index_ = 0u;
    if (has_backup_enc_data()) {
      if (backup_enc_data_ != &::google::protobuf::internal::kEmptyString) {
        backup_enc_data_->clear();
      }
    }
    elect_height_ = GOOGLE_ULONGLONG(0);
    if (has_bls_sign_x()) {
      if (bls_sign_x_ != &::google::protobuf::internal::kEmptyString) {
        bls_sign_x_->clear();
      }
    }
    if (has_bls_sign_y()) {
      if (bls_sign_y_ != &::google::protobuf::internal::kEmptyString) {
        bls_sign_y_->clear();
      }
    }
    prepare_height_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_prepare_hash()) {
      if (prepare_hash_ != &::google::protobuf::internal::kEmptyString) {
        prepare_hash_->clear();
      }
    }
    if (has_block()) {
      if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
    }
    sync_block_ = false;
    if (has_oppose_prepare_gid()) {
      if (oppose_prepare_gid_ != &::google::protobuf::internal::kEmptyString) {
        oppose_prepare_gid_->clear();
      }
    }
  }
  ips_.Clear();
  invaid_txs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZbftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes prepare_gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prepare_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_precommit_gid;
        break;
      }

      // optional bytes precommit_gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_precommit_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_precommit_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commit_gid;
        break;
      }

      // optional bytes commit_gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commit_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_commit_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader_idx;
        break;
      }

      // optional int32 leader_idx = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_idx_)));
          set_has_leader_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_net_id;
        break;
      }

      // optional uint32 net_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_id_)));
          set_has_net_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agree_precommit;
        break;
      }

      // optional bool agree_precommit = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree_precommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_precommit_)));
          set_has_agree_precommit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_agree_commit;
        break;
      }

      // optional bool agree_commit = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_commit_)));
          set_has_agree_commit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pool_index;
        break;
      }

      // optional uint32 pool_index = 8 [default = 4294967295];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
          set_has_pool_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_error;
        break;
      }

      // optional int32 error = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tx_bft;
        break;
      }

      // optional .zjchain.zbft.protobuf.TxBft tx_bft = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx_bft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_bft()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_member_index;
        break;
      }

      // optional uint32 member_index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_index_)));
          set_has_member_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_backup_enc_data;
        break;
      }

      // optional bytes backup_enc_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_enc_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_backup_enc_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bls_sign_x;
        break;
      }

      // optional bytes bls_sign_x = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_sign_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_bls_sign_y;
        break;
      }

      // optional bytes bls_sign_y = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_sign_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_prepare_height;
        break;
      }

      // optional uint64 prepare_height = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prepare_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prepare_height_)));
          set_has_prepare_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_prepare_hash;
        break;
      }

      // optional bytes prepare_hash = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prepare_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prepare_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_block;
        break;
      }

      // optional .zjchain.block.protobuf.Block block = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_sync_block;
        break;
      }

      // optional bool sync_block = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_block_)));
          set_has_sync_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_ips;
        break;
      }

      // repeated uint32 ips = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_ips())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ips())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_ips;
        if (input->ExpectTag(170)) goto parse_oppose_prepare_gid;
        break;
      }

      // optional bytes oppose_prepare_gid = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oppose_prepare_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oppose_prepare_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_invaid_txs;
        break;
      }

      // repeated uint32 invaid_txs = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invaid_txs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_invaid_txs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_invaid_txs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_invaid_txs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZbftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes prepare_gid = 1;
  if (has_prepare_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->prepare_gid(), output);
  }

  // optional bytes precommit_gid = 2;
  if (has_precommit_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->precommit_gid(), output);
  }

  // optional bytes commit_gid = 3;
  if (has_commit_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->commit_gid(), output);
  }

  // optional int32 leader_idx = 4 [default = -1];
  if (has_leader_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leader_idx(), output);
  }

  // optional uint32 net_id = 5;
  if (has_net_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->net_id(), output);
  }

  // optional bool agree_precommit = 6 [default = false];
  if (has_agree_precommit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->agree_precommit(), output);
  }

  // optional bool agree_commit = 7 [default = false];
  if (has_agree_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->agree_commit(), output);
  }

  // optional uint32 pool_index = 8 [default = 4294967295];
  if (has_pool_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pool_index(), output);
  }

  // optional int32 error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->error(), output);
  }

  // optional .zjchain.zbft.protobuf.TxBft tx_bft = 10;
  if (has_tx_bft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tx_bft(), output);
  }

  // optional uint32 member_index = 11;
  if (has_member_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->member_index(), output);
  }

  // optional bytes backup_enc_data = 12;
  if (has_backup_enc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->backup_enc_data(), output);
  }

  // optional uint64 elect_height = 13;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->elect_height(), output);
  }

  // optional bytes bls_sign_x = 14;
  if (has_bls_sign_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->bls_sign_x(), output);
  }

  // optional bytes bls_sign_y = 15;
  if (has_bls_sign_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->bls_sign_y(), output);
  }

  // optional uint64 prepare_height = 16;
  if (has_prepare_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->prepare_height(), output);
  }

  // optional bytes prepare_hash = 17;
  if (has_prepare_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->prepare_hash(), output);
  }

  // optional .zjchain.block.protobuf.Block block = 18;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->block(), output);
  }

  // optional bool sync_block = 19;
  if (has_sync_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->sync_block(), output);
  }

  // repeated uint32 ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->ips(i), output);
  }

  // optional bytes oppose_prepare_gid = 21;
  if (has_oppose_prepare_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      21, this->oppose_prepare_gid(), output);
  }

  // repeated uint32 invaid_txs = 22;
  for (int i = 0; i < this->invaid_txs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->invaid_txs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZbftMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes prepare_gid = 1;
  if (has_prepare_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->prepare_gid(), target);
  }

  // optional bytes precommit_gid = 2;
  if (has_precommit_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->precommit_gid(), target);
  }

  // optional bytes commit_gid = 3;
  if (has_commit_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->commit_gid(), target);
  }

  // optional int32 leader_idx = 4 [default = -1];
  if (has_leader_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leader_idx(), target);
  }

  // optional uint32 net_id = 5;
  if (has_net_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->net_id(), target);
  }

  // optional bool agree_precommit = 6 [default = false];
  if (has_agree_precommit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->agree_precommit(), target);
  }

  // optional bool agree_commit = 7 [default = false];
  if (has_agree_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->agree_commit(), target);
  }

  // optional uint32 pool_index = 8 [default = 4294967295];
  if (has_pool_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pool_index(), target);
  }

  // optional int32 error = 9;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->error(), target);
  }

  // optional .zjchain.zbft.protobuf.TxBft tx_bft = 10;
  if (has_tx_bft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tx_bft(), target);
  }

  // optional uint32 member_index = 11;
  if (has_member_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->member_index(), target);
  }

  // optional bytes backup_enc_data = 12;
  if (has_backup_enc_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->backup_enc_data(), target);
  }

  // optional uint64 elect_height = 13;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->elect_height(), target);
  }

  // optional bytes bls_sign_x = 14;
  if (has_bls_sign_x()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->bls_sign_x(), target);
  }

  // optional bytes bls_sign_y = 15;
  if (has_bls_sign_y()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->bls_sign_y(), target);
  }

  // optional uint64 prepare_height = 16;
  if (has_prepare_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->prepare_height(), target);
  }

  // optional bytes prepare_hash = 17;
  if (has_prepare_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->prepare_hash(), target);
  }

  // optional .zjchain.block.protobuf.Block block = 18;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->block(), target);
  }

  // optional bool sync_block = 19;
  if (has_sync_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->sync_block(), target);
  }

  // repeated uint32 ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->ips(i), target);
  }

  // optional bytes oppose_prepare_gid = 21;
  if (has_oppose_prepare_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->oppose_prepare_gid(), target);
  }

  // repeated uint32 invaid_txs = 22;
  for (int i = 0; i < this->invaid_txs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(22, this->invaid_txs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZbftMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes prepare_gid = 1;
    if (has_prepare_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prepare_gid());
    }

    // optional bytes precommit_gid = 2;
    if (has_precommit_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->precommit_gid());
    }

    // optional bytes commit_gid = 3;
    if (has_commit_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->commit_gid());
    }

    // optional int32 leader_idx = 4 [default = -1];
    if (has_leader_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_idx());
    }

    // optional uint32 net_id = 5;
    if (has_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_id());
    }

    // optional bool agree_precommit = 6 [default = false];
    if (has_agree_precommit()) {
      total_size += 1 + 1;
    }

    // optional bool agree_commit = 7 [default = false];
    if (has_agree_commit()) {
      total_size += 1 + 1;
    }

    // optional uint32 pool_index = 8 [default = 4294967295];
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional .zjchain.zbft.protobuf.TxBft tx_bft = 10;
    if (has_tx_bft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tx_bft());
    }

    // optional uint32 member_index = 11;
    if (has_member_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_index());
    }

    // optional bytes backup_enc_data = 12;
    if (has_backup_enc_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->backup_enc_data());
    }

    // optional uint64 elect_height = 13;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

    // optional bytes bls_sign_x = 14;
    if (has_bls_sign_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_x());
    }

    // optional bytes bls_sign_y = 15;
    if (has_bls_sign_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_y());
    }

    // optional uint64 prepare_height = 16;
    if (has_prepare_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prepare_height());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes prepare_hash = 17;
    if (has_prepare_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prepare_hash());
    }

    // optional .zjchain.block.protobuf.Block block = 18;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

    // optional bool sync_block = 19;
    if (has_sync_block()) {
      total_size += 2 + 1;
    }

    // optional bytes oppose_prepare_gid = 21;
    if (has_oppose_prepare_gid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oppose_prepare_gid());
    }

  }
  // repeated uint32 ips = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->ips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ips(i));
    }
    total_size += 2 * this->ips_size() + data_size;
  }

  // repeated uint32 invaid_txs = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->invaid_txs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->invaid_txs(i));
    }
    total_size += 2 * this->invaid_txs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZbftMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZbftMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZbftMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZbftMessage::MergeFrom(const ZbftMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  invaid_txs_.MergeFrom(from.invaid_txs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prepare_gid()) {
      set_prepare_gid(from.prepare_gid());
    }
    if (from.has_precommit_gid()) {
      set_precommit_gid(from.precommit_gid());
    }
    if (from.has_commit_gid()) {
      set_commit_gid(from.commit_gid());
    }
    if (from.has_leader_idx()) {
      set_leader_idx(from.leader_idx());
    }
    if (from.has_net_id()) {
      set_net_id(from.net_id());
    }
    if (from.has_agree_precommit()) {
      set_agree_precommit(from.agree_precommit());
    }
    if (from.has_agree_commit()) {
      set_agree_commit(from.agree_commit());
    }
    if (from.has_pool_index()) {
      set_pool_index(from.pool_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_tx_bft()) {
      mutable_tx_bft()->::zjchain::zbft::protobuf::TxBft::MergeFrom(from.tx_bft());
    }
    if (from.has_member_index()) {
      set_member_index(from.member_index());
    }
    if (from.has_backup_enc_data()) {
      set_backup_enc_data(from.backup_enc_data());
    }
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
    if (from.has_bls_sign_x()) {
      set_bls_sign_x(from.bls_sign_x());
    }
    if (from.has_bls_sign_y()) {
      set_bls_sign_y(from.bls_sign_y());
    }
    if (from.has_prepare_height()) {
      set_prepare_height(from.prepare_height());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_prepare_hash()) {
      set_prepare_hash(from.prepare_hash());
    }
    if (from.has_block()) {
      mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
    }
    if (from.has_sync_block()) {
      set_sync_block(from.sync_block());
    }
    if (from.has_oppose_prepare_gid()) {
      set_oppose_prepare_gid(from.oppose_prepare_gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZbftMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZbftMessage::CopyFrom(const ZbftMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZbftMessage::IsInitialized() const {

  return true;
}

void ZbftMessage::Swap(ZbftMessage* other) {
  if (other != this) {
    std::swap(prepare_gid_, other->prepare_gid_);
    std::swap(precommit_gid_, other->precommit_gid_);
    std::swap(commit_gid_, other->commit_gid_);
    std::swap(leader_idx_, other->leader_idx_);
    std::swap(net_id_, other->net_id_);
    std::swap(agree_precommit_, other->agree_precommit_);
    std::swap(agree_commit_, other->agree_commit_);
    std::swap(pool_index_, other->pool_index_);
    std::swap(error_, other->error_);
    std::swap(tx_bft_, other->tx_bft_);
    std::swap(member_index_, other->member_index_);
    std::swap(backup_enc_data_, other->backup_enc_data_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(bls_sign_x_, other->bls_sign_x_);
    std::swap(bls_sign_y_, other->bls_sign_y_);
    std::swap(prepare_height_, other->prepare_height_);
    std::swap(prepare_hash_, other->prepare_hash_);
    std::swap(block_, other->block_);
    std::swap(sync_block_, other->sync_block_);
    ips_.Swap(&other->ips_);
    std::swap(oppose_prepare_gid_, other->oppose_prepare_gid_);
    invaid_txs_.Swap(&other->invaid_txs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZbftMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZbftMessage_descriptor_;
  metadata.reflection = ZbftMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace zbft
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
