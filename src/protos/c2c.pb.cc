// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/c2c.proto

#include "protos/c2c.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zjchain {
namespace c2c {
namespace protobuf {
PROTOBUF_CONSTEXPR OrderInfo::OrderInfo(
    ::_pbi::ConstantInitialized)
  : buyer_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_(uint64_t{0u})
  , status_(0)
{}
struct OrderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderInfoDefaultTypeInternal() {}
  union {
    OrderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderInfoDefaultTypeInternal _OrderInfo_default_instance_;
PROTOBUF_CONSTEXPR SellInfo::SellInfo(
    ::_pbi::ConstantInitialized)
  : reports_()
  , protocol_addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seller_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , receivable_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_info_(nullptr)
  , pledge_amount_(uint64_t{0u})
  , price_(uint64_t{0u})
  , manager_released_(false)
  , seller_released_(false)
  , status_(0)
{}
struct SellInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SellInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SellInfoDefaultTypeInternal() {}
  union {
    SellInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SellInfoDefaultTypeInternal _SellInfo_default_instance_;
PROTOBUF_CONSTEXPR NewOrder::NewOrder(
    ::_pbi::ConstantInitialized)
  : seller_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , buyer_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_(uint64_t{0u}){}
struct NewOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewOrderDefaultTypeInternal() {}
  union {
    NewOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewOrderDefaultTypeInternal _NewOrder_default_instance_;
PROTOBUF_CONSTEXPR NewSell::NewSell(
    ::_pbi::ConstantInitialized)
  : protocol_addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seller_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , receivable_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , amount_(uint64_t{0u})
  , price_(uint64_t{0u}){}
struct NewSellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewSellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewSellDefaultTypeInternal() {}
  union {
    NewSell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewSellDefaultTypeInternal _NewSell_default_instance_;
PROTOBUF_CONSTEXPR BuyerReport::BuyerReport(
    ::_pbi::ConstantInitialized)
  : seller_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reports_info_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BuyerReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuyerReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuyerReportDefaultTypeInternal() {}
  union {
    BuyerReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuyerReportDefaultTypeInternal _BuyerReport_default_instance_;
PROTOBUF_CONSTEXPR GetSell::GetSell(
    ::_pbi::ConstantInitialized)
  : seller_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetSellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSellDefaultTypeInternal() {}
  union {
    GetSell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSellDefaultTypeInternal _GetSell_default_instance_;
PROTOBUF_CONSTEXPR C2cMessage::C2cMessage(
    ::_pbi::ConstantInitialized)
  : sells_()
  , get_sell_()
  , sell_(nullptr)
  , order_(nullptr)
  , report_(nullptr){}
struct C2cMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2cMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2cMessageDefaultTypeInternal() {}
  union {
    C2cMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2cMessageDefaultTypeInternal _C2cMessage_default_instance_;
}  // namespace protobuf
}  // namespace c2c
}  // namespace zjchain
static ::_pb::Metadata file_level_metadata_protos_2fc2c_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fc2c_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fc2c_2eproto = nullptr;

const uint32_t TableStruct_protos_2fc2c_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, buyer_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, status_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, amount_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, protocol_addr_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, seller_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, pledge_amount_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, price_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, receivable_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, manager_released_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, seller_released_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, status_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, order_info_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, reports_),
  0,
  1,
  4,
  5,
  2,
  6,
  7,
  8,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, seller_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, amount_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, buyer_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, protocol_addr_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, seller_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, amount_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, price_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, receivable_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, seller_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, reports_info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::GetSell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::GetSell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::GetSell, seller_),
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, sell_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, order_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, report_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, sells_),
  PROTOBUF_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, get_sell_),
  0,
  1,
  2,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::zjchain::c2c::protobuf::OrderInfo)},
  { 12, 28, -1, sizeof(::zjchain::c2c::protobuf::SellInfo)},
  { 38, 47, -1, sizeof(::zjchain::c2c::protobuf::NewOrder)},
  { 50, 61, -1, sizeof(::zjchain::c2c::protobuf::NewSell)},
  { 66, 74, -1, sizeof(::zjchain::c2c::protobuf::BuyerReport)},
  { 76, 83, -1, sizeof(::zjchain::c2c::protobuf::GetSell)},
  { 84, 95, -1, sizeof(::zjchain::c2c::protobuf::C2cMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zjchain::c2c::protobuf::_OrderInfo_default_instance_._instance,
  &::zjchain::c2c::protobuf::_SellInfo_default_instance_._instance,
  &::zjchain::c2c::protobuf::_NewOrder_default_instance_._instance,
  &::zjchain::c2c::protobuf::_NewSell_default_instance_._instance,
  &::zjchain::c2c::protobuf::_BuyerReport_default_instance_._instance,
  &::zjchain::c2c::protobuf::_GetSell_default_instance_._instance,
  &::zjchain::c2c::protobuf::_C2cMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fc2c_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020protos/c2c.proto\022\024zjchain.c2c.protobuf"
  "\"X\n\tOrderInfo\022\r\n\005buyer\030\001 \001(\014\022,\n\006status\030\002"
  " \001(\0162\034.zjchain.c2c.protobuf.Status\022\016\n\006am"
  "ount\030\003 \001(\004\"\222\002\n\010SellInfo\022\025\n\rprotocol_addr"
  "\030\001 \001(\014\022\016\n\006seller\030\002 \001(\014\022\025\n\rpledge_amount\030"
  "\003 \001(\004\022\r\n\005price\030\004 \001(\004\022\022\n\nreceivable\030\005 \001(\014"
  "\022\030\n\020manager_released\030\006 \001(\010\022\027\n\017seller_rel"
  "eased\030\007 \001(\010\022,\n\006status\030\010 \001(\0162\034.zjchain.c2"
  "c.protobuf.Status\0223\n\norder_info\030\t \001(\0132\037."
  "zjchain.c2c.protobuf.OrderInfo\022\017\n\007report"
  "s\030\n \003(\014\"9\n\010NewOrder\022\016\n\006seller\030\001 \001(\014\022\016\n\006a"
  "mount\030\002 \001(\004\022\r\n\005buyer\030\003 \001(\014\"c\n\007NewSell\022\025\n"
  "\rprotocol_addr\030\001 \001(\014\022\016\n\006seller\030\002 \001(\014\022\016\n\006"
  "amount\030\003 \001(\004\022\r\n\005price\030\004 \001(\004\022\022\n\nreceivabl"
  "e\030\005 \001(\014\"3\n\013BuyerReport\022\016\n\006seller\030\001 \001(\014\022\024"
  "\n\014reports_info\030\002 \001(\014\"\031\n\007GetSell\022\016\n\006selle"
  "r\030\001 \001(\014\"\373\001\n\nC2cMessage\022+\n\004sell\030\001 \001(\0132\035.z"
  "jchain.c2c.protobuf.NewSell\022-\n\005order\030\002 \001"
  "(\0132\036.zjchain.c2c.protobuf.NewOrder\0221\n\006re"
  "port\030\003 \001(\0132!.zjchain.c2c.protobuf.BuyerR"
  "eport\022-\n\005sells\030\004 \003(\0132\036.zjchain.c2c.proto"
  "buf.SellInfo\022/\n\010get_sell\030\005 \003(\0132\035.zjchain"
  ".c2c.protobuf.GetSell*\215\001\n\006Status\022\014\n\010kDef"
  "ault\020\000\022\016\n\nkConfirmed\020\001\022\r\n\tkReported\020\002\022\020\n"
  "\014kSellWaiting\020\003\022\016\n\nkSellValid\020\004\022\020\n\014kSell"
  "Invalid\020\005\022\021\n\rkSellReleased\020\006\022\017\n\013kSellExi"
  "sts\020\007"
  ;
static ::_pbi::once_flag descriptor_table_protos_2fc2c_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fc2c_2eproto = {
    false, false, 1045, descriptor_table_protodef_protos_2fc2c_2eproto,
    "protos/c2c.proto",
    &descriptor_table_protos_2fc2c_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_protos_2fc2c_2eproto::offsets,
    file_level_metadata_protos_2fc2c_2eproto, file_level_enum_descriptors_protos_2fc2c_2eproto,
    file_level_service_descriptors_protos_2fc2c_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fc2c_2eproto_getter() {
  return &descriptor_table_protos_2fc2c_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fc2c_2eproto(&descriptor_table_protos_2fc2c_2eproto);
namespace zjchain {
namespace c2c {
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fc2c_2eproto);
  return file_level_enum_descriptors_protos_2fc2c_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OrderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderInfo>()._has_bits_);
  static void set_has_buyer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OrderInfo::OrderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.c2c.protobuf.OrderInfo)
}
OrderInfo::OrderInfo(const OrderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buyer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buyer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buyer()) {
    buyer_.Set(from._internal_buyer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.OrderInfo)
}

inline void OrderInfo::SharedCtor() {
buyer_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buyer_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(status_));
}

OrderInfo::~OrderInfo() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.OrderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buyer_.Destroy();
}

void OrderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.OrderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buyer_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes buyer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_buyer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.c2c.protobuf.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zjchain::c2c::protobuf::Status_IsValid(val))) {
            _internal_set_status(static_cast<::zjchain::c2c::protobuf::Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.OrderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes buyer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buyer(), target);
  }

  // optional .zjchain.c2c.protobuf.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.OrderInfo)
  return target;
}

size_t OrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.OrderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes buyer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_buyer());
    }

    // optional uint64 amount = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
    }

    // optional .zjchain.c2c.protobuf.Status status = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderInfo::GetClassData() const { return &_class_data_; }

void OrderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrderInfo *>(to)->MergeFrom(
      static_cast<const OrderInfo &>(from));
}


void OrderInfo::MergeFrom(const OrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.OrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_buyer(from._internal_buyer());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderInfo::CopyFrom(const OrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.OrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfo::IsInitialized() const {
  return true;
}

void OrderInfo::InternalSwap(OrderInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &buyer_, lhs_arena,
      &other->buyer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderInfo, status_)
      + sizeof(OrderInfo::status_)
      - PROTOBUF_FIELD_OFFSET(OrderInfo, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fc2c_2eproto_getter, &descriptor_table_protos_2fc2c_2eproto_once,
      file_level_metadata_protos_2fc2c_2eproto[0]);
}

// ===================================================================

class SellInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SellInfo>()._has_bits_);
  static void set_has_protocol_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pledge_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_receivable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_manager_released(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seller_released(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::zjchain::c2c::protobuf::OrderInfo& order_info(const SellInfo* msg);
  static void set_has_order_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zjchain::c2c::protobuf::OrderInfo&
SellInfo::_Internal::order_info(const SellInfo* msg) {
  return *msg->order_info_;
}
SellInfo::SellInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reports_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.c2c.protobuf.SellInfo)
}
SellInfo::SellInfo(const SellInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocol_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_protocol_addr()) {
    protocol_addr_.Set(from._internal_protocol_addr(), 
      GetArenaForAllocation());
  }
  seller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seller()) {
    seller_.Set(from._internal_seller(), 
      GetArenaForAllocation());
  }
  receivable_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receivable_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_receivable()) {
    receivable_.Set(from._internal_receivable(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_order_info()) {
    order_info_ = new ::zjchain::c2c::protobuf::OrderInfo(*from.order_info_);
  } else {
    order_info_ = nullptr;
  }
  ::memcpy(&pledge_amount_, &from.pledge_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&pledge_amount_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.SellInfo)
}

inline void SellInfo::SharedCtor() {
protocol_addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocol_addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seller_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seller_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receivable_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receivable_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&order_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&order_info_)) + sizeof(status_));
}

SellInfo::~SellInfo() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.SellInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SellInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_addr_.Destroy();
  seller_.Destroy();
  receivable_.Destroy();
  if (this != internal_default_instance()) delete order_info_;
}

void SellInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SellInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.SellInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      protocol_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      seller_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      receivable_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(order_info_ != nullptr);
      order_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&pledge_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seller_released_) -
        reinterpret_cast<char*>(&pledge_amount_)) + sizeof(seller_released_));
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SellInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes protocol_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocol_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes seller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_seller();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 pledge_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pledge_amount(&has_bits);
          pledge_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes receivable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_receivable();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool manager_released = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_manager_released(&has_bits);
          manager_released_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool seller_released = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_seller_released(&has_bits);
          seller_released_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.c2c.protobuf.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zjchain::c2c::protobuf::Status_IsValid(val))) {
            _internal_set_status(static_cast<::zjchain::c2c::protobuf::Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.c2c.protobuf.OrderInfo order_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes reports = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reports();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SellInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.SellInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes protocol_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_protocol_addr(), target);
  }

  // optional bytes seller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_seller(), target);
  }

  // optional uint64 pledge_amount = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pledge_amount(), target);
  }

  // optional uint64 price = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_price(), target);
  }

  // optional bytes receivable = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_receivable(), target);
  }

  // optional bool manager_released = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_manager_released(), target);
  }

  // optional bool seller_released = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_seller_released(), target);
  }

  // optional .zjchain.c2c.protobuf.Status status = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // optional .zjchain.c2c.protobuf.OrderInfo order_info = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::order_info(this),
        _Internal::order_info(this).GetCachedSize(), target, stream);
  }

  // repeated bytes reports = 10;
  for (int i = 0, n = this->_internal_reports_size(); i < n; i++) {
    const auto& s = this->_internal_reports(i);
    target = stream->WriteBytes(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.SellInfo)
  return target;
}

size_t SellInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.SellInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes reports = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reports_.size());
  for (int i = 0, n = reports_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      reports_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes protocol_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_protocol_addr());
    }

    // optional bytes seller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seller());
    }

    // optional bytes receivable = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_receivable());
    }

    // optional .zjchain.c2c.protobuf.OrderInfo order_info = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_info_);
    }

    // optional uint64 pledge_amount = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pledge_amount());
    }

    // optional uint64 price = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
    }

    // optional bool manager_released = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool seller_released = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional .zjchain.c2c.protobuf.Status status = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SellInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SellInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SellInfo::GetClassData() const { return &_class_data_; }

void SellInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SellInfo *>(to)->MergeFrom(
      static_cast<const SellInfo &>(from));
}


void SellInfo::MergeFrom(const SellInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.SellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_protocol_addr(from._internal_protocol_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_seller(from._internal_seller());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_receivable(from._internal_receivable());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_order_info()->::zjchain::c2c::protobuf::OrderInfo::MergeFrom(from._internal_order_info());
    }
    if (cached_has_bits & 0x00000010u) {
      pledge_amount_ = from.pledge_amount_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000040u) {
      manager_released_ = from.manager_released_;
    }
    if (cached_has_bits & 0x00000080u) {
      seller_released_ = from.seller_released_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SellInfo::CopyFrom(const SellInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.SellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellInfo::IsInitialized() const {
  return true;
}

void SellInfo::InternalSwap(SellInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reports_.InternalSwap(&other->reports_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &protocol_addr_, lhs_arena,
      &other->protocol_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seller_, lhs_arena,
      &other->seller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receivable_, lhs_arena,
      &other->receivable_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SellInfo, status_)
      + sizeof(SellInfo::status_)
      - PROTOBUF_FIELD_OFFSET(SellInfo, order_info_)>(
          reinterpret_cast<char*>(&order_info_),
          reinterpret_cast<char*>(&other->order_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SellInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fc2c_2eproto_getter, &descriptor_table_protos_2fc2c_2eproto_once,
      file_level_metadata_protos_2fc2c_2eproto[1]);
}

// ===================================================================

class NewOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<NewOrder>()._has_bits_);
  static void set_has_seller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buyer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NewOrder::NewOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.c2c.protobuf.NewOrder)
}
NewOrder::NewOrder(const NewOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seller()) {
    seller_.Set(from._internal_seller(), 
      GetArenaForAllocation());
  }
  buyer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buyer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buyer()) {
    buyer_.Set(from._internal_buyer(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.NewOrder)
}

inline void NewOrder::SharedCtor() {
seller_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seller_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
buyer_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buyer_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = uint64_t{0u};
}

NewOrder::~NewOrder() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.NewOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  seller_.Destroy();
  buyer_.Destroy();
}

void NewOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.NewOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seller_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      buyer_.ClearNonDefaultToEmpty();
    }
  }
  amount_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes seller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_seller();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes buyer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_buyer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.NewOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes seller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_seller(), target);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // optional bytes buyer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_buyer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.NewOrder)
  return target;
}

size_t NewOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.NewOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes seller = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seller());
    }

    // optional bytes buyer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_buyer());
    }

    // optional uint64 amount = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewOrder::GetClassData() const { return &_class_data_; }

void NewOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewOrder *>(to)->MergeFrom(
      static_cast<const NewOrder &>(from));
}


void NewOrder::MergeFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_seller(from._internal_seller());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_buyer(from._internal_buyer());
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewOrder::CopyFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrder::IsInitialized() const {
  return true;
}

void NewOrder::InternalSwap(NewOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seller_, lhs_arena,
      &other->seller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &buyer_, lhs_arena,
      &other->buyer_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fc2c_2eproto_getter, &descriptor_table_protos_2fc2c_2eproto_once,
      file_level_metadata_protos_2fc2c_2eproto[2]);
}

// ===================================================================

class NewSell::_Internal {
 public:
  using HasBits = decltype(std::declval<NewSell>()._has_bits_);
  static void set_has_protocol_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_receivable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NewSell::NewSell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.c2c.protobuf.NewSell)
}
NewSell::NewSell(const NewSell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocol_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_protocol_addr()) {
    protocol_addr_.Set(from._internal_protocol_addr(), 
      GetArenaForAllocation());
  }
  seller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seller()) {
    seller_.Set(from._internal_seller(), 
      GetArenaForAllocation());
  }
  receivable_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receivable_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_receivable()) {
    receivable_.Set(from._internal_receivable(), 
      GetArenaForAllocation());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.NewSell)
}

inline void NewSell::SharedCtor() {
protocol_addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocol_addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seller_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seller_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receivable_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receivable_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(price_));
}

NewSell::~NewSell() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.NewSell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewSell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_addr_.Destroy();
  seller_.Destroy();
  receivable_.Destroy();
}

void NewSell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewSell::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.NewSell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      seller_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      receivable_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewSell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes protocol_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocol_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes seller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_seller();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes receivable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_receivable();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewSell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.NewSell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes protocol_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_protocol_addr(), target);
  }

  // optional bytes seller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_seller(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // optional uint64 price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_price(), target);
  }

  // optional bytes receivable = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_receivable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.NewSell)
  return target;
}

size_t NewSell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.NewSell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes protocol_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_protocol_addr());
    }

    // optional bytes seller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seller());
    }

    // optional bytes receivable = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_receivable());
    }

    // optional uint64 amount = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
    }

    // optional uint64 price = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewSell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewSell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewSell::GetClassData() const { return &_class_data_; }

void NewSell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewSell *>(to)->MergeFrom(
      static_cast<const NewSell &>(from));
}


void NewSell::MergeFrom(const NewSell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.NewSell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_protocol_addr(from._internal_protocol_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_seller(from._internal_seller());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_receivable(from._internal_receivable());
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewSell::CopyFrom(const NewSell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.NewSell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSell::IsInitialized() const {
  return true;
}

void NewSell::InternalSwap(NewSell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &protocol_addr_, lhs_arena,
      &other->protocol_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seller_, lhs_arena,
      &other->seller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receivable_, lhs_arena,
      &other->receivable_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewSell, price_)
      + sizeof(NewSell::price_)
      - PROTOBUF_FIELD_OFFSET(NewSell, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewSell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fc2c_2eproto_getter, &descriptor_table_protos_2fc2c_2eproto_once,
      file_level_metadata_protos_2fc2c_2eproto[3]);
}

// ===================================================================

class BuyerReport::_Internal {
 public:
  using HasBits = decltype(std::declval<BuyerReport>()._has_bits_);
  static void set_has_seller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reports_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BuyerReport::BuyerReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.c2c.protobuf.BuyerReport)
}
BuyerReport::BuyerReport(const BuyerReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seller()) {
    seller_.Set(from._internal_seller(), 
      GetArenaForAllocation());
  }
  reports_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reports_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reports_info()) {
    reports_info_.Set(from._internal_reports_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.BuyerReport)
}

inline void BuyerReport::SharedCtor() {
seller_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seller_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reports_info_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reports_info_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuyerReport::~BuyerReport() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.BuyerReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuyerReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  seller_.Destroy();
  reports_info_.Destroy();
}

void BuyerReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuyerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.BuyerReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seller_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reports_info_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuyerReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes seller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_seller();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes reports_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reports_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuyerReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.BuyerReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes seller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_seller(), target);
  }

  // optional bytes reports_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_reports_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.BuyerReport)
  return target;
}

size_t BuyerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.BuyerReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes seller = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seller());
    }

    // optional bytes reports_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reports_info());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuyerReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuyerReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuyerReport::GetClassData() const { return &_class_data_; }

void BuyerReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BuyerReport *>(to)->MergeFrom(
      static_cast<const BuyerReport &>(from));
}


void BuyerReport::MergeFrom(const BuyerReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.BuyerReport)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_seller(from._internal_seller());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reports_info(from._internal_reports_info());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuyerReport::CopyFrom(const BuyerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.BuyerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyerReport::IsInitialized() const {
  return true;
}

void BuyerReport::InternalSwap(BuyerReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seller_, lhs_arena,
      &other->seller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reports_info_, lhs_arena,
      &other->reports_info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BuyerReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fc2c_2eproto_getter, &descriptor_table_protos_2fc2c_2eproto_once,
      file_level_metadata_protos_2fc2c_2eproto[4]);
}

// ===================================================================

class GetSell::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSell>()._has_bits_);
  static void set_has_seller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetSell::GetSell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.c2c.protobuf.GetSell)
}
GetSell::GetSell(const GetSell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seller()) {
    seller_.Set(from._internal_seller(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.GetSell)
}

inline void GetSell::SharedCtor() {
seller_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seller_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSell::~GetSell() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.GetSell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  seller_.Destroy();
}

void GetSell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSell::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.GetSell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    seller_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes seller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_seller();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.GetSell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes seller = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_seller(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.GetSell)
  return target;
}

size_t GetSell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.GetSell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes seller = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_seller());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSell::GetClassData() const { return &_class_data_; }

void GetSell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSell *>(to)->MergeFrom(
      static_cast<const GetSell &>(from));
}


void GetSell::MergeFrom(const GetSell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.GetSell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seller()) {
    _internal_set_seller(from._internal_seller());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSell::CopyFrom(const GetSell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.GetSell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSell::IsInitialized() const {
  return true;
}

void GetSell::InternalSwap(GetSell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seller_, lhs_arena,
      &other->seller_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fc2c_2eproto_getter, &descriptor_table_protos_2fc2c_2eproto_once,
      file_level_metadata_protos_2fc2c_2eproto[5]);
}

// ===================================================================

class C2cMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<C2cMessage>()._has_bits_);
  static const ::zjchain::c2c::protobuf::NewSell& sell(const C2cMessage* msg);
  static void set_has_sell(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zjchain::c2c::protobuf::NewOrder& order(const C2cMessage* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zjchain::c2c::protobuf::BuyerReport& report(const C2cMessage* msg);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zjchain::c2c::protobuf::NewSell&
C2cMessage::_Internal::sell(const C2cMessage* msg) {
  return *msg->sell_;
}
const ::zjchain::c2c::protobuf::NewOrder&
C2cMessage::_Internal::order(const C2cMessage* msg) {
  return *msg->order_;
}
const ::zjchain::c2c::protobuf::BuyerReport&
C2cMessage::_Internal::report(const C2cMessage* msg) {
  return *msg->report_;
}
C2cMessage::C2cMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sells_(arena),
  get_sell_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.c2c.protobuf.C2cMessage)
}
C2cMessage::C2cMessage(const C2cMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sells_(from.sells_),
      get_sell_(from.get_sell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sell()) {
    sell_ = new ::zjchain::c2c::protobuf::NewSell(*from.sell_);
  } else {
    sell_ = nullptr;
  }
  if (from._internal_has_order()) {
    order_ = new ::zjchain::c2c::protobuf::NewOrder(*from.order_);
  } else {
    order_ = nullptr;
  }
  if (from._internal_has_report()) {
    report_ = new ::zjchain::c2c::protobuf::BuyerReport(*from.report_);
  } else {
    report_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.C2cMessage)
}

inline void C2cMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sell_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_) -
    reinterpret_cast<char*>(&sell_)) + sizeof(report_));
}

C2cMessage::~C2cMessage() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.C2cMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2cMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sell_;
  if (this != internal_default_instance()) delete order_;
  if (this != internal_default_instance()) delete report_;
}

void C2cMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2cMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.C2cMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  get_sell_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sell_ != nullptr);
      sell_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(order_ != nullptr);
      order_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(report_ != nullptr);
      report_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2cMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.c2c.protobuf.NewSell sell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.c2c.protobuf.NewOrder order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.c2c.protobuf.BuyerReport report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.c2c.protobuf.SellInfo sells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zjchain.c2c.protobuf.GetSell get_sell = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_get_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2cMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.C2cMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.c2c.protobuf.NewSell sell = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sell(this),
        _Internal::sell(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.c2c.protobuf.NewOrder order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.c2c.protobuf.BuyerReport report = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::report(this),
        _Internal::report(this).GetCachedSize(), target, stream);
  }

  // repeated .zjchain.c2c.protobuf.SellInfo sells = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sells_size()); i < n; i++) {
    const auto& repfield = this->_internal_sells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .zjchain.c2c.protobuf.GetSell get_sell = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_get_sell_size()); i < n; i++) {
    const auto& repfield = this->_internal_get_sell(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.C2cMessage)
  return target;
}

size_t C2cMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.C2cMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.c2c.protobuf.SellInfo sells = 4;
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->sells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zjchain.c2c.protobuf.GetSell get_sell = 5;
  total_size += 1UL * this->_internal_get_sell_size();
  for (const auto& msg : this->get_sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .zjchain.c2c.protobuf.NewSell sell = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sell_);
    }

    // optional .zjchain.c2c.protobuf.NewOrder order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_);
    }

    // optional .zjchain.c2c.protobuf.BuyerReport report = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2cMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2cMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2cMessage::GetClassData() const { return &_class_data_; }

void C2cMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2cMessage *>(to)->MergeFrom(
      static_cast<const C2cMessage &>(from));
}


void C2cMessage::MergeFrom(const C2cMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.C2cMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  get_sell_.MergeFrom(from.get_sell_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sell()->::zjchain::c2c::protobuf::NewSell::MergeFrom(from._internal_sell());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_order()->::zjchain::c2c::protobuf::NewOrder::MergeFrom(from._internal_order());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_report()->::zjchain::c2c::protobuf::BuyerReport::MergeFrom(from._internal_report());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2cMessage::CopyFrom(const C2cMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.C2cMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2cMessage::IsInitialized() const {
  return true;
}

void C2cMessage::InternalSwap(C2cMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sells_.InternalSwap(&other->sells_);
  get_sell_.InternalSwap(&other->get_sell_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2cMessage, report_)
      + sizeof(C2cMessage::report_)
      - PROTOBUF_FIELD_OFFSET(C2cMessage, sell_)>(
          reinterpret_cast<char*>(&sell_),
          reinterpret_cast<char*>(&other->sell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2cMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fc2c_2eproto_getter, &descriptor_table_protos_2fc2c_2eproto_once,
      file_level_metadata_protos_2fc2c_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace c2c
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zjchain::c2c::protobuf::OrderInfo*
Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::OrderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::c2c::protobuf::OrderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::c2c::protobuf::SellInfo*
Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::SellInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::c2c::protobuf::SellInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::c2c::protobuf::NewOrder*
Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::NewOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::c2c::protobuf::NewOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::c2c::protobuf::NewSell*
Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::NewSell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::c2c::protobuf::NewSell >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::c2c::protobuf::BuyerReport*
Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::BuyerReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::c2c::protobuf::BuyerReport >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::c2c::protobuf::GetSell*
Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::GetSell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::c2c::protobuf::GetSell >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::c2c::protobuf::C2cMessage*
Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::C2cMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::c2c::protobuf::C2cMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
