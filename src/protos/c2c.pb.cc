// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/c2c.proto

#include "protos/c2c.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fc2c_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fc2c_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BuyerReport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fc2c_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NewOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fc2c_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NewSell;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fc2c_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SellInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fc2c_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OrderInfo;
}  // namespace protobuf_protos_2fc2c_2eproto
namespace zjchain {
namespace c2c {
namespace protobuf {
class SellInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SellInfo>
      _instance;
} _SellInfo_default_instance_;
class OrderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderInfo>
      _instance;
} _OrderInfo_default_instance_;
class NewOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewOrder>
      _instance;
} _NewOrder_default_instance_;
class NewSellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewSell>
      _instance;
} _NewSell_default_instance_;
class BuyerReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuyerReport>
      _instance;
} _BuyerReport_default_instance_;
class C2cMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<C2cMessage>
      _instance;
} _C2cMessage_default_instance_;
}  // namespace protobuf
}  // namespace c2c
}  // namespace zjchain
namespace protobuf_protos_2fc2c_2eproto {
static void InitDefaultsSellInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::c2c::protobuf::_SellInfo_default_instance_;
    new (ptr) ::zjchain::c2c::protobuf::SellInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::c2c::protobuf::SellInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SellInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSellInfo}, {}};

static void InitDefaultsOrderInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::c2c::protobuf::_OrderInfo_default_instance_;
    new (ptr) ::zjchain::c2c::protobuf::OrderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::c2c::protobuf::OrderInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderInfo}, {
      &protobuf_protos_2fc2c_2eproto::scc_info_SellInfo.base,}};

static void InitDefaultsNewOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::c2c::protobuf::_NewOrder_default_instance_;
    new (ptr) ::zjchain::c2c::protobuf::NewOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::c2c::protobuf::NewOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NewOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNewOrder}, {}};

static void InitDefaultsNewSell() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::c2c::protobuf::_NewSell_default_instance_;
    new (ptr) ::zjchain::c2c::protobuf::NewSell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::c2c::protobuf::NewSell::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NewSell =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNewSell}, {}};

static void InitDefaultsBuyerReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::c2c::protobuf::_BuyerReport_default_instance_;
    new (ptr) ::zjchain::c2c::protobuf::BuyerReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::c2c::protobuf::BuyerReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BuyerReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBuyerReport}, {}};

static void InitDefaultsC2cMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::c2c::protobuf::_C2cMessage_default_instance_;
    new (ptr) ::zjchain::c2c::protobuf::C2cMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::c2c::protobuf::C2cMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_C2cMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsC2cMessage}, {
      &protobuf_protos_2fc2c_2eproto::scc_info_NewSell.base,
      &protobuf_protos_2fc2c_2eproto::scc_info_NewOrder.base,
      &protobuf_protos_2fc2c_2eproto::scc_info_BuyerReport.base,
      &protobuf_protos_2fc2c_2eproto::scc_info_SellInfo.base,
      &protobuf_protos_2fc2c_2eproto::scc_info_OrderInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SellInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewSell.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BuyerReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_C2cMessage.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, sell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, protocol_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, seller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, pledge_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, receivable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, manager_released_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::SellInfo, seller_released_),
  3,
  0,
  1,
  4,
  5,
  2,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, sell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, buyer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::OrderInfo, reports_info_),
  2,
  0,
  3,
  5,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, sell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewOrder, buyer_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, protocol_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, seller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::NewSell, receivable_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, buyer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::BuyerReport, reports_info_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, sell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, sells_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::c2c::protobuf::C2cMessage, orders_),
  0,
  1,
  2,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::zjchain::c2c::protobuf::SellInfo)},
  { 21, 32, sizeof(::zjchain::c2c::protobuf::OrderInfo)},
  { 38, 46, sizeof(::zjchain::c2c::protobuf::NewOrder)},
  { 49, 59, sizeof(::zjchain::c2c::protobuf::NewSell)},
  { 64, 72, sizeof(::zjchain::c2c::protobuf::BuyerReport)},
  { 75, 85, sizeof(::zjchain::c2c::protobuf::C2cMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::c2c::protobuf::_SellInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::c2c::protobuf::_OrderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::c2c::protobuf::_NewOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::c2c::protobuf::_NewSell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::c2c::protobuf::_BuyerReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::c2c::protobuf::_C2cMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/c2c.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020protos/c2c.proto\022\024zjchain.c2c.protobuf"
      "\"\257\001\n\010SellInfo\022\017\n\007sell_id\030\001 \001(\004\022\025\n\rprotoc"
      "ol_addr\030\002 \001(\014\022\016\n\006seller\030\003 \001(\014\022\025\n\rpledge_"
      "amount\030\004 \001(\004\022\r\n\005price\030\005 \001(\004\022\022\n\nreceivabl"
      "e\030\006 \001(\014\022\030\n\020manager_released\030\007 \001(\010\022\027\n\017sel"
      "ler_released\030\010 \001(\010\"\263\001\n\tOrderInfo\022,\n\004sell"
      "\030\001 \001(\0132\036.zjchain.c2c.protobuf.SellInfo\022\r"
      "\n\005buyer\030\002 \001(\014\022\020\n\010order_id\030\003 \001(\004\0221\n\006statu"
      "s\030\004 \001(\0162!.zjchain.c2c.protobuf.OrderStat"
      "us\022\016\n\006amount\030\005 \001(\004\022\024\n\014reports_info\030\006 \001(\014"
      "\":\n\010NewOrder\022\017\n\007sell_id\030\001 \001(\004\022\016\n\006amount\030"
      "\002 \001(\004\022\r\n\005buyer\030\003 \001(\014\"c\n\007NewSell\022\025\n\rproto"
      "col_addr\030\001 \001(\014\022\016\n\006seller\030\002 \001(\014\022\016\n\006amount"
      "\030\003 \001(\004\022\r\n\005price\030\004 \001(\004\022\022\n\nreceivable\030\005 \001("
      "\014\"D\n\013BuyerReport\022\020\n\010order_id\030\001 \001(\004\022\r\n\005bu"
      "yer\030\002 \001(\014\022\024\n\014reports_info\030\003 \001(\014\"\373\001\n\nC2cM"
      "essage\022+\n\004sell\030\001 \001(\0132\035.zjchain.c2c.proto"
      "buf.NewSell\022-\n\005order\030\002 \001(\0132\036.zjchain.c2c"
      ".protobuf.NewOrder\0221\n\006report\030\003 \001(\0132!.zjc"
      "hain.c2c.protobuf.BuyerReport\022-\n\005sells\030\004"
      " \003(\0132\036.zjchain.c2c.protobuf.SellInfo\022/\n\006"
      "orders\030\005 \003(\0132\037.zjchain.c2c.protobuf.Orde"
      "rInfo*:\n\013OrderStatus\022\014\n\010kDefault\020\000\022\016\n\nkC"
      "onfirmed\020\001\022\r\n\tkReported\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 945);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/c2c.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fc2c_2eproto
namespace zjchain {
namespace c2c {
namespace protobuf {
const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor() {
  protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protos_2fc2c_2eproto::file_level_enum_descriptors[0];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SellInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SellInfo::kSellIdFieldNumber;
const int SellInfo::kProtocolAddrFieldNumber;
const int SellInfo::kSellerFieldNumber;
const int SellInfo::kPledgeAmountFieldNumber;
const int SellInfo::kPriceFieldNumber;
const int SellInfo::kReceivableFieldNumber;
const int SellInfo::kManagerReleasedFieldNumber;
const int SellInfo::kSellerReleasedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SellInfo::SellInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fc2c_2eproto::scc_info_SellInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.c2c.protobuf.SellInfo)
}
SellInfo::SellInfo(const SellInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol_addr()) {
    protocol_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_addr_);
  }
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seller()) {
    seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
  }
  receivable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_receivable()) {
    receivable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receivable_);
  }
  ::memcpy(&sell_id_, &from.sell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seller_released_) -
    reinterpret_cast<char*>(&sell_id_)) + sizeof(seller_released_));
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.SellInfo)
}

void SellInfo::SharedCtor() {
  protocol_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sell_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seller_released_) -
      reinterpret_cast<char*>(&sell_id_)) + sizeof(seller_released_));
}

SellInfo::~SellInfo() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.SellInfo)
  SharedDtor();
}

void SellInfo::SharedDtor() {
  protocol_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SellInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SellInfo::descriptor() {
  ::protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SellInfo& SellInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fc2c_2eproto::scc_info_SellInfo.base);
  return *internal_default_instance();
}


void SellInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.SellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      seller_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      receivable_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&sell_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seller_released_) -
        reinterpret_cast<char*>(&sell_id_)) + sizeof(seller_released_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.c2c.protobuf.SellInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sell_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes protocol_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protocol_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes seller = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pledge_amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pledge_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pledge_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes receivable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_receivable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manager_released = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_manager_released();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manager_released_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool seller_released = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_seller_released();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seller_released_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.c2c.protobuf.SellInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.c2c.protobuf.SellInfo)
  return false;
#undef DO_
}

void SellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.c2c.protobuf.SellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sell_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sell_id(), output);
  }

  // optional bytes protocol_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->protocol_addr(), output);
  }

  // optional bytes seller = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->seller(), output);
  }

  // optional uint64 pledge_amount = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pledge_amount(), output);
  }

  // optional uint64 price = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->price(), output);
  }

  // optional bytes receivable = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->receivable(), output);
  }

  // optional bool manager_released = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->manager_released(), output);
  }

  // optional bool seller_released = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->seller_released(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.c2c.protobuf.SellInfo)
}

::google::protobuf::uint8* SellInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.SellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sell_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sell_id(), target);
  }

  // optional bytes protocol_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->protocol_addr(), target);
  }

  // optional bytes seller = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->seller(), target);
  }

  // optional uint64 pledge_amount = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pledge_amount(), target);
  }

  // optional uint64 price = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->price(), target);
  }

  // optional bytes receivable = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->receivable(), target);
  }

  // optional bool manager_released = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->manager_released(), target);
  }

  // optional bool seller_released = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->seller_released(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.SellInfo)
  return target;
}

size_t SellInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.SellInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes protocol_addr = 2;
    if (has_protocol_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protocol_addr());
    }

    // optional bytes seller = 3;
    if (has_seller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seller());
    }

    // optional bytes receivable = 6;
    if (has_receivable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->receivable());
    }

    // optional uint64 sell_id = 1;
    if (has_sell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sell_id());
    }

    // optional uint64 pledge_amount = 4;
    if (has_pledge_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pledge_amount());
    }

    // optional uint64 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }

    // optional bool manager_released = 7;
    if (has_manager_released()) {
      total_size += 1 + 1;
    }

    // optional bool seller_released = 8;
    if (has_seller_released()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SellInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.c2c.protobuf.SellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SellInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SellInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.c2c.protobuf.SellInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.c2c.protobuf.SellInfo)
    MergeFrom(*source);
  }
}

void SellInfo::MergeFrom(const SellInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.SellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocol_addr();
      protocol_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_seller();
      seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_receivable();
      receivable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receivable_);
    }
    if (cached_has_bits & 0x00000008u) {
      sell_id_ = from.sell_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      pledge_amount_ = from.pledge_amount_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000040u) {
      manager_released_ = from.manager_released_;
    }
    if (cached_has_bits & 0x00000080u) {
      seller_released_ = from.seller_released_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SellInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.c2c.protobuf.SellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellInfo::CopyFrom(const SellInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.SellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellInfo::IsInitialized() const {
  return true;
}

void SellInfo::Swap(SellInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SellInfo::InternalSwap(SellInfo* other) {
  using std::swap;
  protocol_addr_.Swap(&other->protocol_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  seller_.Swap(&other->seller_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receivable_.Swap(&other->receivable_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sell_id_, other->sell_id_);
  swap(pledge_amount_, other->pledge_amount_);
  swap(price_, other->price_);
  swap(manager_released_, other->manager_released_);
  swap(seller_released_, other->seller_released_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SellInfo::GetMetadata() const {
  protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderInfo::InitAsDefaultInstance() {
  ::zjchain::c2c::protobuf::_OrderInfo_default_instance_._instance.get_mutable()->sell_ = const_cast< ::zjchain::c2c::protobuf::SellInfo*>(
      ::zjchain::c2c::protobuf::SellInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderInfo::kSellFieldNumber;
const int OrderInfo::kBuyerFieldNumber;
const int OrderInfo::kOrderIdFieldNumber;
const int OrderInfo::kStatusFieldNumber;
const int OrderInfo::kAmountFieldNumber;
const int OrderInfo::kReportsInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderInfo::OrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fc2c_2eproto::scc_info_OrderInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.c2c.protobuf.OrderInfo)
}
OrderInfo::OrderInfo(const OrderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buyer()) {
    buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
  }
  reports_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reports_info()) {
    reports_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reports_info_);
  }
  if (from.has_sell()) {
    sell_ = new ::zjchain::c2c::protobuf::SellInfo(*from.sell_);
  } else {
    sell_ = NULL;
  }
  ::memcpy(&order_id_, &from.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.OrderInfo)
}

void OrderInfo::SharedCtor() {
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reports_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sell_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&sell_)) + sizeof(status_));
}

OrderInfo::~OrderInfo() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.OrderInfo)
  SharedDtor();
}

void OrderInfo::SharedDtor() {
  buyer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reports_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sell_;
}

void OrderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderInfo::descriptor() {
  ::protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderInfo& OrderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fc2c_2eproto::scc_info_OrderInfo.base);
  return *internal_default_instance();
}


void OrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.OrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      buyer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      reports_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sell_ != NULL);
      sell_->Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&order_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&order_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.c2c.protobuf.OrderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.c2c.protobuf.SellInfo sell = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buyer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buyer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 order_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.c2c.protobuf.OrderStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zjchain::c2c::protobuf::OrderStatus_IsValid(value)) {
            set_status(static_cast< ::zjchain::c2c::protobuf::OrderStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes reports_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reports_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.c2c.protobuf.OrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.c2c.protobuf.OrderInfo)
  return false;
#undef DO_
}

void OrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.c2c.protobuf.OrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.c2c.protobuf.SellInfo sell = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sell(), output);
  }

  // optional bytes buyer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buyer(), output);
  }

  // optional uint64 order_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->order_id(), output);
  }

  // optional .zjchain.c2c.protobuf.OrderStatus status = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional uint64 amount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }

  // optional bytes reports_info = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->reports_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.c2c.protobuf.OrderInfo)
}

::google::protobuf::uint8* OrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.OrderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.c2c.protobuf.SellInfo sell = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sell(), deterministic, target);
  }

  // optional bytes buyer = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buyer(), target);
  }

  // optional uint64 order_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->order_id(), target);
  }

  // optional .zjchain.c2c.protobuf.OrderStatus status = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional uint64 amount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }

  // optional bytes reports_info = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->reports_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.OrderInfo)
  return target;
}

size_t OrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.OrderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes buyer = 2;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buyer());
    }

    // optional bytes reports_info = 6;
    if (has_reports_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reports_info());
    }

    // optional .zjchain.c2c.protobuf.SellInfo sell = 1;
    if (has_sell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sell_);
    }

    // optional uint64 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

    // optional uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional .zjchain.c2c.protobuf.OrderStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.c2c.protobuf.OrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.c2c.protobuf.OrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.c2c.protobuf.OrderInfo)
    MergeFrom(*source);
  }
}

void OrderInfo::MergeFrom(const OrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.OrderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buyer();
      buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reports_info();
      reports_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reports_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sell()->::zjchain::c2c::protobuf::SellInfo::MergeFrom(from.sell());
    }
    if (cached_has_bits & 0x00000008u) {
      order_id_ = from.order_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.c2c.protobuf.OrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderInfo::CopyFrom(const OrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.OrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfo::IsInitialized() const {
  return true;
}

void OrderInfo::Swap(OrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderInfo::InternalSwap(OrderInfo* other) {
  using std::swap;
  buyer_.Swap(&other->buyer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reports_info_.Swap(&other->reports_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sell_, other->sell_);
  swap(order_id_, other->order_id_);
  swap(amount_, other->amount_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderInfo::GetMetadata() const {
  protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewOrder::kSellIdFieldNumber;
const int NewOrder::kAmountFieldNumber;
const int NewOrder::kBuyerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewOrder::NewOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fc2c_2eproto::scc_info_NewOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.c2c.protobuf.NewOrder)
}
NewOrder::NewOrder(const NewOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buyer()) {
    buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
  }
  ::memcpy(&sell_id_, &from.sell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&sell_id_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.NewOrder)
}

void NewOrder::SharedCtor() {
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sell_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&sell_id_)) + sizeof(amount_));
}

NewOrder::~NewOrder() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.NewOrder)
  SharedDtor();
}

void NewOrder::SharedDtor() {
  buyer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewOrder::descriptor() {
  ::protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewOrder& NewOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fc2c_2eproto::scc_info_NewOrder.base);
  return *internal_default_instance();
}


void NewOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.NewOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buyer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&sell_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&sell_id_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.c2c.protobuf.NewOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sell_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buyer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buyer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.c2c.protobuf.NewOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.c2c.protobuf.NewOrder)
  return false;
#undef DO_
}

void NewOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.c2c.protobuf.NewOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sell_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sell_id(), output);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional bytes buyer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->buyer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.c2c.protobuf.NewOrder)
}

::google::protobuf::uint8* NewOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.NewOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sell_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sell_id(), target);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // optional bytes buyer = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->buyer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.NewOrder)
  return target;
}

size_t NewOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.NewOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes buyer = 3;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buyer());
    }

    // optional uint64 sell_id = 1;
    if (has_sell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sell_id());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.c2c.protobuf.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.c2c.protobuf.NewOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.c2c.protobuf.NewOrder)
    MergeFrom(*source);
  }
}

void NewOrder::MergeFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buyer();
      buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
    }
    if (cached_has_bits & 0x00000002u) {
      sell_id_ = from.sell_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.c2c.protobuf.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrder::CopyFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrder::IsInitialized() const {
  return true;
}

void NewOrder::Swap(NewOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewOrder::InternalSwap(NewOrder* other) {
  using std::swap;
  buyer_.Swap(&other->buyer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sell_id_, other->sell_id_);
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewOrder::GetMetadata() const {
  protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewSell::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewSell::kProtocolAddrFieldNumber;
const int NewSell::kSellerFieldNumber;
const int NewSell::kAmountFieldNumber;
const int NewSell::kPriceFieldNumber;
const int NewSell::kReceivableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewSell::NewSell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fc2c_2eproto::scc_info_NewSell.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.c2c.protobuf.NewSell)
}
NewSell::NewSell(const NewSell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol_addr()) {
    protocol_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_addr_);
  }
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seller()) {
    seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
  }
  receivable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_receivable()) {
    receivable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receivable_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.NewSell)
}

void NewSell::SharedCtor() {
  protocol_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(price_));
}

NewSell::~NewSell() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.NewSell)
  SharedDtor();
}

void NewSell::SharedDtor() {
  protocol_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewSell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewSell::descriptor() {
  ::protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewSell& NewSell::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fc2c_2eproto::scc_info_NewSell.base);
  return *internal_default_instance();
}


void NewSell::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.NewSell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      seller_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      receivable_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewSell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.c2c.protobuf.NewSell)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes protocol_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protocol_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes seller = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes receivable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_receivable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.c2c.protobuf.NewSell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.c2c.protobuf.NewSell)
  return false;
#undef DO_
}

void NewSell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.c2c.protobuf.NewSell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes protocol_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->protocol_addr(), output);
  }

  // optional bytes seller = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->seller(), output);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional uint64 price = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->price(), output);
  }

  // optional bytes receivable = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->receivable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.c2c.protobuf.NewSell)
}

::google::protobuf::uint8* NewSell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.NewSell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes protocol_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->protocol_addr(), target);
  }

  // optional bytes seller = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->seller(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // optional uint64 price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->price(), target);
  }

  // optional bytes receivable = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->receivable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.NewSell)
  return target;
}

size_t NewSell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.NewSell)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes protocol_addr = 1;
    if (has_protocol_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protocol_addr());
    }

    // optional bytes seller = 2;
    if (has_seller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seller());
    }

    // optional bytes receivable = 5;
    if (has_receivable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->receivable());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewSell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.c2c.protobuf.NewSell)
  GOOGLE_DCHECK_NE(&from, this);
  const NewSell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewSell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.c2c.protobuf.NewSell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.c2c.protobuf.NewSell)
    MergeFrom(*source);
  }
}

void NewSell::MergeFrom(const NewSell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.NewSell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocol_addr();
      protocol_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_seller();
      seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_receivable();
      receivable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receivable_);
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewSell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.c2c.protobuf.NewSell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSell::CopyFrom(const NewSell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.NewSell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSell::IsInitialized() const {
  return true;
}

void NewSell::Swap(NewSell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewSell::InternalSwap(NewSell* other) {
  using std::swap;
  protocol_addr_.Swap(&other->protocol_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  seller_.Swap(&other->seller_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receivable_.Swap(&other->receivable_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(price_, other->price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewSell::GetMetadata() const {
  protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuyerReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuyerReport::kOrderIdFieldNumber;
const int BuyerReport::kBuyerFieldNumber;
const int BuyerReport::kReportsInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuyerReport::BuyerReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fc2c_2eproto::scc_info_BuyerReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.c2c.protobuf.BuyerReport)
}
BuyerReport::BuyerReport(const BuyerReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buyer()) {
    buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
  }
  reports_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reports_info()) {
    reports_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reports_info_);
  }
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.BuyerReport)
}

void BuyerReport::SharedCtor() {
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reports_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_ = GOOGLE_ULONGLONG(0);
}

BuyerReport::~BuyerReport() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.BuyerReport)
  SharedDtor();
}

void BuyerReport::SharedDtor() {
  buyer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reports_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BuyerReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BuyerReport::descriptor() {
  ::protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuyerReport& BuyerReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fc2c_2eproto::scc_info_BuyerReport.base);
  return *internal_default_instance();
}


void BuyerReport::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.BuyerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      buyer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      reports_info_.ClearNonDefaultToEmptyNoArena();
    }
  }
  order_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BuyerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.c2c.protobuf.BuyerReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buyer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buyer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes reports_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reports_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.c2c.protobuf.BuyerReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.c2c.protobuf.BuyerReport)
  return false;
#undef DO_
}

void BuyerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.c2c.protobuf.BuyerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 order_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_id(), output);
  }

  // optional bytes buyer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buyer(), output);
  }

  // optional bytes reports_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->reports_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.c2c.protobuf.BuyerReport)
}

::google::protobuf::uint8* BuyerReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.BuyerReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 order_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_id(), target);
  }

  // optional bytes buyer = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buyer(), target);
  }

  // optional bytes reports_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reports_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.BuyerReport)
  return target;
}

size_t BuyerReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.BuyerReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes buyer = 2;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buyer());
    }

    // optional bytes reports_info = 3;
    if (has_reports_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reports_info());
    }

    // optional uint64 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuyerReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.c2c.protobuf.BuyerReport)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyerReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuyerReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.c2c.protobuf.BuyerReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.c2c.protobuf.BuyerReport)
    MergeFrom(*source);
  }
}

void BuyerReport::MergeFrom(const BuyerReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.BuyerReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buyer();
      buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reports_info();
      reports_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reports_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      order_id_ = from.order_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuyerReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.c2c.protobuf.BuyerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyerReport::CopyFrom(const BuyerReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.BuyerReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyerReport::IsInitialized() const {
  return true;
}

void BuyerReport::Swap(BuyerReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuyerReport::InternalSwap(BuyerReport* other) {
  using std::swap;
  buyer_.Swap(&other->buyer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reports_info_.Swap(&other->reports_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_id_, other->order_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BuyerReport::GetMetadata() const {
  protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void C2cMessage::InitAsDefaultInstance() {
  ::zjchain::c2c::protobuf::_C2cMessage_default_instance_._instance.get_mutable()->sell_ = const_cast< ::zjchain::c2c::protobuf::NewSell*>(
      ::zjchain::c2c::protobuf::NewSell::internal_default_instance());
  ::zjchain::c2c::protobuf::_C2cMessage_default_instance_._instance.get_mutable()->order_ = const_cast< ::zjchain::c2c::protobuf::NewOrder*>(
      ::zjchain::c2c::protobuf::NewOrder::internal_default_instance());
  ::zjchain::c2c::protobuf::_C2cMessage_default_instance_._instance.get_mutable()->report_ = const_cast< ::zjchain::c2c::protobuf::BuyerReport*>(
      ::zjchain::c2c::protobuf::BuyerReport::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2cMessage::kSellFieldNumber;
const int C2cMessage::kOrderFieldNumber;
const int C2cMessage::kReportFieldNumber;
const int C2cMessage::kSellsFieldNumber;
const int C2cMessage::kOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2cMessage::C2cMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fc2c_2eproto::scc_info_C2cMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.c2c.protobuf.C2cMessage)
}
C2cMessage::C2cMessage(const C2cMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sells_(from.sells_),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sell()) {
    sell_ = new ::zjchain::c2c::protobuf::NewSell(*from.sell_);
  } else {
    sell_ = NULL;
  }
  if (from.has_order()) {
    order_ = new ::zjchain::c2c::protobuf::NewOrder(*from.order_);
  } else {
    order_ = NULL;
  }
  if (from.has_report()) {
    report_ = new ::zjchain::c2c::protobuf::BuyerReport(*from.report_);
  } else {
    report_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.c2c.protobuf.C2cMessage)
}

void C2cMessage::SharedCtor() {
  ::memset(&sell_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_) -
      reinterpret_cast<char*>(&sell_)) + sizeof(report_));
}

C2cMessage::~C2cMessage() {
  // @@protoc_insertion_point(destructor:zjchain.c2c.protobuf.C2cMessage)
  SharedDtor();
}

void C2cMessage::SharedDtor() {
  if (this != internal_default_instance()) delete sell_;
  if (this != internal_default_instance()) delete order_;
  if (this != internal_default_instance()) delete report_;
}

void C2cMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* C2cMessage::descriptor() {
  ::protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2cMessage& C2cMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fc2c_2eproto::scc_info_C2cMessage.base);
  return *internal_default_instance();
}


void C2cMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.c2c.protobuf.C2cMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  orders_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sell_ != NULL);
      sell_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(order_ != NULL);
      order_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(report_ != NULL);
      report_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool C2cMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.c2c.protobuf.C2cMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.c2c.protobuf.NewSell sell = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.c2c.protobuf.NewOrder order = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.c2c.protobuf.BuyerReport report = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zjchain.c2c.protobuf.SellInfo sells = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zjchain.c2c.protobuf.OrderInfo orders = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.c2c.protobuf.C2cMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.c2c.protobuf.C2cMessage)
  return false;
#undef DO_
}

void C2cMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.c2c.protobuf.C2cMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.c2c.protobuf.NewSell sell = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sell(), output);
  }

  // optional .zjchain.c2c.protobuf.NewOrder order = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_order(), output);
  }

  // optional .zjchain.c2c.protobuf.BuyerReport report = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_report(), output);
  }

  // repeated .zjchain.c2c.protobuf.SellInfo sells = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sells(static_cast<int>(i)),
      output);
  }

  // repeated .zjchain.c2c.protobuf.OrderInfo orders = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->orders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.c2c.protobuf.C2cMessage)
}

::google::protobuf::uint8* C2cMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.c2c.protobuf.C2cMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.c2c.protobuf.NewSell sell = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sell(), deterministic, target);
  }

  // optional .zjchain.c2c.protobuf.NewOrder order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_order(), deterministic, target);
  }

  // optional .zjchain.c2c.protobuf.BuyerReport report = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_report(), deterministic, target);
  }

  // repeated .zjchain.c2c.protobuf.SellInfo sells = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sells(static_cast<int>(i)), deterministic, target);
  }

  // repeated .zjchain.c2c.protobuf.OrderInfo orders = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->orders(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.c2c.protobuf.C2cMessage)
  return target;
}

size_t C2cMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.c2c.protobuf.C2cMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .zjchain.c2c.protobuf.SellInfo sells = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sells(static_cast<int>(i)));
    }
  }

  // repeated .zjchain.c2c.protobuf.OrderInfo orders = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->orders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orders(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .zjchain.c2c.protobuf.NewSell sell = 1;
    if (has_sell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sell_);
    }

    // optional .zjchain.c2c.protobuf.NewOrder order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *order_);
    }

    // optional .zjchain.c2c.protobuf.BuyerReport report = 3;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *report_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2cMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.c2c.protobuf.C2cMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const C2cMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2cMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.c2c.protobuf.C2cMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.c2c.protobuf.C2cMessage)
    MergeFrom(*source);
  }
}

void C2cMessage::MergeFrom(const C2cMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.c2c.protobuf.C2cMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  orders_.MergeFrom(from.orders_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sell()->::zjchain::c2c::protobuf::NewSell::MergeFrom(from.sell());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_order()->::zjchain::c2c::protobuf::NewOrder::MergeFrom(from.order());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_report()->::zjchain::c2c::protobuf::BuyerReport::MergeFrom(from.report());
    }
  }
}

void C2cMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.c2c.protobuf.C2cMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2cMessage::CopyFrom(const C2cMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.c2c.protobuf.C2cMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2cMessage::IsInitialized() const {
  return true;
}

void C2cMessage::Swap(C2cMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2cMessage::InternalSwap(C2cMessage* other) {
  using std::swap;
  CastToBase(&sells_)->InternalSwap(CastToBase(&other->sells_));
  CastToBase(&orders_)->InternalSwap(CastToBase(&other->orders_));
  swap(sell_, other->sell_);
  swap(order_, other->order_);
  swap(report_, other->report_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata C2cMessage::GetMetadata() const {
  protobuf_protos_2fc2c_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fc2c_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace c2c
}  // namespace zjchain
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::c2c::protobuf::SellInfo* Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::SellInfo >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::c2c::protobuf::SellInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::c2c::protobuf::OrderInfo* Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::OrderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::c2c::protobuf::OrderInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::c2c::protobuf::NewOrder* Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::NewOrder >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::c2c::protobuf::NewOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::c2c::protobuf::NewSell* Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::NewSell >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::c2c::protobuf::NewSell >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::c2c::protobuf::BuyerReport* Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::BuyerReport >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::c2c::protobuf::BuyerReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::c2c::protobuf::C2cMessage* Arena::CreateMaybeMessage< ::zjchain::c2c::protobuf::C2cMessage >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::c2c::protobuf::C2cMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
