// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/pools.proto

#ifndef PROTOBUF_protos_2fpools_2eproto__INCLUDED
#define PROTOBUF_protos_2fpools_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protos/bls.pb.h"
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace pools {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protos_2fpools_2eproto();
void protobuf_AssignDesc_protos_2fpools_2eproto();
void protobuf_ShutdownFile_protos_2fpools_2eproto();

class ToTxHeights;
class ToTxMessageItem;
class ShardToTxItem;
class StatisticTxItem;
class ToTxMessage;
class PoolLatestInfo;
class AreaInfo;
class PoolStatisticItem;
class JoinElectNode;
class CrossShardStatisticItem;
class CrossShardStatistic;
class ElectStatistic;
class SyncPoolsMaxHeight;
class InvalidBftMessage;
class TxMessage;

enum StepType {
  kNormalFrom = 0,
  kNormalTo = 1,
  kConsensusRootElectShard = 2,
  kConsensusRootTimeBlock = 3,
  kConsensusCreateGenesisAcount = 4,
  kConsensusLocalTos = 5,
  kContractCreate = 6,
  kContractGasPrepayment = 7,
  kContractExcute = 8,
  kRootCreateAddress = 9,
  kRootCreateAddressCrossSharding = 11,
  kStatistic = 12,
  kJoinElect = 13,
  kCreateLibrary = 14,
  kCross = 15,
  kRootCross = 16
};
bool StepType_IsValid(int value);
const StepType StepType_MIN = kNormalFrom;
const StepType StepType_MAX = kRootCross;
const int StepType_ARRAYSIZE = StepType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StepType_descriptor();
inline const ::std::string& StepType_Name(StepType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StepType_descriptor(), value);
}
inline bool StepType_Parse(
    const ::std::string& name, StepType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StepType>(
    StepType_descriptor(), name, value);
}
// ===================================================================

class ToTxHeights : public ::google::protobuf::Message {
 public:
  ToTxHeights();
  virtual ~ToTxHeights();

  ToTxHeights(const ToTxHeights& from);

  inline ToTxHeights& operator=(const ToTxHeights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTxHeights& default_instance();

  void Swap(ToTxHeights* other);

  // implements Message ----------------------------------------------

  ToTxHeights* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToTxHeights& from);
  void MergeFrom(const ToTxHeights& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sharding_id = 1;
  inline bool has_sharding_id() const;
  inline void clear_sharding_id();
  static const int kShardingIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sharding_id() const;
  inline void set_sharding_id(::google::protobuf::uint32 value);

  // repeated uint64 heights = 2;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 2;
  inline ::google::protobuf::uint64 heights(int index) const;
  inline void set_heights(int index, ::google::protobuf::uint64 value);
  inline void add_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // optional uint64 block_height = 3;
  inline bool has_block_height() const;
  inline void clear_block_height();
  static const int kBlockHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 block_height() const;
  inline void set_block_height(::google::protobuf::uint64 value);

  // optional bytes tos_hash = 4;
  inline bool has_tos_hash() const;
  inline void clear_tos_hash();
  static const int kTosHashFieldNumber = 4;
  inline const ::std::string& tos_hash() const;
  inline void set_tos_hash(const ::std::string& value);
  inline void set_tos_hash(const char* value);
  inline void set_tos_hash(const void* value, size_t size);
  inline ::std::string* mutable_tos_hash();
  inline ::std::string* release_tos_hash();
  inline void set_allocated_tos_hash(::std::string* tos_hash);

  // optional bytes leader_id = 5;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 5;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const void* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  inline void set_allocated_leader_id(::std::string* leader_id);

  // optional uint64 elelct_height = 6;
  inline bool has_elelct_height() const;
  inline void clear_elelct_height();
  static const int kElelctHeightFieldNumber = 6;
  inline ::google::protobuf::uint64 elelct_height() const;
  inline void set_elelct_height(::google::protobuf::uint64 value);

  // optional uint32 tx_count = 7;
  inline bool has_tx_count() const;
  inline void clear_tx_count();
  static const int kTxCountFieldNumber = 7;
  inline ::google::protobuf::uint32 tx_count() const;
  inline void set_tx_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxHeights)
 private:
  inline void set_has_sharding_id();
  inline void clear_has_sharding_id();
  inline void set_has_block_height();
  inline void clear_has_block_height();
  inline void set_has_tos_hash();
  inline void clear_has_tos_hash();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_elelct_height();
  inline void clear_has_elelct_height();
  inline void set_has_tx_count();
  inline void clear_has_tx_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;
  ::google::protobuf::uint64 block_height_;
  ::std::string* tos_hash_;
  ::google::protobuf::uint32 sharding_id_;
  ::google::protobuf::uint32 tx_count_;
  ::std::string* leader_id_;
  ::google::protobuf::uint64 elelct_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static ToTxHeights* default_instance_;
};
// -------------------------------------------------------------------

class ToTxMessageItem : public ::google::protobuf::Message {
 public:
  ToTxMessageItem();
  virtual ~ToTxMessageItem();

  ToTxMessageItem(const ToTxMessageItem& from);

  inline ToTxMessageItem& operator=(const ToTxMessageItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTxMessageItem& default_instance();

  void Swap(ToTxMessageItem* other);

  // implements Message ----------------------------------------------

  ToTxMessageItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToTxMessageItem& from);
  void MergeFrom(const ToTxMessageItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes des = 1;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 1;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const void* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional uint64 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional uint32 sharding_id = 3;
  inline bool has_sharding_id() const;
  inline void clear_sharding_id();
  static const int kShardingIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sharding_id() const;
  inline void set_sharding_id(::google::protobuf::uint32 value);

  // optional uint32 pool_index = 4;
  inline bool has_pool_index() const;
  inline void clear_pool_index();
  static const int kPoolIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 pool_index() const;
  inline void set_pool_index(::google::protobuf::uint32 value);

  // optional int32 step = 5;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 5;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // optional bytes library_bytes = 6;
  inline bool has_library_bytes() const;
  inline void clear_library_bytes();
  static const int kLibraryBytesFieldNumber = 6;
  inline const ::std::string& library_bytes() const;
  inline void set_library_bytes(const ::std::string& value);
  inline void set_library_bytes(const char* value);
  inline void set_library_bytes(const void* value, size_t size);
  inline ::std::string* mutable_library_bytes();
  inline ::std::string* release_library_bytes();
  inline void set_allocated_library_bytes(::std::string* library_bytes);

  // repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
  inline int join_infos_size() const;
  inline void clear_join_infos();
  static const int kJoinInfosFieldNumber = 7;
  inline const ::zjchain::bls::protobuf::JoinElectInfo& join_infos(int index) const;
  inline ::zjchain::bls::protobuf::JoinElectInfo* mutable_join_infos(int index);
  inline ::zjchain::bls::protobuf::JoinElectInfo* add_join_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >&
      join_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >*
      mutable_join_infos();

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxMessageItem)
 private:
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_sharding_id();
  inline void clear_has_sharding_id();
  inline void set_has_pool_index();
  inline void clear_has_pool_index();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_library_bytes();
  inline void clear_has_library_bytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* des_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 sharding_id_;
  ::google::protobuf::uint32 pool_index_;
  ::std::string* library_bytes_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo > join_infos_;
  ::google::protobuf::int32 step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static ToTxMessageItem* default_instance_;
};
// -------------------------------------------------------------------

class ShardToTxItem : public ::google::protobuf::Message {
 public:
  ShardToTxItem();
  virtual ~ShardToTxItem();

  ShardToTxItem(const ShardToTxItem& from);

  inline ShardToTxItem& operator=(const ShardToTxItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShardToTxItem& default_instance();

  void Swap(ShardToTxItem* other);

  // implements Message ----------------------------------------------

  ShardToTxItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShardToTxItem& from);
  void MergeFrom(const ShardToTxItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sharding_id = 1;
  inline bool has_sharding_id() const;
  inline void clear_sharding_id();
  static const int kShardingIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sharding_id() const;
  inline void set_sharding_id(::google::protobuf::uint32 value);

  // repeated uint64 heights = 2;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 2;
  inline ::google::protobuf::uint64 heights(int index) const;
  inline void set_heights(int index, ::google::protobuf::uint64 value);
  inline void add_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // optional uint64 block_height = 3;
  inline bool has_block_height() const;
  inline void clear_block_height();
  static const int kBlockHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 block_height() const;
  inline void set_block_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ShardToTxItem)
 private:
  inline void set_has_sharding_id();
  inline void clear_has_sharding_id();
  inline void set_has_block_height();
  inline void clear_has_block_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;
  ::google::protobuf::uint64 block_height_;
  ::google::protobuf::uint32 sharding_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static ShardToTxItem* default_instance_;
};
// -------------------------------------------------------------------

class StatisticTxItem : public ::google::protobuf::Message {
 public:
  StatisticTxItem();
  virtual ~StatisticTxItem();

  StatisticTxItem(const StatisticTxItem& from);

  inline StatisticTxItem& operator=(const StatisticTxItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticTxItem& default_instance();

  void Swap(StatisticTxItem* other);

  // implements Message ----------------------------------------------

  StatisticTxItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatisticTxItem& from);
  void MergeFrom(const StatisticTxItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sharding_id = 1;
  inline bool has_sharding_id() const;
  inline void clear_sharding_id();
  static const int kShardingIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sharding_id() const;
  inline void set_sharding_id(::google::protobuf::uint32 value);

  // repeated uint64 heights = 2;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 2;
  inline ::google::protobuf::uint64 heights(int index) const;
  inline void set_heights(int index, ::google::protobuf::uint64 value);
  inline void add_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // optional uint64 block_height = 3;
  inline bool has_block_height() const;
  inline void clear_block_height();
  static const int kBlockHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 block_height() const;
  inline void set_block_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.StatisticTxItem)
 private:
  inline void set_has_sharding_id();
  inline void clear_has_sharding_id();
  inline void set_has_block_height();
  inline void clear_has_block_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;
  ::google::protobuf::uint64 block_height_;
  ::google::protobuf::uint32 sharding_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static StatisticTxItem* default_instance_;
};
// -------------------------------------------------------------------

class ToTxMessage : public ::google::protobuf::Message {
 public:
  ToTxMessage();
  virtual ~ToTxMessage();

  ToTxMessage(const ToTxMessage& from);

  inline ToTxMessage& operator=(const ToTxMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTxMessage& default_instance();

  void Swap(ToTxMessage* other);

  // implements Message ----------------------------------------------

  ToTxMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToTxMessage& from);
  void MergeFrom(const ToTxMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes heights_hash = 1;
  inline bool has_heights_hash() const;
  inline void clear_heights_hash();
  static const int kHeightsHashFieldNumber = 1;
  inline const ::std::string& heights_hash() const;
  inline void set_heights_hash(const ::std::string& value);
  inline void set_heights_hash(const char* value);
  inline void set_heights_hash(const void* value, size_t size);
  inline ::std::string* mutable_heights_hash();
  inline ::std::string* release_heights_hash();
  inline void set_allocated_heights_hash(::std::string* heights_hash);

  // repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
  inline int tos_size() const;
  inline void clear_tos();
  static const int kTosFieldNumber = 2;
  inline const ::zjchain::pools::protobuf::ToTxMessageItem& tos(int index) const;
  inline ::zjchain::pools::protobuf::ToTxMessageItem* mutable_tos(int index);
  inline ::zjchain::pools::protobuf::ToTxMessageItem* add_tos();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >&
      tos() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >*
      mutable_tos();

  // optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
  inline bool has_to_heights() const;
  inline void clear_to_heights();
  static const int kToHeightsFieldNumber = 3;
  inline const ::zjchain::pools::protobuf::ShardToTxItem& to_heights() const;
  inline ::zjchain::pools::protobuf::ShardToTxItem* mutable_to_heights();
  inline ::zjchain::pools::protobuf::ShardToTxItem* release_to_heights();
  inline void set_allocated_to_heights(::zjchain::pools::protobuf::ShardToTxItem* to_heights);

  // optional uint64 elect_height = 4;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 4;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxMessage)
 private:
  inline void set_has_heights_hash();
  inline void clear_has_heights_hash();
  inline void set_has_to_heights();
  inline void clear_has_to_heights();
  inline void set_has_elect_height();
  inline void clear_has_elect_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* heights_hash_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem > tos_;
  ::zjchain::pools::protobuf::ShardToTxItem* to_heights_;
  ::google::protobuf::uint64 elect_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static ToTxMessage* default_instance_;
};
// -------------------------------------------------------------------

class PoolLatestInfo : public ::google::protobuf::Message {
 public:
  PoolLatestInfo();
  virtual ~PoolLatestInfo();

  PoolLatestInfo(const PoolLatestInfo& from);

  inline PoolLatestInfo& operator=(const PoolLatestInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolLatestInfo& default_instance();

  void Swap(PoolLatestInfo* other);

  // implements Message ----------------------------------------------

  PoolLatestInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolLatestInfo& from);
  void MergeFrom(const PoolLatestInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 height = 1;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 1;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // optional bytes hash = 2;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 2;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const void* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // optional uint64 synced_height = 3;
  inline bool has_synced_height() const;
  inline void clear_synced_height();
  static const int kSyncedHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 synced_height() const;
  inline void set_synced_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.PoolLatestInfo)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_synced_height();
  inline void clear_has_synced_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 height_;
  ::std::string* hash_;
  ::google::protobuf::uint64 synced_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static PoolLatestInfo* default_instance_;
};
// -------------------------------------------------------------------

class AreaInfo : public ::google::protobuf::Message {
 public:
  AreaInfo();
  virtual ~AreaInfo();

  AreaInfo(const AreaInfo& from);

  inline AreaInfo& operator=(const AreaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreaInfo& default_instance();

  void Swap(AreaInfo* other);

  // implements Message ----------------------------------------------

  AreaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AreaInfo& from);
  void MergeFrom(const AreaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.AreaInfo)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static AreaInfo* default_instance_;
};
// -------------------------------------------------------------------

class PoolStatisticItem : public ::google::protobuf::Message {
 public:
  PoolStatisticItem();
  virtual ~PoolStatisticItem();

  PoolStatisticItem(const PoolStatisticItem& from);

  inline PoolStatisticItem& operator=(const PoolStatisticItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolStatisticItem& default_instance();

  void Swap(PoolStatisticItem* other);

  // implements Message ----------------------------------------------

  PoolStatisticItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolStatisticItem& from);
  void MergeFrom(const PoolStatisticItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 tx_count = 1;
  inline int tx_count_size() const;
  inline void clear_tx_count();
  static const int kTxCountFieldNumber = 1;
  inline ::google::protobuf::uint32 tx_count(int index) const;
  inline void set_tx_count(int index, ::google::protobuf::uint32 value);
  inline void add_tx_count(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tx_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tx_count();

  // repeated uint64 stokes = 2;
  inline int stokes_size() const;
  inline void clear_stokes();
  static const int kStokesFieldNumber = 2;
  inline ::google::protobuf::uint64 stokes(int index) const;
  inline void set_stokes(int index, ::google::protobuf::uint64 value);
  inline void add_stokes(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      stokes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_stokes();

  // optional uint64 elect_height = 3;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
  inline int area_point_size() const;
  inline void clear_area_point();
  static const int kAreaPointFieldNumber = 4;
  inline const ::zjchain::pools::protobuf::AreaInfo& area_point(int index) const;
  inline ::zjchain::pools::protobuf::AreaInfo* mutable_area_point(int index);
  inline ::zjchain::pools::protobuf::AreaInfo* add_area_point();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >&
      area_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >*
      mutable_area_point();

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.PoolStatisticItem)
 private:
  inline void set_has_elect_height();
  inline void clear_has_elect_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tx_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > stokes_;
  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo > area_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static PoolStatisticItem* default_instance_;
};
// -------------------------------------------------------------------

class JoinElectNode : public ::google::protobuf::Message {
 public:
  JoinElectNode();
  virtual ~JoinElectNode();

  JoinElectNode(const JoinElectNode& from);

  inline JoinElectNode& operator=(const JoinElectNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinElectNode& default_instance();

  void Swap(JoinElectNode* other);

  // implements Message ----------------------------------------------

  JoinElectNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinElectNode& from);
  void MergeFrom(const JoinElectNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  inline bool has_pubkey() const;
  inline void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  inline const ::std::string& pubkey() const;
  inline void set_pubkey(const ::std::string& value);
  inline void set_pubkey(const char* value);
  inline void set_pubkey(const void* value, size_t size);
  inline ::std::string* mutable_pubkey();
  inline ::std::string* release_pubkey();
  inline void set_allocated_pubkey(::std::string* pubkey);

  // optional uint64 stoke = 2;
  inline bool has_stoke() const;
  inline void clear_stoke();
  static const int kStokeFieldNumber = 2;
  inline ::google::protobuf::uint64 stoke() const;
  inline void set_stoke(::google::protobuf::uint64 value);

  // optional uint32 shard = 3;
  inline bool has_shard() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 3;
  inline ::google::protobuf::uint32 shard() const;
  inline void set_shard(::google::protobuf::uint32 value);

  // optional int32 elect_pos = 4;
  inline bool has_elect_pos() const;
  inline void clear_elect_pos();
  static const int kElectPosFieldNumber = 4;
  inline ::google::protobuf::int32 elect_pos() const;
  inline void set_elect_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.JoinElectNode)
 private:
  inline void set_has_pubkey();
  inline void clear_has_pubkey();
  inline void set_has_stoke();
  inline void clear_has_stoke();
  inline void set_has_shard();
  inline void clear_has_shard();
  inline void set_has_elect_pos();
  inline void clear_has_elect_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pubkey_;
  ::google::protobuf::uint64 stoke_;
  ::google::protobuf::uint32 shard_;
  ::google::protobuf::int32 elect_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static JoinElectNode* default_instance_;
};
// -------------------------------------------------------------------

class CrossShardStatisticItem : public ::google::protobuf::Message {
 public:
  CrossShardStatisticItem();
  virtual ~CrossShardStatisticItem();

  CrossShardStatisticItem(const CrossShardStatisticItem& from);

  inline CrossShardStatisticItem& operator=(const CrossShardStatisticItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossShardStatisticItem& default_instance();

  void Swap(CrossShardStatisticItem* other);

  // implements Message ----------------------------------------------

  CrossShardStatisticItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossShardStatisticItem& from);
  void MergeFrom(const CrossShardStatisticItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 src_shard = 1;
  inline bool has_src_shard() const;
  inline void clear_src_shard();
  static const int kSrcShardFieldNumber = 1;
  inline ::google::protobuf::uint32 src_shard() const;
  inline void set_src_shard(::google::protobuf::uint32 value);

  // optional uint32 src_pool = 2;
  inline bool has_src_pool() const;
  inline void clear_src_pool();
  static const int kSrcPoolFieldNumber = 2;
  inline ::google::protobuf::uint32 src_pool() const;
  inline void set_src_pool(::google::protobuf::uint32 value);

  // optional uint64 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // optional uint32 des_shard = 4;
  inline bool has_des_shard() const;
  inline void clear_des_shard();
  static const int kDesShardFieldNumber = 4;
  inline ::google::protobuf::uint32 des_shard() const;
  inline void set_des_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.CrossShardStatisticItem)
 private:
  inline void set_has_src_shard();
  inline void clear_has_src_shard();
  inline void set_has_src_pool();
  inline void clear_has_src_pool();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_des_shard();
  inline void clear_has_des_shard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 src_shard_;
  ::google::protobuf::uint32 src_pool_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint32 des_shard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static CrossShardStatisticItem* default_instance_;
};
// -------------------------------------------------------------------

class CrossShardStatistic : public ::google::protobuf::Message {
 public:
  CrossShardStatistic();
  virtual ~CrossShardStatistic();

  CrossShardStatistic(const CrossShardStatistic& from);

  inline CrossShardStatistic& operator=(const CrossShardStatistic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossShardStatistic& default_instance();

  void Swap(CrossShardStatistic* other);

  // implements Message ----------------------------------------------

  CrossShardStatistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossShardStatistic& from);
  void MergeFrom(const CrossShardStatistic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
  inline int crosses_size() const;
  inline void clear_crosses();
  static const int kCrossesFieldNumber = 1;
  inline const ::zjchain::pools::protobuf::CrossShardStatisticItem& crosses(int index) const;
  inline ::zjchain::pools::protobuf::CrossShardStatisticItem* mutable_crosses(int index);
  inline ::zjchain::pools::protobuf::CrossShardStatisticItem* add_crosses();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >&
      crosses() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >*
      mutable_crosses();

  // optional uint64 elect_height = 2;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 2;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.CrossShardStatistic)
 private:
  inline void set_has_elect_height();
  inline void clear_has_elect_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem > crosses_;
  ::google::protobuf::uint64 elect_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static CrossShardStatistic* default_instance_;
};
// -------------------------------------------------------------------

class ElectStatistic : public ::google::protobuf::Message {
 public:
  ElectStatistic();
  virtual ~ElectStatistic();

  ElectStatistic(const ElectStatistic& from);

  inline ElectStatistic& operator=(const ElectStatistic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectStatistic& default_instance();

  void Swap(ElectStatistic* other);

  // implements Message ----------------------------------------------

  ElectStatistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElectStatistic& from);
  void MergeFrom(const ElectStatistic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
  inline int statistics_size() const;
  inline void clear_statistics();
  static const int kStatisticsFieldNumber = 1;
  inline const ::zjchain::pools::protobuf::PoolStatisticItem& statistics(int index) const;
  inline ::zjchain::pools::protobuf::PoolStatisticItem* mutable_statistics(int index);
  inline ::zjchain::pools::protobuf::PoolStatisticItem* add_statistics();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >&
      statistics() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >*
      mutable_statistics();

  // optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
  inline bool has_heights() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 2;
  inline const ::zjchain::pools::protobuf::StatisticTxItem& heights() const;
  inline ::zjchain::pools::protobuf::StatisticTxItem* mutable_heights();
  inline ::zjchain::pools::protobuf::StatisticTxItem* release_heights();
  inline void set_allocated_heights(::zjchain::pools::protobuf::StatisticTxItem* heights);

  // repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
  inline int join_elect_nodes_size() const;
  inline void clear_join_elect_nodes();
  static const int kJoinElectNodesFieldNumber = 3;
  inline const ::zjchain::pools::protobuf::JoinElectNode& join_elect_nodes(int index) const;
  inline ::zjchain::pools::protobuf::JoinElectNode* mutable_join_elect_nodes(int index);
  inline ::zjchain::pools::protobuf::JoinElectNode* add_join_elect_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >&
      join_elect_nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >*
      mutable_join_elect_nodes();

  // optional uint32 sharding_id = 4;
  inline bool has_sharding_id() const;
  inline void clear_sharding_id();
  static const int kShardingIdFieldNumber = 4;
  inline ::google::protobuf::uint32 sharding_id() const;
  inline void set_sharding_id(::google::protobuf::uint32 value);

  // optional uint64 gas_amount = 5;
  inline bool has_gas_amount() const;
  inline void clear_gas_amount();
  static const int kGasAmountFieldNumber = 5;
  inline ::google::protobuf::uint64 gas_amount() const;
  inline void set_gas_amount(::google::protobuf::uint64 value);

  // repeated uint32 lof_leaders = 6;
  inline int lof_leaders_size() const;
  inline void clear_lof_leaders();
  static const int kLofLeadersFieldNumber = 6;
  inline ::google::protobuf::uint32 lof_leaders(int index) const;
  inline void set_lof_leaders(int index, ::google::protobuf::uint32 value);
  inline void add_lof_leaders(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      lof_leaders() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_lof_leaders();

  // optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
  inline bool has_cross() const;
  inline void clear_cross();
  static const int kCrossFieldNumber = 7;
  inline const ::zjchain::pools::protobuf::CrossShardStatistic& cross() const;
  inline ::zjchain::pools::protobuf::CrossShardStatistic* mutable_cross();
  inline ::zjchain::pools::protobuf::CrossShardStatistic* release_cross();
  inline void set_allocated_cross(::zjchain::pools::protobuf::CrossShardStatistic* cross);

  // optional uint64 elect_height = 8;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 8;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ElectStatistic)
 private:
  inline void set_has_heights();
  inline void clear_has_heights();
  inline void set_has_sharding_id();
  inline void clear_has_sharding_id();
  inline void set_has_gas_amount();
  inline void clear_has_gas_amount();
  inline void set_has_cross();
  inline void clear_has_cross();
  inline void set_has_elect_height();
  inline void clear_has_elect_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem > statistics_;
  ::zjchain::pools::protobuf::StatisticTxItem* heights_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode > join_elect_nodes_;
  ::google::protobuf::uint64 gas_amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > lof_leaders_;
  ::zjchain::pools::protobuf::CrossShardStatistic* cross_;
  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::uint32 sharding_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static ElectStatistic* default_instance_;
};
// -------------------------------------------------------------------

class SyncPoolsMaxHeight : public ::google::protobuf::Message {
 public:
  SyncPoolsMaxHeight();
  virtual ~SyncPoolsMaxHeight();

  SyncPoolsMaxHeight(const SyncPoolsMaxHeight& from);

  inline SyncPoolsMaxHeight& operator=(const SyncPoolsMaxHeight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPoolsMaxHeight& default_instance();

  void Swap(SyncPoolsMaxHeight* other);

  // implements Message ----------------------------------------------

  SyncPoolsMaxHeight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncPoolsMaxHeight& from);
  void MergeFrom(const SyncPoolsMaxHeight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool req = 1 [default = false];
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 1;
  inline bool req() const;
  inline void set_req(bool value);

  // repeated uint64 heights = 2;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 2;
  inline ::google::protobuf::uint64 heights(int index) const;
  inline void set_heights(int index, ::google::protobuf::uint64 value);
  inline void add_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // repeated uint64 cross_heights = 3;
  inline int cross_heights_size() const;
  inline void clear_cross_heights();
  static const int kCrossHeightsFieldNumber = 3;
  inline ::google::protobuf::uint64 cross_heights(int index) const;
  inline void set_cross_heights(int index, ::google::protobuf::uint64 value);
  inline void add_cross_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cross_heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cross_heights();

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.SyncPoolsMaxHeight)
 private:
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cross_heights_;
  bool req_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static SyncPoolsMaxHeight* default_instance_;
};
// -------------------------------------------------------------------

class InvalidBftMessage : public ::google::protobuf::Message {
 public:
  InvalidBftMessage();
  virtual ~InvalidBftMessage();

  InvalidBftMessage(const InvalidBftMessage& from);

  inline InvalidBftMessage& operator=(const InvalidBftMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvalidBftMessage& default_instance();

  void Swap(InvalidBftMessage* other);

  // implements Message ----------------------------------------------

  InvalidBftMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvalidBftMessage& from);
  void MergeFrom(const InvalidBftMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pool_index = 1;
  inline bool has_pool_index() const;
  inline void clear_pool_index();
  static const int kPoolIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 pool_index() const;
  inline void set_pool_index(::google::protobuf::uint32 value);

  // optional bytes gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional bytes hash = 3;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 3;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const void* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // optional bool precommit = 4;
  inline bool has_precommit() const;
  inline void clear_precommit();
  static const int kPrecommitFieldNumber = 4;
  inline bool precommit() const;
  inline void set_precommit(bool value);

  // optional uint64 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.InvalidBftMessage)
 private:
  inline void set_has_pool_index();
  inline void clear_has_pool_index();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_precommit();
  inline void clear_has_precommit();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gid_;
  ::google::protobuf::uint32 pool_index_;
  bool precommit_;
  ::std::string* hash_;
  ::google::protobuf::uint64 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static InvalidBftMessage* default_instance_;
};
// -------------------------------------------------------------------

class TxMessage : public ::google::protobuf::Message {
 public:
  TxMessage();
  virtual ~TxMessage();

  TxMessage(const TxMessage& from);

  inline TxMessage& operator=(const TxMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxMessage& default_instance();

  void Swap(TxMessage* other);

  // implements Message ----------------------------------------------

  TxMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxMessage& from);
  void MergeFrom(const TxMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional bytes gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional bytes pubkey = 3;
  inline bool has_pubkey() const;
  inline void clear_pubkey();
  static const int kPubkeyFieldNumber = 3;
  inline const ::std::string& pubkey() const;
  inline void set_pubkey(const ::std::string& value);
  inline void set_pubkey(const char* value);
  inline void set_pubkey(const void* value, size_t size);
  inline ::std::string* mutable_pubkey();
  inline ::std::string* release_pubkey();
  inline void set_allocated_pubkey(::std::string* pubkey);

  // optional uint64 gas_limit = 4;
  inline bool has_gas_limit() const;
  inline void clear_gas_limit();
  static const int kGasLimitFieldNumber = 4;
  inline ::google::protobuf::uint64 gas_limit() const;
  inline void set_gas_limit(::google::protobuf::uint64 value);

  // optional uint64 gas_price = 5;
  inline bool has_gas_price() const;
  inline void clear_gas_price();
  static const int kGasPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 gas_price() const;
  inline void set_gas_price(::google::protobuf::uint64 value);

  // optional bytes key = 6;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 6;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 7;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 7;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional bytes to = 8;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 8;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional uint64 amount = 9;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 9;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 10;
  inline ::zjchain::pools::protobuf::StepType step() const;
  inline void set_step(::zjchain::pools::protobuf::StepType value);

  // optional uint64 contract_prepayment = 11;
  inline bool has_contract_prepayment() const;
  inline void clear_contract_prepayment();
  static const int kContractPrepaymentFieldNumber = 11;
  inline ::google::protobuf::uint64 contract_prepayment() const;
  inline void set_contract_prepayment(::google::protobuf::uint64 value);

  // optional bytes contract_code = 12;
  inline bool has_contract_code() const;
  inline void clear_contract_code();
  static const int kContractCodeFieldNumber = 12;
  inline const ::std::string& contract_code() const;
  inline void set_contract_code(const ::std::string& value);
  inline void set_contract_code(const char* value);
  inline void set_contract_code(const void* value, size_t size);
  inline ::std::string* mutable_contract_code();
  inline ::std::string* release_contract_code();
  inline void set_allocated_contract_code(::std::string* contract_code);

  // optional bytes contract_input = 13;
  inline bool has_contract_input() const;
  inline void clear_contract_input();
  static const int kContractInputFieldNumber = 13;
  inline const ::std::string& contract_input() const;
  inline void set_contract_input(const ::std::string& value);
  inline void set_contract_input(const char* value);
  inline void set_contract_input(const void* value, size_t size);
  inline ::std::string* mutable_contract_input();
  inline ::std::string* release_contract_input();
  inline void set_allocated_contract_input(::std::string* contract_input);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.TxMessage)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_pubkey();
  inline void clear_has_pubkey();
  inline void set_has_gas_limit();
  inline void clear_has_gas_limit();
  inline void set_has_gas_price();
  inline void clear_has_gas_price();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_contract_prepayment();
  inline void clear_has_contract_prepayment();
  inline void set_has_contract_code();
  inline void clear_has_contract_code();
  inline void set_has_contract_input();
  inline void clear_has_contract_input();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gid_;
  ::std::string* pubkey_;
  ::google::protobuf::uint64 gas_limit_;
  ::google::protobuf::uint64 gas_price_;
  ::google::protobuf::uint32 version_;
  int step_;
  ::std::string* key_;
  ::std::string* value_;
  ::std::string* to_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 contract_prepayment_;
  ::std::string* contract_code_;
  ::std::string* contract_input_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fpools_2eproto();
  friend void protobuf_AssignDesc_protos_2fpools_2eproto();
  friend void protobuf_ShutdownFile_protos_2fpools_2eproto();

  void InitAsDefaultInstance();
  static TxMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ToTxHeights

// optional uint32 sharding_id = 1;
inline bool ToTxHeights::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToTxHeights::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToTxHeights::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToTxHeights::clear_sharding_id() {
  sharding_id_ = 0u;
  clear_has_sharding_id();
}
inline ::google::protobuf::uint32 ToTxHeights::sharding_id() const {
  return sharding_id_;
}
inline void ToTxHeights::set_sharding_id(::google::protobuf::uint32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
}

// repeated uint64 heights = 2;
inline int ToTxHeights::heights_size() const {
  return heights_.size();
}
inline void ToTxHeights::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 ToTxHeights::heights(int index) const {
  return heights_.Get(index);
}
inline void ToTxHeights::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
}
inline void ToTxHeights::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ToTxHeights::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ToTxHeights::mutable_heights() {
  return &heights_;
}

// optional uint64 block_height = 3;
inline bool ToTxHeights::has_block_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToTxHeights::set_has_block_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToTxHeights::clear_has_block_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToTxHeights::clear_block_height() {
  block_height_ = GOOGLE_ULONGLONG(0);
  clear_has_block_height();
}
inline ::google::protobuf::uint64 ToTxHeights::block_height() const {
  return block_height_;
}
inline void ToTxHeights::set_block_height(::google::protobuf::uint64 value) {
  set_has_block_height();
  block_height_ = value;
}

// optional bytes tos_hash = 4;
inline bool ToTxHeights::has_tos_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToTxHeights::set_has_tos_hash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToTxHeights::clear_has_tos_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToTxHeights::clear_tos_hash() {
  if (tos_hash_ != &::google::protobuf::internal::kEmptyString) {
    tos_hash_->clear();
  }
  clear_has_tos_hash();
}
inline const ::std::string& ToTxHeights::tos_hash() const {
  return *tos_hash_;
}
inline void ToTxHeights::set_tos_hash(const ::std::string& value) {
  set_has_tos_hash();
  if (tos_hash_ == &::google::protobuf::internal::kEmptyString) {
    tos_hash_ = new ::std::string;
  }
  tos_hash_->assign(value);
}
inline void ToTxHeights::set_tos_hash(const char* value) {
  set_has_tos_hash();
  if (tos_hash_ == &::google::protobuf::internal::kEmptyString) {
    tos_hash_ = new ::std::string;
  }
  tos_hash_->assign(value);
}
inline void ToTxHeights::set_tos_hash(const void* value, size_t size) {
  set_has_tos_hash();
  if (tos_hash_ == &::google::protobuf::internal::kEmptyString) {
    tos_hash_ = new ::std::string;
  }
  tos_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTxHeights::mutable_tos_hash() {
  set_has_tos_hash();
  if (tos_hash_ == &::google::protobuf::internal::kEmptyString) {
    tos_hash_ = new ::std::string;
  }
  return tos_hash_;
}
inline ::std::string* ToTxHeights::release_tos_hash() {
  clear_has_tos_hash();
  if (tos_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tos_hash_;
    tos_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTxHeights::set_allocated_tos_hash(::std::string* tos_hash) {
  if (tos_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete tos_hash_;
  }
  if (tos_hash) {
    set_has_tos_hash();
    tos_hash_ = tos_hash;
  } else {
    clear_has_tos_hash();
    tos_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes leader_id = 5;
inline bool ToTxHeights::has_leader_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ToTxHeights::set_has_leader_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ToTxHeights::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ToTxHeights::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& ToTxHeights::leader_id() const {
  return *leader_id_;
}
inline void ToTxHeights::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void ToTxHeights::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void ToTxHeights::set_leader_id(const void* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTxHeights::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* ToTxHeights::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTxHeights::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (leader_id) {
    set_has_leader_id();
    leader_id_ = leader_id;
  } else {
    clear_has_leader_id();
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 elelct_height = 6;
inline bool ToTxHeights::has_elelct_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ToTxHeights::set_has_elelct_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ToTxHeights::clear_has_elelct_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ToTxHeights::clear_elelct_height() {
  elelct_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elelct_height();
}
inline ::google::protobuf::uint64 ToTxHeights::elelct_height() const {
  return elelct_height_;
}
inline void ToTxHeights::set_elelct_height(::google::protobuf::uint64 value) {
  set_has_elelct_height();
  elelct_height_ = value;
}

// optional uint32 tx_count = 7;
inline bool ToTxHeights::has_tx_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ToTxHeights::set_has_tx_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ToTxHeights::clear_has_tx_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ToTxHeights::clear_tx_count() {
  tx_count_ = 0u;
  clear_has_tx_count();
}
inline ::google::protobuf::uint32 ToTxHeights::tx_count() const {
  return tx_count_;
}
inline void ToTxHeights::set_tx_count(::google::protobuf::uint32 value) {
  set_has_tx_count();
  tx_count_ = value;
}

// -------------------------------------------------------------------

// ToTxMessageItem

// optional bytes des = 1;
inline bool ToTxMessageItem::has_des() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToTxMessageItem::set_has_des() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToTxMessageItem::clear_has_des() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToTxMessageItem::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& ToTxMessageItem::des() const {
  return *des_;
}
inline void ToTxMessageItem::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void ToTxMessageItem::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void ToTxMessageItem::set_des(const void* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTxMessageItem::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* ToTxMessageItem::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTxMessageItem::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 amount = 2;
inline bool ToTxMessageItem::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToTxMessageItem::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToTxMessageItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToTxMessageItem::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 ToTxMessageItem::amount() const {
  return amount_;
}
inline void ToTxMessageItem::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint32 sharding_id = 3;
inline bool ToTxMessageItem::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToTxMessageItem::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToTxMessageItem::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToTxMessageItem::clear_sharding_id() {
  sharding_id_ = 0u;
  clear_has_sharding_id();
}
inline ::google::protobuf::uint32 ToTxMessageItem::sharding_id() const {
  return sharding_id_;
}
inline void ToTxMessageItem::set_sharding_id(::google::protobuf::uint32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
}

// optional uint32 pool_index = 4;
inline bool ToTxMessageItem::has_pool_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToTxMessageItem::set_has_pool_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToTxMessageItem::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToTxMessageItem::clear_pool_index() {
  pool_index_ = 0u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 ToTxMessageItem::pool_index() const {
  return pool_index_;
}
inline void ToTxMessageItem::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
}

// optional int32 step = 5;
inline bool ToTxMessageItem::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ToTxMessageItem::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ToTxMessageItem::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ToTxMessageItem::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 ToTxMessageItem::step() const {
  return step_;
}
inline void ToTxMessageItem::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// optional bytes library_bytes = 6;
inline bool ToTxMessageItem::has_library_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ToTxMessageItem::set_has_library_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ToTxMessageItem::clear_has_library_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ToTxMessageItem::clear_library_bytes() {
  if (library_bytes_ != &::google::protobuf::internal::kEmptyString) {
    library_bytes_->clear();
  }
  clear_has_library_bytes();
}
inline const ::std::string& ToTxMessageItem::library_bytes() const {
  return *library_bytes_;
}
inline void ToTxMessageItem::set_library_bytes(const ::std::string& value) {
  set_has_library_bytes();
  if (library_bytes_ == &::google::protobuf::internal::kEmptyString) {
    library_bytes_ = new ::std::string;
  }
  library_bytes_->assign(value);
}
inline void ToTxMessageItem::set_library_bytes(const char* value) {
  set_has_library_bytes();
  if (library_bytes_ == &::google::protobuf::internal::kEmptyString) {
    library_bytes_ = new ::std::string;
  }
  library_bytes_->assign(value);
}
inline void ToTxMessageItem::set_library_bytes(const void* value, size_t size) {
  set_has_library_bytes();
  if (library_bytes_ == &::google::protobuf::internal::kEmptyString) {
    library_bytes_ = new ::std::string;
  }
  library_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTxMessageItem::mutable_library_bytes() {
  set_has_library_bytes();
  if (library_bytes_ == &::google::protobuf::internal::kEmptyString) {
    library_bytes_ = new ::std::string;
  }
  return library_bytes_;
}
inline ::std::string* ToTxMessageItem::release_library_bytes() {
  clear_has_library_bytes();
  if (library_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = library_bytes_;
    library_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTxMessageItem::set_allocated_library_bytes(::std::string* library_bytes) {
  if (library_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete library_bytes_;
  }
  if (library_bytes) {
    set_has_library_bytes();
    library_bytes_ = library_bytes;
  } else {
    clear_has_library_bytes();
    library_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
inline int ToTxMessageItem::join_infos_size() const {
  return join_infos_.size();
}
inline void ToTxMessageItem::clear_join_infos() {
  join_infos_.Clear();
}
inline const ::zjchain::bls::protobuf::JoinElectInfo& ToTxMessageItem::join_infos(int index) const {
  return join_infos_.Get(index);
}
inline ::zjchain::bls::protobuf::JoinElectInfo* ToTxMessageItem::mutable_join_infos(int index) {
  return join_infos_.Mutable(index);
}
inline ::zjchain::bls::protobuf::JoinElectInfo* ToTxMessageItem::add_join_infos() {
  return join_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >&
ToTxMessageItem::join_infos() const {
  return join_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >*
ToTxMessageItem::mutable_join_infos() {
  return &join_infos_;
}

// -------------------------------------------------------------------

// ShardToTxItem

// optional uint32 sharding_id = 1;
inline bool ShardToTxItem::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShardToTxItem::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShardToTxItem::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShardToTxItem::clear_sharding_id() {
  sharding_id_ = 0u;
  clear_has_sharding_id();
}
inline ::google::protobuf::uint32 ShardToTxItem::sharding_id() const {
  return sharding_id_;
}
inline void ShardToTxItem::set_sharding_id(::google::protobuf::uint32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
}

// repeated uint64 heights = 2;
inline int ShardToTxItem::heights_size() const {
  return heights_.size();
}
inline void ShardToTxItem::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 ShardToTxItem::heights(int index) const {
  return heights_.Get(index);
}
inline void ShardToTxItem::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
}
inline void ShardToTxItem::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ShardToTxItem::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ShardToTxItem::mutable_heights() {
  return &heights_;
}

// optional uint64 block_height = 3;
inline bool ShardToTxItem::has_block_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShardToTxItem::set_has_block_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShardToTxItem::clear_has_block_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShardToTxItem::clear_block_height() {
  block_height_ = GOOGLE_ULONGLONG(0);
  clear_has_block_height();
}
inline ::google::protobuf::uint64 ShardToTxItem::block_height() const {
  return block_height_;
}
inline void ShardToTxItem::set_block_height(::google::protobuf::uint64 value) {
  set_has_block_height();
  block_height_ = value;
}

// -------------------------------------------------------------------

// StatisticTxItem

// optional uint32 sharding_id = 1;
inline bool StatisticTxItem::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticTxItem::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticTxItem::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticTxItem::clear_sharding_id() {
  sharding_id_ = 0u;
  clear_has_sharding_id();
}
inline ::google::protobuf::uint32 StatisticTxItem::sharding_id() const {
  return sharding_id_;
}
inline void StatisticTxItem::set_sharding_id(::google::protobuf::uint32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
}

// repeated uint64 heights = 2;
inline int StatisticTxItem::heights_size() const {
  return heights_.size();
}
inline void StatisticTxItem::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 StatisticTxItem::heights(int index) const {
  return heights_.Get(index);
}
inline void StatisticTxItem::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
}
inline void StatisticTxItem::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
StatisticTxItem::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
StatisticTxItem::mutable_heights() {
  return &heights_;
}

// optional uint64 block_height = 3;
inline bool StatisticTxItem::has_block_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatisticTxItem::set_has_block_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatisticTxItem::clear_has_block_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatisticTxItem::clear_block_height() {
  block_height_ = GOOGLE_ULONGLONG(0);
  clear_has_block_height();
}
inline ::google::protobuf::uint64 StatisticTxItem::block_height() const {
  return block_height_;
}
inline void StatisticTxItem::set_block_height(::google::protobuf::uint64 value) {
  set_has_block_height();
  block_height_ = value;
}

// -------------------------------------------------------------------

// ToTxMessage

// optional bytes heights_hash = 1;
inline bool ToTxMessage::has_heights_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToTxMessage::set_has_heights_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToTxMessage::clear_has_heights_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToTxMessage::clear_heights_hash() {
  if (heights_hash_ != &::google::protobuf::internal::kEmptyString) {
    heights_hash_->clear();
  }
  clear_has_heights_hash();
}
inline const ::std::string& ToTxMessage::heights_hash() const {
  return *heights_hash_;
}
inline void ToTxMessage::set_heights_hash(const ::std::string& value) {
  set_has_heights_hash();
  if (heights_hash_ == &::google::protobuf::internal::kEmptyString) {
    heights_hash_ = new ::std::string;
  }
  heights_hash_->assign(value);
}
inline void ToTxMessage::set_heights_hash(const char* value) {
  set_has_heights_hash();
  if (heights_hash_ == &::google::protobuf::internal::kEmptyString) {
    heights_hash_ = new ::std::string;
  }
  heights_hash_->assign(value);
}
inline void ToTxMessage::set_heights_hash(const void* value, size_t size) {
  set_has_heights_hash();
  if (heights_hash_ == &::google::protobuf::internal::kEmptyString) {
    heights_hash_ = new ::std::string;
  }
  heights_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTxMessage::mutable_heights_hash() {
  set_has_heights_hash();
  if (heights_hash_ == &::google::protobuf::internal::kEmptyString) {
    heights_hash_ = new ::std::string;
  }
  return heights_hash_;
}
inline ::std::string* ToTxMessage::release_heights_hash() {
  clear_has_heights_hash();
  if (heights_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = heights_hash_;
    heights_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTxMessage::set_allocated_heights_hash(::std::string* heights_hash) {
  if (heights_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete heights_hash_;
  }
  if (heights_hash) {
    set_has_heights_hash();
    heights_hash_ = heights_hash;
  } else {
    clear_has_heights_hash();
    heights_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
inline int ToTxMessage::tos_size() const {
  return tos_.size();
}
inline void ToTxMessage::clear_tos() {
  tos_.Clear();
}
inline const ::zjchain::pools::protobuf::ToTxMessageItem& ToTxMessage::tos(int index) const {
  return tos_.Get(index);
}
inline ::zjchain::pools::protobuf::ToTxMessageItem* ToTxMessage::mutable_tos(int index) {
  return tos_.Mutable(index);
}
inline ::zjchain::pools::protobuf::ToTxMessageItem* ToTxMessage::add_tos() {
  return tos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >&
ToTxMessage::tos() const {
  return tos_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >*
ToTxMessage::mutable_tos() {
  return &tos_;
}

// optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
inline bool ToTxMessage::has_to_heights() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToTxMessage::set_has_to_heights() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToTxMessage::clear_has_to_heights() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToTxMessage::clear_to_heights() {
  if (to_heights_ != NULL) to_heights_->::zjchain::pools::protobuf::ShardToTxItem::Clear();
  clear_has_to_heights();
}
inline const ::zjchain::pools::protobuf::ShardToTxItem& ToTxMessage::to_heights() const {
  return to_heights_ != NULL ? *to_heights_ : *default_instance_->to_heights_;
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ToTxMessage::mutable_to_heights() {
  set_has_to_heights();
  if (to_heights_ == NULL) to_heights_ = new ::zjchain::pools::protobuf::ShardToTxItem;
  return to_heights_;
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ToTxMessage::release_to_heights() {
  clear_has_to_heights();
  ::zjchain::pools::protobuf::ShardToTxItem* temp = to_heights_;
  to_heights_ = NULL;
  return temp;
}
inline void ToTxMessage::set_allocated_to_heights(::zjchain::pools::protobuf::ShardToTxItem* to_heights) {
  delete to_heights_;
  to_heights_ = to_heights;
  if (to_heights) {
    set_has_to_heights();
  } else {
    clear_has_to_heights();
  }
}

// optional uint64 elect_height = 4;
inline bool ToTxMessage::has_elect_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToTxMessage::set_has_elect_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToTxMessage::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToTxMessage::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 ToTxMessage::elect_height() const {
  return elect_height_;
}
inline void ToTxMessage::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// -------------------------------------------------------------------

// PoolLatestInfo

// optional uint64 height = 1;
inline bool PoolLatestInfo::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolLatestInfo::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolLatestInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolLatestInfo::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 PoolLatestInfo::height() const {
  return height_;
}
inline void PoolLatestInfo::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// optional bytes hash = 2;
inline bool PoolLatestInfo::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolLatestInfo::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolLatestInfo::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolLatestInfo::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& PoolLatestInfo::hash() const {
  return *hash_;
}
inline void PoolLatestInfo::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void PoolLatestInfo::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void PoolLatestInfo::set_hash(const void* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PoolLatestInfo::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* PoolLatestInfo::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PoolLatestInfo::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 synced_height = 3;
inline bool PoolLatestInfo::has_synced_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolLatestInfo::set_has_synced_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolLatestInfo::clear_has_synced_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolLatestInfo::clear_synced_height() {
  synced_height_ = GOOGLE_ULONGLONG(0);
  clear_has_synced_height();
}
inline ::google::protobuf::uint64 PoolLatestInfo::synced_height() const {
  return synced_height_;
}
inline void PoolLatestInfo::set_synced_height(::google::protobuf::uint64 value) {
  set_has_synced_height();
  synced_height_ = value;
}

// -------------------------------------------------------------------

// AreaInfo

// optional int32 x = 1;
inline bool AreaInfo::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreaInfo::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreaInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreaInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 AreaInfo::x() const {
  return x_;
}
inline void AreaInfo::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool AreaInfo::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AreaInfo::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AreaInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AreaInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 AreaInfo::y() const {
  return y_;
}
inline void AreaInfo::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// PoolStatisticItem

// repeated uint32 tx_count = 1;
inline int PoolStatisticItem::tx_count_size() const {
  return tx_count_.size();
}
inline void PoolStatisticItem::clear_tx_count() {
  tx_count_.Clear();
}
inline ::google::protobuf::uint32 PoolStatisticItem::tx_count(int index) const {
  return tx_count_.Get(index);
}
inline void PoolStatisticItem::set_tx_count(int index, ::google::protobuf::uint32 value) {
  tx_count_.Set(index, value);
}
inline void PoolStatisticItem::add_tx_count(::google::protobuf::uint32 value) {
  tx_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PoolStatisticItem::tx_count() const {
  return tx_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PoolStatisticItem::mutable_tx_count() {
  return &tx_count_;
}

// repeated uint64 stokes = 2;
inline int PoolStatisticItem::stokes_size() const {
  return stokes_.size();
}
inline void PoolStatisticItem::clear_stokes() {
  stokes_.Clear();
}
inline ::google::protobuf::uint64 PoolStatisticItem::stokes(int index) const {
  return stokes_.Get(index);
}
inline void PoolStatisticItem::set_stokes(int index, ::google::protobuf::uint64 value) {
  stokes_.Set(index, value);
}
inline void PoolStatisticItem::add_stokes(::google::protobuf::uint64 value) {
  stokes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PoolStatisticItem::stokes() const {
  return stokes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PoolStatisticItem::mutable_stokes() {
  return &stokes_;
}

// optional uint64 elect_height = 3;
inline bool PoolStatisticItem::has_elect_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolStatisticItem::set_has_elect_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolStatisticItem::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolStatisticItem::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 PoolStatisticItem::elect_height() const {
  return elect_height_;
}
inline void PoolStatisticItem::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
inline int PoolStatisticItem::area_point_size() const {
  return area_point_.size();
}
inline void PoolStatisticItem::clear_area_point() {
  area_point_.Clear();
}
inline const ::zjchain::pools::protobuf::AreaInfo& PoolStatisticItem::area_point(int index) const {
  return area_point_.Get(index);
}
inline ::zjchain::pools::protobuf::AreaInfo* PoolStatisticItem::mutable_area_point(int index) {
  return area_point_.Mutable(index);
}
inline ::zjchain::pools::protobuf::AreaInfo* PoolStatisticItem::add_area_point() {
  return area_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >&
PoolStatisticItem::area_point() const {
  return area_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >*
PoolStatisticItem::mutable_area_point() {
  return &area_point_;
}

// -------------------------------------------------------------------

// JoinElectNode

// optional bytes pubkey = 1;
inline bool JoinElectNode::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinElectNode::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinElectNode::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinElectNode::clear_pubkey() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    pubkey_->clear();
  }
  clear_has_pubkey();
}
inline const ::std::string& JoinElectNode::pubkey() const {
  return *pubkey_;
}
inline void JoinElectNode::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void JoinElectNode::set_pubkey(const char* value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void JoinElectNode::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JoinElectNode::mutable_pubkey() {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  return pubkey_;
}
inline ::std::string* JoinElectNode::release_pubkey() {
  clear_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pubkey_;
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JoinElectNode::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (pubkey) {
    set_has_pubkey();
    pubkey_ = pubkey;
  } else {
    clear_has_pubkey();
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 stoke = 2;
inline bool JoinElectNode::has_stoke() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinElectNode::set_has_stoke() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinElectNode::clear_has_stoke() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinElectNode::clear_stoke() {
  stoke_ = GOOGLE_ULONGLONG(0);
  clear_has_stoke();
}
inline ::google::protobuf::uint64 JoinElectNode::stoke() const {
  return stoke_;
}
inline void JoinElectNode::set_stoke(::google::protobuf::uint64 value) {
  set_has_stoke();
  stoke_ = value;
}

// optional uint32 shard = 3;
inline bool JoinElectNode::has_shard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinElectNode::set_has_shard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinElectNode::clear_has_shard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinElectNode::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
inline ::google::protobuf::uint32 JoinElectNode::shard() const {
  return shard_;
}
inline void JoinElectNode::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
}

// optional int32 elect_pos = 4;
inline bool JoinElectNode::has_elect_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinElectNode::set_has_elect_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinElectNode::clear_has_elect_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinElectNode::clear_elect_pos() {
  elect_pos_ = 0;
  clear_has_elect_pos();
}
inline ::google::protobuf::int32 JoinElectNode::elect_pos() const {
  return elect_pos_;
}
inline void JoinElectNode::set_elect_pos(::google::protobuf::int32 value) {
  set_has_elect_pos();
  elect_pos_ = value;
}

// -------------------------------------------------------------------

// CrossShardStatisticItem

// optional uint32 src_shard = 1;
inline bool CrossShardStatisticItem::has_src_shard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrossShardStatisticItem::set_has_src_shard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrossShardStatisticItem::clear_has_src_shard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrossShardStatisticItem::clear_src_shard() {
  src_shard_ = 0u;
  clear_has_src_shard();
}
inline ::google::protobuf::uint32 CrossShardStatisticItem::src_shard() const {
  return src_shard_;
}
inline void CrossShardStatisticItem::set_src_shard(::google::protobuf::uint32 value) {
  set_has_src_shard();
  src_shard_ = value;
}

// optional uint32 src_pool = 2;
inline bool CrossShardStatisticItem::has_src_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrossShardStatisticItem::set_has_src_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrossShardStatisticItem::clear_has_src_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrossShardStatisticItem::clear_src_pool() {
  src_pool_ = 0u;
  clear_has_src_pool();
}
inline ::google::protobuf::uint32 CrossShardStatisticItem::src_pool() const {
  return src_pool_;
}
inline void CrossShardStatisticItem::set_src_pool(::google::protobuf::uint32 value) {
  set_has_src_pool();
  src_pool_ = value;
}

// optional uint64 height = 3;
inline bool CrossShardStatisticItem::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrossShardStatisticItem::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrossShardStatisticItem::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrossShardStatisticItem::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 CrossShardStatisticItem::height() const {
  return height_;
}
inline void CrossShardStatisticItem::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// optional uint32 des_shard = 4;
inline bool CrossShardStatisticItem::has_des_shard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrossShardStatisticItem::set_has_des_shard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrossShardStatisticItem::clear_has_des_shard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrossShardStatisticItem::clear_des_shard() {
  des_shard_ = 0u;
  clear_has_des_shard();
}
inline ::google::protobuf::uint32 CrossShardStatisticItem::des_shard() const {
  return des_shard_;
}
inline void CrossShardStatisticItem::set_des_shard(::google::protobuf::uint32 value) {
  set_has_des_shard();
  des_shard_ = value;
}

// -------------------------------------------------------------------

// CrossShardStatistic

// repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
inline int CrossShardStatistic::crosses_size() const {
  return crosses_.size();
}
inline void CrossShardStatistic::clear_crosses() {
  crosses_.Clear();
}
inline const ::zjchain::pools::protobuf::CrossShardStatisticItem& CrossShardStatistic::crosses(int index) const {
  return crosses_.Get(index);
}
inline ::zjchain::pools::protobuf::CrossShardStatisticItem* CrossShardStatistic::mutable_crosses(int index) {
  return crosses_.Mutable(index);
}
inline ::zjchain::pools::protobuf::CrossShardStatisticItem* CrossShardStatistic::add_crosses() {
  return crosses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >&
CrossShardStatistic::crosses() const {
  return crosses_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >*
CrossShardStatistic::mutable_crosses() {
  return &crosses_;
}

// optional uint64 elect_height = 2;
inline bool CrossShardStatistic::has_elect_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrossShardStatistic::set_has_elect_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrossShardStatistic::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrossShardStatistic::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 CrossShardStatistic::elect_height() const {
  return elect_height_;
}
inline void CrossShardStatistic::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// -------------------------------------------------------------------

// ElectStatistic

// repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
inline int ElectStatistic::statistics_size() const {
  return statistics_.size();
}
inline void ElectStatistic::clear_statistics() {
  statistics_.Clear();
}
inline const ::zjchain::pools::protobuf::PoolStatisticItem& ElectStatistic::statistics(int index) const {
  return statistics_.Get(index);
}
inline ::zjchain::pools::protobuf::PoolStatisticItem* ElectStatistic::mutable_statistics(int index) {
  return statistics_.Mutable(index);
}
inline ::zjchain::pools::protobuf::PoolStatisticItem* ElectStatistic::add_statistics() {
  return statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >&
ElectStatistic::statistics() const {
  return statistics_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >*
ElectStatistic::mutable_statistics() {
  return &statistics_;
}

// optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
inline bool ElectStatistic::has_heights() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElectStatistic::set_has_heights() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElectStatistic::clear_has_heights() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElectStatistic::clear_heights() {
  if (heights_ != NULL) heights_->::zjchain::pools::protobuf::StatisticTxItem::Clear();
  clear_has_heights();
}
inline const ::zjchain::pools::protobuf::StatisticTxItem& ElectStatistic::heights() const {
  return heights_ != NULL ? *heights_ : *default_instance_->heights_;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* ElectStatistic::mutable_heights() {
  set_has_heights();
  if (heights_ == NULL) heights_ = new ::zjchain::pools::protobuf::StatisticTxItem;
  return heights_;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* ElectStatistic::release_heights() {
  clear_has_heights();
  ::zjchain::pools::protobuf::StatisticTxItem* temp = heights_;
  heights_ = NULL;
  return temp;
}
inline void ElectStatistic::set_allocated_heights(::zjchain::pools::protobuf::StatisticTxItem* heights) {
  delete heights_;
  heights_ = heights;
  if (heights) {
    set_has_heights();
  } else {
    clear_has_heights();
  }
}

// repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
inline int ElectStatistic::join_elect_nodes_size() const {
  return join_elect_nodes_.size();
}
inline void ElectStatistic::clear_join_elect_nodes() {
  join_elect_nodes_.Clear();
}
inline const ::zjchain::pools::protobuf::JoinElectNode& ElectStatistic::join_elect_nodes(int index) const {
  return join_elect_nodes_.Get(index);
}
inline ::zjchain::pools::protobuf::JoinElectNode* ElectStatistic::mutable_join_elect_nodes(int index) {
  return join_elect_nodes_.Mutable(index);
}
inline ::zjchain::pools::protobuf::JoinElectNode* ElectStatistic::add_join_elect_nodes() {
  return join_elect_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >&
ElectStatistic::join_elect_nodes() const {
  return join_elect_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >*
ElectStatistic::mutable_join_elect_nodes() {
  return &join_elect_nodes_;
}

// optional uint32 sharding_id = 4;
inline bool ElectStatistic::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ElectStatistic::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ElectStatistic::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ElectStatistic::clear_sharding_id() {
  sharding_id_ = 0u;
  clear_has_sharding_id();
}
inline ::google::protobuf::uint32 ElectStatistic::sharding_id() const {
  return sharding_id_;
}
inline void ElectStatistic::set_sharding_id(::google::protobuf::uint32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
}

// optional uint64 gas_amount = 5;
inline bool ElectStatistic::has_gas_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ElectStatistic::set_has_gas_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ElectStatistic::clear_has_gas_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ElectStatistic::clear_gas_amount() {
  gas_amount_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_amount();
}
inline ::google::protobuf::uint64 ElectStatistic::gas_amount() const {
  return gas_amount_;
}
inline void ElectStatistic::set_gas_amount(::google::protobuf::uint64 value) {
  set_has_gas_amount();
  gas_amount_ = value;
}

// repeated uint32 lof_leaders = 6;
inline int ElectStatistic::lof_leaders_size() const {
  return lof_leaders_.size();
}
inline void ElectStatistic::clear_lof_leaders() {
  lof_leaders_.Clear();
}
inline ::google::protobuf::uint32 ElectStatistic::lof_leaders(int index) const {
  return lof_leaders_.Get(index);
}
inline void ElectStatistic::set_lof_leaders(int index, ::google::protobuf::uint32 value) {
  lof_leaders_.Set(index, value);
}
inline void ElectStatistic::add_lof_leaders(::google::protobuf::uint32 value) {
  lof_leaders_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ElectStatistic::lof_leaders() const {
  return lof_leaders_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ElectStatistic::mutable_lof_leaders() {
  return &lof_leaders_;
}

// optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
inline bool ElectStatistic::has_cross() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ElectStatistic::set_has_cross() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ElectStatistic::clear_has_cross() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ElectStatistic::clear_cross() {
  if (cross_ != NULL) cross_->::zjchain::pools::protobuf::CrossShardStatistic::Clear();
  clear_has_cross();
}
inline const ::zjchain::pools::protobuf::CrossShardStatistic& ElectStatistic::cross() const {
  return cross_ != NULL ? *cross_ : *default_instance_->cross_;
}
inline ::zjchain::pools::protobuf::CrossShardStatistic* ElectStatistic::mutable_cross() {
  set_has_cross();
  if (cross_ == NULL) cross_ = new ::zjchain::pools::protobuf::CrossShardStatistic;
  return cross_;
}
inline ::zjchain::pools::protobuf::CrossShardStatistic* ElectStatistic::release_cross() {
  clear_has_cross();
  ::zjchain::pools::protobuf::CrossShardStatistic* temp = cross_;
  cross_ = NULL;
  return temp;
}
inline void ElectStatistic::set_allocated_cross(::zjchain::pools::protobuf::CrossShardStatistic* cross) {
  delete cross_;
  cross_ = cross;
  if (cross) {
    set_has_cross();
  } else {
    clear_has_cross();
  }
}

// optional uint64 elect_height = 8;
inline bool ElectStatistic::has_elect_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ElectStatistic::set_has_elect_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ElectStatistic::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ElectStatistic::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 ElectStatistic::elect_height() const {
  return elect_height_;
}
inline void ElectStatistic::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// -------------------------------------------------------------------

// SyncPoolsMaxHeight

// optional bool req = 1 [default = false];
inline bool SyncPoolsMaxHeight::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncPoolsMaxHeight::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncPoolsMaxHeight::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncPoolsMaxHeight::clear_req() {
  req_ = false;
  clear_has_req();
}
inline bool SyncPoolsMaxHeight::req() const {
  return req_;
}
inline void SyncPoolsMaxHeight::set_req(bool value) {
  set_has_req();
  req_ = value;
}

// repeated uint64 heights = 2;
inline int SyncPoolsMaxHeight::heights_size() const {
  return heights_.size();
}
inline void SyncPoolsMaxHeight::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 SyncPoolsMaxHeight::heights(int index) const {
  return heights_.Get(index);
}
inline void SyncPoolsMaxHeight::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
}
inline void SyncPoolsMaxHeight::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SyncPoolsMaxHeight::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SyncPoolsMaxHeight::mutable_heights() {
  return &heights_;
}

// repeated uint64 cross_heights = 3;
inline int SyncPoolsMaxHeight::cross_heights_size() const {
  return cross_heights_.size();
}
inline void SyncPoolsMaxHeight::clear_cross_heights() {
  cross_heights_.Clear();
}
inline ::google::protobuf::uint64 SyncPoolsMaxHeight::cross_heights(int index) const {
  return cross_heights_.Get(index);
}
inline void SyncPoolsMaxHeight::set_cross_heights(int index, ::google::protobuf::uint64 value) {
  cross_heights_.Set(index, value);
}
inline void SyncPoolsMaxHeight::add_cross_heights(::google::protobuf::uint64 value) {
  cross_heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SyncPoolsMaxHeight::cross_heights() const {
  return cross_heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SyncPoolsMaxHeight::mutable_cross_heights() {
  return &cross_heights_;
}

// -------------------------------------------------------------------

// InvalidBftMessage

// optional uint32 pool_index = 1;
inline bool InvalidBftMessage::has_pool_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvalidBftMessage::set_has_pool_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvalidBftMessage::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvalidBftMessage::clear_pool_index() {
  pool_index_ = 0u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 InvalidBftMessage::pool_index() const {
  return pool_index_;
}
inline void InvalidBftMessage::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
}

// optional bytes gid = 2;
inline bool InvalidBftMessage::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvalidBftMessage::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvalidBftMessage::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvalidBftMessage::clear_gid() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& InvalidBftMessage::gid() const {
  return *gid_;
}
inline void InvalidBftMessage::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void InvalidBftMessage::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void InvalidBftMessage::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvalidBftMessage::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  return gid_;
}
inline ::std::string* InvalidBftMessage::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvalidBftMessage::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes hash = 3;
inline bool InvalidBftMessage::has_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvalidBftMessage::set_has_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvalidBftMessage::clear_has_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvalidBftMessage::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& InvalidBftMessage::hash() const {
  return *hash_;
}
inline void InvalidBftMessage::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void InvalidBftMessage::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void InvalidBftMessage::set_hash(const void* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvalidBftMessage::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* InvalidBftMessage::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvalidBftMessage::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool precommit = 4;
inline bool InvalidBftMessage::has_precommit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvalidBftMessage::set_has_precommit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvalidBftMessage::clear_has_precommit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvalidBftMessage::clear_precommit() {
  precommit_ = false;
  clear_has_precommit();
}
inline bool InvalidBftMessage::precommit() const {
  return precommit_;
}
inline void InvalidBftMessage::set_precommit(bool value) {
  set_has_precommit();
  precommit_ = value;
}

// optional uint64 height = 5;
inline bool InvalidBftMessage::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InvalidBftMessage::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InvalidBftMessage::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InvalidBftMessage::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 InvalidBftMessage::height() const {
  return height_;
}
inline void InvalidBftMessage::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// TxMessage

// optional uint32 version = 1;
inline bool TxMessage::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxMessage::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxMessage::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxMessage::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxMessage::version() const {
  return version_;
}
inline void TxMessage::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional bytes gid = 2;
inline bool TxMessage::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxMessage::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxMessage::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxMessage::clear_gid() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& TxMessage::gid() const {
  return *gid_;
}
inline void TxMessage::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void TxMessage::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void TxMessage::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxMessage::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  return gid_;
}
inline ::std::string* TxMessage::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxMessage::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes pubkey = 3;
inline bool TxMessage::has_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxMessage::set_has_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxMessage::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxMessage::clear_pubkey() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    pubkey_->clear();
  }
  clear_has_pubkey();
}
inline const ::std::string& TxMessage::pubkey() const {
  return *pubkey_;
}
inline void TxMessage::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void TxMessage::set_pubkey(const char* value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void TxMessage::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxMessage::mutable_pubkey() {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  return pubkey_;
}
inline ::std::string* TxMessage::release_pubkey() {
  clear_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pubkey_;
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxMessage::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (pubkey) {
    set_has_pubkey();
    pubkey_ = pubkey;
  } else {
    clear_has_pubkey();
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 gas_limit = 4;
inline bool TxMessage::has_gas_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxMessage::set_has_gas_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxMessage::clear_has_gas_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxMessage::clear_gas_limit() {
  gas_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_limit();
}
inline ::google::protobuf::uint64 TxMessage::gas_limit() const {
  return gas_limit_;
}
inline void TxMessage::set_gas_limit(::google::protobuf::uint64 value) {
  set_has_gas_limit();
  gas_limit_ = value;
}

// optional uint64 gas_price = 5;
inline bool TxMessage::has_gas_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxMessage::set_has_gas_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxMessage::clear_has_gas_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxMessage::clear_gas_price() {
  gas_price_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_price();
}
inline ::google::protobuf::uint64 TxMessage::gas_price() const {
  return gas_price_;
}
inline void TxMessage::set_gas_price(::google::protobuf::uint64 value) {
  set_has_gas_price();
  gas_price_ = value;
}

// optional bytes key = 6;
inline bool TxMessage::has_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxMessage::set_has_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxMessage::clear_has_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxMessage::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& TxMessage::key() const {
  return *key_;
}
inline void TxMessage::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void TxMessage::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void TxMessage::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxMessage::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* TxMessage::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxMessage::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 7;
inline bool TxMessage::has_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxMessage::set_has_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxMessage::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TxMessage::value() const {
  return *value_;
}
inline void TxMessage::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TxMessage::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TxMessage::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxMessage::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* TxMessage::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxMessage::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes to = 8;
inline bool TxMessage::has_to() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxMessage::set_has_to() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxMessage::clear_has_to() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxMessage::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& TxMessage::to() const {
  return *to_;
}
inline void TxMessage::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void TxMessage::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void TxMessage::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxMessage::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* TxMessage::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxMessage::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 amount = 9;
inline bool TxMessage::has_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxMessage::set_has_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxMessage::clear_has_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxMessage::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TxMessage::amount() const {
  return amount_;
}
inline void TxMessage::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
inline bool TxMessage::has_step() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxMessage::set_has_step() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxMessage::clear_has_step() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxMessage::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::zjchain::pools::protobuf::StepType TxMessage::step() const {
  return static_cast< ::zjchain::pools::protobuf::StepType >(step_);
}
inline void TxMessage::set_step(::zjchain::pools::protobuf::StepType value) {
  assert(::zjchain::pools::protobuf::StepType_IsValid(value));
  set_has_step();
  step_ = value;
}

// optional uint64 contract_prepayment = 11;
inline bool TxMessage::has_contract_prepayment() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TxMessage::set_has_contract_prepayment() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TxMessage::clear_has_contract_prepayment() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TxMessage::clear_contract_prepayment() {
  contract_prepayment_ = GOOGLE_ULONGLONG(0);
  clear_has_contract_prepayment();
}
inline ::google::protobuf::uint64 TxMessage::contract_prepayment() const {
  return contract_prepayment_;
}
inline void TxMessage::set_contract_prepayment(::google::protobuf::uint64 value) {
  set_has_contract_prepayment();
  contract_prepayment_ = value;
}

// optional bytes contract_code = 12;
inline bool TxMessage::has_contract_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TxMessage::set_has_contract_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TxMessage::clear_has_contract_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TxMessage::clear_contract_code() {
  if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
    contract_code_->clear();
  }
  clear_has_contract_code();
}
inline const ::std::string& TxMessage::contract_code() const {
  return *contract_code_;
}
inline void TxMessage::set_contract_code(const ::std::string& value) {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  contract_code_->assign(value);
}
inline void TxMessage::set_contract_code(const char* value) {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  contract_code_->assign(value);
}
inline void TxMessage::set_contract_code(const void* value, size_t size) {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  contract_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxMessage::mutable_contract_code() {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  return contract_code_;
}
inline ::std::string* TxMessage::release_contract_code() {
  clear_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_code_;
    contract_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxMessage::set_allocated_contract_code(::std::string* contract_code) {
  if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_code_;
  }
  if (contract_code) {
    set_has_contract_code();
    contract_code_ = contract_code;
  } else {
    clear_has_contract_code();
    contract_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes contract_input = 13;
inline bool TxMessage::has_contract_input() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TxMessage::set_has_contract_input() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TxMessage::clear_has_contract_input() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TxMessage::clear_contract_input() {
  if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
    contract_input_->clear();
  }
  clear_has_contract_input();
}
inline const ::std::string& TxMessage::contract_input() const {
  return *contract_input_;
}
inline void TxMessage::set_contract_input(const ::std::string& value) {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  contract_input_->assign(value);
}
inline void TxMessage::set_contract_input(const char* value) {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  contract_input_->assign(value);
}
inline void TxMessage::set_contract_input(const void* value, size_t size) {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  contract_input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxMessage::mutable_contract_input() {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  return contract_input_;
}
inline ::std::string* TxMessage::release_contract_input() {
  clear_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_input_;
    contract_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxMessage::set_allocated_contract_input(::std::string* contract_input) {
  if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_input_;
  }
  if (contract_input) {
    set_has_contract_input();
    contract_input_ = contract_input;
  } else {
    clear_has_contract_input();
    contract_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace pools
}  // namespace zjchain

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zjchain::pools::protobuf::StepType>() {
  return ::zjchain::pools::protobuf::StepType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protos_2fpools_2eproto__INCLUDED
