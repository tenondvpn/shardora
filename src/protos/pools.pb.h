// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/pools.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fpools_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fpools_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protos/bls.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fpools_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fpools_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fpools_2eproto;
namespace zjchain {
namespace pools {
namespace protobuf {
class AreaInfo;
struct AreaInfoDefaultTypeInternal;
extern AreaInfoDefaultTypeInternal _AreaInfo_default_instance_;
class CrossShardStatistic;
struct CrossShardStatisticDefaultTypeInternal;
extern CrossShardStatisticDefaultTypeInternal _CrossShardStatistic_default_instance_;
class CrossShardStatisticItem;
struct CrossShardStatisticItemDefaultTypeInternal;
extern CrossShardStatisticItemDefaultTypeInternal _CrossShardStatisticItem_default_instance_;
class ElectStatistic;
struct ElectStatisticDefaultTypeInternal;
extern ElectStatisticDefaultTypeInternal _ElectStatistic_default_instance_;
class InvalidBftMessage;
struct InvalidBftMessageDefaultTypeInternal;
extern InvalidBftMessageDefaultTypeInternal _InvalidBftMessage_default_instance_;
class JoinElectNode;
struct JoinElectNodeDefaultTypeInternal;
extern JoinElectNodeDefaultTypeInternal _JoinElectNode_default_instance_;
class PoolLatestInfo;
struct PoolLatestInfoDefaultTypeInternal;
extern PoolLatestInfoDefaultTypeInternal _PoolLatestInfo_default_instance_;
class PoolStatisticItem;
struct PoolStatisticItemDefaultTypeInternal;
extern PoolStatisticItemDefaultTypeInternal _PoolStatisticItem_default_instance_;
class ShardToTxItem;
struct ShardToTxItemDefaultTypeInternal;
extern ShardToTxItemDefaultTypeInternal _ShardToTxItem_default_instance_;
class StatisticTxItem;
struct StatisticTxItemDefaultTypeInternal;
extern StatisticTxItemDefaultTypeInternal _StatisticTxItem_default_instance_;
class SyncPoolsMaxHeight;
struct SyncPoolsMaxHeightDefaultTypeInternal;
extern SyncPoolsMaxHeightDefaultTypeInternal _SyncPoolsMaxHeight_default_instance_;
class ToTxHeights;
struct ToTxHeightsDefaultTypeInternal;
extern ToTxHeightsDefaultTypeInternal _ToTxHeights_default_instance_;
class ToTxMessage;
struct ToTxMessageDefaultTypeInternal;
extern ToTxMessageDefaultTypeInternal _ToTxMessage_default_instance_;
class ToTxMessageItem;
struct ToTxMessageItemDefaultTypeInternal;
extern ToTxMessageItemDefaultTypeInternal _ToTxMessageItem_default_instance_;
class TxMessage;
struct TxMessageDefaultTypeInternal;
extern TxMessageDefaultTypeInternal _TxMessage_default_instance_;
}  // namespace protobuf
}  // namespace pools
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::pools::protobuf::AreaInfo* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::AreaInfo>(Arena*);
template<> ::zjchain::pools::protobuf::CrossShardStatistic* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::CrossShardStatistic>(Arena*);
template<> ::zjchain::pools::protobuf::CrossShardStatisticItem* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::CrossShardStatisticItem>(Arena*);
template<> ::zjchain::pools::protobuf::ElectStatistic* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ElectStatistic>(Arena*);
template<> ::zjchain::pools::protobuf::InvalidBftMessage* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::InvalidBftMessage>(Arena*);
template<> ::zjchain::pools::protobuf::JoinElectNode* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::JoinElectNode>(Arena*);
template<> ::zjchain::pools::protobuf::PoolLatestInfo* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::PoolLatestInfo>(Arena*);
template<> ::zjchain::pools::protobuf::PoolStatisticItem* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::PoolStatisticItem>(Arena*);
template<> ::zjchain::pools::protobuf::ShardToTxItem* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ShardToTxItem>(Arena*);
template<> ::zjchain::pools::protobuf::StatisticTxItem* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::StatisticTxItem>(Arena*);
template<> ::zjchain::pools::protobuf::SyncPoolsMaxHeight* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::SyncPoolsMaxHeight>(Arena*);
template<> ::zjchain::pools::protobuf::ToTxHeights* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ToTxHeights>(Arena*);
template<> ::zjchain::pools::protobuf::ToTxMessage* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ToTxMessage>(Arena*);
template<> ::zjchain::pools::protobuf::ToTxMessageItem* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ToTxMessageItem>(Arena*);
template<> ::zjchain::pools::protobuf::TxMessage* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::TxMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace pools {
namespace protobuf {

enum StepType : int {
  kNormalFrom = 0,
  kNormalTo = 1,
  kConsensusRootElectShard = 2,
  kConsensusRootTimeBlock = 3,
  kConsensusCreateGenesisAcount = 4,
  kConsensusLocalTos = 5,
  kContractCreate = 6,
  kContractGasPrepayment = 7,
  kContractExcute = 8,
  kRootCreateAddress = 9,
  kRootCreateAddressCrossSharding = 11,
  kStatistic = 12,
  kJoinElect = 13,
  kCreateLibrary = 14,
  kCross = 15,
  kRootCross = 16
};
bool StepType_IsValid(int value);
constexpr StepType StepType_MIN = kNormalFrom;
constexpr StepType StepType_MAX = kRootCross;
constexpr int StepType_ARRAYSIZE = StepType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StepType_descriptor();
template<typename T>
inline const std::string& StepType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StepType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StepType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StepType_descriptor(), enum_t_value);
}
inline bool StepType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StepType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StepType>(
    StepType_descriptor(), name, value);
}
// ===================================================================

class ToTxHeights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ToTxHeights) */ {
 public:
  inline ToTxHeights() : ToTxHeights(nullptr) {}
  ~ToTxHeights() override;
  explicit PROTOBUF_CONSTEXPR ToTxHeights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToTxHeights(const ToTxHeights& from);
  ToTxHeights(ToTxHeights&& from) noexcept
    : ToTxHeights() {
    *this = ::std::move(from);
  }

  inline ToTxHeights& operator=(const ToTxHeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToTxHeights& operator=(ToTxHeights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToTxHeights& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToTxHeights* internal_default_instance() {
    return reinterpret_cast<const ToTxHeights*>(
               &_ToTxHeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ToTxHeights& a, ToTxHeights& b) {
    a.Swap(&b);
  }
  inline void Swap(ToTxHeights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToTxHeights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToTxHeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToTxHeights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToTxHeights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ToTxHeights& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToTxHeights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.ToTxHeights";
  }
  protected:
  explicit ToTxHeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 2,
    kTosHashFieldNumber = 4,
    kLeaderIdFieldNumber = 5,
    kBlockHeightFieldNumber = 3,
    kShardingIdFieldNumber = 1,
    kTxCountFieldNumber = 7,
    kElelctHeightFieldNumber = 6,
  };
  // repeated uint64 heights = 2;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // optional bytes tos_hash = 4;
  bool has_tos_hash() const;
  private:
  bool _internal_has_tos_hash() const;
  public:
  void clear_tos_hash();
  const std::string& tos_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tos_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tos_hash();
  PROTOBUF_NODISCARD std::string* release_tos_hash();
  void set_allocated_tos_hash(std::string* tos_hash);
  private:
  const std::string& _internal_tos_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tos_hash(const std::string& value);
  std::string* _internal_mutable_tos_hash();
  public:

  // optional bytes leader_id = 5;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  const std::string& leader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // optional uint64 block_height = 3;
  bool has_block_height() const;
  private:
  bool _internal_has_block_height() const;
  public:
  void clear_block_height();
  uint64_t block_height() const;
  void set_block_height(uint64_t value);
  private:
  uint64_t _internal_block_height() const;
  void _internal_set_block_height(uint64_t value);
  public:

  // optional uint32 sharding_id = 1;
  bool has_sharding_id() const;
  private:
  bool _internal_has_sharding_id() const;
  public:
  void clear_sharding_id();
  uint32_t sharding_id() const;
  void set_sharding_id(uint32_t value);
  private:
  uint32_t _internal_sharding_id() const;
  void _internal_set_sharding_id(uint32_t value);
  public:

  // optional uint32 tx_count = 7;
  bool has_tx_count() const;
  private:
  bool _internal_has_tx_count() const;
  public:
  void clear_tx_count();
  uint32_t tx_count() const;
  void set_tx_count(uint32_t value);
  private:
  uint32_t _internal_tx_count() const;
  void _internal_set_tx_count(uint32_t value);
  public:

  // optional uint64 elelct_height = 6;
  bool has_elelct_height() const;
  private:
  bool _internal_has_elelct_height() const;
  public:
  void clear_elelct_height();
  uint64_t elelct_height() const;
  void set_elelct_height(uint64_t value);
  private:
  uint64_t _internal_elelct_height() const;
  void _internal_set_elelct_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxHeights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tos_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  uint64_t block_height_;
  uint32_t sharding_id_;
  uint32_t tx_count_;
  uint64_t elelct_height_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class ToTxMessageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ToTxMessageItem) */ {
 public:
  inline ToTxMessageItem() : ToTxMessageItem(nullptr) {}
  ~ToTxMessageItem() override;
  explicit PROTOBUF_CONSTEXPR ToTxMessageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToTxMessageItem(const ToTxMessageItem& from);
  ToTxMessageItem(ToTxMessageItem&& from) noexcept
    : ToTxMessageItem() {
    *this = ::std::move(from);
  }

  inline ToTxMessageItem& operator=(const ToTxMessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToTxMessageItem& operator=(ToTxMessageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToTxMessageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToTxMessageItem* internal_default_instance() {
    return reinterpret_cast<const ToTxMessageItem*>(
               &_ToTxMessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ToTxMessageItem& a, ToTxMessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ToTxMessageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToTxMessageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToTxMessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToTxMessageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToTxMessageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ToTxMessageItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToTxMessageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.ToTxMessageItem";
  }
  protected:
  explicit ToTxMessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinInfosFieldNumber = 7,
    kDesFieldNumber = 1,
    kLibraryBytesFieldNumber = 6,
    kAmountFieldNumber = 2,
    kShardingIdFieldNumber = 3,
    kPoolIndexFieldNumber = 4,
    kStepFieldNumber = 5,
  };
  // repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
  int join_infos_size() const;
  private:
  int _internal_join_infos_size() const;
  public:
  void clear_join_infos();
  ::zjchain::bls::protobuf::JoinElectInfo* mutable_join_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >*
      mutable_join_infos();
  private:
  const ::zjchain::bls::protobuf::JoinElectInfo& _internal_join_infos(int index) const;
  ::zjchain::bls::protobuf::JoinElectInfo* _internal_add_join_infos();
  public:
  const ::zjchain::bls::protobuf::JoinElectInfo& join_infos(int index) const;
  ::zjchain::bls::protobuf::JoinElectInfo* add_join_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >&
      join_infos() const;

  // optional bytes des = 1;
  bool has_des() const;
  private:
  bool _internal_has_des() const;
  public:
  void clear_des();
  const std::string& des() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_des(ArgT0&& arg0, ArgT... args);
  std::string* mutable_des();
  PROTOBUF_NODISCARD std::string* release_des();
  void set_allocated_des(std::string* des);
  private:
  const std::string& _internal_des() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_des(const std::string& value);
  std::string* _internal_mutable_des();
  public:

  // optional bytes library_bytes = 6;
  bool has_library_bytes() const;
  private:
  bool _internal_has_library_bytes() const;
  public:
  void clear_library_bytes();
  const std::string& library_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library_bytes();
  PROTOBUF_NODISCARD std::string* release_library_bytes();
  void set_allocated_library_bytes(std::string* library_bytes);
  private:
  const std::string& _internal_library_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_library_bytes(const std::string& value);
  std::string* _internal_mutable_library_bytes();
  public:

  // optional uint64 amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // optional uint32 sharding_id = 3;
  bool has_sharding_id() const;
  private:
  bool _internal_has_sharding_id() const;
  public:
  void clear_sharding_id();
  uint32_t sharding_id() const;
  void set_sharding_id(uint32_t value);
  private:
  uint32_t _internal_sharding_id() const;
  void _internal_set_sharding_id(uint32_t value);
  public:

  // optional uint32 pool_index = 4;
  bool has_pool_index() const;
  private:
  bool _internal_has_pool_index() const;
  public:
  void clear_pool_index();
  uint32_t pool_index() const;
  void set_pool_index(uint32_t value);
  private:
  uint32_t _internal_pool_index() const;
  void _internal_set_pool_index(uint32_t value);
  public:

  // optional int32 step = 5;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxMessageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo > join_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr des_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_bytes_;
  uint64_t amount_;
  uint32_t sharding_id_;
  uint32_t pool_index_;
  int32_t step_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class ShardToTxItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ShardToTxItem) */ {
 public:
  inline ShardToTxItem() : ShardToTxItem(nullptr) {}
  ~ShardToTxItem() override;
  explicit PROTOBUF_CONSTEXPR ShardToTxItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardToTxItem(const ShardToTxItem& from);
  ShardToTxItem(ShardToTxItem&& from) noexcept
    : ShardToTxItem() {
    *this = ::std::move(from);
  }

  inline ShardToTxItem& operator=(const ShardToTxItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardToTxItem& operator=(ShardToTxItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardToTxItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardToTxItem* internal_default_instance() {
    return reinterpret_cast<const ShardToTxItem*>(
               &_ShardToTxItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShardToTxItem& a, ShardToTxItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardToTxItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardToTxItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardToTxItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardToTxItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardToTxItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardToTxItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardToTxItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.ShardToTxItem";
  }
  protected:
  explicit ShardToTxItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 2,
    kBlockHeightFieldNumber = 3,
    kShardingIdFieldNumber = 1,
  };
  // repeated uint64 heights = 2;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // optional uint64 block_height = 3;
  bool has_block_height() const;
  private:
  bool _internal_has_block_height() const;
  public:
  void clear_block_height();
  uint64_t block_height() const;
  void set_block_height(uint64_t value);
  private:
  uint64_t _internal_block_height() const;
  void _internal_set_block_height(uint64_t value);
  public:

  // optional uint32 sharding_id = 1;
  bool has_sharding_id() const;
  private:
  bool _internal_has_sharding_id() const;
  public:
  void clear_sharding_id();
  uint32_t sharding_id() const;
  void set_sharding_id(uint32_t value);
  private:
  uint32_t _internal_sharding_id() const;
  void _internal_set_sharding_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ShardToTxItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
  uint64_t block_height_;
  uint32_t sharding_id_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class StatisticTxItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.StatisticTxItem) */ {
 public:
  inline StatisticTxItem() : StatisticTxItem(nullptr) {}
  ~StatisticTxItem() override;
  explicit PROTOBUF_CONSTEXPR StatisticTxItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticTxItem(const StatisticTxItem& from);
  StatisticTxItem(StatisticTxItem&& from) noexcept
    : StatisticTxItem() {
    *this = ::std::move(from);
  }

  inline StatisticTxItem& operator=(const StatisticTxItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticTxItem& operator=(StatisticTxItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatisticTxItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticTxItem* internal_default_instance() {
    return reinterpret_cast<const StatisticTxItem*>(
               &_StatisticTxItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StatisticTxItem& a, StatisticTxItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticTxItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticTxItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatisticTxItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatisticTxItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatisticTxItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatisticTxItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticTxItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.StatisticTxItem";
  }
  protected:
  explicit StatisticTxItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 2,
    kBlockHeightFieldNumber = 3,
    kShardingIdFieldNumber = 1,
  };
  // repeated uint64 heights = 2;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // optional uint64 block_height = 3;
  bool has_block_height() const;
  private:
  bool _internal_has_block_height() const;
  public:
  void clear_block_height();
  uint64_t block_height() const;
  void set_block_height(uint64_t value);
  private:
  uint64_t _internal_block_height() const;
  void _internal_set_block_height(uint64_t value);
  public:

  // optional uint32 sharding_id = 1;
  bool has_sharding_id() const;
  private:
  bool _internal_has_sharding_id() const;
  public:
  void clear_sharding_id();
  uint32_t sharding_id() const;
  void set_sharding_id(uint32_t value);
  private:
  uint32_t _internal_sharding_id() const;
  void _internal_set_sharding_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.StatisticTxItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
  uint64_t block_height_;
  uint32_t sharding_id_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class ToTxMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ToTxMessage) */ {
 public:
  inline ToTxMessage() : ToTxMessage(nullptr) {}
  ~ToTxMessage() override;
  explicit PROTOBUF_CONSTEXPR ToTxMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToTxMessage(const ToTxMessage& from);
  ToTxMessage(ToTxMessage&& from) noexcept
    : ToTxMessage() {
    *this = ::std::move(from);
  }

  inline ToTxMessage& operator=(const ToTxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToTxMessage& operator=(ToTxMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToTxMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToTxMessage* internal_default_instance() {
    return reinterpret_cast<const ToTxMessage*>(
               &_ToTxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ToTxMessage& a, ToTxMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ToTxMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToTxMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToTxMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToTxMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToTxMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ToTxMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToTxMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.ToTxMessage";
  }
  protected:
  explicit ToTxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTosFieldNumber = 2,
    kHeightsHashFieldNumber = 1,
    kToHeightsFieldNumber = 3,
    kElectHeightFieldNumber = 4,
  };
  // repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
  int tos_size() const;
  private:
  int _internal_tos_size() const;
  public:
  void clear_tos();
  ::zjchain::pools::protobuf::ToTxMessageItem* mutable_tos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >*
      mutable_tos();
  private:
  const ::zjchain::pools::protobuf::ToTxMessageItem& _internal_tos(int index) const;
  ::zjchain::pools::protobuf::ToTxMessageItem* _internal_add_tos();
  public:
  const ::zjchain::pools::protobuf::ToTxMessageItem& tos(int index) const;
  ::zjchain::pools::protobuf::ToTxMessageItem* add_tos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >&
      tos() const;

  // optional bytes heights_hash = 1;
  bool has_heights_hash() const;
  private:
  bool _internal_has_heights_hash() const;
  public:
  void clear_heights_hash();
  const std::string& heights_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_heights_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_heights_hash();
  PROTOBUF_NODISCARD std::string* release_heights_hash();
  void set_allocated_heights_hash(std::string* heights_hash);
  private:
  const std::string& _internal_heights_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_heights_hash(const std::string& value);
  std::string* _internal_mutable_heights_hash();
  public:

  // optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
  bool has_to_heights() const;
  private:
  bool _internal_has_to_heights() const;
  public:
  void clear_to_heights();
  const ::zjchain::pools::protobuf::ShardToTxItem& to_heights() const;
  PROTOBUF_NODISCARD ::zjchain::pools::protobuf::ShardToTxItem* release_to_heights();
  ::zjchain::pools::protobuf::ShardToTxItem* mutable_to_heights();
  void set_allocated_to_heights(::zjchain::pools::protobuf::ShardToTxItem* to_heights);
  private:
  const ::zjchain::pools::protobuf::ShardToTxItem& _internal_to_heights() const;
  ::zjchain::pools::protobuf::ShardToTxItem* _internal_mutable_to_heights();
  public:
  void unsafe_arena_set_allocated_to_heights(
      ::zjchain::pools::protobuf::ShardToTxItem* to_heights);
  ::zjchain::pools::protobuf::ShardToTxItem* unsafe_arena_release_to_heights();

  // optional uint64 elect_height = 4;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem > tos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heights_hash_;
  ::zjchain::pools::protobuf::ShardToTxItem* to_heights_;
  uint64_t elect_height_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class PoolLatestInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.PoolLatestInfo) */ {
 public:
  inline PoolLatestInfo() : PoolLatestInfo(nullptr) {}
  ~PoolLatestInfo() override;
  explicit PROTOBUF_CONSTEXPR PoolLatestInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoolLatestInfo(const PoolLatestInfo& from);
  PoolLatestInfo(PoolLatestInfo&& from) noexcept
    : PoolLatestInfo() {
    *this = ::std::move(from);
  }

  inline PoolLatestInfo& operator=(const PoolLatestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolLatestInfo& operator=(PoolLatestInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoolLatestInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoolLatestInfo* internal_default_instance() {
    return reinterpret_cast<const PoolLatestInfo*>(
               &_PoolLatestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PoolLatestInfo& a, PoolLatestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolLatestInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolLatestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoolLatestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoolLatestInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoolLatestInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoolLatestInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolLatestInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.PoolLatestInfo";
  }
  protected:
  explicit PoolLatestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kHeightFieldNumber = 1,
    kSyncedHeightFieldNumber = 3,
  };
  // optional bytes hash = 2;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional uint64 height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // optional uint64 synced_height = 3;
  bool has_synced_height() const;
  private:
  bool _internal_has_synced_height() const;
  public:
  void clear_synced_height();
  uint64_t synced_height() const;
  void set_synced_height(uint64_t value);
  private:
  uint64_t _internal_synced_height() const;
  void _internal_set_synced_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.PoolLatestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  uint64_t height_;
  uint64_t synced_height_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class AreaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.AreaInfo) */ {
 public:
  inline AreaInfo() : AreaInfo(nullptr) {}
  ~AreaInfo() override;
  explicit PROTOBUF_CONSTEXPR AreaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AreaInfo(const AreaInfo& from);
  AreaInfo(AreaInfo&& from) noexcept
    : AreaInfo() {
    *this = ::std::move(from);
  }

  inline AreaInfo& operator=(const AreaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreaInfo& operator=(AreaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AreaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AreaInfo* internal_default_instance() {
    return reinterpret_cast<const AreaInfo*>(
               &_AreaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AreaInfo& a, AreaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AreaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AreaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AreaInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AreaInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AreaInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.AreaInfo";
  }
  protected:
  explicit AreaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.AreaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class PoolStatisticItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.PoolStatisticItem) */ {
 public:
  inline PoolStatisticItem() : PoolStatisticItem(nullptr) {}
  ~PoolStatisticItem() override;
  explicit PROTOBUF_CONSTEXPR PoolStatisticItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoolStatisticItem(const PoolStatisticItem& from);
  PoolStatisticItem(PoolStatisticItem&& from) noexcept
    : PoolStatisticItem() {
    *this = ::std::move(from);
  }

  inline PoolStatisticItem& operator=(const PoolStatisticItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolStatisticItem& operator=(PoolStatisticItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoolStatisticItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoolStatisticItem* internal_default_instance() {
    return reinterpret_cast<const PoolStatisticItem*>(
               &_PoolStatisticItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PoolStatisticItem& a, PoolStatisticItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolStatisticItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolStatisticItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoolStatisticItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoolStatisticItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoolStatisticItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoolStatisticItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolStatisticItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.PoolStatisticItem";
  }
  protected:
  explicit PoolStatisticItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxCountFieldNumber = 1,
    kStokesFieldNumber = 2,
    kAreaPointFieldNumber = 4,
    kElectHeightFieldNumber = 3,
  };
  // repeated uint32 tx_count = 1;
  int tx_count_size() const;
  private:
  int _internal_tx_count_size() const;
  public:
  void clear_tx_count();
  private:
  uint32_t _internal_tx_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tx_count() const;
  void _internal_add_tx_count(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tx_count();
  public:
  uint32_t tx_count(int index) const;
  void set_tx_count(int index, uint32_t value);
  void add_tx_count(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tx_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tx_count();

  // repeated uint64 stokes = 2;
  int stokes_size() const;
  private:
  int _internal_stokes_size() const;
  public:
  void clear_stokes();
  private:
  uint64_t _internal_stokes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_stokes() const;
  void _internal_add_stokes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_stokes();
  public:
  uint64_t stokes(int index) const;
  void set_stokes(int index, uint64_t value);
  void add_stokes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      stokes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_stokes();

  // repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
  int area_point_size() const;
  private:
  int _internal_area_point_size() const;
  public:
  void clear_area_point();
  ::zjchain::pools::protobuf::AreaInfo* mutable_area_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >*
      mutable_area_point();
  private:
  const ::zjchain::pools::protobuf::AreaInfo& _internal_area_point(int index) const;
  ::zjchain::pools::protobuf::AreaInfo* _internal_add_area_point();
  public:
  const ::zjchain::pools::protobuf::AreaInfo& area_point(int index) const;
  ::zjchain::pools::protobuf::AreaInfo* add_area_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >&
      area_point() const;

  // optional uint64 elect_height = 3;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.PoolStatisticItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tx_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > stokes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo > area_point_;
  uint64_t elect_height_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class JoinElectNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.JoinElectNode) */ {
 public:
  inline JoinElectNode() : JoinElectNode(nullptr) {}
  ~JoinElectNode() override;
  explicit PROTOBUF_CONSTEXPR JoinElectNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinElectNode(const JoinElectNode& from);
  JoinElectNode(JoinElectNode&& from) noexcept
    : JoinElectNode() {
    *this = ::std::move(from);
  }

  inline JoinElectNode& operator=(const JoinElectNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinElectNode& operator=(JoinElectNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinElectNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinElectNode* internal_default_instance() {
    return reinterpret_cast<const JoinElectNode*>(
               &_JoinElectNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(JoinElectNode& a, JoinElectNode& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinElectNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinElectNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinElectNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinElectNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinElectNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinElectNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinElectNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.JoinElectNode";
  }
  protected:
  explicit JoinElectNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kStokeFieldNumber = 2,
    kShardFieldNumber = 3,
    kElectPosFieldNumber = 4,
  };
  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_NODISCARD std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // optional uint64 stoke = 2;
  bool has_stoke() const;
  private:
  bool _internal_has_stoke() const;
  public:
  void clear_stoke();
  uint64_t stoke() const;
  void set_stoke(uint64_t value);
  private:
  uint64_t _internal_stoke() const;
  void _internal_set_stoke(uint64_t value);
  public:

  // optional uint32 shard = 3;
  bool has_shard() const;
  private:
  bool _internal_has_shard() const;
  public:
  void clear_shard();
  uint32_t shard() const;
  void set_shard(uint32_t value);
  private:
  uint32_t _internal_shard() const;
  void _internal_set_shard(uint32_t value);
  public:

  // optional int32 elect_pos = 4;
  bool has_elect_pos() const;
  private:
  bool _internal_has_elect_pos() const;
  public:
  void clear_elect_pos();
  int32_t elect_pos() const;
  void set_elect_pos(int32_t value);
  private:
  int32_t _internal_elect_pos() const;
  void _internal_set_elect_pos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.JoinElectNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  uint64_t stoke_;
  uint32_t shard_;
  int32_t elect_pos_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class CrossShardStatisticItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.CrossShardStatisticItem) */ {
 public:
  inline CrossShardStatisticItem() : CrossShardStatisticItem(nullptr) {}
  ~CrossShardStatisticItem() override;
  explicit PROTOBUF_CONSTEXPR CrossShardStatisticItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrossShardStatisticItem(const CrossShardStatisticItem& from);
  CrossShardStatisticItem(CrossShardStatisticItem&& from) noexcept
    : CrossShardStatisticItem() {
    *this = ::std::move(from);
  }

  inline CrossShardStatisticItem& operator=(const CrossShardStatisticItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossShardStatisticItem& operator=(CrossShardStatisticItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossShardStatisticItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossShardStatisticItem* internal_default_instance() {
    return reinterpret_cast<const CrossShardStatisticItem*>(
               &_CrossShardStatisticItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CrossShardStatisticItem& a, CrossShardStatisticItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossShardStatisticItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossShardStatisticItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossShardStatisticItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrossShardStatisticItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrossShardStatisticItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CrossShardStatisticItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossShardStatisticItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.CrossShardStatisticItem";
  }
  protected:
  explicit CrossShardStatisticItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcShardFieldNumber = 1,
    kSrcPoolFieldNumber = 2,
    kHeightFieldNumber = 3,
    kDesShardFieldNumber = 4,
  };
  // optional uint32 src_shard = 1;
  bool has_src_shard() const;
  private:
  bool _internal_has_src_shard() const;
  public:
  void clear_src_shard();
  uint32_t src_shard() const;
  void set_src_shard(uint32_t value);
  private:
  uint32_t _internal_src_shard() const;
  void _internal_set_src_shard(uint32_t value);
  public:

  // optional uint32 src_pool = 2;
  bool has_src_pool() const;
  private:
  bool _internal_has_src_pool() const;
  public:
  void clear_src_pool();
  uint32_t src_pool() const;
  void set_src_pool(uint32_t value);
  private:
  uint32_t _internal_src_pool() const;
  void _internal_set_src_pool(uint32_t value);
  public:

  // optional uint64 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // optional uint32 des_shard = 4;
  bool has_des_shard() const;
  private:
  bool _internal_has_des_shard() const;
  public:
  void clear_des_shard();
  uint32_t des_shard() const;
  void set_des_shard(uint32_t value);
  private:
  uint32_t _internal_des_shard() const;
  void _internal_set_des_shard(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.CrossShardStatisticItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t src_shard_;
  uint32_t src_pool_;
  uint64_t height_;
  uint32_t des_shard_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class CrossShardStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.CrossShardStatistic) */ {
 public:
  inline CrossShardStatistic() : CrossShardStatistic(nullptr) {}
  ~CrossShardStatistic() override;
  explicit PROTOBUF_CONSTEXPR CrossShardStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrossShardStatistic(const CrossShardStatistic& from);
  CrossShardStatistic(CrossShardStatistic&& from) noexcept
    : CrossShardStatistic() {
    *this = ::std::move(from);
  }

  inline CrossShardStatistic& operator=(const CrossShardStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossShardStatistic& operator=(CrossShardStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossShardStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossShardStatistic* internal_default_instance() {
    return reinterpret_cast<const CrossShardStatistic*>(
               &_CrossShardStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CrossShardStatistic& a, CrossShardStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossShardStatistic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossShardStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossShardStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrossShardStatistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrossShardStatistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CrossShardStatistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossShardStatistic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.CrossShardStatistic";
  }
  protected:
  explicit CrossShardStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossesFieldNumber = 1,
    kElectHeightFieldNumber = 2,
  };
  // repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
  int crosses_size() const;
  private:
  int _internal_crosses_size() const;
  public:
  void clear_crosses();
  ::zjchain::pools::protobuf::CrossShardStatisticItem* mutable_crosses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >*
      mutable_crosses();
  private:
  const ::zjchain::pools::protobuf::CrossShardStatisticItem& _internal_crosses(int index) const;
  ::zjchain::pools::protobuf::CrossShardStatisticItem* _internal_add_crosses();
  public:
  const ::zjchain::pools::protobuf::CrossShardStatisticItem& crosses(int index) const;
  ::zjchain::pools::protobuf::CrossShardStatisticItem* add_crosses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >&
      crosses() const;

  // optional uint64 elect_height = 2;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.CrossShardStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem > crosses_;
  uint64_t elect_height_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class ElectStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ElectStatistic) */ {
 public:
  inline ElectStatistic() : ElectStatistic(nullptr) {}
  ~ElectStatistic() override;
  explicit PROTOBUF_CONSTEXPR ElectStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElectStatistic(const ElectStatistic& from);
  ElectStatistic(ElectStatistic&& from) noexcept
    : ElectStatistic() {
    *this = ::std::move(from);
  }

  inline ElectStatistic& operator=(const ElectStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectStatistic& operator=(ElectStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElectStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElectStatistic* internal_default_instance() {
    return reinterpret_cast<const ElectStatistic*>(
               &_ElectStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ElectStatistic& a, ElectStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectStatistic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElectStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElectStatistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElectStatistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ElectStatistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectStatistic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.ElectStatistic";
  }
  protected:
  explicit ElectStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 1,
    kJoinElectNodesFieldNumber = 3,
    kLofLeadersFieldNumber = 6,
    kHeightsFieldNumber = 2,
    kCrossFieldNumber = 7,
    kGasAmountFieldNumber = 5,
    kElectHeightFieldNumber = 8,
    kShardingIdFieldNumber = 4,
  };
  // repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
  int statistics_size() const;
  private:
  int _internal_statistics_size() const;
  public:
  void clear_statistics();
  ::zjchain::pools::protobuf::PoolStatisticItem* mutable_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >*
      mutable_statistics();
  private:
  const ::zjchain::pools::protobuf::PoolStatisticItem& _internal_statistics(int index) const;
  ::zjchain::pools::protobuf::PoolStatisticItem* _internal_add_statistics();
  public:
  const ::zjchain::pools::protobuf::PoolStatisticItem& statistics(int index) const;
  ::zjchain::pools::protobuf::PoolStatisticItem* add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >&
      statistics() const;

  // repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
  int join_elect_nodes_size() const;
  private:
  int _internal_join_elect_nodes_size() const;
  public:
  void clear_join_elect_nodes();
  ::zjchain::pools::protobuf::JoinElectNode* mutable_join_elect_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >*
      mutable_join_elect_nodes();
  private:
  const ::zjchain::pools::protobuf::JoinElectNode& _internal_join_elect_nodes(int index) const;
  ::zjchain::pools::protobuf::JoinElectNode* _internal_add_join_elect_nodes();
  public:
  const ::zjchain::pools::protobuf::JoinElectNode& join_elect_nodes(int index) const;
  ::zjchain::pools::protobuf::JoinElectNode* add_join_elect_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >&
      join_elect_nodes() const;

  // repeated uint32 lof_leaders = 6;
  int lof_leaders_size() const;
  private:
  int _internal_lof_leaders_size() const;
  public:
  void clear_lof_leaders();
  private:
  uint32_t _internal_lof_leaders(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_lof_leaders() const;
  void _internal_add_lof_leaders(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_lof_leaders();
  public:
  uint32_t lof_leaders(int index) const;
  void set_lof_leaders(int index, uint32_t value);
  void add_lof_leaders(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      lof_leaders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_lof_leaders();

  // optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
  bool has_heights() const;
  private:
  bool _internal_has_heights() const;
  public:
  void clear_heights();
  const ::zjchain::pools::protobuf::StatisticTxItem& heights() const;
  PROTOBUF_NODISCARD ::zjchain::pools::protobuf::StatisticTxItem* release_heights();
  ::zjchain::pools::protobuf::StatisticTxItem* mutable_heights();
  void set_allocated_heights(::zjchain::pools::protobuf::StatisticTxItem* heights);
  private:
  const ::zjchain::pools::protobuf::StatisticTxItem& _internal_heights() const;
  ::zjchain::pools::protobuf::StatisticTxItem* _internal_mutable_heights();
  public:
  void unsafe_arena_set_allocated_heights(
      ::zjchain::pools::protobuf::StatisticTxItem* heights);
  ::zjchain::pools::protobuf::StatisticTxItem* unsafe_arena_release_heights();

  // optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
  bool has_cross() const;
  private:
  bool _internal_has_cross() const;
  public:
  void clear_cross();
  const ::zjchain::pools::protobuf::CrossShardStatistic& cross() const;
  PROTOBUF_NODISCARD ::zjchain::pools::protobuf::CrossShardStatistic* release_cross();
  ::zjchain::pools::protobuf::CrossShardStatistic* mutable_cross();
  void set_allocated_cross(::zjchain::pools::protobuf::CrossShardStatistic* cross);
  private:
  const ::zjchain::pools::protobuf::CrossShardStatistic& _internal_cross() const;
  ::zjchain::pools::protobuf::CrossShardStatistic* _internal_mutable_cross();
  public:
  void unsafe_arena_set_allocated_cross(
      ::zjchain::pools::protobuf::CrossShardStatistic* cross);
  ::zjchain::pools::protobuf::CrossShardStatistic* unsafe_arena_release_cross();

  // optional uint64 gas_amount = 5;
  bool has_gas_amount() const;
  private:
  bool _internal_has_gas_amount() const;
  public:
  void clear_gas_amount();
  uint64_t gas_amount() const;
  void set_gas_amount(uint64_t value);
  private:
  uint64_t _internal_gas_amount() const;
  void _internal_set_gas_amount(uint64_t value);
  public:

  // optional uint64 elect_height = 8;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // optional uint32 sharding_id = 4;
  bool has_sharding_id() const;
  private:
  bool _internal_has_sharding_id() const;
  public:
  void clear_sharding_id();
  uint32_t sharding_id() const;
  void set_sharding_id(uint32_t value);
  private:
  uint32_t _internal_sharding_id() const;
  void _internal_set_sharding_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ElectStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem > statistics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode > join_elect_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > lof_leaders_;
  ::zjchain::pools::protobuf::StatisticTxItem* heights_;
  ::zjchain::pools::protobuf::CrossShardStatistic* cross_;
  uint64_t gas_amount_;
  uint64_t elect_height_;
  uint32_t sharding_id_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class SyncPoolsMaxHeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.SyncPoolsMaxHeight) */ {
 public:
  inline SyncPoolsMaxHeight() : SyncPoolsMaxHeight(nullptr) {}
  ~SyncPoolsMaxHeight() override;
  explicit PROTOBUF_CONSTEXPR SyncPoolsMaxHeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPoolsMaxHeight(const SyncPoolsMaxHeight& from);
  SyncPoolsMaxHeight(SyncPoolsMaxHeight&& from) noexcept
    : SyncPoolsMaxHeight() {
    *this = ::std::move(from);
  }

  inline SyncPoolsMaxHeight& operator=(const SyncPoolsMaxHeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPoolsMaxHeight& operator=(SyncPoolsMaxHeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPoolsMaxHeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPoolsMaxHeight* internal_default_instance() {
    return reinterpret_cast<const SyncPoolsMaxHeight*>(
               &_SyncPoolsMaxHeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SyncPoolsMaxHeight& a, SyncPoolsMaxHeight& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPoolsMaxHeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPoolsMaxHeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPoolsMaxHeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPoolsMaxHeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPoolsMaxHeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncPoolsMaxHeight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPoolsMaxHeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.SyncPoolsMaxHeight";
  }
  protected:
  explicit SyncPoolsMaxHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 2,
    kCrossHeightsFieldNumber = 3,
    kReqFieldNumber = 1,
  };
  // repeated uint64 heights = 2;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // repeated uint64 cross_heights = 3;
  int cross_heights_size() const;
  private:
  int _internal_cross_heights_size() const;
  public:
  void clear_cross_heights();
  private:
  uint64_t _internal_cross_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_cross_heights() const;
  void _internal_add_cross_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_cross_heights();
  public:
  uint64_t cross_heights(int index) const;
  void set_cross_heights(int index, uint64_t value);
  void add_cross_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      cross_heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_cross_heights();

  // optional bool req = 1 [default = false];
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  bool req() const;
  void set_req(bool value);
  private:
  bool _internal_req() const;
  void _internal_set_req(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.SyncPoolsMaxHeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > cross_heights_;
  bool req_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class InvalidBftMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.InvalidBftMessage) */ {
 public:
  inline InvalidBftMessage() : InvalidBftMessage(nullptr) {}
  ~InvalidBftMessage() override;
  explicit PROTOBUF_CONSTEXPR InvalidBftMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvalidBftMessage(const InvalidBftMessage& from);
  InvalidBftMessage(InvalidBftMessage&& from) noexcept
    : InvalidBftMessage() {
    *this = ::std::move(from);
  }

  inline InvalidBftMessage& operator=(const InvalidBftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvalidBftMessage& operator=(InvalidBftMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvalidBftMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvalidBftMessage* internal_default_instance() {
    return reinterpret_cast<const InvalidBftMessage*>(
               &_InvalidBftMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InvalidBftMessage& a, InvalidBftMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InvalidBftMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvalidBftMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvalidBftMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvalidBftMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvalidBftMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvalidBftMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvalidBftMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.InvalidBftMessage";
  }
  protected:
  explicit InvalidBftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 2,
    kHashFieldNumber = 3,
    kPoolIndexFieldNumber = 1,
    kPrecommitFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // optional bytes gid = 2;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_NODISCARD std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // optional bytes hash = 3;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional uint32 pool_index = 1;
  bool has_pool_index() const;
  private:
  bool _internal_has_pool_index() const;
  public:
  void clear_pool_index();
  uint32_t pool_index() const;
  void set_pool_index(uint32_t value);
  private:
  uint32_t _internal_pool_index() const;
  void _internal_set_pool_index(uint32_t value);
  public:

  // optional bool precommit = 4;
  bool has_precommit() const;
  private:
  bool _internal_has_precommit() const;
  public:
  void clear_precommit();
  bool precommit() const;
  void set_precommit(bool value);
  private:
  bool _internal_precommit() const;
  void _internal_set_precommit(bool value);
  public:

  // optional uint64 height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.InvalidBftMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  uint32_t pool_index_;
  bool precommit_;
  uint64_t height_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// -------------------------------------------------------------------

class TxMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.TxMessage) */ {
 public:
  inline TxMessage() : TxMessage(nullptr) {}
  ~TxMessage() override;
  explicit PROTOBUF_CONSTEXPR TxMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxMessage(const TxMessage& from);
  TxMessage(TxMessage&& from) noexcept
    : TxMessage() {
    *this = ::std::move(from);
  }

  inline TxMessage& operator=(const TxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMessage& operator=(TxMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxMessage* internal_default_instance() {
    return reinterpret_cast<const TxMessage*>(
               &_TxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TxMessage& a, TxMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TxMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.pools.protobuf.TxMessage";
  }
  protected:
  explicit TxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 2,
    kPubkeyFieldNumber = 3,
    kKeyFieldNumber = 6,
    kValueFieldNumber = 7,
    kToFieldNumber = 8,
    kContractCodeFieldNumber = 12,
    kContractInputFieldNumber = 13,
    kGasLimitFieldNumber = 4,
    kGasPriceFieldNumber = 5,
    kVersionFieldNumber = 1,
    kStepFieldNumber = 10,
    kAmountFieldNumber = 9,
    kContractPrepaymentFieldNumber = 11,
  };
  // optional bytes gid = 2;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_NODISCARD std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // optional bytes pubkey = 3;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_NODISCARD std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // optional bytes key = 6;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes value = 7;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bytes to = 8;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // optional bytes contract_code = 12;
  bool has_contract_code() const;
  private:
  bool _internal_has_contract_code() const;
  public:
  void clear_contract_code();
  const std::string& contract_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_code();
  PROTOBUF_NODISCARD std::string* release_contract_code();
  void set_allocated_contract_code(std::string* contract_code);
  private:
  const std::string& _internal_contract_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_code(const std::string& value);
  std::string* _internal_mutable_contract_code();
  public:

  // optional bytes contract_input = 13;
  bool has_contract_input() const;
  private:
  bool _internal_has_contract_input() const;
  public:
  void clear_contract_input();
  const std::string& contract_input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_input();
  PROTOBUF_NODISCARD std::string* release_contract_input();
  void set_allocated_contract_input(std::string* contract_input);
  private:
  const std::string& _internal_contract_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_input(const std::string& value);
  std::string* _internal_mutable_contract_input();
  public:

  // optional uint64 gas_limit = 4;
  bool has_gas_limit() const;
  private:
  bool _internal_has_gas_limit() const;
  public:
  void clear_gas_limit();
  uint64_t gas_limit() const;
  void set_gas_limit(uint64_t value);
  private:
  uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(uint64_t value);
  public:

  // optional uint64 gas_price = 5;
  bool has_gas_price() const;
  private:
  bool _internal_has_gas_price() const;
  public:
  void clear_gas_price();
  uint64_t gas_price() const;
  void set_gas_price(uint64_t value);
  private:
  uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(uint64_t value);
  public:

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  ::zjchain::pools::protobuf::StepType step() const;
  void set_step(::zjchain::pools::protobuf::StepType value);
  private:
  ::zjchain::pools::protobuf::StepType _internal_step() const;
  void _internal_set_step(::zjchain::pools::protobuf::StepType value);
  public:

  // optional uint64 amount = 9;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // optional uint64 contract_prepayment = 11;
  bool has_contract_prepayment() const;
  private:
  bool _internal_has_contract_prepayment() const;
  public:
  void clear_contract_prepayment();
  uint64_t contract_prepayment() const;
  void set_contract_prepayment(uint64_t value);
  private:
  uint64_t _internal_contract_prepayment() const;
  void _internal_set_contract_prepayment(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.TxMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_input_;
  uint64_t gas_limit_;
  uint64_t gas_price_;
  uint32_t version_;
  int step_;
  uint64_t amount_;
  uint64_t contract_prepayment_;
  friend struct ::TableStruct_protos_2fpools_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ToTxHeights

// optional uint32 sharding_id = 1;
inline bool ToTxHeights::_internal_has_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToTxHeights::has_sharding_id() const {
  return _internal_has_sharding_id();
}
inline void ToTxHeights::clear_sharding_id() {
  sharding_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ToTxHeights::_internal_sharding_id() const {
  return sharding_id_;
}
inline uint32_t ToTxHeights::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.sharding_id)
  return _internal_sharding_id();
}
inline void ToTxHeights::_internal_set_sharding_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  sharding_id_ = value;
}
inline void ToTxHeights::set_sharding_id(uint32_t value) {
  _internal_set_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.sharding_id)
}

// repeated uint64 heights = 2;
inline int ToTxHeights::_internal_heights_size() const {
  return heights_.size();
}
inline int ToTxHeights::heights_size() const {
  return _internal_heights_size();
}
inline void ToTxHeights::clear_heights() {
  heights_.Clear();
}
inline uint64_t ToTxHeights::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline uint64_t ToTxHeights::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.heights)
  return _internal_heights(index);
}
inline void ToTxHeights::set_heights(int index, uint64_t value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.heights)
}
inline void ToTxHeights::_internal_add_heights(uint64_t value) {
  heights_.Add(value);
}
inline void ToTxHeights::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ToTxHeights.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ToTxHeights::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ToTxHeights::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ToTxHeights.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ToTxHeights::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ToTxHeights::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ToTxHeights.heights)
  return _internal_mutable_heights();
}

// optional uint64 block_height = 3;
inline bool ToTxHeights::_internal_has_block_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToTxHeights::has_block_height() const {
  return _internal_has_block_height();
}
inline void ToTxHeights::clear_block_height() {
  block_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ToTxHeights::_internal_block_height() const {
  return block_height_;
}
inline uint64_t ToTxHeights::block_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.block_height)
  return _internal_block_height();
}
inline void ToTxHeights::_internal_set_block_height(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  block_height_ = value;
}
inline void ToTxHeights::set_block_height(uint64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.block_height)
}

// optional bytes tos_hash = 4;
inline bool ToTxHeights::_internal_has_tos_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToTxHeights::has_tos_hash() const {
  return _internal_has_tos_hash();
}
inline void ToTxHeights::clear_tos_hash() {
  tos_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ToTxHeights::tos_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.tos_hash)
  return _internal_tos_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToTxHeights::set_tos_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tos_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.tos_hash)
}
inline std::string* ToTxHeights::mutable_tos_hash() {
  std::string* _s = _internal_mutable_tos_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxHeights.tos_hash)
  return _s;
}
inline const std::string& ToTxHeights::_internal_tos_hash() const {
  return tos_hash_.Get();
}
inline void ToTxHeights::_internal_set_tos_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tos_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* ToTxHeights::_internal_mutable_tos_hash() {
  _has_bits_[0] |= 0x00000001u;
  return tos_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* ToTxHeights::release_tos_hash() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxHeights.tos_hash)
  if (!_internal_has_tos_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tos_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tos_hash_.IsDefault()) {
    tos_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToTxHeights::set_allocated_tos_hash(std::string* tos_hash) {
  if (tos_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tos_hash_.SetAllocated(tos_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tos_hash_.IsDefault()) {
    tos_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxHeights.tos_hash)
}

// optional bytes leader_id = 5;
inline bool ToTxHeights::_internal_has_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToTxHeights::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void ToTxHeights::clear_leader_id() {
  leader_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ToTxHeights::leader_id() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.leader_id)
  return _internal_leader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToTxHeights::set_leader_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 leader_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.leader_id)
}
inline std::string* ToTxHeights::mutable_leader_id() {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxHeights.leader_id)
  return _s;
}
inline const std::string& ToTxHeights::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void ToTxHeights::_internal_set_leader_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  leader_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ToTxHeights::_internal_mutable_leader_id() {
  _has_bits_[0] |= 0x00000002u;
  return leader_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ToTxHeights::release_leader_id() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxHeights.leader_id)
  if (!_internal_has_leader_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = leader_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (leader_id_.IsDefault()) {
    leader_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToTxHeights::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leader_id_.SetAllocated(leader_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (leader_id_.IsDefault()) {
    leader_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxHeights.leader_id)
}

// optional uint64 elelct_height = 6;
inline bool ToTxHeights::_internal_has_elelct_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ToTxHeights::has_elelct_height() const {
  return _internal_has_elelct_height();
}
inline void ToTxHeights::clear_elelct_height() {
  elelct_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t ToTxHeights::_internal_elelct_height() const {
  return elelct_height_;
}
inline uint64_t ToTxHeights::elelct_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.elelct_height)
  return _internal_elelct_height();
}
inline void ToTxHeights::_internal_set_elelct_height(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  elelct_height_ = value;
}
inline void ToTxHeights::set_elelct_height(uint64_t value) {
  _internal_set_elelct_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.elelct_height)
}

// optional uint32 tx_count = 7;
inline bool ToTxHeights::_internal_has_tx_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ToTxHeights::has_tx_count() const {
  return _internal_has_tx_count();
}
inline void ToTxHeights::clear_tx_count() {
  tx_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ToTxHeights::_internal_tx_count() const {
  return tx_count_;
}
inline uint32_t ToTxHeights::tx_count() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.tx_count)
  return _internal_tx_count();
}
inline void ToTxHeights::_internal_set_tx_count(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tx_count_ = value;
}
inline void ToTxHeights::set_tx_count(uint32_t value) {
  _internal_set_tx_count(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.tx_count)
}

// -------------------------------------------------------------------

// ToTxMessageItem

// optional bytes des = 1;
inline bool ToTxMessageItem::_internal_has_des() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToTxMessageItem::has_des() const {
  return _internal_has_des();
}
inline void ToTxMessageItem::clear_des() {
  des_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ToTxMessageItem::des() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.des)
  return _internal_des();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToTxMessageItem::set_des(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 des_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.des)
}
inline std::string* ToTxMessageItem::mutable_des() {
  std::string* _s = _internal_mutable_des();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessageItem.des)
  return _s;
}
inline const std::string& ToTxMessageItem::_internal_des() const {
  return des_.Get();
}
inline void ToTxMessageItem::_internal_set_des(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  des_.Set(value, GetArenaForAllocation());
}
inline std::string* ToTxMessageItem::_internal_mutable_des() {
  _has_bits_[0] |= 0x00000001u;
  return des_.Mutable(GetArenaForAllocation());
}
inline std::string* ToTxMessageItem::release_des() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxMessageItem.des)
  if (!_internal_has_des()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = des_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (des_.IsDefault()) {
    des_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToTxMessageItem::set_allocated_des(std::string* des) {
  if (des != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  des_.SetAllocated(des, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (des_.IsDefault()) {
    des_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxMessageItem.des)
}

// optional uint64 amount = 2;
inline bool ToTxMessageItem::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToTxMessageItem::has_amount() const {
  return _internal_has_amount();
}
inline void ToTxMessageItem::clear_amount() {
  amount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ToTxMessageItem::_internal_amount() const {
  return amount_;
}
inline uint64_t ToTxMessageItem::amount() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.amount)
  return _internal_amount();
}
inline void ToTxMessageItem::_internal_set_amount(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
}
inline void ToTxMessageItem::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.amount)
}

// optional uint32 sharding_id = 3;
inline bool ToTxMessageItem::_internal_has_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToTxMessageItem::has_sharding_id() const {
  return _internal_has_sharding_id();
}
inline void ToTxMessageItem::clear_sharding_id() {
  sharding_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ToTxMessageItem::_internal_sharding_id() const {
  return sharding_id_;
}
inline uint32_t ToTxMessageItem::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.sharding_id)
  return _internal_sharding_id();
}
inline void ToTxMessageItem::_internal_set_sharding_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  sharding_id_ = value;
}
inline void ToTxMessageItem::set_sharding_id(uint32_t value) {
  _internal_set_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.sharding_id)
}

// optional uint32 pool_index = 4;
inline bool ToTxMessageItem::_internal_has_pool_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ToTxMessageItem::has_pool_index() const {
  return _internal_has_pool_index();
}
inline void ToTxMessageItem::clear_pool_index() {
  pool_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ToTxMessageItem::_internal_pool_index() const {
  return pool_index_;
}
inline uint32_t ToTxMessageItem::pool_index() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.pool_index)
  return _internal_pool_index();
}
inline void ToTxMessageItem::_internal_set_pool_index(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  pool_index_ = value;
}
inline void ToTxMessageItem::set_pool_index(uint32_t value) {
  _internal_set_pool_index(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.pool_index)
}

// optional int32 step = 5;
inline bool ToTxMessageItem::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ToTxMessageItem::has_step() const {
  return _internal_has_step();
}
inline void ToTxMessageItem::clear_step() {
  step_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ToTxMessageItem::_internal_step() const {
  return step_;
}
inline int32_t ToTxMessageItem::step() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.step)
  return _internal_step();
}
inline void ToTxMessageItem::_internal_set_step(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  step_ = value;
}
inline void ToTxMessageItem::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.step)
}

// optional bytes library_bytes = 6;
inline bool ToTxMessageItem::_internal_has_library_bytes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToTxMessageItem::has_library_bytes() const {
  return _internal_has_library_bytes();
}
inline void ToTxMessageItem::clear_library_bytes() {
  library_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ToTxMessageItem::library_bytes() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.library_bytes)
  return _internal_library_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToTxMessageItem::set_library_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 library_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.library_bytes)
}
inline std::string* ToTxMessageItem::mutable_library_bytes() {
  std::string* _s = _internal_mutable_library_bytes();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessageItem.library_bytes)
  return _s;
}
inline const std::string& ToTxMessageItem::_internal_library_bytes() const {
  return library_bytes_.Get();
}
inline void ToTxMessageItem::_internal_set_library_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  library_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* ToTxMessageItem::_internal_mutable_library_bytes() {
  _has_bits_[0] |= 0x00000002u;
  return library_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* ToTxMessageItem::release_library_bytes() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxMessageItem.library_bytes)
  if (!_internal_has_library_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = library_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (library_bytes_.IsDefault()) {
    library_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToTxMessageItem::set_allocated_library_bytes(std::string* library_bytes) {
  if (library_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  library_bytes_.SetAllocated(library_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (library_bytes_.IsDefault()) {
    library_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxMessageItem.library_bytes)
}

// repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
inline int ToTxMessageItem::_internal_join_infos_size() const {
  return join_infos_.size();
}
inline int ToTxMessageItem::join_infos_size() const {
  return _internal_join_infos_size();
}
inline ::zjchain::bls::protobuf::JoinElectInfo* ToTxMessageItem::mutable_join_infos(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessageItem.join_infos)
  return join_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >*
ToTxMessageItem::mutable_join_infos() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ToTxMessageItem.join_infos)
  return &join_infos_;
}
inline const ::zjchain::bls::protobuf::JoinElectInfo& ToTxMessageItem::_internal_join_infos(int index) const {
  return join_infos_.Get(index);
}
inline const ::zjchain::bls::protobuf::JoinElectInfo& ToTxMessageItem::join_infos(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.join_infos)
  return _internal_join_infos(index);
}
inline ::zjchain::bls::protobuf::JoinElectInfo* ToTxMessageItem::_internal_add_join_infos() {
  return join_infos_.Add();
}
inline ::zjchain::bls::protobuf::JoinElectInfo* ToTxMessageItem::add_join_infos() {
  ::zjchain::bls::protobuf::JoinElectInfo* _add = _internal_add_join_infos();
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ToTxMessageItem.join_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::JoinElectInfo >&
ToTxMessageItem::join_infos() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ToTxMessageItem.join_infos)
  return join_infos_;
}

// -------------------------------------------------------------------

// ShardToTxItem

// optional uint32 sharding_id = 1;
inline bool ShardToTxItem::_internal_has_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShardToTxItem::has_sharding_id() const {
  return _internal_has_sharding_id();
}
inline void ShardToTxItem::clear_sharding_id() {
  sharding_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ShardToTxItem::_internal_sharding_id() const {
  return sharding_id_;
}
inline uint32_t ShardToTxItem::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ShardToTxItem.sharding_id)
  return _internal_sharding_id();
}
inline void ShardToTxItem::_internal_set_sharding_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  sharding_id_ = value;
}
inline void ShardToTxItem::set_sharding_id(uint32_t value) {
  _internal_set_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ShardToTxItem.sharding_id)
}

// repeated uint64 heights = 2;
inline int ShardToTxItem::_internal_heights_size() const {
  return heights_.size();
}
inline int ShardToTxItem::heights_size() const {
  return _internal_heights_size();
}
inline void ShardToTxItem::clear_heights() {
  heights_.Clear();
}
inline uint64_t ShardToTxItem::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline uint64_t ShardToTxItem::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ShardToTxItem.heights)
  return _internal_heights(index);
}
inline void ShardToTxItem::set_heights(int index, uint64_t value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ShardToTxItem.heights)
}
inline void ShardToTxItem::_internal_add_heights(uint64_t value) {
  heights_.Add(value);
}
inline void ShardToTxItem::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ShardToTxItem.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShardToTxItem::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ShardToTxItem::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ShardToTxItem.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShardToTxItem::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ShardToTxItem::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ShardToTxItem.heights)
  return _internal_mutable_heights();
}

// optional uint64 block_height = 3;
inline bool ShardToTxItem::_internal_has_block_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardToTxItem::has_block_height() const {
  return _internal_has_block_height();
}
inline void ShardToTxItem::clear_block_height() {
  block_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ShardToTxItem::_internal_block_height() const {
  return block_height_;
}
inline uint64_t ShardToTxItem::block_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ShardToTxItem.block_height)
  return _internal_block_height();
}
inline void ShardToTxItem::_internal_set_block_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  block_height_ = value;
}
inline void ShardToTxItem::set_block_height(uint64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ShardToTxItem.block_height)
}

// -------------------------------------------------------------------

// StatisticTxItem

// optional uint32 sharding_id = 1;
inline bool StatisticTxItem::_internal_has_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatisticTxItem::has_sharding_id() const {
  return _internal_has_sharding_id();
}
inline void StatisticTxItem::clear_sharding_id() {
  sharding_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t StatisticTxItem::_internal_sharding_id() const {
  return sharding_id_;
}
inline uint32_t StatisticTxItem::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.StatisticTxItem.sharding_id)
  return _internal_sharding_id();
}
inline void StatisticTxItem::_internal_set_sharding_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  sharding_id_ = value;
}
inline void StatisticTxItem::set_sharding_id(uint32_t value) {
  _internal_set_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.StatisticTxItem.sharding_id)
}

// repeated uint64 heights = 2;
inline int StatisticTxItem::_internal_heights_size() const {
  return heights_.size();
}
inline int StatisticTxItem::heights_size() const {
  return _internal_heights_size();
}
inline void StatisticTxItem::clear_heights() {
  heights_.Clear();
}
inline uint64_t StatisticTxItem::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline uint64_t StatisticTxItem::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.StatisticTxItem.heights)
  return _internal_heights(index);
}
inline void StatisticTxItem::set_heights(int index, uint64_t value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.StatisticTxItem.heights)
}
inline void StatisticTxItem::_internal_add_heights(uint64_t value) {
  heights_.Add(value);
}
inline void StatisticTxItem::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.StatisticTxItem.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
StatisticTxItem::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
StatisticTxItem::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.StatisticTxItem.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
StatisticTxItem::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
StatisticTxItem::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.StatisticTxItem.heights)
  return _internal_mutable_heights();
}

// optional uint64 block_height = 3;
inline bool StatisticTxItem::_internal_has_block_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatisticTxItem::has_block_height() const {
  return _internal_has_block_height();
}
inline void StatisticTxItem::clear_block_height() {
  block_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t StatisticTxItem::_internal_block_height() const {
  return block_height_;
}
inline uint64_t StatisticTxItem::block_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.StatisticTxItem.block_height)
  return _internal_block_height();
}
inline void StatisticTxItem::_internal_set_block_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  block_height_ = value;
}
inline void StatisticTxItem::set_block_height(uint64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.StatisticTxItem.block_height)
}

// -------------------------------------------------------------------

// ToTxMessage

// optional bytes heights_hash = 1;
inline bool ToTxMessage::_internal_has_heights_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToTxMessage::has_heights_hash() const {
  return _internal_has_heights_hash();
}
inline void ToTxMessage::clear_heights_hash() {
  heights_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ToTxMessage::heights_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessage.heights_hash)
  return _internal_heights_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ToTxMessage::set_heights_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 heights_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessage.heights_hash)
}
inline std::string* ToTxMessage::mutable_heights_hash() {
  std::string* _s = _internal_mutable_heights_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessage.heights_hash)
  return _s;
}
inline const std::string& ToTxMessage::_internal_heights_hash() const {
  return heights_hash_.Get();
}
inline void ToTxMessage::_internal_set_heights_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  heights_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* ToTxMessage::_internal_mutable_heights_hash() {
  _has_bits_[0] |= 0x00000001u;
  return heights_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* ToTxMessage::release_heights_hash() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxMessage.heights_hash)
  if (!_internal_has_heights_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = heights_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (heights_hash_.IsDefault()) {
    heights_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ToTxMessage::set_allocated_heights_hash(std::string* heights_hash) {
  if (heights_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  heights_hash_.SetAllocated(heights_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (heights_hash_.IsDefault()) {
    heights_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxMessage.heights_hash)
}

// repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
inline int ToTxMessage::_internal_tos_size() const {
  return tos_.size();
}
inline int ToTxMessage::tos_size() const {
  return _internal_tos_size();
}
inline void ToTxMessage::clear_tos() {
  tos_.Clear();
}
inline ::zjchain::pools::protobuf::ToTxMessageItem* ToTxMessage::mutable_tos(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessage.tos)
  return tos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >*
ToTxMessage::mutable_tos() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ToTxMessage.tos)
  return &tos_;
}
inline const ::zjchain::pools::protobuf::ToTxMessageItem& ToTxMessage::_internal_tos(int index) const {
  return tos_.Get(index);
}
inline const ::zjchain::pools::protobuf::ToTxMessageItem& ToTxMessage::tos(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessage.tos)
  return _internal_tos(index);
}
inline ::zjchain::pools::protobuf::ToTxMessageItem* ToTxMessage::_internal_add_tos() {
  return tos_.Add();
}
inline ::zjchain::pools::protobuf::ToTxMessageItem* ToTxMessage::add_tos() {
  ::zjchain::pools::protobuf::ToTxMessageItem* _add = _internal_add_tos();
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ToTxMessage.tos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >&
ToTxMessage::tos() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ToTxMessage.tos)
  return tos_;
}

// optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
inline bool ToTxMessage::_internal_has_to_heights() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || to_heights_ != nullptr);
  return value;
}
inline bool ToTxMessage::has_to_heights() const {
  return _internal_has_to_heights();
}
inline void ToTxMessage::clear_to_heights() {
  if (to_heights_ != nullptr) to_heights_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::pools::protobuf::ShardToTxItem& ToTxMessage::_internal_to_heights() const {
  const ::zjchain::pools::protobuf::ShardToTxItem* p = to_heights_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::pools::protobuf::ShardToTxItem&>(
      ::zjchain::pools::protobuf::_ShardToTxItem_default_instance_);
}
inline const ::zjchain::pools::protobuf::ShardToTxItem& ToTxMessage::to_heights() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessage.to_heights)
  return _internal_to_heights();
}
inline void ToTxMessage::unsafe_arena_set_allocated_to_heights(
    ::zjchain::pools::protobuf::ShardToTxItem* to_heights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_heights_);
  }
  to_heights_ = to_heights;
  if (to_heights) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.pools.protobuf.ToTxMessage.to_heights)
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ToTxMessage::release_to_heights() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::pools::protobuf::ShardToTxItem* temp = to_heights_;
  to_heights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ToTxMessage::unsafe_arena_release_to_heights() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxMessage.to_heights)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::pools::protobuf::ShardToTxItem* temp = to_heights_;
  to_heights_ = nullptr;
  return temp;
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ToTxMessage::_internal_mutable_to_heights() {
  _has_bits_[0] |= 0x00000002u;
  if (to_heights_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::pools::protobuf::ShardToTxItem>(GetArenaForAllocation());
    to_heights_ = p;
  }
  return to_heights_;
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ToTxMessage::mutable_to_heights() {
  ::zjchain::pools::protobuf::ShardToTxItem* _msg = _internal_mutable_to_heights();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessage.to_heights)
  return _msg;
}
inline void ToTxMessage::set_allocated_to_heights(::zjchain::pools::protobuf::ShardToTxItem* to_heights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete to_heights_;
  }
  if (to_heights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to_heights);
    if (message_arena != submessage_arena) {
      to_heights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_heights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_heights_ = to_heights;
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxMessage.to_heights)
}

// optional uint64 elect_height = 4;
inline bool ToTxMessage::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToTxMessage::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void ToTxMessage::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ToTxMessage::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t ToTxMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessage.elect_height)
  return _internal_elect_height();
}
inline void ToTxMessage::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  elect_height_ = value;
}
inline void ToTxMessage::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessage.elect_height)
}

// -------------------------------------------------------------------

// PoolLatestInfo

// optional uint64 height = 1;
inline bool PoolLatestInfo::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoolLatestInfo::has_height() const {
  return _internal_has_height();
}
inline void PoolLatestInfo::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PoolLatestInfo::_internal_height() const {
  return height_;
}
inline uint64_t PoolLatestInfo::height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.PoolLatestInfo.height)
  return _internal_height();
}
inline void PoolLatestInfo::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void PoolLatestInfo::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.PoolLatestInfo.height)
}

// optional bytes hash = 2;
inline bool PoolLatestInfo::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoolLatestInfo::has_hash() const {
  return _internal_has_hash();
}
inline void PoolLatestInfo::clear_hash() {
  hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PoolLatestInfo::hash() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.PoolLatestInfo.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PoolLatestInfo::set_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.PoolLatestInfo.hash)
}
inline std::string* PoolLatestInfo::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.PoolLatestInfo.hash)
  return _s;
}
inline const std::string& PoolLatestInfo::_internal_hash() const {
  return hash_.Get();
}
inline void PoolLatestInfo::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(value, GetArenaForAllocation());
}
inline std::string* PoolLatestInfo::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(GetArenaForAllocation());
}
inline std::string* PoolLatestInfo::release_hash() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.PoolLatestInfo.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PoolLatestInfo::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.PoolLatestInfo.hash)
}

// optional uint64 synced_height = 3;
inline bool PoolLatestInfo::_internal_has_synced_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PoolLatestInfo::has_synced_height() const {
  return _internal_has_synced_height();
}
inline void PoolLatestInfo::clear_synced_height() {
  synced_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PoolLatestInfo::_internal_synced_height() const {
  return synced_height_;
}
inline uint64_t PoolLatestInfo::synced_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.PoolLatestInfo.synced_height)
  return _internal_synced_height();
}
inline void PoolLatestInfo::_internal_set_synced_height(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  synced_height_ = value;
}
inline void PoolLatestInfo::set_synced_height(uint64_t value) {
  _internal_set_synced_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.PoolLatestInfo.synced_height)
}

// -------------------------------------------------------------------

// AreaInfo

// optional int32 x = 1;
inline bool AreaInfo::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AreaInfo::has_x() const {
  return _internal_has_x();
}
inline void AreaInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AreaInfo::_internal_x() const {
  return x_;
}
inline int32_t AreaInfo::x() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.AreaInfo.x)
  return _internal_x();
}
inline void AreaInfo::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void AreaInfo::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.AreaInfo.x)
}

// optional int32 y = 2;
inline bool AreaInfo::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AreaInfo::has_y() const {
  return _internal_has_y();
}
inline void AreaInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AreaInfo::_internal_y() const {
  return y_;
}
inline int32_t AreaInfo::y() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.AreaInfo.y)
  return _internal_y();
}
inline void AreaInfo::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void AreaInfo::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.AreaInfo.y)
}

// -------------------------------------------------------------------

// PoolStatisticItem

// repeated uint32 tx_count = 1;
inline int PoolStatisticItem::_internal_tx_count_size() const {
  return tx_count_.size();
}
inline int PoolStatisticItem::tx_count_size() const {
  return _internal_tx_count_size();
}
inline void PoolStatisticItem::clear_tx_count() {
  tx_count_.Clear();
}
inline uint32_t PoolStatisticItem::_internal_tx_count(int index) const {
  return tx_count_.Get(index);
}
inline uint32_t PoolStatisticItem::tx_count(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.PoolStatisticItem.tx_count)
  return _internal_tx_count(index);
}
inline void PoolStatisticItem::set_tx_count(int index, uint32_t value) {
  tx_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.PoolStatisticItem.tx_count)
}
inline void PoolStatisticItem::_internal_add_tx_count(uint32_t value) {
  tx_count_.Add(value);
}
inline void PoolStatisticItem::add_tx_count(uint32_t value) {
  _internal_add_tx_count(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.PoolStatisticItem.tx_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PoolStatisticItem::_internal_tx_count() const {
  return tx_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PoolStatisticItem::tx_count() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.PoolStatisticItem.tx_count)
  return _internal_tx_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PoolStatisticItem::_internal_mutable_tx_count() {
  return &tx_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PoolStatisticItem::mutable_tx_count() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.PoolStatisticItem.tx_count)
  return _internal_mutable_tx_count();
}

// repeated uint64 stokes = 2;
inline int PoolStatisticItem::_internal_stokes_size() const {
  return stokes_.size();
}
inline int PoolStatisticItem::stokes_size() const {
  return _internal_stokes_size();
}
inline void PoolStatisticItem::clear_stokes() {
  stokes_.Clear();
}
inline uint64_t PoolStatisticItem::_internal_stokes(int index) const {
  return stokes_.Get(index);
}
inline uint64_t PoolStatisticItem::stokes(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.PoolStatisticItem.stokes)
  return _internal_stokes(index);
}
inline void PoolStatisticItem::set_stokes(int index, uint64_t value) {
  stokes_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.PoolStatisticItem.stokes)
}
inline void PoolStatisticItem::_internal_add_stokes(uint64_t value) {
  stokes_.Add(value);
}
inline void PoolStatisticItem::add_stokes(uint64_t value) {
  _internal_add_stokes(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.PoolStatisticItem.stokes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PoolStatisticItem::_internal_stokes() const {
  return stokes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PoolStatisticItem::stokes() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.PoolStatisticItem.stokes)
  return _internal_stokes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PoolStatisticItem::_internal_mutable_stokes() {
  return &stokes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PoolStatisticItem::mutable_stokes() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.PoolStatisticItem.stokes)
  return _internal_mutable_stokes();
}

// optional uint64 elect_height = 3;
inline bool PoolStatisticItem::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoolStatisticItem::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void PoolStatisticItem::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PoolStatisticItem::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t PoolStatisticItem::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.PoolStatisticItem.elect_height)
  return _internal_elect_height();
}
inline void PoolStatisticItem::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  elect_height_ = value;
}
inline void PoolStatisticItem::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.PoolStatisticItem.elect_height)
}

// repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
inline int PoolStatisticItem::_internal_area_point_size() const {
  return area_point_.size();
}
inline int PoolStatisticItem::area_point_size() const {
  return _internal_area_point_size();
}
inline void PoolStatisticItem::clear_area_point() {
  area_point_.Clear();
}
inline ::zjchain::pools::protobuf::AreaInfo* PoolStatisticItem::mutable_area_point(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.PoolStatisticItem.area_point)
  return area_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >*
PoolStatisticItem::mutable_area_point() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.PoolStatisticItem.area_point)
  return &area_point_;
}
inline const ::zjchain::pools::protobuf::AreaInfo& PoolStatisticItem::_internal_area_point(int index) const {
  return area_point_.Get(index);
}
inline const ::zjchain::pools::protobuf::AreaInfo& PoolStatisticItem::area_point(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.PoolStatisticItem.area_point)
  return _internal_area_point(index);
}
inline ::zjchain::pools::protobuf::AreaInfo* PoolStatisticItem::_internal_add_area_point() {
  return area_point_.Add();
}
inline ::zjchain::pools::protobuf::AreaInfo* PoolStatisticItem::add_area_point() {
  ::zjchain::pools::protobuf::AreaInfo* _add = _internal_add_area_point();
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.PoolStatisticItem.area_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::AreaInfo >&
PoolStatisticItem::area_point() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.PoolStatisticItem.area_point)
  return area_point_;
}

// -------------------------------------------------------------------

// JoinElectNode

// optional bytes pubkey = 1;
inline bool JoinElectNode::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JoinElectNode::has_pubkey() const {
  return _internal_has_pubkey();
}
inline void JoinElectNode::clear_pubkey() {
  pubkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinElectNode::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.JoinElectNode.pubkey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinElectNode::set_pubkey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pubkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.JoinElectNode.pubkey)
}
inline std::string* JoinElectNode::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.JoinElectNode.pubkey)
  return _s;
}
inline const std::string& JoinElectNode::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void JoinElectNode::_internal_set_pubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinElectNode::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000001u;
  return pubkey_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinElectNode::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.JoinElectNode.pubkey)
  if (!_internal_has_pubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = pubkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void JoinElectNode::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pubkey_.SetAllocated(pubkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.JoinElectNode.pubkey)
}

// optional uint64 stoke = 2;
inline bool JoinElectNode::_internal_has_stoke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JoinElectNode::has_stoke() const {
  return _internal_has_stoke();
}
inline void JoinElectNode::clear_stoke() {
  stoke_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t JoinElectNode::_internal_stoke() const {
  return stoke_;
}
inline uint64_t JoinElectNode::stoke() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.JoinElectNode.stoke)
  return _internal_stoke();
}
inline void JoinElectNode::_internal_set_stoke(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  stoke_ = value;
}
inline void JoinElectNode::set_stoke(uint64_t value) {
  _internal_set_stoke(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.JoinElectNode.stoke)
}

// optional uint32 shard = 3;
inline bool JoinElectNode::_internal_has_shard() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JoinElectNode::has_shard() const {
  return _internal_has_shard();
}
inline void JoinElectNode::clear_shard() {
  shard_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t JoinElectNode::_internal_shard() const {
  return shard_;
}
inline uint32_t JoinElectNode::shard() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.JoinElectNode.shard)
  return _internal_shard();
}
inline void JoinElectNode::_internal_set_shard(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  shard_ = value;
}
inline void JoinElectNode::set_shard(uint32_t value) {
  _internal_set_shard(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.JoinElectNode.shard)
}

// optional int32 elect_pos = 4;
inline bool JoinElectNode::_internal_has_elect_pos() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JoinElectNode::has_elect_pos() const {
  return _internal_has_elect_pos();
}
inline void JoinElectNode::clear_elect_pos() {
  elect_pos_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t JoinElectNode::_internal_elect_pos() const {
  return elect_pos_;
}
inline int32_t JoinElectNode::elect_pos() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.JoinElectNode.elect_pos)
  return _internal_elect_pos();
}
inline void JoinElectNode::_internal_set_elect_pos(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  elect_pos_ = value;
}
inline void JoinElectNode::set_elect_pos(int32_t value) {
  _internal_set_elect_pos(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.JoinElectNode.elect_pos)
}

// -------------------------------------------------------------------

// CrossShardStatisticItem

// optional uint32 src_shard = 1;
inline bool CrossShardStatisticItem::_internal_has_src_shard() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CrossShardStatisticItem::has_src_shard() const {
  return _internal_has_src_shard();
}
inline void CrossShardStatisticItem::clear_src_shard() {
  src_shard_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CrossShardStatisticItem::_internal_src_shard() const {
  return src_shard_;
}
inline uint32_t CrossShardStatisticItem::src_shard() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.CrossShardStatisticItem.src_shard)
  return _internal_src_shard();
}
inline void CrossShardStatisticItem::_internal_set_src_shard(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  src_shard_ = value;
}
inline void CrossShardStatisticItem::set_src_shard(uint32_t value) {
  _internal_set_src_shard(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.CrossShardStatisticItem.src_shard)
}

// optional uint32 src_pool = 2;
inline bool CrossShardStatisticItem::_internal_has_src_pool() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CrossShardStatisticItem::has_src_pool() const {
  return _internal_has_src_pool();
}
inline void CrossShardStatisticItem::clear_src_pool() {
  src_pool_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CrossShardStatisticItem::_internal_src_pool() const {
  return src_pool_;
}
inline uint32_t CrossShardStatisticItem::src_pool() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.CrossShardStatisticItem.src_pool)
  return _internal_src_pool();
}
inline void CrossShardStatisticItem::_internal_set_src_pool(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  src_pool_ = value;
}
inline void CrossShardStatisticItem::set_src_pool(uint32_t value) {
  _internal_set_src_pool(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.CrossShardStatisticItem.src_pool)
}

// optional uint64 height = 3;
inline bool CrossShardStatisticItem::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CrossShardStatisticItem::has_height() const {
  return _internal_has_height();
}
inline void CrossShardStatisticItem::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CrossShardStatisticItem::_internal_height() const {
  return height_;
}
inline uint64_t CrossShardStatisticItem::height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.CrossShardStatisticItem.height)
  return _internal_height();
}
inline void CrossShardStatisticItem::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void CrossShardStatisticItem::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.CrossShardStatisticItem.height)
}

// optional uint32 des_shard = 4;
inline bool CrossShardStatisticItem::_internal_has_des_shard() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CrossShardStatisticItem::has_des_shard() const {
  return _internal_has_des_shard();
}
inline void CrossShardStatisticItem::clear_des_shard() {
  des_shard_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CrossShardStatisticItem::_internal_des_shard() const {
  return des_shard_;
}
inline uint32_t CrossShardStatisticItem::des_shard() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.CrossShardStatisticItem.des_shard)
  return _internal_des_shard();
}
inline void CrossShardStatisticItem::_internal_set_des_shard(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  des_shard_ = value;
}
inline void CrossShardStatisticItem::set_des_shard(uint32_t value) {
  _internal_set_des_shard(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.CrossShardStatisticItem.des_shard)
}

// -------------------------------------------------------------------

// CrossShardStatistic

// repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
inline int CrossShardStatistic::_internal_crosses_size() const {
  return crosses_.size();
}
inline int CrossShardStatistic::crosses_size() const {
  return _internal_crosses_size();
}
inline void CrossShardStatistic::clear_crosses() {
  crosses_.Clear();
}
inline ::zjchain::pools::protobuf::CrossShardStatisticItem* CrossShardStatistic::mutable_crosses(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.CrossShardStatistic.crosses)
  return crosses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >*
CrossShardStatistic::mutable_crosses() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.CrossShardStatistic.crosses)
  return &crosses_;
}
inline const ::zjchain::pools::protobuf::CrossShardStatisticItem& CrossShardStatistic::_internal_crosses(int index) const {
  return crosses_.Get(index);
}
inline const ::zjchain::pools::protobuf::CrossShardStatisticItem& CrossShardStatistic::crosses(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.CrossShardStatistic.crosses)
  return _internal_crosses(index);
}
inline ::zjchain::pools::protobuf::CrossShardStatisticItem* CrossShardStatistic::_internal_add_crosses() {
  return crosses_.Add();
}
inline ::zjchain::pools::protobuf::CrossShardStatisticItem* CrossShardStatistic::add_crosses() {
  ::zjchain::pools::protobuf::CrossShardStatisticItem* _add = _internal_add_crosses();
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.CrossShardStatistic.crosses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::CrossShardStatisticItem >&
CrossShardStatistic::crosses() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.CrossShardStatistic.crosses)
  return crosses_;
}

// optional uint64 elect_height = 2;
inline bool CrossShardStatistic::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CrossShardStatistic::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void CrossShardStatistic::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CrossShardStatistic::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t CrossShardStatistic::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.CrossShardStatistic.elect_height)
  return _internal_elect_height();
}
inline void CrossShardStatistic::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  elect_height_ = value;
}
inline void CrossShardStatistic::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.CrossShardStatistic.elect_height)
}

// -------------------------------------------------------------------

// ElectStatistic

// repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
inline int ElectStatistic::_internal_statistics_size() const {
  return statistics_.size();
}
inline int ElectStatistic::statistics_size() const {
  return _internal_statistics_size();
}
inline void ElectStatistic::clear_statistics() {
  statistics_.Clear();
}
inline ::zjchain::pools::protobuf::PoolStatisticItem* ElectStatistic::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ElectStatistic.statistics)
  return statistics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >*
ElectStatistic::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ElectStatistic.statistics)
  return &statistics_;
}
inline const ::zjchain::pools::protobuf::PoolStatisticItem& ElectStatistic::_internal_statistics(int index) const {
  return statistics_.Get(index);
}
inline const ::zjchain::pools::protobuf::PoolStatisticItem& ElectStatistic::statistics(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.statistics)
  return _internal_statistics(index);
}
inline ::zjchain::pools::protobuf::PoolStatisticItem* ElectStatistic::_internal_add_statistics() {
  return statistics_.Add();
}
inline ::zjchain::pools::protobuf::PoolStatisticItem* ElectStatistic::add_statistics() {
  ::zjchain::pools::protobuf::PoolStatisticItem* _add = _internal_add_statistics();
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ElectStatistic.statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::PoolStatisticItem >&
ElectStatistic::statistics() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ElectStatistic.statistics)
  return statistics_;
}

// optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
inline bool ElectStatistic::_internal_has_heights() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || heights_ != nullptr);
  return value;
}
inline bool ElectStatistic::has_heights() const {
  return _internal_has_heights();
}
inline void ElectStatistic::clear_heights() {
  if (heights_ != nullptr) heights_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::pools::protobuf::StatisticTxItem& ElectStatistic::_internal_heights() const {
  const ::zjchain::pools::protobuf::StatisticTxItem* p = heights_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::pools::protobuf::StatisticTxItem&>(
      ::zjchain::pools::protobuf::_StatisticTxItem_default_instance_);
}
inline const ::zjchain::pools::protobuf::StatisticTxItem& ElectStatistic::heights() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.heights)
  return _internal_heights();
}
inline void ElectStatistic::unsafe_arena_set_allocated_heights(
    ::zjchain::pools::protobuf::StatisticTxItem* heights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heights_);
  }
  heights_ = heights;
  if (heights) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.pools.protobuf.ElectStatistic.heights)
}
inline ::zjchain::pools::protobuf::StatisticTxItem* ElectStatistic::release_heights() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::pools::protobuf::StatisticTxItem* temp = heights_;
  heights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* ElectStatistic::unsafe_arena_release_heights() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ElectStatistic.heights)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::pools::protobuf::StatisticTxItem* temp = heights_;
  heights_ = nullptr;
  return temp;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* ElectStatistic::_internal_mutable_heights() {
  _has_bits_[0] |= 0x00000001u;
  if (heights_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::pools::protobuf::StatisticTxItem>(GetArenaForAllocation());
    heights_ = p;
  }
  return heights_;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* ElectStatistic::mutable_heights() {
  ::zjchain::pools::protobuf::StatisticTxItem* _msg = _internal_mutable_heights();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ElectStatistic.heights)
  return _msg;
}
inline void ElectStatistic::set_allocated_heights(::zjchain::pools::protobuf::StatisticTxItem* heights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete heights_;
  }
  if (heights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heights);
    if (message_arena != submessage_arena) {
      heights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  heights_ = heights;
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ElectStatistic.heights)
}

// repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
inline int ElectStatistic::_internal_join_elect_nodes_size() const {
  return join_elect_nodes_.size();
}
inline int ElectStatistic::join_elect_nodes_size() const {
  return _internal_join_elect_nodes_size();
}
inline void ElectStatistic::clear_join_elect_nodes() {
  join_elect_nodes_.Clear();
}
inline ::zjchain::pools::protobuf::JoinElectNode* ElectStatistic::mutable_join_elect_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ElectStatistic.join_elect_nodes)
  return join_elect_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >*
ElectStatistic::mutable_join_elect_nodes() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ElectStatistic.join_elect_nodes)
  return &join_elect_nodes_;
}
inline const ::zjchain::pools::protobuf::JoinElectNode& ElectStatistic::_internal_join_elect_nodes(int index) const {
  return join_elect_nodes_.Get(index);
}
inline const ::zjchain::pools::protobuf::JoinElectNode& ElectStatistic::join_elect_nodes(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.join_elect_nodes)
  return _internal_join_elect_nodes(index);
}
inline ::zjchain::pools::protobuf::JoinElectNode* ElectStatistic::_internal_add_join_elect_nodes() {
  return join_elect_nodes_.Add();
}
inline ::zjchain::pools::protobuf::JoinElectNode* ElectStatistic::add_join_elect_nodes() {
  ::zjchain::pools::protobuf::JoinElectNode* _add = _internal_add_join_elect_nodes();
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ElectStatistic.join_elect_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::JoinElectNode >&
ElectStatistic::join_elect_nodes() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ElectStatistic.join_elect_nodes)
  return join_elect_nodes_;
}

// optional uint32 sharding_id = 4;
inline bool ElectStatistic::_internal_has_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ElectStatistic::has_sharding_id() const {
  return _internal_has_sharding_id();
}
inline void ElectStatistic::clear_sharding_id() {
  sharding_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ElectStatistic::_internal_sharding_id() const {
  return sharding_id_;
}
inline uint32_t ElectStatistic::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.sharding_id)
  return _internal_sharding_id();
}
inline void ElectStatistic::_internal_set_sharding_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  sharding_id_ = value;
}
inline void ElectStatistic::set_sharding_id(uint32_t value) {
  _internal_set_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ElectStatistic.sharding_id)
}

// optional uint64 gas_amount = 5;
inline bool ElectStatistic::_internal_has_gas_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ElectStatistic::has_gas_amount() const {
  return _internal_has_gas_amount();
}
inline void ElectStatistic::clear_gas_amount() {
  gas_amount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ElectStatistic::_internal_gas_amount() const {
  return gas_amount_;
}
inline uint64_t ElectStatistic::gas_amount() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.gas_amount)
  return _internal_gas_amount();
}
inline void ElectStatistic::_internal_set_gas_amount(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  gas_amount_ = value;
}
inline void ElectStatistic::set_gas_amount(uint64_t value) {
  _internal_set_gas_amount(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ElectStatistic.gas_amount)
}

// repeated uint32 lof_leaders = 6;
inline int ElectStatistic::_internal_lof_leaders_size() const {
  return lof_leaders_.size();
}
inline int ElectStatistic::lof_leaders_size() const {
  return _internal_lof_leaders_size();
}
inline void ElectStatistic::clear_lof_leaders() {
  lof_leaders_.Clear();
}
inline uint32_t ElectStatistic::_internal_lof_leaders(int index) const {
  return lof_leaders_.Get(index);
}
inline uint32_t ElectStatistic::lof_leaders(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.lof_leaders)
  return _internal_lof_leaders(index);
}
inline void ElectStatistic::set_lof_leaders(int index, uint32_t value) {
  lof_leaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ElectStatistic.lof_leaders)
}
inline void ElectStatistic::_internal_add_lof_leaders(uint32_t value) {
  lof_leaders_.Add(value);
}
inline void ElectStatistic::add_lof_leaders(uint32_t value) {
  _internal_add_lof_leaders(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ElectStatistic.lof_leaders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ElectStatistic::_internal_lof_leaders() const {
  return lof_leaders_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ElectStatistic::lof_leaders() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ElectStatistic.lof_leaders)
  return _internal_lof_leaders();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ElectStatistic::_internal_mutable_lof_leaders() {
  return &lof_leaders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ElectStatistic::mutable_lof_leaders() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ElectStatistic.lof_leaders)
  return _internal_mutable_lof_leaders();
}

// optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
inline bool ElectStatistic::_internal_has_cross() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cross_ != nullptr);
  return value;
}
inline bool ElectStatistic::has_cross() const {
  return _internal_has_cross();
}
inline void ElectStatistic::clear_cross() {
  if (cross_ != nullptr) cross_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::pools::protobuf::CrossShardStatistic& ElectStatistic::_internal_cross() const {
  const ::zjchain::pools::protobuf::CrossShardStatistic* p = cross_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::pools::protobuf::CrossShardStatistic&>(
      ::zjchain::pools::protobuf::_CrossShardStatistic_default_instance_);
}
inline const ::zjchain::pools::protobuf::CrossShardStatistic& ElectStatistic::cross() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.cross)
  return _internal_cross();
}
inline void ElectStatistic::unsafe_arena_set_allocated_cross(
    ::zjchain::pools::protobuf::CrossShardStatistic* cross) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cross_);
  }
  cross_ = cross;
  if (cross) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.pools.protobuf.ElectStatistic.cross)
}
inline ::zjchain::pools::protobuf::CrossShardStatistic* ElectStatistic::release_cross() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::pools::protobuf::CrossShardStatistic* temp = cross_;
  cross_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::pools::protobuf::CrossShardStatistic* ElectStatistic::unsafe_arena_release_cross() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ElectStatistic.cross)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::pools::protobuf::CrossShardStatistic* temp = cross_;
  cross_ = nullptr;
  return temp;
}
inline ::zjchain::pools::protobuf::CrossShardStatistic* ElectStatistic::_internal_mutable_cross() {
  _has_bits_[0] |= 0x00000002u;
  if (cross_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::pools::protobuf::CrossShardStatistic>(GetArenaForAllocation());
    cross_ = p;
  }
  return cross_;
}
inline ::zjchain::pools::protobuf::CrossShardStatistic* ElectStatistic::mutable_cross() {
  ::zjchain::pools::protobuf::CrossShardStatistic* _msg = _internal_mutable_cross();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ElectStatistic.cross)
  return _msg;
}
inline void ElectStatistic::set_allocated_cross(::zjchain::pools::protobuf::CrossShardStatistic* cross) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cross_;
  }
  if (cross) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cross);
    if (message_arena != submessage_arena) {
      cross = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cross_ = cross;
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ElectStatistic.cross)
}

// optional uint64 elect_height = 8;
inline bool ElectStatistic::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ElectStatistic::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void ElectStatistic::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ElectStatistic::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t ElectStatistic::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ElectStatistic.elect_height)
  return _internal_elect_height();
}
inline void ElectStatistic::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  elect_height_ = value;
}
inline void ElectStatistic::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ElectStatistic.elect_height)
}

// -------------------------------------------------------------------

// SyncPoolsMaxHeight

// optional bool req = 1 [default = false];
inline bool SyncPoolsMaxHeight::_internal_has_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncPoolsMaxHeight::has_req() const {
  return _internal_has_req();
}
inline void SyncPoolsMaxHeight::clear_req() {
  req_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SyncPoolsMaxHeight::_internal_req() const {
  return req_;
}
inline bool SyncPoolsMaxHeight::req() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.SyncPoolsMaxHeight.req)
  return _internal_req();
}
inline void SyncPoolsMaxHeight::_internal_set_req(bool value) {
  _has_bits_[0] |= 0x00000001u;
  req_ = value;
}
inline void SyncPoolsMaxHeight::set_req(bool value) {
  _internal_set_req(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.SyncPoolsMaxHeight.req)
}

// repeated uint64 heights = 2;
inline int SyncPoolsMaxHeight::_internal_heights_size() const {
  return heights_.size();
}
inline int SyncPoolsMaxHeight::heights_size() const {
  return _internal_heights_size();
}
inline void SyncPoolsMaxHeight::clear_heights() {
  heights_.Clear();
}
inline uint64_t SyncPoolsMaxHeight::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline uint64_t SyncPoolsMaxHeight::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.SyncPoolsMaxHeight.heights)
  return _internal_heights(index);
}
inline void SyncPoolsMaxHeight::set_heights(int index, uint64_t value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.SyncPoolsMaxHeight.heights)
}
inline void SyncPoolsMaxHeight::_internal_add_heights(uint64_t value) {
  heights_.Add(value);
}
inline void SyncPoolsMaxHeight::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.SyncPoolsMaxHeight.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SyncPoolsMaxHeight::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SyncPoolsMaxHeight::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.SyncPoolsMaxHeight.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SyncPoolsMaxHeight::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SyncPoolsMaxHeight::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.SyncPoolsMaxHeight.heights)
  return _internal_mutable_heights();
}

// repeated uint64 cross_heights = 3;
inline int SyncPoolsMaxHeight::_internal_cross_heights_size() const {
  return cross_heights_.size();
}
inline int SyncPoolsMaxHeight::cross_heights_size() const {
  return _internal_cross_heights_size();
}
inline void SyncPoolsMaxHeight::clear_cross_heights() {
  cross_heights_.Clear();
}
inline uint64_t SyncPoolsMaxHeight::_internal_cross_heights(int index) const {
  return cross_heights_.Get(index);
}
inline uint64_t SyncPoolsMaxHeight::cross_heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.SyncPoolsMaxHeight.cross_heights)
  return _internal_cross_heights(index);
}
inline void SyncPoolsMaxHeight::set_cross_heights(int index, uint64_t value) {
  cross_heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.SyncPoolsMaxHeight.cross_heights)
}
inline void SyncPoolsMaxHeight::_internal_add_cross_heights(uint64_t value) {
  cross_heights_.Add(value);
}
inline void SyncPoolsMaxHeight::add_cross_heights(uint64_t value) {
  _internal_add_cross_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.SyncPoolsMaxHeight.cross_heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SyncPoolsMaxHeight::_internal_cross_heights() const {
  return cross_heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SyncPoolsMaxHeight::cross_heights() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.SyncPoolsMaxHeight.cross_heights)
  return _internal_cross_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SyncPoolsMaxHeight::_internal_mutable_cross_heights() {
  return &cross_heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SyncPoolsMaxHeight::mutable_cross_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.SyncPoolsMaxHeight.cross_heights)
  return _internal_mutable_cross_heights();
}

// -------------------------------------------------------------------

// InvalidBftMessage

// optional uint32 pool_index = 1;
inline bool InvalidBftMessage::_internal_has_pool_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InvalidBftMessage::has_pool_index() const {
  return _internal_has_pool_index();
}
inline void InvalidBftMessage::clear_pool_index() {
  pool_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t InvalidBftMessage::_internal_pool_index() const {
  return pool_index_;
}
inline uint32_t InvalidBftMessage::pool_index() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.InvalidBftMessage.pool_index)
  return _internal_pool_index();
}
inline void InvalidBftMessage::_internal_set_pool_index(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  pool_index_ = value;
}
inline void InvalidBftMessage::set_pool_index(uint32_t value) {
  _internal_set_pool_index(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.InvalidBftMessage.pool_index)
}

// optional bytes gid = 2;
inline bool InvalidBftMessage::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InvalidBftMessage::has_gid() const {
  return _internal_has_gid();
}
inline void InvalidBftMessage::clear_gid() {
  gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvalidBftMessage::gid() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.InvalidBftMessage.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvalidBftMessage::set_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.InvalidBftMessage.gid)
}
inline std::string* InvalidBftMessage::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.InvalidBftMessage.gid)
  return _s;
}
inline const std::string& InvalidBftMessage::_internal_gid() const {
  return gid_.Get();
}
inline void InvalidBftMessage::_internal_set_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gid_.Set(value, GetArenaForAllocation());
}
inline std::string* InvalidBftMessage::_internal_mutable_gid() {
  _has_bits_[0] |= 0x00000001u;
  return gid_.Mutable(GetArenaForAllocation());
}
inline std::string* InvalidBftMessage::release_gid() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.InvalidBftMessage.gid)
  if (!_internal_has_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvalidBftMessage::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gid_.SetAllocated(gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.InvalidBftMessage.gid)
}

// optional bytes hash = 3;
inline bool InvalidBftMessage::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InvalidBftMessage::has_hash() const {
  return _internal_has_hash();
}
inline void InvalidBftMessage::clear_hash() {
  hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InvalidBftMessage::hash() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.InvalidBftMessage.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvalidBftMessage::set_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.InvalidBftMessage.hash)
}
inline std::string* InvalidBftMessage::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.InvalidBftMessage.hash)
  return _s;
}
inline const std::string& InvalidBftMessage::_internal_hash() const {
  return hash_.Get();
}
inline void InvalidBftMessage::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.Set(value, GetArenaForAllocation());
}
inline std::string* InvalidBftMessage::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  return hash_.Mutable(GetArenaForAllocation());
}
inline std::string* InvalidBftMessage::release_hash() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.InvalidBftMessage.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InvalidBftMessage::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.InvalidBftMessage.hash)
}

// optional bool precommit = 4;
inline bool InvalidBftMessage::_internal_has_precommit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InvalidBftMessage::has_precommit() const {
  return _internal_has_precommit();
}
inline void InvalidBftMessage::clear_precommit() {
  precommit_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool InvalidBftMessage::_internal_precommit() const {
  return precommit_;
}
inline bool InvalidBftMessage::precommit() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.InvalidBftMessage.precommit)
  return _internal_precommit();
}
inline void InvalidBftMessage::_internal_set_precommit(bool value) {
  _has_bits_[0] |= 0x00000008u;
  precommit_ = value;
}
inline void InvalidBftMessage::set_precommit(bool value) {
  _internal_set_precommit(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.InvalidBftMessage.precommit)
}

// optional uint64 height = 5;
inline bool InvalidBftMessage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InvalidBftMessage::has_height() const {
  return _internal_has_height();
}
inline void InvalidBftMessage::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t InvalidBftMessage::_internal_height() const {
  return height_;
}
inline uint64_t InvalidBftMessage::height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.InvalidBftMessage.height)
  return _internal_height();
}
inline void InvalidBftMessage::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void InvalidBftMessage::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.InvalidBftMessage.height)
}

// -------------------------------------------------------------------

// TxMessage

// optional uint32 version = 1;
inline bool TxMessage::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TxMessage::has_version() const {
  return _internal_has_version();
}
inline void TxMessage::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t TxMessage::_internal_version() const {
  return version_;
}
inline uint32_t TxMessage::version() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.version)
  return _internal_version();
}
inline void TxMessage::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  version_ = value;
}
inline void TxMessage::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.version)
}

// optional bytes gid = 2;
inline bool TxMessage::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TxMessage::has_gid() const {
  return _internal_has_gid();
}
inline void TxMessage::clear_gid() {
  gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TxMessage::gid() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMessage::set_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.gid)
}
inline std::string* TxMessage::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.gid)
  return _s;
}
inline const std::string& TxMessage::_internal_gid() const {
  return gid_.Get();
}
inline void TxMessage::_internal_set_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gid_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMessage::_internal_mutable_gid() {
  _has_bits_[0] |= 0x00000001u;
  return gid_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMessage::release_gid() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.gid)
  if (!_internal_has_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxMessage::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gid_.SetAllocated(gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.gid)
}

// optional bytes pubkey = 3;
inline bool TxMessage::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TxMessage::has_pubkey() const {
  return _internal_has_pubkey();
}
inline void TxMessage::clear_pubkey() {
  pubkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TxMessage::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.pubkey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMessage::set_pubkey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pubkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.pubkey)
}
inline std::string* TxMessage::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.pubkey)
  return _s;
}
inline const std::string& TxMessage::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void TxMessage::_internal_set_pubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMessage::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000002u;
  return pubkey_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMessage::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.pubkey)
  if (!_internal_has_pubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = pubkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxMessage::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pubkey_.SetAllocated(pubkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.pubkey)
}

// optional uint64 gas_limit = 4;
inline bool TxMessage::_internal_has_gas_limit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TxMessage::has_gas_limit() const {
  return _internal_has_gas_limit();
}
inline void TxMessage::clear_gas_limit() {
  gas_limit_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t TxMessage::_internal_gas_limit() const {
  return gas_limit_;
}
inline uint64_t TxMessage::gas_limit() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.gas_limit)
  return _internal_gas_limit();
}
inline void TxMessage::_internal_set_gas_limit(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  gas_limit_ = value;
}
inline void TxMessage::set_gas_limit(uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.gas_limit)
}

// optional uint64 gas_price = 5;
inline bool TxMessage::_internal_has_gas_price() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TxMessage::has_gas_price() const {
  return _internal_has_gas_price();
}
inline void TxMessage::clear_gas_price() {
  gas_price_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t TxMessage::_internal_gas_price() const {
  return gas_price_;
}
inline uint64_t TxMessage::gas_price() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.gas_price)
  return _internal_gas_price();
}
inline void TxMessage::_internal_set_gas_price(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  gas_price_ = value;
}
inline void TxMessage::set_gas_price(uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.gas_price)
}

// optional bytes key = 6;
inline bool TxMessage::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TxMessage::has_key() const {
  return _internal_has_key();
}
inline void TxMessage::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TxMessage::key() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMessage::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.key)
}
inline std::string* TxMessage::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.key)
  return _s;
}
inline const std::string& TxMessage::_internal_key() const {
  return key_.Get();
}
inline void TxMessage::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMessage::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000004u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMessage::release_key() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxMessage::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.key)
}

// optional bytes value = 7;
inline bool TxMessage::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TxMessage::has_value() const {
  return _internal_has_value();
}
inline void TxMessage::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TxMessage::value() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMessage::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.value)
}
inline std::string* TxMessage::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.value)
  return _s;
}
inline const std::string& TxMessage::_internal_value() const {
  return value_.Get();
}
inline void TxMessage::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMessage::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000008u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMessage::release_value() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.value)
}

// optional bytes to = 8;
inline bool TxMessage::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TxMessage::has_to() const {
  return _internal_has_to();
}
inline void TxMessage::clear_to() {
  to_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TxMessage::to() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMessage::set_to(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 to_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.to)
}
inline std::string* TxMessage::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.to)
  return _s;
}
inline const std::string& TxMessage::_internal_to() const {
  return to_.Get();
}
inline void TxMessage::_internal_set_to(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  to_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMessage::_internal_mutable_to() {
  _has_bits_[0] |= 0x00000010u;
  return to_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMessage::release_to() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.to)
  if (!_internal_has_to()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = to_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxMessage::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.to)
}

// optional uint64 amount = 9;
inline bool TxMessage::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TxMessage::has_amount() const {
  return _internal_has_amount();
}
inline void TxMessage::clear_amount() {
  amount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t TxMessage::_internal_amount() const {
  return amount_;
}
inline uint64_t TxMessage::amount() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.amount)
  return _internal_amount();
}
inline void TxMessage::_internal_set_amount(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  amount_ = value;
}
inline void TxMessage::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.amount)
}

// optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
inline bool TxMessage::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TxMessage::has_step() const {
  return _internal_has_step();
}
inline void TxMessage::clear_step() {
  step_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::zjchain::pools::protobuf::StepType TxMessage::_internal_step() const {
  return static_cast< ::zjchain::pools::protobuf::StepType >(step_);
}
inline ::zjchain::pools::protobuf::StepType TxMessage::step() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.step)
  return _internal_step();
}
inline void TxMessage::_internal_set_step(::zjchain::pools::protobuf::StepType value) {
  assert(::zjchain::pools::protobuf::StepType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  step_ = value;
}
inline void TxMessage::set_step(::zjchain::pools::protobuf::StepType value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.step)
}

// optional uint64 contract_prepayment = 11;
inline bool TxMessage::_internal_has_contract_prepayment() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TxMessage::has_contract_prepayment() const {
  return _internal_has_contract_prepayment();
}
inline void TxMessage::clear_contract_prepayment() {
  contract_prepayment_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t TxMessage::_internal_contract_prepayment() const {
  return contract_prepayment_;
}
inline uint64_t TxMessage::contract_prepayment() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.contract_prepayment)
  return _internal_contract_prepayment();
}
inline void TxMessage::_internal_set_contract_prepayment(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  contract_prepayment_ = value;
}
inline void TxMessage::set_contract_prepayment(uint64_t value) {
  _internal_set_contract_prepayment(value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.contract_prepayment)
}

// optional bytes contract_code = 12;
inline bool TxMessage::_internal_has_contract_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TxMessage::has_contract_code() const {
  return _internal_has_contract_code();
}
inline void TxMessage::clear_contract_code() {
  contract_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TxMessage::contract_code() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.contract_code)
  return _internal_contract_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMessage::set_contract_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 contract_code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.contract_code)
}
inline std::string* TxMessage::mutable_contract_code() {
  std::string* _s = _internal_mutable_contract_code();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.contract_code)
  return _s;
}
inline const std::string& TxMessage::_internal_contract_code() const {
  return contract_code_.Get();
}
inline void TxMessage::_internal_set_contract_code(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  contract_code_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMessage::_internal_mutable_contract_code() {
  _has_bits_[0] |= 0x00000020u;
  return contract_code_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMessage::release_contract_code() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.contract_code)
  if (!_internal_has_contract_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = contract_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_code_.IsDefault()) {
    contract_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxMessage::set_allocated_contract_code(std::string* contract_code) {
  if (contract_code != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  contract_code_.SetAllocated(contract_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_code_.IsDefault()) {
    contract_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.contract_code)
}

// optional bytes contract_input = 13;
inline bool TxMessage::_internal_has_contract_input() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TxMessage::has_contract_input() const {
  return _internal_has_contract_input();
}
inline void TxMessage::clear_contract_input() {
  contract_input_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TxMessage::contract_input() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.contract_input)
  return _internal_contract_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxMessage::set_contract_input(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 contract_input_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.contract_input)
}
inline std::string* TxMessage::mutable_contract_input() {
  std::string* _s = _internal_mutable_contract_input();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.contract_input)
  return _s;
}
inline const std::string& TxMessage::_internal_contract_input() const {
  return contract_input_.Get();
}
inline void TxMessage::_internal_set_contract_input(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  contract_input_.Set(value, GetArenaForAllocation());
}
inline std::string* TxMessage::_internal_mutable_contract_input() {
  _has_bits_[0] |= 0x00000040u;
  return contract_input_.Mutable(GetArenaForAllocation());
}
inline std::string* TxMessage::release_contract_input() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.contract_input)
  if (!_internal_has_contract_input()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = contract_input_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_input_.IsDefault()) {
    contract_input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxMessage::set_allocated_contract_input(std::string* contract_input) {
  if (contract_input != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  contract_input_.SetAllocated(contract_input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_input_.IsDefault()) {
    contract_input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.contract_input)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace pools
}  // namespace zjchain

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zjchain::pools::protobuf::StepType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zjchain::pools::protobuf::StepType>() {
  return ::zjchain::pools::protobuf::StepType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fpools_2eproto
