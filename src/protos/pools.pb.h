// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/pools.proto

#ifndef PROTOBUF_INCLUDED_protos_2fpools_2eproto
#define PROTOBUF_INCLUDED_protos_2fpools_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fpools_2eproto 

namespace protobuf_protos_2fpools_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fpools_2eproto
namespace zjchain {
namespace pools {
namespace protobuf {
class ToTxHeights;
class ToTxHeightsDefaultTypeInternal;
extern ToTxHeightsDefaultTypeInternal _ToTxHeights_default_instance_;
class ToTxMessage;
class ToTxMessageDefaultTypeInternal;
extern ToTxMessageDefaultTypeInternal _ToTxMessage_default_instance_;
class ToTxMessageItem;
class ToTxMessageItemDefaultTypeInternal;
extern ToTxMessageItemDefaultTypeInternal _ToTxMessageItem_default_instance_;
class TxMessage;
class TxMessageDefaultTypeInternal;
extern TxMessageDefaultTypeInternal _TxMessage_default_instance_;
}  // namespace protobuf
}  // namespace pools
}  // namespace zjchain
namespace google {
namespace protobuf {
template<> ::zjchain::pools::protobuf::ToTxHeights* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ToTxHeights>(Arena*);
template<> ::zjchain::pools::protobuf::ToTxMessage* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ToTxMessage>(Arena*);
template<> ::zjchain::pools::protobuf::ToTxMessageItem* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::ToTxMessageItem>(Arena*);
template<> ::zjchain::pools::protobuf::TxMessage* Arena::CreateMaybeMessage<::zjchain::pools::protobuf::TxMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zjchain {
namespace pools {
namespace protobuf {

enum StepType {
  kNormalFrom = 0,
  kNormalTo = 1,
  kContractUserCall = 2,
  kContractCallExcute = 3,
  kContractBroadcast = 4,
  kConsensusRootElectShard = 5,
  kConsensusRootTimeBlock = 6,
  kConsensusFinalStatistic = 7,
  kConsensusCreateGenesisAcount = 8
};
bool StepType_IsValid(int value);
const StepType StepType_MIN = kNormalFrom;
const StepType StepType_MAX = kConsensusCreateGenesisAcount;
const int StepType_ARRAYSIZE = StepType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StepType_descriptor();
inline const ::std::string& StepType_Name(StepType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StepType_descriptor(), value);
}
inline bool StepType_Parse(
    const ::std::string& name, StepType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StepType>(
    StepType_descriptor(), name, value);
}
// ===================================================================

class ToTxHeights : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ToTxHeights) */ {
 public:
  ToTxHeights();
  virtual ~ToTxHeights();

  ToTxHeights(const ToTxHeights& from);

  inline ToTxHeights& operator=(const ToTxHeights& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToTxHeights(ToTxHeights&& from) noexcept
    : ToTxHeights() {
    *this = ::std::move(from);
  }

  inline ToTxHeights& operator=(ToTxHeights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTxHeights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToTxHeights* internal_default_instance() {
    return reinterpret_cast<const ToTxHeights*>(
               &_ToTxHeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ToTxHeights* other);
  friend void swap(ToTxHeights& a, ToTxHeights& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToTxHeights* New() const final {
    return CreateMaybeMessage<ToTxHeights>(NULL);
  }

  ToTxHeights* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToTxHeights>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToTxHeights& from);
  void MergeFrom(const ToTxHeights& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToTxHeights* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 heights = 2;
  int heights_size() const;
  void clear_heights();
  static const int kHeightsFieldNumber = 2;
  ::google::protobuf::uint64 heights(int index) const;
  void set_heights(int index, ::google::protobuf::uint64 value);
  void add_heights(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // optional bytes tos_hash = 4;
  bool has_tos_hash() const;
  void clear_tos_hash();
  static const int kTosHashFieldNumber = 4;
  const ::std::string& tos_hash() const;
  void set_tos_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tos_hash(::std::string&& value);
  #endif
  void set_tos_hash(const char* value);
  void set_tos_hash(const void* value, size_t size);
  ::std::string* mutable_tos_hash();
  ::std::string* release_tos_hash();
  void set_allocated_tos_hash(::std::string* tos_hash);

  // optional uint64 block_height = 3;
  bool has_block_height() const;
  void clear_block_height();
  static const int kBlockHeightFieldNumber = 3;
  ::google::protobuf::uint64 block_height() const;
  void set_block_height(::google::protobuf::uint64 value);

  // optional uint32 sharding_id = 1;
  bool has_sharding_id() const;
  void clear_sharding_id();
  static const int kShardingIdFieldNumber = 1;
  ::google::protobuf::uint32 sharding_id() const;
  void set_sharding_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxHeights)
 private:
  void set_has_sharding_id();
  void clear_has_sharding_id();
  void set_has_block_height();
  void clear_has_block_height();
  void set_has_tos_hash();
  void clear_has_tos_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;
  ::google::protobuf::internal::ArenaStringPtr tos_hash_;
  ::google::protobuf::uint64 block_height_;
  ::google::protobuf::uint32 sharding_id_;
  friend struct ::protobuf_protos_2fpools_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ToTxMessageItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ToTxMessageItem) */ {
 public:
  ToTxMessageItem();
  virtual ~ToTxMessageItem();

  ToTxMessageItem(const ToTxMessageItem& from);

  inline ToTxMessageItem& operator=(const ToTxMessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToTxMessageItem(ToTxMessageItem&& from) noexcept
    : ToTxMessageItem() {
    *this = ::std::move(from);
  }

  inline ToTxMessageItem& operator=(ToTxMessageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTxMessageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToTxMessageItem* internal_default_instance() {
    return reinterpret_cast<const ToTxMessageItem*>(
               &_ToTxMessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ToTxMessageItem* other);
  friend void swap(ToTxMessageItem& a, ToTxMessageItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToTxMessageItem* New() const final {
    return CreateMaybeMessage<ToTxMessageItem>(NULL);
  }

  ToTxMessageItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToTxMessageItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToTxMessageItem& from);
  void MergeFrom(const ToTxMessageItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToTxMessageItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes des = 1;
  bool has_des() const;
  void clear_des();
  static const int kDesFieldNumber = 1;
  const ::std::string& des() const;
  void set_des(const ::std::string& value);
  #if LANG_CXX11
  void set_des(::std::string&& value);
  #endif
  void set_des(const char* value);
  void set_des(const void* value, size_t size);
  ::std::string* mutable_des();
  ::std::string* release_des();
  void set_allocated_des(::std::string* des);

  // optional uint64 amount = 2;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxMessageItem)
 private:
  void set_has_des();
  void clear_has_des();
  void set_has_amount();
  void clear_has_amount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr des_;
  ::google::protobuf::uint64 amount_;
  friend struct ::protobuf_protos_2fpools_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ToTxMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.ToTxMessage) */ {
 public:
  ToTxMessage();
  virtual ~ToTxMessage();

  ToTxMessage(const ToTxMessage& from);

  inline ToTxMessage& operator=(const ToTxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToTxMessage(ToTxMessage&& from) noexcept
    : ToTxMessage() {
    *this = ::std::move(from);
  }

  inline ToTxMessage& operator=(ToTxMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTxMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToTxMessage* internal_default_instance() {
    return reinterpret_cast<const ToTxMessage*>(
               &_ToTxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ToTxMessage* other);
  friend void swap(ToTxMessage& a, ToTxMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToTxMessage* New() const final {
    return CreateMaybeMessage<ToTxMessage>(NULL);
  }

  ToTxMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToTxMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToTxMessage& from);
  void MergeFrom(const ToTxMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToTxMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 1;
  int tos_size() const;
  void clear_tos();
  static const int kTosFieldNumber = 1;
  ::zjchain::pools::protobuf::ToTxMessageItem* mutable_tos(int index);
  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >*
      mutable_tos();
  const ::zjchain::pools::protobuf::ToTxMessageItem& tos(int index) const;
  ::zjchain::pools::protobuf::ToTxMessageItem* add_tos();
  const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >&
      tos() const;

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.ToTxMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem > tos_;
  friend struct ::protobuf_protos_2fpools_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zjchain.pools.protobuf.TxMessage) */ {
 public:
  TxMessage();
  virtual ~TxMessage();

  TxMessage(const TxMessage& from);

  inline TxMessage& operator=(const TxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxMessage(TxMessage&& from) noexcept
    : TxMessage() {
    *this = ::std::move(from);
  }

  inline TxMessage& operator=(TxMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxMessage* internal_default_instance() {
    return reinterpret_cast<const TxMessage*>(
               &_TxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TxMessage* other);
  friend void swap(TxMessage& a, TxMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxMessage* New() const final {
    return CreateMaybeMessage<TxMessage>(NULL);
  }

  TxMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxMessage& from);
  void MergeFrom(const TxMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 2;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes pubkey = 3;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 3;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional bytes key = 6;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 6;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 7;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 7;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional bytes to = 8;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 8;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional uint64 gas_limit = 4;
  bool has_gas_limit() const;
  void clear_gas_limit();
  static const int kGasLimitFieldNumber = 4;
  ::google::protobuf::uint64 gas_limit() const;
  void set_gas_limit(::google::protobuf::uint64 value);

  // optional uint64 gas_price = 5;
  bool has_gas_price() const;
  void clear_gas_price();
  static const int kGasPriceFieldNumber = 5;
  ::google::protobuf::uint64 gas_price() const;
  void set_gas_price(::google::protobuf::uint64 value);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 10;
  ::zjchain::pools::protobuf::StepType step() const;
  void set_step(::zjchain::pools::protobuf::StepType value);

  // optional uint64 amount = 9;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 9;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.pools.protobuf.TxMessage)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_gid();
  void clear_has_gid();
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_gas_limit();
  void clear_has_gas_limit();
  void set_has_gas_price();
  void clear_has_gas_price();
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();
  void set_has_to();
  void clear_has_to();
  void set_has_amount();
  void clear_has_amount();
  void set_has_step();
  void clear_has_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::uint64 gas_limit_;
  ::google::protobuf::uint64 gas_price_;
  ::google::protobuf::uint32 version_;
  int step_;
  ::google::protobuf::uint64 amount_;
  friend struct ::protobuf_protos_2fpools_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ToTxHeights

// optional uint32 sharding_id = 1;
inline bool ToTxHeights::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToTxHeights::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToTxHeights::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToTxHeights::clear_sharding_id() {
  sharding_id_ = 0u;
  clear_has_sharding_id();
}
inline ::google::protobuf::uint32 ToTxHeights::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.sharding_id)
  return sharding_id_;
}
inline void ToTxHeights::set_sharding_id(::google::protobuf::uint32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.sharding_id)
}

// repeated uint64 heights = 2;
inline int ToTxHeights::heights_size() const {
  return heights_.size();
}
inline void ToTxHeights::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 ToTxHeights::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.heights)
  return heights_.Get(index);
}
inline void ToTxHeights::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.heights)
}
inline void ToTxHeights::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ToTxHeights.heights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ToTxHeights::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ToTxHeights.heights)
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ToTxHeights::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ToTxHeights.heights)
  return &heights_;
}

// optional uint64 block_height = 3;
inline bool ToTxHeights::has_block_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToTxHeights::set_has_block_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToTxHeights::clear_has_block_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToTxHeights::clear_block_height() {
  block_height_ = GOOGLE_ULONGLONG(0);
  clear_has_block_height();
}
inline ::google::protobuf::uint64 ToTxHeights::block_height() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.block_height)
  return block_height_;
}
inline void ToTxHeights::set_block_height(::google::protobuf::uint64 value) {
  set_has_block_height();
  block_height_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.block_height)
}

// optional bytes tos_hash = 4;
inline bool ToTxHeights::has_tos_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToTxHeights::set_has_tos_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToTxHeights::clear_has_tos_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToTxHeights::clear_tos_hash() {
  tos_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tos_hash();
}
inline const ::std::string& ToTxHeights::tos_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxHeights.tos_hash)
  return tos_hash_.GetNoArena();
}
inline void ToTxHeights::set_tos_hash(const ::std::string& value) {
  set_has_tos_hash();
  tos_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxHeights.tos_hash)
}
#if LANG_CXX11
inline void ToTxHeights::set_tos_hash(::std::string&& value) {
  set_has_tos_hash();
  tos_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.pools.protobuf.ToTxHeights.tos_hash)
}
#endif
inline void ToTxHeights::set_tos_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tos_hash();
  tos_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.pools.protobuf.ToTxHeights.tos_hash)
}
inline void ToTxHeights::set_tos_hash(const void* value, size_t size) {
  set_has_tos_hash();
  tos_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.pools.protobuf.ToTxHeights.tos_hash)
}
inline ::std::string* ToTxHeights::mutable_tos_hash() {
  set_has_tos_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxHeights.tos_hash)
  return tos_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToTxHeights::release_tos_hash() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxHeights.tos_hash)
  if (!has_tos_hash()) {
    return NULL;
  }
  clear_has_tos_hash();
  return tos_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToTxHeights::set_allocated_tos_hash(::std::string* tos_hash) {
  if (tos_hash != NULL) {
    set_has_tos_hash();
  } else {
    clear_has_tos_hash();
  }
  tos_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tos_hash);
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxHeights.tos_hash)
}

// -------------------------------------------------------------------

// ToTxMessageItem

// optional bytes des = 1;
inline bool ToTxMessageItem::has_des() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToTxMessageItem::set_has_des() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToTxMessageItem::clear_has_des() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToTxMessageItem::clear_des() {
  des_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_des();
}
inline const ::std::string& ToTxMessageItem::des() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.des)
  return des_.GetNoArena();
}
inline void ToTxMessageItem::set_des(const ::std::string& value) {
  set_has_des();
  des_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.des)
}
#if LANG_CXX11
inline void ToTxMessageItem::set_des(::std::string&& value) {
  set_has_des();
  des_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.pools.protobuf.ToTxMessageItem.des)
}
#endif
inline void ToTxMessageItem::set_des(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_des();
  des_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.pools.protobuf.ToTxMessageItem.des)
}
inline void ToTxMessageItem::set_des(const void* value, size_t size) {
  set_has_des();
  des_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.pools.protobuf.ToTxMessageItem.des)
}
inline ::std::string* ToTxMessageItem::mutable_des() {
  set_has_des();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessageItem.des)
  return des_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToTxMessageItem::release_des() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.ToTxMessageItem.des)
  if (!has_des()) {
    return NULL;
  }
  clear_has_des();
  return des_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToTxMessageItem::set_allocated_des(::std::string* des) {
  if (des != NULL) {
    set_has_des();
  } else {
    clear_has_des();
  }
  des_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), des);
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.ToTxMessageItem.des)
}

// optional uint64 amount = 2;
inline bool ToTxMessageItem::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToTxMessageItem::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToTxMessageItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToTxMessageItem::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 ToTxMessageItem::amount() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessageItem.amount)
  return amount_;
}
inline void ToTxMessageItem::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.ToTxMessageItem.amount)
}

// -------------------------------------------------------------------

// ToTxMessage

// repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 1;
inline int ToTxMessage::tos_size() const {
  return tos_.size();
}
inline void ToTxMessage::clear_tos() {
  tos_.Clear();
}
inline ::zjchain::pools::protobuf::ToTxMessageItem* ToTxMessage::mutable_tos(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.ToTxMessage.tos)
  return tos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >*
ToTxMessage::mutable_tos() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.pools.protobuf.ToTxMessage.tos)
  return &tos_;
}
inline const ::zjchain::pools::protobuf::ToTxMessageItem& ToTxMessage::tos(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.ToTxMessage.tos)
  return tos_.Get(index);
}
inline ::zjchain::pools::protobuf::ToTxMessageItem* ToTxMessage::add_tos() {
  // @@protoc_insertion_point(field_add:zjchain.pools.protobuf.ToTxMessage.tos)
  return tos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ToTxMessageItem >&
ToTxMessage::tos() const {
  // @@protoc_insertion_point(field_list:zjchain.pools.protobuf.ToTxMessage.tos)
  return tos_;
}

// -------------------------------------------------------------------

// TxMessage

// optional uint32 version = 1;
inline bool TxMessage::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxMessage::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxMessage::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxMessage::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxMessage::version() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.version)
  return version_;
}
inline void TxMessage::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.version)
}

// optional bytes gid = 2;
inline bool TxMessage::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxMessage::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxMessage::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxMessage::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TxMessage::gid() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.gid)
  return gid_.GetNoArena();
}
inline void TxMessage::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.gid)
}
#if LANG_CXX11
inline void TxMessage::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.pools.protobuf.TxMessage.gid)
}
#endif
inline void TxMessage::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.pools.protobuf.TxMessage.gid)
}
inline void TxMessage::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.pools.protobuf.TxMessage.gid)
}
inline ::std::string* TxMessage::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxMessage::release_gid() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxMessage::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.gid)
}

// optional bytes pubkey = 3;
inline bool TxMessage::has_pubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxMessage::set_has_pubkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxMessage::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxMessage::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& TxMessage::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.pubkey)
  return pubkey_.GetNoArena();
}
inline void TxMessage::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.pubkey)
}
#if LANG_CXX11
inline void TxMessage::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.pools.protobuf.TxMessage.pubkey)
}
#endif
inline void TxMessage::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.pools.protobuf.TxMessage.pubkey)
}
inline void TxMessage::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.pools.protobuf.TxMessage.pubkey)
}
inline ::std::string* TxMessage::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxMessage::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxMessage::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.pubkey)
}

// optional uint64 gas_limit = 4;
inline bool TxMessage::has_gas_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxMessage::set_has_gas_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxMessage::clear_has_gas_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxMessage::clear_gas_limit() {
  gas_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_limit();
}
inline ::google::protobuf::uint64 TxMessage::gas_limit() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.gas_limit)
  return gas_limit_;
}
inline void TxMessage::set_gas_limit(::google::protobuf::uint64 value) {
  set_has_gas_limit();
  gas_limit_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.gas_limit)
}

// optional uint64 gas_price = 5;
inline bool TxMessage::has_gas_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxMessage::set_has_gas_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxMessage::clear_has_gas_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxMessage::clear_gas_price() {
  gas_price_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_price();
}
inline ::google::protobuf::uint64 TxMessage::gas_price() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.gas_price)
  return gas_price_;
}
inline void TxMessage::set_gas_price(::google::protobuf::uint64 value) {
  set_has_gas_price();
  gas_price_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.gas_price)
}

// optional bytes key = 6;
inline bool TxMessage::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxMessage::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxMessage::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxMessage::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& TxMessage::key() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.key)
  return key_.GetNoArena();
}
inline void TxMessage::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.key)
}
#if LANG_CXX11
inline void TxMessage::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.pools.protobuf.TxMessage.key)
}
#endif
inline void TxMessage::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.pools.protobuf.TxMessage.key)
}
inline void TxMessage::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.pools.protobuf.TxMessage.key)
}
inline ::std::string* TxMessage::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxMessage::release_key() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxMessage::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.key)
}

// optional bytes value = 7;
inline bool TxMessage::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxMessage::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& TxMessage::value() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.value)
  return value_.GetNoArena();
}
inline void TxMessage::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.value)
}
#if LANG_CXX11
inline void TxMessage::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.pools.protobuf.TxMessage.value)
}
#endif
inline void TxMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.pools.protobuf.TxMessage.value)
}
inline void TxMessage::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.pools.protobuf.TxMessage.value)
}
inline ::std::string* TxMessage::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxMessage::release_value() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxMessage::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.value)
}

// optional bytes to = 8;
inline bool TxMessage::has_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxMessage::set_has_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxMessage::clear_has_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxMessage::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& TxMessage::to() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.to)
  return to_.GetNoArena();
}
inline void TxMessage::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.to)
}
#if LANG_CXX11
inline void TxMessage::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zjchain.pools.protobuf.TxMessage.to)
}
#endif
inline void TxMessage::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zjchain.pools.protobuf.TxMessage.to)
}
inline void TxMessage::set_to(const void* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zjchain.pools.protobuf.TxMessage.to)
}
inline ::std::string* TxMessage::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:zjchain.pools.protobuf.TxMessage.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxMessage::release_to() {
  // @@protoc_insertion_point(field_release:zjchain.pools.protobuf.TxMessage.to)
  if (!has_to()) {
    return NULL;
  }
  clear_has_to();
  return to_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxMessage::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:zjchain.pools.protobuf.TxMessage.to)
}

// optional uint64 amount = 9;
inline bool TxMessage::has_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxMessage::set_has_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxMessage::clear_has_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxMessage::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TxMessage::amount() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.amount)
  return amount_;
}
inline void TxMessage::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.amount)
}

// optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
inline bool TxMessage::has_step() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxMessage::set_has_step() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxMessage::clear_has_step() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxMessage::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::zjchain::pools::protobuf::StepType TxMessage::step() const {
  // @@protoc_insertion_point(field_get:zjchain.pools.protobuf.TxMessage.step)
  return static_cast< ::zjchain::pools::protobuf::StepType >(step_);
}
inline void TxMessage::set_step(::zjchain::pools::protobuf::StepType value) {
  assert(::zjchain::pools::protobuf::StepType_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:zjchain.pools.protobuf.TxMessage.step)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace pools
}  // namespace zjchain

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zjchain::pools::protobuf::StepType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zjchain::pools::protobuf::StepType>() {
  return ::zjchain::pools::protobuf::StepType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fpools_2eproto
