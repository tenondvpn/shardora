// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/elect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2felect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2felect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2felect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2felect_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2felect_2eproto;
namespace zjchain {
namespace elect {
namespace protobuf {
class BlsPublicKey;
struct BlsPublicKeyDefaultTypeInternal;
extern BlsPublicKeyDefaultTypeInternal _BlsPublicKey_default_instance_;
class ElectBlock;
struct ElectBlockDefaultTypeInternal;
extern ElectBlockDefaultTypeInternal _ElectBlock_default_instance_;
class ElectMessage;
struct ElectMessageDefaultTypeInternal;
extern ElectMessageDefaultTypeInternal _ElectMessage_default_instance_;
class LeaderRotationMessage;
struct LeaderRotationMessageDefaultTypeInternal;
extern LeaderRotationMessageDefaultTypeInternal _LeaderRotationMessage_default_instance_;
class PrevMemberInfo;
struct PrevMemberInfoDefaultTypeInternal;
extern PrevMemberInfoDefaultTypeInternal _PrevMemberInfo_default_instance_;
class PrevMembers;
struct PrevMembersDefaultTypeInternal;
extern PrevMembersDefaultTypeInternal _PrevMembers_default_instance_;
class SyncNodeStokeItem;
struct SyncNodeStokeItemDefaultTypeInternal;
extern SyncNodeStokeItemDefaultTypeInternal _SyncNodeStokeItem_default_instance_;
class SyncNodeStokeRequest;
struct SyncNodeStokeRequestDefaultTypeInternal;
extern SyncNodeStokeRequestDefaultTypeInternal _SyncNodeStokeRequest_default_instance_;
class SyncNodeStokeResItem;
struct SyncNodeStokeResItemDefaultTypeInternal;
extern SyncNodeStokeResItemDefaultTypeInternal _SyncNodeStokeResItem_default_instance_;
class SyncNodeStokeResponse;
struct SyncNodeStokeResponseDefaultTypeInternal;
extern SyncNodeStokeResponseDefaultTypeInternal _SyncNodeStokeResponse_default_instance_;
class VerifyVecValue;
struct VerifyVecValueDefaultTypeInternal;
extern VerifyVecValueDefaultTypeInternal _VerifyVecValue_default_instance_;
class WaitingNodeHeartbeat;
struct WaitingNodeHeartbeatDefaultTypeInternal;
extern WaitingNodeHeartbeatDefaultTypeInternal _WaitingNodeHeartbeat_default_instance_;
class WaitingNodesMessage;
struct WaitingNodesMessageDefaultTypeInternal;
extern WaitingNodesMessageDefaultTypeInternal _WaitingNodesMessage_default_instance_;
class member;
struct memberDefaultTypeInternal;
extern memberDefaultTypeInternal _member_default_instance_;
}  // namespace protobuf
}  // namespace elect
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::elect::protobuf::BlsPublicKey* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::BlsPublicKey>(Arena*);
template<> ::zjchain::elect::protobuf::ElectBlock* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::ElectBlock>(Arena*);
template<> ::zjchain::elect::protobuf::ElectMessage* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::ElectMessage>(Arena*);
template<> ::zjchain::elect::protobuf::LeaderRotationMessage* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::LeaderRotationMessage>(Arena*);
template<> ::zjchain::elect::protobuf::PrevMemberInfo* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::PrevMemberInfo>(Arena*);
template<> ::zjchain::elect::protobuf::PrevMembers* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::PrevMembers>(Arena*);
template<> ::zjchain::elect::protobuf::SyncNodeStokeItem* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::SyncNodeStokeItem>(Arena*);
template<> ::zjchain::elect::protobuf::SyncNodeStokeRequest* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::SyncNodeStokeRequest>(Arena*);
template<> ::zjchain::elect::protobuf::SyncNodeStokeResItem* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::SyncNodeStokeResItem>(Arena*);
template<> ::zjchain::elect::protobuf::SyncNodeStokeResponse* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::SyncNodeStokeResponse>(Arena*);
template<> ::zjchain::elect::protobuf::VerifyVecValue* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::VerifyVecValue>(Arena*);
template<> ::zjchain::elect::protobuf::WaitingNodeHeartbeat* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::WaitingNodeHeartbeat>(Arena*);
template<> ::zjchain::elect::protobuf::WaitingNodesMessage* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::WaitingNodesMessage>(Arena*);
template<> ::zjchain::elect::protobuf::member* Arena::CreateMaybeMessage<::zjchain::elect::protobuf::member>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace elect {
namespace protobuf {

// ===================================================================

class VerifyVecValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.VerifyVecValue) */ {
 public:
  inline VerifyVecValue() : VerifyVecValue(nullptr) {}
  ~VerifyVecValue() override;
  explicit PROTOBUF_CONSTEXPR VerifyVecValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyVecValue(const VerifyVecValue& from);
  VerifyVecValue(VerifyVecValue&& from) noexcept
    : VerifyVecValue() {
    *this = ::std::move(from);
  }

  inline VerifyVecValue& operator=(const VerifyVecValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyVecValue& operator=(VerifyVecValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyVecValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyVecValue* internal_default_instance() {
    return reinterpret_cast<const VerifyVecValue*>(
               &_VerifyVecValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VerifyVecValue& a, VerifyVecValue& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyVecValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyVecValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyVecValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyVecValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyVecValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VerifyVecValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyVecValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.VerifyVecValue";
  }
  protected:
  explicit VerifyVecValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXC0FieldNumber = 1,
    kXC1FieldNumber = 2,
    kYC0FieldNumber = 3,
    kYC1FieldNumber = 4,
    kZC0FieldNumber = 5,
    kZC1FieldNumber = 6,
    kValidTFieldNumber = 7,
  };
  // optional bytes x_c0 = 1;
  bool has_x_c0() const;
  private:
  bool _internal_has_x_c0() const;
  public:
  void clear_x_c0();
  const std::string& x_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c0();
  PROTOBUF_NODISCARD std::string* release_x_c0();
  void set_allocated_x_c0(std::string* x_c0);
  private:
  const std::string& _internal_x_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c0(const std::string& value);
  std::string* _internal_mutable_x_c0();
  public:

  // optional bytes x_c1 = 2;
  bool has_x_c1() const;
  private:
  bool _internal_has_x_c1() const;
  public:
  void clear_x_c1();
  const std::string& x_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c1();
  PROTOBUF_NODISCARD std::string* release_x_c1();
  void set_allocated_x_c1(std::string* x_c1);
  private:
  const std::string& _internal_x_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c1(const std::string& value);
  std::string* _internal_mutable_x_c1();
  public:

  // optional bytes y_c0 = 3;
  bool has_y_c0() const;
  private:
  bool _internal_has_y_c0() const;
  public:
  void clear_y_c0();
  const std::string& y_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c0();
  PROTOBUF_NODISCARD std::string* release_y_c0();
  void set_allocated_y_c0(std::string* y_c0);
  private:
  const std::string& _internal_y_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c0(const std::string& value);
  std::string* _internal_mutable_y_c0();
  public:

  // optional bytes y_c1 = 4;
  bool has_y_c1() const;
  private:
  bool _internal_has_y_c1() const;
  public:
  void clear_y_c1();
  const std::string& y_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c1();
  PROTOBUF_NODISCARD std::string* release_y_c1();
  void set_allocated_y_c1(std::string* y_c1);
  private:
  const std::string& _internal_y_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c1(const std::string& value);
  std::string* _internal_mutable_y_c1();
  public:

  // optional bytes z_c0 = 5;
  bool has_z_c0() const;
  private:
  bool _internal_has_z_c0() const;
  public:
  void clear_z_c0();
  const std::string& z_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_z_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_z_c0();
  PROTOBUF_NODISCARD std::string* release_z_c0();
  void set_allocated_z_c0(std::string* z_c0);
  private:
  const std::string& _internal_z_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_z_c0(const std::string& value);
  std::string* _internal_mutable_z_c0();
  public:

  // optional bytes z_c1 = 6;
  bool has_z_c1() const;
  private:
  bool _internal_has_z_c1() const;
  public:
  void clear_z_c1();
  const std::string& z_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_z_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_z_c1();
  PROTOBUF_NODISCARD std::string* release_z_c1();
  void set_allocated_z_c1(std::string* z_c1);
  private:
  const std::string& _internal_z_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_z_c1(const std::string& value);
  std::string* _internal_mutable_z_c1();
  public:

  // optional uint32 valid_t = 7;
  bool has_valid_t() const;
  private:
  bool _internal_has_valid_t() const;
  public:
  void clear_valid_t();
  uint32_t valid_t() const;
  void set_valid_t(uint32_t value);
  private:
  uint32_t _internal_valid_t() const;
  void _internal_set_valid_t(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.VerifyVecValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr z_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr z_c1_;
  uint32_t valid_t_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class BlsPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.BlsPublicKey) */ {
 public:
  inline BlsPublicKey() : BlsPublicKey(nullptr) {}
  ~BlsPublicKey() override;
  explicit PROTOBUF_CONSTEXPR BlsPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlsPublicKey(const BlsPublicKey& from);
  BlsPublicKey(BlsPublicKey&& from) noexcept
    : BlsPublicKey() {
    *this = ::std::move(from);
  }

  inline BlsPublicKey& operator=(const BlsPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlsPublicKey& operator=(BlsPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlsPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlsPublicKey* internal_default_instance() {
    return reinterpret_cast<const BlsPublicKey*>(
               &_BlsPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlsPublicKey& a, BlsPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(BlsPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlsPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlsPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlsPublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlsPublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlsPublicKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlsPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.BlsPublicKey";
  }
  protected:
  explicit BlsPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXC0FieldNumber = 1,
    kXC1FieldNumber = 2,
    kYC0FieldNumber = 3,
    kYC1FieldNumber = 4,
  };
  // optional bytes x_c0 = 1;
  bool has_x_c0() const;
  private:
  bool _internal_has_x_c0() const;
  public:
  void clear_x_c0();
  const std::string& x_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c0();
  PROTOBUF_NODISCARD std::string* release_x_c0();
  void set_allocated_x_c0(std::string* x_c0);
  private:
  const std::string& _internal_x_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c0(const std::string& value);
  std::string* _internal_mutable_x_c0();
  public:

  // optional bytes x_c1 = 2;
  bool has_x_c1() const;
  private:
  bool _internal_has_x_c1() const;
  public:
  void clear_x_c1();
  const std::string& x_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c1();
  PROTOBUF_NODISCARD std::string* release_x_c1();
  void set_allocated_x_c1(std::string* x_c1);
  private:
  const std::string& _internal_x_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c1(const std::string& value);
  std::string* _internal_mutable_x_c1();
  public:

  // optional bytes y_c0 = 3;
  bool has_y_c0() const;
  private:
  bool _internal_has_y_c0() const;
  public:
  void clear_y_c0();
  const std::string& y_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c0();
  PROTOBUF_NODISCARD std::string* release_y_c0();
  void set_allocated_y_c0(std::string* y_c0);
  private:
  const std::string& _internal_y_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c0(const std::string& value);
  std::string* _internal_mutable_y_c0();
  public:

  // optional bytes y_c1 = 4;
  bool has_y_c1() const;
  private:
  bool _internal_has_y_c1() const;
  public:
  void clear_y_c1();
  const std::string& y_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c1();
  PROTOBUF_NODISCARD std::string* release_y_c1();
  void set_allocated_y_c1(std::string* y_c1);
  private:
  const std::string& _internal_y_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c1(const std::string& value);
  std::string* _internal_mutable_y_c1();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.BlsPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c1_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class PrevMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.PrevMemberInfo) */ {
 public:
  inline PrevMemberInfo() : PrevMemberInfo(nullptr) {}
  ~PrevMemberInfo() override;
  explicit PROTOBUF_CONSTEXPR PrevMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrevMemberInfo(const PrevMemberInfo& from);
  PrevMemberInfo(PrevMemberInfo&& from) noexcept
    : PrevMemberInfo() {
    *this = ::std::move(from);
  }

  inline PrevMemberInfo& operator=(const PrevMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevMemberInfo& operator=(PrevMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrevMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrevMemberInfo* internal_default_instance() {
    return reinterpret_cast<const PrevMemberInfo*>(
               &_PrevMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrevMemberInfo& a, PrevMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevMemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrevMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrevMemberInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrevMemberInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrevMemberInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevMemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.PrevMemberInfo";
  }
  protected:
  explicit PrevMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXC0FieldNumber = 1,
    kXC1FieldNumber = 2,
    kYC0FieldNumber = 3,
    kYC1FieldNumber = 4,
    kPoolIdxModNumFieldNumber = 5,
  };
  // optional bytes x_c0 = 1;
  bool has_x_c0() const;
  private:
  bool _internal_has_x_c0() const;
  public:
  void clear_x_c0();
  const std::string& x_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c0();
  PROTOBUF_NODISCARD std::string* release_x_c0();
  void set_allocated_x_c0(std::string* x_c0);
  private:
  const std::string& _internal_x_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c0(const std::string& value);
  std::string* _internal_mutable_x_c0();
  public:

  // optional bytes x_c1 = 2;
  bool has_x_c1() const;
  private:
  bool _internal_has_x_c1() const;
  public:
  void clear_x_c1();
  const std::string& x_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c1();
  PROTOBUF_NODISCARD std::string* release_x_c1();
  void set_allocated_x_c1(std::string* x_c1);
  private:
  const std::string& _internal_x_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c1(const std::string& value);
  std::string* _internal_mutable_x_c1();
  public:

  // optional bytes y_c0 = 3;
  bool has_y_c0() const;
  private:
  bool _internal_has_y_c0() const;
  public:
  void clear_y_c0();
  const std::string& y_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c0();
  PROTOBUF_NODISCARD std::string* release_y_c0();
  void set_allocated_y_c0(std::string* y_c0);
  private:
  const std::string& _internal_y_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c0(const std::string& value);
  std::string* _internal_mutable_y_c0();
  public:

  // optional bytes y_c1 = 4;
  bool has_y_c1() const;
  private:
  bool _internal_has_y_c1() const;
  public:
  void clear_y_c1();
  const std::string& y_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c1();
  PROTOBUF_NODISCARD std::string* release_y_c1();
  void set_allocated_y_c1(std::string* y_c1);
  private:
  const std::string& _internal_y_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c1(const std::string& value);
  std::string* _internal_mutable_y_c1();
  public:

  // optional int32 pool_idx_mod_num = 5 [default = -1];
  bool has_pool_idx_mod_num() const;
  private:
  bool _internal_has_pool_idx_mod_num() const;
  public:
  void clear_pool_idx_mod_num();
  int32_t pool_idx_mod_num() const;
  void set_pool_idx_mod_num(int32_t value);
  private:
  int32_t _internal_pool_idx_mod_num() const;
  void _internal_set_pool_idx_mod_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.PrevMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c1_;
  int32_t pool_idx_mod_num_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class PrevMembers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.PrevMembers) */ {
 public:
  inline PrevMembers() : PrevMembers(nullptr) {}
  ~PrevMembers() override;
  explicit PROTOBUF_CONSTEXPR PrevMembers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrevMembers(const PrevMembers& from);
  PrevMembers(PrevMembers&& from) noexcept
    : PrevMembers() {
    *this = ::std::move(from);
  }

  inline PrevMembers& operator=(const PrevMembers& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevMembers& operator=(PrevMembers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrevMembers& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrevMembers* internal_default_instance() {
    return reinterpret_cast<const PrevMembers*>(
               &_PrevMembers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrevMembers& a, PrevMembers& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevMembers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevMembers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrevMembers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrevMembers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrevMembers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrevMembers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevMembers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.PrevMembers";
  }
  protected:
  explicit PrevMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlsPubkeyFieldNumber = 1,
    kCommonPubkeyFieldNumber = 3,
    kPrevElectHeightFieldNumber = 2,
  };
  // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
  int bls_pubkey_size() const;
  private:
  int _internal_bls_pubkey_size() const;
  public:
  void clear_bls_pubkey();
  ::zjchain::elect::protobuf::PrevMemberInfo* mutable_bls_pubkey(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >*
      mutable_bls_pubkey();
  private:
  const ::zjchain::elect::protobuf::PrevMemberInfo& _internal_bls_pubkey(int index) const;
  ::zjchain::elect::protobuf::PrevMemberInfo* _internal_add_bls_pubkey();
  public:
  const ::zjchain::elect::protobuf::PrevMemberInfo& bls_pubkey(int index) const;
  ::zjchain::elect::protobuf::PrevMemberInfo* add_bls_pubkey();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >&
      bls_pubkey() const;

  // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
  bool has_common_pubkey() const;
  private:
  bool _internal_has_common_pubkey() const;
  public:
  void clear_common_pubkey();
  const ::zjchain::elect::protobuf::BlsPublicKey& common_pubkey() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::BlsPublicKey* release_common_pubkey();
  ::zjchain::elect::protobuf::BlsPublicKey* mutable_common_pubkey();
  void set_allocated_common_pubkey(::zjchain::elect::protobuf::BlsPublicKey* common_pubkey);
  private:
  const ::zjchain::elect::protobuf::BlsPublicKey& _internal_common_pubkey() const;
  ::zjchain::elect::protobuf::BlsPublicKey* _internal_mutable_common_pubkey();
  public:
  void unsafe_arena_set_allocated_common_pubkey(
      ::zjchain::elect::protobuf::BlsPublicKey* common_pubkey);
  ::zjchain::elect::protobuf::BlsPublicKey* unsafe_arena_release_common_pubkey();

  // optional uint64 prev_elect_height = 2;
  bool has_prev_elect_height() const;
  private:
  bool _internal_has_prev_elect_height() const;
  public:
  void clear_prev_elect_height();
  uint64_t prev_elect_height() const;
  void set_prev_elect_height(uint64_t value);
  private:
  uint64_t _internal_prev_elect_height() const;
  void _internal_set_prev_elect_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.PrevMembers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo > bls_pubkey_;
  ::zjchain::elect::protobuf::BlsPublicKey* common_pubkey_;
  uint64_t prev_elect_height_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.member) */ {
 public:
  inline member() : member(nullptr) {}
  ~member() override;
  explicit PROTOBUF_CONSTEXPR member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  member(const member& from);
  member(member&& from) noexcept
    : member() {
    *this = ::std::move(from);
  }

  inline member& operator=(const member& from) {
    CopyFrom(from);
    return *this;
  }
  inline member& operator=(member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const member& default_instance() {
    return *internal_default_instance();
  }
  static inline const member* internal_default_instance() {
    return reinterpret_cast<const member*>(
               &_member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(member& a, member& b) {
    a.Swap(&b);
  }
  inline void Swap(member* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const member& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(member* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.member";
  }
  protected:
  explicit member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kMiningAmountFieldNumber = 3,
    kPoolIdxModNumFieldNumber = 2,
  };
  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_NODISCARD std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // optional uint64 mining_amount = 3;
  bool has_mining_amount() const;
  private:
  bool _internal_has_mining_amount() const;
  public:
  void clear_mining_amount();
  uint64_t mining_amount() const;
  void set_mining_amount(uint64_t value);
  private:
  uint64_t _internal_mining_amount() const;
  void _internal_set_mining_amount(uint64_t value);
  public:

  // optional int32 pool_idx_mod_num = 2;
  bool has_pool_idx_mod_num() const;
  private:
  bool _internal_has_pool_idx_mod_num() const;
  public:
  void clear_pool_idx_mod_num();
  int32_t pool_idx_mod_num() const;
  void set_pool_idx_mod_num(int32_t value);
  private:
  int32_t _internal_pool_idx_mod_num() const;
  void _internal_set_pool_idx_mod_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  uint64_t mining_amount_;
  int32_t pool_idx_mod_num_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class ElectBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.ElectBlock) */ {
 public:
  inline ElectBlock() : ElectBlock(nullptr) {}
  ~ElectBlock() override;
  explicit PROTOBUF_CONSTEXPR ElectBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElectBlock(const ElectBlock& from);
  ElectBlock(ElectBlock&& from) noexcept
    : ElectBlock() {
    *this = ::std::move(from);
  }

  inline ElectBlock& operator=(const ElectBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectBlock& operator=(ElectBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElectBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElectBlock* internal_default_instance() {
    return reinterpret_cast<const ElectBlock*>(
               &_ElectBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ElectBlock& a, ElectBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElectBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElectBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElectBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ElectBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.ElectBlock";
  }
  protected:
  explicit ElectBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 1,
    kPrevMembersFieldNumber = 2,
    kElectHeightFieldNumber = 4,
    kAllGasAmountFieldNumber = 5,
    kGasForRootFieldNumber = 6,
    kShardNetworkIdFieldNumber = 3,
  };
  // repeated .zjchain.elect.protobuf.member in = 1;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  ::zjchain::elect::protobuf::member* mutable_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::member >*
      mutable_in();
  private:
  const ::zjchain::elect::protobuf::member& _internal_in(int index) const;
  ::zjchain::elect::protobuf::member* _internal_add_in();
  public:
  const ::zjchain::elect::protobuf::member& in(int index) const;
  ::zjchain::elect::protobuf::member* add_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::member >&
      in() const;

  // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
  bool has_prev_members() const;
  private:
  bool _internal_has_prev_members() const;
  public:
  void clear_prev_members();
  const ::zjchain::elect::protobuf::PrevMembers& prev_members() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::PrevMembers* release_prev_members();
  ::zjchain::elect::protobuf::PrevMembers* mutable_prev_members();
  void set_allocated_prev_members(::zjchain::elect::protobuf::PrevMembers* prev_members);
  private:
  const ::zjchain::elect::protobuf::PrevMembers& _internal_prev_members() const;
  ::zjchain::elect::protobuf::PrevMembers* _internal_mutable_prev_members();
  public:
  void unsafe_arena_set_allocated_prev_members(
      ::zjchain::elect::protobuf::PrevMembers* prev_members);
  ::zjchain::elect::protobuf::PrevMembers* unsafe_arena_release_prev_members();

  // optional uint64 elect_height = 4;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // optional uint64 all_gas_amount = 5;
  bool has_all_gas_amount() const;
  private:
  bool _internal_has_all_gas_amount() const;
  public:
  void clear_all_gas_amount();
  uint64_t all_gas_amount() const;
  void set_all_gas_amount(uint64_t value);
  private:
  uint64_t _internal_all_gas_amount() const;
  void _internal_set_all_gas_amount(uint64_t value);
  public:

  // optional uint64 gas_for_root = 6;
  bool has_gas_for_root() const;
  private:
  bool _internal_has_gas_for_root() const;
  public:
  void clear_gas_for_root();
  uint64_t gas_for_root() const;
  void set_gas_for_root(uint64_t value);
  private:
  uint64_t _internal_gas_for_root() const;
  void _internal_set_gas_for_root(uint64_t value);
  public:

  // optional uint32 shard_network_id = 3;
  bool has_shard_network_id() const;
  private:
  bool _internal_has_shard_network_id() const;
  public:
  void clear_shard_network_id();
  uint32_t shard_network_id() const;
  void set_shard_network_id(uint32_t value);
  private:
  uint32_t _internal_shard_network_id() const;
  void _internal_set_shard_network_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.ElectBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::member > in_;
  ::zjchain::elect::protobuf::PrevMembers* prev_members_;
  uint64_t elect_height_;
  uint64_t all_gas_amount_;
  uint64_t gas_for_root_;
  uint32_t shard_network_id_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class WaitingNodesMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.WaitingNodesMessage) */ {
 public:
  inline WaitingNodesMessage() : WaitingNodesMessage(nullptr) {}
  ~WaitingNodesMessage() override;
  explicit PROTOBUF_CONSTEXPR WaitingNodesMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitingNodesMessage(const WaitingNodesMessage& from);
  WaitingNodesMessage(WaitingNodesMessage&& from) noexcept
    : WaitingNodesMessage() {
    *this = ::std::move(from);
  }

  inline WaitingNodesMessage& operator=(const WaitingNodesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitingNodesMessage& operator=(WaitingNodesMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitingNodesMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitingNodesMessage* internal_default_instance() {
    return reinterpret_cast<const WaitingNodesMessage*>(
               &_WaitingNodesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WaitingNodesMessage& a, WaitingNodesMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitingNodesMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitingNodesMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitingNodesMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitingNodesMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitingNodesMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitingNodesMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitingNodesMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.WaitingNodesMessage";
  }
  protected:
  explicit WaitingNodesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFilterFieldNumber = 1,
    kStokeHashFieldNumber = 3,
    kWaitingShardIdFieldNumber = 2,
  };
  // repeated uint64 nodes_filter = 1;
  int nodes_filter_size() const;
  private:
  int _internal_nodes_filter_size() const;
  public:
  void clear_nodes_filter();
  private:
  uint64_t _internal_nodes_filter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_nodes_filter() const;
  void _internal_add_nodes_filter(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_nodes_filter();
  public:
  uint64_t nodes_filter(int index) const;
  void set_nodes_filter(int index, uint64_t value);
  void add_nodes_filter(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      nodes_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_nodes_filter();

  // optional bytes stoke_hash = 3;
  bool has_stoke_hash() const;
  private:
  bool _internal_has_stoke_hash() const;
  public:
  void clear_stoke_hash();
  const std::string& stoke_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stoke_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stoke_hash();
  PROTOBUF_NODISCARD std::string* release_stoke_hash();
  void set_allocated_stoke_hash(std::string* stoke_hash);
  private:
  const std::string& _internal_stoke_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stoke_hash(const std::string& value);
  std::string* _internal_mutable_stoke_hash();
  public:

  // optional uint32 waiting_shard_id = 2;
  bool has_waiting_shard_id() const;
  private:
  bool _internal_has_waiting_shard_id() const;
  public:
  void clear_waiting_shard_id();
  uint32_t waiting_shard_id() const;
  void set_waiting_shard_id(uint32_t value);
  private:
  uint32_t _internal_waiting_shard_id() const;
  void _internal_set_waiting_shard_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.WaitingNodesMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > nodes_filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stoke_hash_;
  uint32_t waiting_shard_id_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class WaitingNodeHeartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.WaitingNodeHeartbeat) */ {
 public:
  inline WaitingNodeHeartbeat() : WaitingNodeHeartbeat(nullptr) {}
  ~WaitingNodeHeartbeat() override;
  explicit PROTOBUF_CONSTEXPR WaitingNodeHeartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitingNodeHeartbeat(const WaitingNodeHeartbeat& from);
  WaitingNodeHeartbeat(WaitingNodeHeartbeat&& from) noexcept
    : WaitingNodeHeartbeat() {
    *this = ::std::move(from);
  }

  inline WaitingNodeHeartbeat& operator=(const WaitingNodeHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitingNodeHeartbeat& operator=(WaitingNodeHeartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitingNodeHeartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitingNodeHeartbeat* internal_default_instance() {
    return reinterpret_cast<const WaitingNodeHeartbeat*>(
               &_WaitingNodeHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WaitingNodeHeartbeat& a, WaitingNodeHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitingNodeHeartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitingNodeHeartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitingNodeHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitingNodeHeartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitingNodeHeartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitingNodeHeartbeat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitingNodeHeartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.WaitingNodeHeartbeat";
  }
  protected:
  explicit WaitingNodeHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIpFieldNumber = 1,
    kPublicPortFieldNumber = 2,
    kNetworkIdFieldNumber = 3,
    kTimestampSecFieldNumber = 4,
  };
  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const std::string& public_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_ip();
  PROTOBUF_NODISCARD std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // optional uint32 public_port = 2;
  bool has_public_port() const;
  private:
  bool _internal_has_public_port() const;
  public:
  void clear_public_port();
  uint32_t public_port() const;
  void set_public_port(uint32_t value);
  private:
  uint32_t _internal_public_port() const;
  void _internal_set_public_port(uint32_t value);
  public:

  // optional uint32 network_id = 3;
  bool has_network_id() const;
  private:
  bool _internal_has_network_id() const;
  public:
  void clear_network_id();
  uint32_t network_id() const;
  void set_network_id(uint32_t value);
  private:
  uint32_t _internal_network_id() const;
  void _internal_set_network_id(uint32_t value);
  public:

  // optional uint64 timestamp_sec = 4;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  uint64_t timestamp_sec() const;
  void set_timestamp_sec(uint64_t value);
  private:
  uint64_t _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.WaitingNodeHeartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  uint32_t public_port_;
  uint32_t network_id_;
  uint64_t timestamp_sec_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class LeaderRotationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.LeaderRotationMessage) */ {
 public:
  inline LeaderRotationMessage() : LeaderRotationMessage(nullptr) {}
  ~LeaderRotationMessage() override;
  explicit PROTOBUF_CONSTEXPR LeaderRotationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaderRotationMessage(const LeaderRotationMessage& from);
  LeaderRotationMessage(LeaderRotationMessage&& from) noexcept
    : LeaderRotationMessage() {
    *this = ::std::move(from);
  }

  inline LeaderRotationMessage& operator=(const LeaderRotationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderRotationMessage& operator=(LeaderRotationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaderRotationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaderRotationMessage* internal_default_instance() {
    return reinterpret_cast<const LeaderRotationMessage*>(
               &_LeaderRotationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LeaderRotationMessage& a, LeaderRotationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderRotationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderRotationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaderRotationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaderRotationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaderRotationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LeaderRotationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderRotationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.LeaderRotationMessage";
  }
  protected:
  explicit LeaderRotationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kPoolModNumFieldNumber = 2,
  };
  // optional bytes leader_id = 1;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  const std::string& leader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // optional uint32 pool_mod_num = 2;
  bool has_pool_mod_num() const;
  private:
  bool _internal_has_pool_mod_num() const;
  public:
  void clear_pool_mod_num();
  uint32_t pool_mod_num() const;
  void set_pool_mod_num(uint32_t value);
  private:
  uint32_t _internal_pool_mod_num() const;
  void _internal_set_pool_mod_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.LeaderRotationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  uint32_t pool_mod_num_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeStokeItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.SyncNodeStokeItem) */ {
 public:
  inline SyncNodeStokeItem() : SyncNodeStokeItem(nullptr) {}
  ~SyncNodeStokeItem() override;
  explicit PROTOBUF_CONSTEXPR SyncNodeStokeItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNodeStokeItem(const SyncNodeStokeItem& from);
  SyncNodeStokeItem(SyncNodeStokeItem&& from) noexcept
    : SyncNodeStokeItem() {
    *this = ::std::move(from);
  }

  inline SyncNodeStokeItem& operator=(const SyncNodeStokeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeStokeItem& operator=(SyncNodeStokeItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNodeStokeItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNodeStokeItem* internal_default_instance() {
    return reinterpret_cast<const SyncNodeStokeItem*>(
               &_SyncNodeStokeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SyncNodeStokeItem& a, SyncNodeStokeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeStokeItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNodeStokeItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNodeStokeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNodeStokeItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNodeStokeItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncNodeStokeItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeStokeItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.SyncNodeStokeItem";
  }
  protected:
  explicit SyncNodeStokeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSyncedTmHeightFieldNumber = 2,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional uint64 synced_tm_height = 2;
  bool has_synced_tm_height() const;
  private:
  bool _internal_has_synced_tm_height() const;
  public:
  void clear_synced_tm_height();
  uint64_t synced_tm_height() const;
  void set_synced_tm_height(uint64_t value);
  private:
  uint64_t _internal_synced_tm_height() const;
  void _internal_set_synced_tm_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint64_t synced_tm_height_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeStokeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.SyncNodeStokeRequest) */ {
 public:
  inline SyncNodeStokeRequest() : SyncNodeStokeRequest(nullptr) {}
  ~SyncNodeStokeRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncNodeStokeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNodeStokeRequest(const SyncNodeStokeRequest& from);
  SyncNodeStokeRequest(SyncNodeStokeRequest&& from) noexcept
    : SyncNodeStokeRequest() {
    *this = ::std::move(from);
  }

  inline SyncNodeStokeRequest& operator=(const SyncNodeStokeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeStokeRequest& operator=(SyncNodeStokeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNodeStokeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNodeStokeRequest* internal_default_instance() {
    return reinterpret_cast<const SyncNodeStokeRequest*>(
               &_SyncNodeStokeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SyncNodeStokeRequest& a, SyncNodeStokeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeStokeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNodeStokeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNodeStokeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNodeStokeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNodeStokeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncNodeStokeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeStokeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.SyncNodeStokeRequest";
  }
  protected:
  explicit SyncNodeStokeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncItemFieldNumber = 1,
    kNowTmHeightFieldNumber = 2,
  };
  // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
  int sync_item_size() const;
  private:
  int _internal_sync_item_size() const;
  public:
  void clear_sync_item();
  ::zjchain::elect::protobuf::SyncNodeStokeItem* mutable_sync_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >*
      mutable_sync_item();
  private:
  const ::zjchain::elect::protobuf::SyncNodeStokeItem& _internal_sync_item(int index) const;
  ::zjchain::elect::protobuf::SyncNodeStokeItem* _internal_add_sync_item();
  public:
  const ::zjchain::elect::protobuf::SyncNodeStokeItem& sync_item(int index) const;
  ::zjchain::elect::protobuf::SyncNodeStokeItem* add_sync_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >&
      sync_item() const;

  // optional uint64 now_tm_height = 2;
  bool has_now_tm_height() const;
  private:
  bool _internal_has_now_tm_height() const;
  public:
  void clear_now_tm_height();
  uint64_t now_tm_height() const;
  void set_now_tm_height(uint64_t value);
  private:
  uint64_t _internal_now_tm_height() const;
  void _internal_set_now_tm_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem > sync_item_;
  uint64_t now_tm_height_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeStokeResItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.SyncNodeStokeResItem) */ {
 public:
  inline SyncNodeStokeResItem() : SyncNodeStokeResItem(nullptr) {}
  ~SyncNodeStokeResItem() override;
  explicit PROTOBUF_CONSTEXPR SyncNodeStokeResItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNodeStokeResItem(const SyncNodeStokeResItem& from);
  SyncNodeStokeResItem(SyncNodeStokeResItem&& from) noexcept
    : SyncNodeStokeResItem() {
    *this = ::std::move(from);
  }

  inline SyncNodeStokeResItem& operator=(const SyncNodeStokeResItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeStokeResItem& operator=(SyncNodeStokeResItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNodeStokeResItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNodeStokeResItem* internal_default_instance() {
    return reinterpret_cast<const SyncNodeStokeResItem*>(
               &_SyncNodeStokeResItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SyncNodeStokeResItem& a, SyncNodeStokeResItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeStokeResItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNodeStokeResItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNodeStokeResItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNodeStokeResItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNodeStokeResItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncNodeStokeResItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeStokeResItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.SyncNodeStokeResItem";
  }
  protected:
  explicit SyncNodeStokeResItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBalanceFieldNumber = 2,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional uint64 balance = 2;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeResItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint64_t balance_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeStokeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.SyncNodeStokeResponse) */ {
 public:
  inline SyncNodeStokeResponse() : SyncNodeStokeResponse(nullptr) {}
  ~SyncNodeStokeResponse() override;
  explicit PROTOBUF_CONSTEXPR SyncNodeStokeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncNodeStokeResponse(const SyncNodeStokeResponse& from);
  SyncNodeStokeResponse(SyncNodeStokeResponse&& from) noexcept
    : SyncNodeStokeResponse() {
    *this = ::std::move(from);
  }

  inline SyncNodeStokeResponse& operator=(const SyncNodeStokeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeStokeResponse& operator=(SyncNodeStokeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncNodeStokeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncNodeStokeResponse* internal_default_instance() {
    return reinterpret_cast<const SyncNodeStokeResponse*>(
               &_SyncNodeStokeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SyncNodeStokeResponse& a, SyncNodeStokeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeStokeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncNodeStokeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncNodeStokeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncNodeStokeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncNodeStokeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncNodeStokeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeStokeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.SyncNodeStokeResponse";
  }
  protected:
  explicit SyncNodeStokeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kNowTmHeightFieldNumber = 2,
  };
  // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::zjchain::elect::protobuf::SyncNodeStokeResItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >*
      mutable_items();
  private:
  const ::zjchain::elect::protobuf::SyncNodeStokeResItem& _internal_items(int index) const;
  ::zjchain::elect::protobuf::SyncNodeStokeResItem* _internal_add_items();
  public:
  const ::zjchain::elect::protobuf::SyncNodeStokeResItem& items(int index) const;
  ::zjchain::elect::protobuf::SyncNodeStokeResItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >&
      items() const;

  // optional uint64 now_tm_height = 2;
  bool has_now_tm_height() const;
  private:
  bool _internal_has_now_tm_height() const;
  public:
  void clear_now_tm_height();
  uint64_t now_tm_height() const;
  void set_now_tm_height(uint64_t value);
  private:
  uint64_t _internal_now_tm_height() const;
  void _internal_set_now_tm_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem > items_;
  uint64_t now_tm_height_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// -------------------------------------------------------------------

class ElectMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.elect.protobuf.ElectMessage) */ {
 public:
  inline ElectMessage() : ElectMessage(nullptr) {}
  ~ElectMessage() override;
  explicit PROTOBUF_CONSTEXPR ElectMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElectMessage(const ElectMessage& from);
  ElectMessage(ElectMessage&& from) noexcept
    : ElectMessage() {
    *this = ::std::move(from);
  }

  inline ElectMessage& operator=(const ElectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectMessage& operator=(ElectMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElectMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElectMessage* internal_default_instance() {
    return reinterpret_cast<const ElectMessage*>(
               &_ElectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ElectMessage& a, ElectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElectMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElectMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ElectMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.elect.protobuf.ElectMessage";
  }
  protected:
  explicit ElectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignChFieldNumber = 5,
    kSignResFieldNumber = 6,
    kElectBlockFieldNumber = 1,
    kPrevElectBlockFieldNumber = 2,
    kWaitingNodesFieldNumber = 3,
    kWaitingHeartbeatFieldNumber = 7,
    kLeaderRotationFieldNumber = 8,
    kSyncStokeReqFieldNumber = 9,
    kSyncStokeResFieldNumber = 10,
    kMemberIndexFieldNumber = 4,
  };
  // optional bytes sign_ch = 5;
  bool has_sign_ch() const;
  private:
  bool _internal_has_sign_ch() const;
  public:
  void clear_sign_ch();
  const std::string& sign_ch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign_ch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign_ch();
  PROTOBUF_NODISCARD std::string* release_sign_ch();
  void set_allocated_sign_ch(std::string* sign_ch);
  private:
  const std::string& _internal_sign_ch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_ch(const std::string& value);
  std::string* _internal_mutable_sign_ch();
  public:

  // optional bytes sign_res = 6;
  bool has_sign_res() const;
  private:
  bool _internal_has_sign_res() const;
  public:
  void clear_sign_res();
  const std::string& sign_res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign_res();
  PROTOBUF_NODISCARD std::string* release_sign_res();
  void set_allocated_sign_res(std::string* sign_res);
  private:
  const std::string& _internal_sign_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_res(const std::string& value);
  std::string* _internal_mutable_sign_res();
  public:

  // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
  bool has_elect_block() const;
  private:
  bool _internal_has_elect_block() const;
  public:
  void clear_elect_block();
  const ::zjchain::elect::protobuf::ElectBlock& elect_block() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::ElectBlock* release_elect_block();
  ::zjchain::elect::protobuf::ElectBlock* mutable_elect_block();
  void set_allocated_elect_block(::zjchain::elect::protobuf::ElectBlock* elect_block);
  private:
  const ::zjchain::elect::protobuf::ElectBlock& _internal_elect_block() const;
  ::zjchain::elect::protobuf::ElectBlock* _internal_mutable_elect_block();
  public:
  void unsafe_arena_set_allocated_elect_block(
      ::zjchain::elect::protobuf::ElectBlock* elect_block);
  ::zjchain::elect::protobuf::ElectBlock* unsafe_arena_release_elect_block();

  // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
  bool has_prev_elect_block() const;
  private:
  bool _internal_has_prev_elect_block() const;
  public:
  void clear_prev_elect_block();
  const ::zjchain::elect::protobuf::ElectBlock& prev_elect_block() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::ElectBlock* release_prev_elect_block();
  ::zjchain::elect::protobuf::ElectBlock* mutable_prev_elect_block();
  void set_allocated_prev_elect_block(::zjchain::elect::protobuf::ElectBlock* prev_elect_block);
  private:
  const ::zjchain::elect::protobuf::ElectBlock& _internal_prev_elect_block() const;
  ::zjchain::elect::protobuf::ElectBlock* _internal_mutable_prev_elect_block();
  public:
  void unsafe_arena_set_allocated_prev_elect_block(
      ::zjchain::elect::protobuf::ElectBlock* prev_elect_block);
  ::zjchain::elect::protobuf::ElectBlock* unsafe_arena_release_prev_elect_block();

  // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
  bool has_waiting_nodes() const;
  private:
  bool _internal_has_waiting_nodes() const;
  public:
  void clear_waiting_nodes();
  const ::zjchain::elect::protobuf::WaitingNodesMessage& waiting_nodes() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::WaitingNodesMessage* release_waiting_nodes();
  ::zjchain::elect::protobuf::WaitingNodesMessage* mutable_waiting_nodes();
  void set_allocated_waiting_nodes(::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes);
  private:
  const ::zjchain::elect::protobuf::WaitingNodesMessage& _internal_waiting_nodes() const;
  ::zjchain::elect::protobuf::WaitingNodesMessage* _internal_mutable_waiting_nodes();
  public:
  void unsafe_arena_set_allocated_waiting_nodes(
      ::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes);
  ::zjchain::elect::protobuf::WaitingNodesMessage* unsafe_arena_release_waiting_nodes();

  // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
  bool has_waiting_heartbeat() const;
  private:
  bool _internal_has_waiting_heartbeat() const;
  public:
  void clear_waiting_heartbeat();
  const ::zjchain::elect::protobuf::WaitingNodeHeartbeat& waiting_heartbeat() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::WaitingNodeHeartbeat* release_waiting_heartbeat();
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* mutable_waiting_heartbeat();
  void set_allocated_waiting_heartbeat(::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat);
  private:
  const ::zjchain::elect::protobuf::WaitingNodeHeartbeat& _internal_waiting_heartbeat() const;
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* _internal_mutable_waiting_heartbeat();
  public:
  void unsafe_arena_set_allocated_waiting_heartbeat(
      ::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat);
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* unsafe_arena_release_waiting_heartbeat();

  // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
  bool has_leader_rotation() const;
  private:
  bool _internal_has_leader_rotation() const;
  public:
  void clear_leader_rotation();
  const ::zjchain::elect::protobuf::LeaderRotationMessage& leader_rotation() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::LeaderRotationMessage* release_leader_rotation();
  ::zjchain::elect::protobuf::LeaderRotationMessage* mutable_leader_rotation();
  void set_allocated_leader_rotation(::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation);
  private:
  const ::zjchain::elect::protobuf::LeaderRotationMessage& _internal_leader_rotation() const;
  ::zjchain::elect::protobuf::LeaderRotationMessage* _internal_mutable_leader_rotation();
  public:
  void unsafe_arena_set_allocated_leader_rotation(
      ::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation);
  ::zjchain::elect::protobuf::LeaderRotationMessage* unsafe_arena_release_leader_rotation();

  // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
  bool has_sync_stoke_req() const;
  private:
  bool _internal_has_sync_stoke_req() const;
  public:
  void clear_sync_stoke_req();
  const ::zjchain::elect::protobuf::SyncNodeStokeRequest& sync_stoke_req() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::SyncNodeStokeRequest* release_sync_stoke_req();
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* mutable_sync_stoke_req();
  void set_allocated_sync_stoke_req(::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req);
  private:
  const ::zjchain::elect::protobuf::SyncNodeStokeRequest& _internal_sync_stoke_req() const;
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* _internal_mutable_sync_stoke_req();
  public:
  void unsafe_arena_set_allocated_sync_stoke_req(
      ::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req);
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* unsafe_arena_release_sync_stoke_req();

  // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
  bool has_sync_stoke_res() const;
  private:
  bool _internal_has_sync_stoke_res() const;
  public:
  void clear_sync_stoke_res();
  const ::zjchain::elect::protobuf::SyncNodeStokeResponse& sync_stoke_res() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::SyncNodeStokeResponse* release_sync_stoke_res();
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* mutable_sync_stoke_res();
  void set_allocated_sync_stoke_res(::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res);
  private:
  const ::zjchain::elect::protobuf::SyncNodeStokeResponse& _internal_sync_stoke_res() const;
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* _internal_mutable_sync_stoke_res();
  public:
  void unsafe_arena_set_allocated_sync_stoke_res(
      ::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res);
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* unsafe_arena_release_sync_stoke_res();

  // optional int32 member_index = 4;
  bool has_member_index() const;
  private:
  bool _internal_has_member_index() const;
  public:
  void clear_member_index();
  int32_t member_index() const;
  void set_member_index(int32_t value);
  private:
  int32_t _internal_member_index() const;
  void _internal_set_member_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.ElectMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_ch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_res_;
  ::zjchain::elect::protobuf::ElectBlock* elect_block_;
  ::zjchain::elect::protobuf::ElectBlock* prev_elect_block_;
  ::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes_;
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat_;
  ::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation_;
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req_;
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res_;
  int32_t member_index_;
  friend struct ::TableStruct_protos_2felect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VerifyVecValue

// optional bytes x_c0 = 1;
inline bool VerifyVecValue::_internal_has_x_c0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerifyVecValue::has_x_c0() const {
  return _internal_has_x_c0();
}
inline void VerifyVecValue::clear_x_c0() {
  x_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VerifyVecValue::x_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.VerifyVecValue.x_c0)
  return _internal_x_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecValue::set_x_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 x_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.VerifyVecValue.x_c0)
}
inline std::string* VerifyVecValue::mutable_x_c0() {
  std::string* _s = _internal_mutable_x_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.VerifyVecValue.x_c0)
  return _s;
}
inline const std::string& VerifyVecValue::_internal_x_c0() const {
  return x_c0_.Get();
}
inline void VerifyVecValue::_internal_set_x_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecValue::_internal_mutable_x_c0() {
  _has_bits_[0] |= 0x00000001u;
  return x_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecValue::release_x_c0() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.VerifyVecValue.x_c0)
  if (!_internal_has_x_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = x_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecValue::set_allocated_x_c0(std::string* x_c0) {
  if (x_c0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_c0_.SetAllocated(x_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.VerifyVecValue.x_c0)
}

// optional bytes x_c1 = 2;
inline bool VerifyVecValue::_internal_has_x_c1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerifyVecValue::has_x_c1() const {
  return _internal_has_x_c1();
}
inline void VerifyVecValue::clear_x_c1() {
  x_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VerifyVecValue::x_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.VerifyVecValue.x_c1)
  return _internal_x_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecValue::set_x_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 x_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.VerifyVecValue.x_c1)
}
inline std::string* VerifyVecValue::mutable_x_c1() {
  std::string* _s = _internal_mutable_x_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.VerifyVecValue.x_c1)
  return _s;
}
inline const std::string& VerifyVecValue::_internal_x_c1() const {
  return x_c1_.Get();
}
inline void VerifyVecValue::_internal_set_x_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  x_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecValue::_internal_mutable_x_c1() {
  _has_bits_[0] |= 0x00000002u;
  return x_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecValue::release_x_c1() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.VerifyVecValue.x_c1)
  if (!_internal_has_x_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = x_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecValue::set_allocated_x_c1(std::string* x_c1) {
  if (x_c1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_c1_.SetAllocated(x_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.VerifyVecValue.x_c1)
}

// optional bytes y_c0 = 3;
inline bool VerifyVecValue::_internal_has_y_c0() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VerifyVecValue::has_y_c0() const {
  return _internal_has_y_c0();
}
inline void VerifyVecValue::clear_y_c0() {
  y_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VerifyVecValue::y_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.VerifyVecValue.y_c0)
  return _internal_y_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecValue::set_y_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 y_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.VerifyVecValue.y_c0)
}
inline std::string* VerifyVecValue::mutable_y_c0() {
  std::string* _s = _internal_mutable_y_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.VerifyVecValue.y_c0)
  return _s;
}
inline const std::string& VerifyVecValue::_internal_y_c0() const {
  return y_c0_.Get();
}
inline void VerifyVecValue::_internal_set_y_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  y_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecValue::_internal_mutable_y_c0() {
  _has_bits_[0] |= 0x00000004u;
  return y_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecValue::release_y_c0() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.VerifyVecValue.y_c0)
  if (!_internal_has_y_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = y_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecValue::set_allocated_y_c0(std::string* y_c0) {
  if (y_c0 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  y_c0_.SetAllocated(y_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.VerifyVecValue.y_c0)
}

// optional bytes y_c1 = 4;
inline bool VerifyVecValue::_internal_has_y_c1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VerifyVecValue::has_y_c1() const {
  return _internal_has_y_c1();
}
inline void VerifyVecValue::clear_y_c1() {
  y_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& VerifyVecValue::y_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.VerifyVecValue.y_c1)
  return _internal_y_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecValue::set_y_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 y_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.VerifyVecValue.y_c1)
}
inline std::string* VerifyVecValue::mutable_y_c1() {
  std::string* _s = _internal_mutable_y_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.VerifyVecValue.y_c1)
  return _s;
}
inline const std::string& VerifyVecValue::_internal_y_c1() const {
  return y_c1_.Get();
}
inline void VerifyVecValue::_internal_set_y_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  y_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecValue::_internal_mutable_y_c1() {
  _has_bits_[0] |= 0x00000008u;
  return y_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecValue::release_y_c1() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.VerifyVecValue.y_c1)
  if (!_internal_has_y_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = y_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecValue::set_allocated_y_c1(std::string* y_c1) {
  if (y_c1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  y_c1_.SetAllocated(y_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.VerifyVecValue.y_c1)
}

// optional bytes z_c0 = 5;
inline bool VerifyVecValue::_internal_has_z_c0() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VerifyVecValue::has_z_c0() const {
  return _internal_has_z_c0();
}
inline void VerifyVecValue::clear_z_c0() {
  z_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& VerifyVecValue::z_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.VerifyVecValue.z_c0)
  return _internal_z_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecValue::set_z_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 z_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.VerifyVecValue.z_c0)
}
inline std::string* VerifyVecValue::mutable_z_c0() {
  std::string* _s = _internal_mutable_z_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.VerifyVecValue.z_c0)
  return _s;
}
inline const std::string& VerifyVecValue::_internal_z_c0() const {
  return z_c0_.Get();
}
inline void VerifyVecValue::_internal_set_z_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  z_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecValue::_internal_mutable_z_c0() {
  _has_bits_[0] |= 0x00000010u;
  return z_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecValue::release_z_c0() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.VerifyVecValue.z_c0)
  if (!_internal_has_z_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = z_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c0_.IsDefault()) {
    z_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecValue::set_allocated_z_c0(std::string* z_c0) {
  if (z_c0 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  z_c0_.SetAllocated(z_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c0_.IsDefault()) {
    z_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.VerifyVecValue.z_c0)
}

// optional bytes z_c1 = 6;
inline bool VerifyVecValue::_internal_has_z_c1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VerifyVecValue::has_z_c1() const {
  return _internal_has_z_c1();
}
inline void VerifyVecValue::clear_z_c1() {
  z_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& VerifyVecValue::z_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.VerifyVecValue.z_c1)
  return _internal_z_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecValue::set_z_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 z_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.VerifyVecValue.z_c1)
}
inline std::string* VerifyVecValue::mutable_z_c1() {
  std::string* _s = _internal_mutable_z_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.VerifyVecValue.z_c1)
  return _s;
}
inline const std::string& VerifyVecValue::_internal_z_c1() const {
  return z_c1_.Get();
}
inline void VerifyVecValue::_internal_set_z_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  z_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecValue::_internal_mutable_z_c1() {
  _has_bits_[0] |= 0x00000020u;
  return z_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecValue::release_z_c1() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.VerifyVecValue.z_c1)
  if (!_internal_has_z_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = z_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c1_.IsDefault()) {
    z_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecValue::set_allocated_z_c1(std::string* z_c1) {
  if (z_c1 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  z_c1_.SetAllocated(z_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c1_.IsDefault()) {
    z_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.VerifyVecValue.z_c1)
}

// optional uint32 valid_t = 7;
inline bool VerifyVecValue::_internal_has_valid_t() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VerifyVecValue::has_valid_t() const {
  return _internal_has_valid_t();
}
inline void VerifyVecValue::clear_valid_t() {
  valid_t_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t VerifyVecValue::_internal_valid_t() const {
  return valid_t_;
}
inline uint32_t VerifyVecValue::valid_t() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.VerifyVecValue.valid_t)
  return _internal_valid_t();
}
inline void VerifyVecValue::_internal_set_valid_t(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  valid_t_ = value;
}
inline void VerifyVecValue::set_valid_t(uint32_t value) {
  _internal_set_valid_t(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.VerifyVecValue.valid_t)
}

// -------------------------------------------------------------------

// BlsPublicKey

// optional bytes x_c0 = 1;
inline bool BlsPublicKey::_internal_has_x_c0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlsPublicKey::has_x_c0() const {
  return _internal_has_x_c0();
}
inline void BlsPublicKey::clear_x_c0() {
  x_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlsPublicKey::x_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.BlsPublicKey.x_c0)
  return _internal_x_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_x_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 x_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.BlsPublicKey.x_c0)
}
inline std::string* BlsPublicKey::mutable_x_c0() {
  std::string* _s = _internal_mutable_x_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.BlsPublicKey.x_c0)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_x_c0() const {
  return x_c0_.Get();
}
inline void BlsPublicKey::_internal_set_x_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_x_c0() {
  _has_bits_[0] |= 0x00000001u;
  return x_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_x_c0() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.BlsPublicKey.x_c0)
  if (!_internal_has_x_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = x_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_x_c0(std::string* x_c0) {
  if (x_c0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_c0_.SetAllocated(x_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.BlsPublicKey.x_c0)
}

// optional bytes x_c1 = 2;
inline bool BlsPublicKey::_internal_has_x_c1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlsPublicKey::has_x_c1() const {
  return _internal_has_x_c1();
}
inline void BlsPublicKey::clear_x_c1() {
  x_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlsPublicKey::x_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.BlsPublicKey.x_c1)
  return _internal_x_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_x_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 x_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.BlsPublicKey.x_c1)
}
inline std::string* BlsPublicKey::mutable_x_c1() {
  std::string* _s = _internal_mutable_x_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.BlsPublicKey.x_c1)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_x_c1() const {
  return x_c1_.Get();
}
inline void BlsPublicKey::_internal_set_x_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  x_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_x_c1() {
  _has_bits_[0] |= 0x00000002u;
  return x_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_x_c1() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.BlsPublicKey.x_c1)
  if (!_internal_has_x_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = x_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_x_c1(std::string* x_c1) {
  if (x_c1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_c1_.SetAllocated(x_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.BlsPublicKey.x_c1)
}

// optional bytes y_c0 = 3;
inline bool BlsPublicKey::_internal_has_y_c0() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlsPublicKey::has_y_c0() const {
  return _internal_has_y_c0();
}
inline void BlsPublicKey::clear_y_c0() {
  y_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BlsPublicKey::y_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.BlsPublicKey.y_c0)
  return _internal_y_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_y_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 y_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.BlsPublicKey.y_c0)
}
inline std::string* BlsPublicKey::mutable_y_c0() {
  std::string* _s = _internal_mutable_y_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.BlsPublicKey.y_c0)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_y_c0() const {
  return y_c0_.Get();
}
inline void BlsPublicKey::_internal_set_y_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  y_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_y_c0() {
  _has_bits_[0] |= 0x00000004u;
  return y_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_y_c0() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.BlsPublicKey.y_c0)
  if (!_internal_has_y_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = y_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_y_c0(std::string* y_c0) {
  if (y_c0 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  y_c0_.SetAllocated(y_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.BlsPublicKey.y_c0)
}

// optional bytes y_c1 = 4;
inline bool BlsPublicKey::_internal_has_y_c1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlsPublicKey::has_y_c1() const {
  return _internal_has_y_c1();
}
inline void BlsPublicKey::clear_y_c1() {
  y_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BlsPublicKey::y_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.BlsPublicKey.y_c1)
  return _internal_y_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_y_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 y_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.BlsPublicKey.y_c1)
}
inline std::string* BlsPublicKey::mutable_y_c1() {
  std::string* _s = _internal_mutable_y_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.BlsPublicKey.y_c1)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_y_c1() const {
  return y_c1_.Get();
}
inline void BlsPublicKey::_internal_set_y_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  y_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_y_c1() {
  _has_bits_[0] |= 0x00000008u;
  return y_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_y_c1() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.BlsPublicKey.y_c1)
  if (!_internal_has_y_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = y_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_y_c1(std::string* y_c1) {
  if (y_c1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  y_c1_.SetAllocated(y_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.BlsPublicKey.y_c1)
}

// -------------------------------------------------------------------

// PrevMemberInfo

// optional bytes x_c0 = 1;
inline bool PrevMemberInfo::_internal_has_x_c0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrevMemberInfo::has_x_c0() const {
  return _internal_has_x_c0();
}
inline void PrevMemberInfo::clear_x_c0() {
  x_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrevMemberInfo::x_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMemberInfo.x_c0)
  return _internal_x_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrevMemberInfo::set_x_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 x_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.PrevMemberInfo.x_c0)
}
inline std::string* PrevMemberInfo::mutable_x_c0() {
  std::string* _s = _internal_mutable_x_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.PrevMemberInfo.x_c0)
  return _s;
}
inline const std::string& PrevMemberInfo::_internal_x_c0() const {
  return x_c0_.Get();
}
inline void PrevMemberInfo::_internal_set_x_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::_internal_mutable_x_c0() {
  _has_bits_[0] |= 0x00000001u;
  return x_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::release_x_c0() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.PrevMemberInfo.x_c0)
  if (!_internal_has_x_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = x_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrevMemberInfo::set_allocated_x_c0(std::string* x_c0) {
  if (x_c0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_c0_.SetAllocated(x_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.PrevMemberInfo.x_c0)
}

// optional bytes x_c1 = 2;
inline bool PrevMemberInfo::_internal_has_x_c1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrevMemberInfo::has_x_c1() const {
  return _internal_has_x_c1();
}
inline void PrevMemberInfo::clear_x_c1() {
  x_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrevMemberInfo::x_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMemberInfo.x_c1)
  return _internal_x_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrevMemberInfo::set_x_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 x_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.PrevMemberInfo.x_c1)
}
inline std::string* PrevMemberInfo::mutable_x_c1() {
  std::string* _s = _internal_mutable_x_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.PrevMemberInfo.x_c1)
  return _s;
}
inline const std::string& PrevMemberInfo::_internal_x_c1() const {
  return x_c1_.Get();
}
inline void PrevMemberInfo::_internal_set_x_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  x_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::_internal_mutable_x_c1() {
  _has_bits_[0] |= 0x00000002u;
  return x_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::release_x_c1() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.PrevMemberInfo.x_c1)
  if (!_internal_has_x_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = x_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrevMemberInfo::set_allocated_x_c1(std::string* x_c1) {
  if (x_c1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_c1_.SetAllocated(x_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.PrevMemberInfo.x_c1)
}

// optional bytes y_c0 = 3;
inline bool PrevMemberInfo::_internal_has_y_c0() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrevMemberInfo::has_y_c0() const {
  return _internal_has_y_c0();
}
inline void PrevMemberInfo::clear_y_c0() {
  y_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrevMemberInfo::y_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMemberInfo.y_c0)
  return _internal_y_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrevMemberInfo::set_y_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 y_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.PrevMemberInfo.y_c0)
}
inline std::string* PrevMemberInfo::mutable_y_c0() {
  std::string* _s = _internal_mutable_y_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.PrevMemberInfo.y_c0)
  return _s;
}
inline const std::string& PrevMemberInfo::_internal_y_c0() const {
  return y_c0_.Get();
}
inline void PrevMemberInfo::_internal_set_y_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  y_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::_internal_mutable_y_c0() {
  _has_bits_[0] |= 0x00000004u;
  return y_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::release_y_c0() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.PrevMemberInfo.y_c0)
  if (!_internal_has_y_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = y_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrevMemberInfo::set_allocated_y_c0(std::string* y_c0) {
  if (y_c0 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  y_c0_.SetAllocated(y_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.PrevMemberInfo.y_c0)
}

// optional bytes y_c1 = 4;
inline bool PrevMemberInfo::_internal_has_y_c1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrevMemberInfo::has_y_c1() const {
  return _internal_has_y_c1();
}
inline void PrevMemberInfo::clear_y_c1() {
  y_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrevMemberInfo::y_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMemberInfo.y_c1)
  return _internal_y_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrevMemberInfo::set_y_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 y_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.PrevMemberInfo.y_c1)
}
inline std::string* PrevMemberInfo::mutable_y_c1() {
  std::string* _s = _internal_mutable_y_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.PrevMemberInfo.y_c1)
  return _s;
}
inline const std::string& PrevMemberInfo::_internal_y_c1() const {
  return y_c1_.Get();
}
inline void PrevMemberInfo::_internal_set_y_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  y_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::_internal_mutable_y_c1() {
  _has_bits_[0] |= 0x00000008u;
  return y_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* PrevMemberInfo::release_y_c1() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.PrevMemberInfo.y_c1)
  if (!_internal_has_y_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = y_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrevMemberInfo::set_allocated_y_c1(std::string* y_c1) {
  if (y_c1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  y_c1_.SetAllocated(y_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.PrevMemberInfo.y_c1)
}

// optional int32 pool_idx_mod_num = 5 [default = -1];
inline bool PrevMemberInfo::_internal_has_pool_idx_mod_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrevMemberInfo::has_pool_idx_mod_num() const {
  return _internal_has_pool_idx_mod_num();
}
inline void PrevMemberInfo::clear_pool_idx_mod_num() {
  pool_idx_mod_num_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t PrevMemberInfo::_internal_pool_idx_mod_num() const {
  return pool_idx_mod_num_;
}
inline int32_t PrevMemberInfo::pool_idx_mod_num() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMemberInfo.pool_idx_mod_num)
  return _internal_pool_idx_mod_num();
}
inline void PrevMemberInfo::_internal_set_pool_idx_mod_num(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  pool_idx_mod_num_ = value;
}
inline void PrevMemberInfo::set_pool_idx_mod_num(int32_t value) {
  _internal_set_pool_idx_mod_num(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.PrevMemberInfo.pool_idx_mod_num)
}

// -------------------------------------------------------------------

// PrevMembers

// repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
inline int PrevMembers::_internal_bls_pubkey_size() const {
  return bls_pubkey_.size();
}
inline int PrevMembers::bls_pubkey_size() const {
  return _internal_bls_pubkey_size();
}
inline void PrevMembers::clear_bls_pubkey() {
  bls_pubkey_.Clear();
}
inline ::zjchain::elect::protobuf::PrevMemberInfo* PrevMembers::mutable_bls_pubkey(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.PrevMembers.bls_pubkey)
  return bls_pubkey_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >*
PrevMembers::mutable_bls_pubkey() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.elect.protobuf.PrevMembers.bls_pubkey)
  return &bls_pubkey_;
}
inline const ::zjchain::elect::protobuf::PrevMemberInfo& PrevMembers::_internal_bls_pubkey(int index) const {
  return bls_pubkey_.Get(index);
}
inline const ::zjchain::elect::protobuf::PrevMemberInfo& PrevMembers::bls_pubkey(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMembers.bls_pubkey)
  return _internal_bls_pubkey(index);
}
inline ::zjchain::elect::protobuf::PrevMemberInfo* PrevMembers::_internal_add_bls_pubkey() {
  return bls_pubkey_.Add();
}
inline ::zjchain::elect::protobuf::PrevMemberInfo* PrevMembers::add_bls_pubkey() {
  ::zjchain::elect::protobuf::PrevMemberInfo* _add = _internal_add_bls_pubkey();
  // @@protoc_insertion_point(field_add:zjchain.elect.protobuf.PrevMembers.bls_pubkey)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >&
PrevMembers::bls_pubkey() const {
  // @@protoc_insertion_point(field_list:zjchain.elect.protobuf.PrevMembers.bls_pubkey)
  return bls_pubkey_;
}

// optional uint64 prev_elect_height = 2;
inline bool PrevMembers::_internal_has_prev_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrevMembers::has_prev_elect_height() const {
  return _internal_has_prev_elect_height();
}
inline void PrevMembers::clear_prev_elect_height() {
  prev_elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PrevMembers::_internal_prev_elect_height() const {
  return prev_elect_height_;
}
inline uint64_t PrevMembers::prev_elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMembers.prev_elect_height)
  return _internal_prev_elect_height();
}
inline void PrevMembers::_internal_set_prev_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  prev_elect_height_ = value;
}
inline void PrevMembers::set_prev_elect_height(uint64_t value) {
  _internal_set_prev_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.PrevMembers.prev_elect_height)
}

// optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
inline bool PrevMembers::_internal_has_common_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || common_pubkey_ != nullptr);
  return value;
}
inline bool PrevMembers::has_common_pubkey() const {
  return _internal_has_common_pubkey();
}
inline void PrevMembers::clear_common_pubkey() {
  if (common_pubkey_ != nullptr) common_pubkey_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::elect::protobuf::BlsPublicKey& PrevMembers::_internal_common_pubkey() const {
  const ::zjchain::elect::protobuf::BlsPublicKey* p = common_pubkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::BlsPublicKey&>(
      ::zjchain::elect::protobuf::_BlsPublicKey_default_instance_);
}
inline const ::zjchain::elect::protobuf::BlsPublicKey& PrevMembers::common_pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.PrevMembers.common_pubkey)
  return _internal_common_pubkey();
}
inline void PrevMembers::unsafe_arena_set_allocated_common_pubkey(
    ::zjchain::elect::protobuf::BlsPublicKey* common_pubkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_pubkey_);
  }
  common_pubkey_ = common_pubkey;
  if (common_pubkey) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.PrevMembers.common_pubkey)
}
inline ::zjchain::elect::protobuf::BlsPublicKey* PrevMembers::release_common_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::elect::protobuf::BlsPublicKey* temp = common_pubkey_;
  common_pubkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::BlsPublicKey* PrevMembers::unsafe_arena_release_common_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.PrevMembers.common_pubkey)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::elect::protobuf::BlsPublicKey* temp = common_pubkey_;
  common_pubkey_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::BlsPublicKey* PrevMembers::_internal_mutable_common_pubkey() {
  _has_bits_[0] |= 0x00000001u;
  if (common_pubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::BlsPublicKey>(GetArenaForAllocation());
    common_pubkey_ = p;
  }
  return common_pubkey_;
}
inline ::zjchain::elect::protobuf::BlsPublicKey* PrevMembers::mutable_common_pubkey() {
  ::zjchain::elect::protobuf::BlsPublicKey* _msg = _internal_mutable_common_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.PrevMembers.common_pubkey)
  return _msg;
}
inline void PrevMembers::set_allocated_common_pubkey(::zjchain::elect::protobuf::BlsPublicKey* common_pubkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_pubkey_;
  }
  if (common_pubkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_pubkey);
    if (message_arena != submessage_arena) {
      common_pubkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_pubkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  common_pubkey_ = common_pubkey;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.PrevMembers.common_pubkey)
}

// -------------------------------------------------------------------

// member

// optional bytes pubkey = 1;
inline bool member::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool member::has_pubkey() const {
  return _internal_has_pubkey();
}
inline void member::clear_pubkey() {
  pubkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& member::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.member.pubkey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void member::set_pubkey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pubkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.member.pubkey)
}
inline std::string* member::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.member.pubkey)
  return _s;
}
inline const std::string& member::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void member::_internal_set_pubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* member::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000001u;
  return pubkey_.Mutable(GetArenaForAllocation());
}
inline std::string* member::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.member.pubkey)
  if (!_internal_has_pubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = pubkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void member::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pubkey_.SetAllocated(pubkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.member.pubkey)
}

// optional int32 pool_idx_mod_num = 2;
inline bool member::_internal_has_pool_idx_mod_num() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool member::has_pool_idx_mod_num() const {
  return _internal_has_pool_idx_mod_num();
}
inline void member::clear_pool_idx_mod_num() {
  pool_idx_mod_num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t member::_internal_pool_idx_mod_num() const {
  return pool_idx_mod_num_;
}
inline int32_t member::pool_idx_mod_num() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.member.pool_idx_mod_num)
  return _internal_pool_idx_mod_num();
}
inline void member::_internal_set_pool_idx_mod_num(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  pool_idx_mod_num_ = value;
}
inline void member::set_pool_idx_mod_num(int32_t value) {
  _internal_set_pool_idx_mod_num(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.member.pool_idx_mod_num)
}

// optional uint64 mining_amount = 3;
inline bool member::_internal_has_mining_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool member::has_mining_amount() const {
  return _internal_has_mining_amount();
}
inline void member::clear_mining_amount() {
  mining_amount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t member::_internal_mining_amount() const {
  return mining_amount_;
}
inline uint64_t member::mining_amount() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.member.mining_amount)
  return _internal_mining_amount();
}
inline void member::_internal_set_mining_amount(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  mining_amount_ = value;
}
inline void member::set_mining_amount(uint64_t value) {
  _internal_set_mining_amount(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.member.mining_amount)
}

// -------------------------------------------------------------------

// ElectBlock

// repeated .zjchain.elect.protobuf.member in = 1;
inline int ElectBlock::_internal_in_size() const {
  return in_.size();
}
inline int ElectBlock::in_size() const {
  return _internal_in_size();
}
inline void ElectBlock::clear_in() {
  in_.Clear();
}
inline ::zjchain::elect::protobuf::member* ElectBlock::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectBlock.in)
  return in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::member >*
ElectBlock::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.elect.protobuf.ElectBlock.in)
  return &in_;
}
inline const ::zjchain::elect::protobuf::member& ElectBlock::_internal_in(int index) const {
  return in_.Get(index);
}
inline const ::zjchain::elect::protobuf::member& ElectBlock::in(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectBlock.in)
  return _internal_in(index);
}
inline ::zjchain::elect::protobuf::member* ElectBlock::_internal_add_in() {
  return in_.Add();
}
inline ::zjchain::elect::protobuf::member* ElectBlock::add_in() {
  ::zjchain::elect::protobuf::member* _add = _internal_add_in();
  // @@protoc_insertion_point(field_add:zjchain.elect.protobuf.ElectBlock.in)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::member >&
ElectBlock::in() const {
  // @@protoc_insertion_point(field_list:zjchain.elect.protobuf.ElectBlock.in)
  return in_;
}

// optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
inline bool ElectBlock::_internal_has_prev_members() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || prev_members_ != nullptr);
  return value;
}
inline bool ElectBlock::has_prev_members() const {
  return _internal_has_prev_members();
}
inline void ElectBlock::clear_prev_members() {
  if (prev_members_ != nullptr) prev_members_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::elect::protobuf::PrevMembers& ElectBlock::_internal_prev_members() const {
  const ::zjchain::elect::protobuf::PrevMembers* p = prev_members_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::PrevMembers&>(
      ::zjchain::elect::protobuf::_PrevMembers_default_instance_);
}
inline const ::zjchain::elect::protobuf::PrevMembers& ElectBlock::prev_members() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectBlock.prev_members)
  return _internal_prev_members();
}
inline void ElectBlock::unsafe_arena_set_allocated_prev_members(
    ::zjchain::elect::protobuf::PrevMembers* prev_members) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_members_);
  }
  prev_members_ = prev_members;
  if (prev_members) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectBlock.prev_members)
}
inline ::zjchain::elect::protobuf::PrevMembers* ElectBlock::release_prev_members() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::elect::protobuf::PrevMembers* temp = prev_members_;
  prev_members_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::PrevMembers* ElectBlock::unsafe_arena_release_prev_members() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectBlock.prev_members)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::elect::protobuf::PrevMembers* temp = prev_members_;
  prev_members_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::PrevMembers* ElectBlock::_internal_mutable_prev_members() {
  _has_bits_[0] |= 0x00000001u;
  if (prev_members_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::PrevMembers>(GetArenaForAllocation());
    prev_members_ = p;
  }
  return prev_members_;
}
inline ::zjchain::elect::protobuf::PrevMembers* ElectBlock::mutable_prev_members() {
  ::zjchain::elect::protobuf::PrevMembers* _msg = _internal_mutable_prev_members();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectBlock.prev_members)
  return _msg;
}
inline void ElectBlock::set_allocated_prev_members(::zjchain::elect::protobuf::PrevMembers* prev_members) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prev_members_;
  }
  if (prev_members) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prev_members);
    if (message_arena != submessage_arena) {
      prev_members = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_members, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prev_members_ = prev_members;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectBlock.prev_members)
}

// optional uint32 shard_network_id = 3;
inline bool ElectBlock::_internal_has_shard_network_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ElectBlock::has_shard_network_id() const {
  return _internal_has_shard_network_id();
}
inline void ElectBlock::clear_shard_network_id() {
  shard_network_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ElectBlock::_internal_shard_network_id() const {
  return shard_network_id_;
}
inline uint32_t ElectBlock::shard_network_id() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectBlock.shard_network_id)
  return _internal_shard_network_id();
}
inline void ElectBlock::_internal_set_shard_network_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  shard_network_id_ = value;
}
inline void ElectBlock::set_shard_network_id(uint32_t value) {
  _internal_set_shard_network_id(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.ElectBlock.shard_network_id)
}

// optional uint64 elect_height = 4;
inline bool ElectBlock::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ElectBlock::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void ElectBlock::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ElectBlock::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t ElectBlock::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectBlock.elect_height)
  return _internal_elect_height();
}
inline void ElectBlock::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  elect_height_ = value;
}
inline void ElectBlock::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.ElectBlock.elect_height)
}

// optional uint64 all_gas_amount = 5;
inline bool ElectBlock::_internal_has_all_gas_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ElectBlock::has_all_gas_amount() const {
  return _internal_has_all_gas_amount();
}
inline void ElectBlock::clear_all_gas_amount() {
  all_gas_amount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ElectBlock::_internal_all_gas_amount() const {
  return all_gas_amount_;
}
inline uint64_t ElectBlock::all_gas_amount() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectBlock.all_gas_amount)
  return _internal_all_gas_amount();
}
inline void ElectBlock::_internal_set_all_gas_amount(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  all_gas_amount_ = value;
}
inline void ElectBlock::set_all_gas_amount(uint64_t value) {
  _internal_set_all_gas_amount(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.ElectBlock.all_gas_amount)
}

// optional uint64 gas_for_root = 6;
inline bool ElectBlock::_internal_has_gas_for_root() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ElectBlock::has_gas_for_root() const {
  return _internal_has_gas_for_root();
}
inline void ElectBlock::clear_gas_for_root() {
  gas_for_root_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ElectBlock::_internal_gas_for_root() const {
  return gas_for_root_;
}
inline uint64_t ElectBlock::gas_for_root() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectBlock.gas_for_root)
  return _internal_gas_for_root();
}
inline void ElectBlock::_internal_set_gas_for_root(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  gas_for_root_ = value;
}
inline void ElectBlock::set_gas_for_root(uint64_t value) {
  _internal_set_gas_for_root(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.ElectBlock.gas_for_root)
}

// -------------------------------------------------------------------

// WaitingNodesMessage

// repeated uint64 nodes_filter = 1;
inline int WaitingNodesMessage::_internal_nodes_filter_size() const {
  return nodes_filter_.size();
}
inline int WaitingNodesMessage::nodes_filter_size() const {
  return _internal_nodes_filter_size();
}
inline void WaitingNodesMessage::clear_nodes_filter() {
  nodes_filter_.Clear();
}
inline uint64_t WaitingNodesMessage::_internal_nodes_filter(int index) const {
  return nodes_filter_.Get(index);
}
inline uint64_t WaitingNodesMessage::nodes_filter(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.WaitingNodesMessage.nodes_filter)
  return _internal_nodes_filter(index);
}
inline void WaitingNodesMessage::set_nodes_filter(int index, uint64_t value) {
  nodes_filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.WaitingNodesMessage.nodes_filter)
}
inline void WaitingNodesMessage::_internal_add_nodes_filter(uint64_t value) {
  nodes_filter_.Add(value);
}
inline void WaitingNodesMessage::add_nodes_filter(uint64_t value) {
  _internal_add_nodes_filter(value);
  // @@protoc_insertion_point(field_add:zjchain.elect.protobuf.WaitingNodesMessage.nodes_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
WaitingNodesMessage::_internal_nodes_filter() const {
  return nodes_filter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
WaitingNodesMessage::nodes_filter() const {
  // @@protoc_insertion_point(field_list:zjchain.elect.protobuf.WaitingNodesMessage.nodes_filter)
  return _internal_nodes_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
WaitingNodesMessage::_internal_mutable_nodes_filter() {
  return &nodes_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
WaitingNodesMessage::mutable_nodes_filter() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.elect.protobuf.WaitingNodesMessage.nodes_filter)
  return _internal_mutable_nodes_filter();
}

// optional uint32 waiting_shard_id = 2;
inline bool WaitingNodesMessage::_internal_has_waiting_shard_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WaitingNodesMessage::has_waiting_shard_id() const {
  return _internal_has_waiting_shard_id();
}
inline void WaitingNodesMessage::clear_waiting_shard_id() {
  waiting_shard_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t WaitingNodesMessage::_internal_waiting_shard_id() const {
  return waiting_shard_id_;
}
inline uint32_t WaitingNodesMessage::waiting_shard_id() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.WaitingNodesMessage.waiting_shard_id)
  return _internal_waiting_shard_id();
}
inline void WaitingNodesMessage::_internal_set_waiting_shard_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  waiting_shard_id_ = value;
}
inline void WaitingNodesMessage::set_waiting_shard_id(uint32_t value) {
  _internal_set_waiting_shard_id(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.WaitingNodesMessage.waiting_shard_id)
}

// optional bytes stoke_hash = 3;
inline bool WaitingNodesMessage::_internal_has_stoke_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WaitingNodesMessage::has_stoke_hash() const {
  return _internal_has_stoke_hash();
}
inline void WaitingNodesMessage::clear_stoke_hash() {
  stoke_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WaitingNodesMessage::stoke_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.WaitingNodesMessage.stoke_hash)
  return _internal_stoke_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitingNodesMessage::set_stoke_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stoke_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.WaitingNodesMessage.stoke_hash)
}
inline std::string* WaitingNodesMessage::mutable_stoke_hash() {
  std::string* _s = _internal_mutable_stoke_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.WaitingNodesMessage.stoke_hash)
  return _s;
}
inline const std::string& WaitingNodesMessage::_internal_stoke_hash() const {
  return stoke_hash_.Get();
}
inline void WaitingNodesMessage::_internal_set_stoke_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stoke_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* WaitingNodesMessage::_internal_mutable_stoke_hash() {
  _has_bits_[0] |= 0x00000001u;
  return stoke_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* WaitingNodesMessage::release_stoke_hash() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.WaitingNodesMessage.stoke_hash)
  if (!_internal_has_stoke_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = stoke_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stoke_hash_.IsDefault()) {
    stoke_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WaitingNodesMessage::set_allocated_stoke_hash(std::string* stoke_hash) {
  if (stoke_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stoke_hash_.SetAllocated(stoke_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stoke_hash_.IsDefault()) {
    stoke_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.WaitingNodesMessage.stoke_hash)
}

// -------------------------------------------------------------------

// WaitingNodeHeartbeat

// optional bytes public_ip = 1;
inline bool WaitingNodeHeartbeat::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WaitingNodeHeartbeat::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void WaitingNodeHeartbeat::clear_public_ip() {
  public_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WaitingNodeHeartbeat::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.WaitingNodeHeartbeat.public_ip)
  return _internal_public_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitingNodeHeartbeat::set_public_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 public_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.WaitingNodeHeartbeat.public_ip)
}
inline std::string* WaitingNodeHeartbeat::mutable_public_ip() {
  std::string* _s = _internal_mutable_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.WaitingNodeHeartbeat.public_ip)
  return _s;
}
inline const std::string& WaitingNodeHeartbeat::_internal_public_ip() const {
  return public_ip_.Get();
}
inline void WaitingNodeHeartbeat::_internal_set_public_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* WaitingNodeHeartbeat::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  return public_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* WaitingNodeHeartbeat::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.WaitingNodeHeartbeat.public_ip)
  if (!_internal_has_public_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = public_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_.IsDefault()) {
    public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WaitingNodeHeartbeat::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.SetAllocated(public_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_.IsDefault()) {
    public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.WaitingNodeHeartbeat.public_ip)
}

// optional uint32 public_port = 2;
inline bool WaitingNodeHeartbeat::_internal_has_public_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WaitingNodeHeartbeat::has_public_port() const {
  return _internal_has_public_port();
}
inline void WaitingNodeHeartbeat::clear_public_port() {
  public_port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t WaitingNodeHeartbeat::_internal_public_port() const {
  return public_port_;
}
inline uint32_t WaitingNodeHeartbeat::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.WaitingNodeHeartbeat.public_port)
  return _internal_public_port();
}
inline void WaitingNodeHeartbeat::_internal_set_public_port(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  public_port_ = value;
}
inline void WaitingNodeHeartbeat::set_public_port(uint32_t value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.WaitingNodeHeartbeat.public_port)
}

// optional uint32 network_id = 3;
inline bool WaitingNodeHeartbeat::_internal_has_network_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WaitingNodeHeartbeat::has_network_id() const {
  return _internal_has_network_id();
}
inline void WaitingNodeHeartbeat::clear_network_id() {
  network_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t WaitingNodeHeartbeat::_internal_network_id() const {
  return network_id_;
}
inline uint32_t WaitingNodeHeartbeat::network_id() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.WaitingNodeHeartbeat.network_id)
  return _internal_network_id();
}
inline void WaitingNodeHeartbeat::_internal_set_network_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  network_id_ = value;
}
inline void WaitingNodeHeartbeat::set_network_id(uint32_t value) {
  _internal_set_network_id(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.WaitingNodeHeartbeat.network_id)
}

// optional uint64 timestamp_sec = 4;
inline bool WaitingNodeHeartbeat::_internal_has_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WaitingNodeHeartbeat::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void WaitingNodeHeartbeat::clear_timestamp_sec() {
  timestamp_sec_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t WaitingNodeHeartbeat::_internal_timestamp_sec() const {
  return timestamp_sec_;
}
inline uint64_t WaitingNodeHeartbeat::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.WaitingNodeHeartbeat.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void WaitingNodeHeartbeat::_internal_set_timestamp_sec(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_sec_ = value;
}
inline void WaitingNodeHeartbeat::set_timestamp_sec(uint64_t value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.WaitingNodeHeartbeat.timestamp_sec)
}

// -------------------------------------------------------------------

// LeaderRotationMessage

// optional bytes leader_id = 1;
inline bool LeaderRotationMessage::_internal_has_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaderRotationMessage::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void LeaderRotationMessage::clear_leader_id() {
  leader_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LeaderRotationMessage::leader_id() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.LeaderRotationMessage.leader_id)
  return _internal_leader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaderRotationMessage::set_leader_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 leader_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.LeaderRotationMessage.leader_id)
}
inline std::string* LeaderRotationMessage::mutable_leader_id() {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.LeaderRotationMessage.leader_id)
  return _s;
}
inline const std::string& LeaderRotationMessage::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void LeaderRotationMessage::_internal_set_leader_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  leader_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaderRotationMessage::_internal_mutable_leader_id() {
  _has_bits_[0] |= 0x00000001u;
  return leader_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LeaderRotationMessage::release_leader_id() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.LeaderRotationMessage.leader_id)
  if (!_internal_has_leader_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = leader_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (leader_id_.IsDefault()) {
    leader_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LeaderRotationMessage::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leader_id_.SetAllocated(leader_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (leader_id_.IsDefault()) {
    leader_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.LeaderRotationMessage.leader_id)
}

// optional uint32 pool_mod_num = 2;
inline bool LeaderRotationMessage::_internal_has_pool_mod_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LeaderRotationMessage::has_pool_mod_num() const {
  return _internal_has_pool_mod_num();
}
inline void LeaderRotationMessage::clear_pool_mod_num() {
  pool_mod_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LeaderRotationMessage::_internal_pool_mod_num() const {
  return pool_mod_num_;
}
inline uint32_t LeaderRotationMessage::pool_mod_num() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.LeaderRotationMessage.pool_mod_num)
  return _internal_pool_mod_num();
}
inline void LeaderRotationMessage::_internal_set_pool_mod_num(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pool_mod_num_ = value;
}
inline void LeaderRotationMessage::set_pool_mod_num(uint32_t value) {
  _internal_set_pool_mod_num(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.LeaderRotationMessage.pool_mod_num)
}

// -------------------------------------------------------------------

// SyncNodeStokeItem

// optional bytes id = 1;
inline bool SyncNodeStokeItem::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncNodeStokeItem::has_id() const {
  return _internal_has_id();
}
inline void SyncNodeStokeItem::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncNodeStokeItem::id() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeItem.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNodeStokeItem::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.SyncNodeStokeItem.id)
}
inline std::string* SyncNodeStokeItem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.SyncNodeStokeItem.id)
  return _s;
}
inline const std::string& SyncNodeStokeItem::_internal_id() const {
  return id_.Get();
}
inline void SyncNodeStokeItem::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNodeStokeItem::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNodeStokeItem::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.SyncNodeStokeItem.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncNodeStokeItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.SyncNodeStokeItem.id)
}

// optional uint64 synced_tm_height = 2;
inline bool SyncNodeStokeItem::_internal_has_synced_tm_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SyncNodeStokeItem::has_synced_tm_height() const {
  return _internal_has_synced_tm_height();
}
inline void SyncNodeStokeItem::clear_synced_tm_height() {
  synced_tm_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SyncNodeStokeItem::_internal_synced_tm_height() const {
  return synced_tm_height_;
}
inline uint64_t SyncNodeStokeItem::synced_tm_height() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeItem.synced_tm_height)
  return _internal_synced_tm_height();
}
inline void SyncNodeStokeItem::_internal_set_synced_tm_height(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  synced_tm_height_ = value;
}
inline void SyncNodeStokeItem::set_synced_tm_height(uint64_t value) {
  _internal_set_synced_tm_height(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.SyncNodeStokeItem.synced_tm_height)
}

// -------------------------------------------------------------------

// SyncNodeStokeRequest

// repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
inline int SyncNodeStokeRequest::_internal_sync_item_size() const {
  return sync_item_.size();
}
inline int SyncNodeStokeRequest::sync_item_size() const {
  return _internal_sync_item_size();
}
inline void SyncNodeStokeRequest::clear_sync_item() {
  sync_item_.Clear();
}
inline ::zjchain::elect::protobuf::SyncNodeStokeItem* SyncNodeStokeRequest::mutable_sync_item(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.SyncNodeStokeRequest.sync_item)
  return sync_item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >*
SyncNodeStokeRequest::mutable_sync_item() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.elect.protobuf.SyncNodeStokeRequest.sync_item)
  return &sync_item_;
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeItem& SyncNodeStokeRequest::_internal_sync_item(int index) const {
  return sync_item_.Get(index);
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeItem& SyncNodeStokeRequest::sync_item(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeRequest.sync_item)
  return _internal_sync_item(index);
}
inline ::zjchain::elect::protobuf::SyncNodeStokeItem* SyncNodeStokeRequest::_internal_add_sync_item() {
  return sync_item_.Add();
}
inline ::zjchain::elect::protobuf::SyncNodeStokeItem* SyncNodeStokeRequest::add_sync_item() {
  ::zjchain::elect::protobuf::SyncNodeStokeItem* _add = _internal_add_sync_item();
  // @@protoc_insertion_point(field_add:zjchain.elect.protobuf.SyncNodeStokeRequest.sync_item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >&
SyncNodeStokeRequest::sync_item() const {
  // @@protoc_insertion_point(field_list:zjchain.elect.protobuf.SyncNodeStokeRequest.sync_item)
  return sync_item_;
}

// optional uint64 now_tm_height = 2;
inline bool SyncNodeStokeRequest::_internal_has_now_tm_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncNodeStokeRequest::has_now_tm_height() const {
  return _internal_has_now_tm_height();
}
inline void SyncNodeStokeRequest::clear_now_tm_height() {
  now_tm_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SyncNodeStokeRequest::_internal_now_tm_height() const {
  return now_tm_height_;
}
inline uint64_t SyncNodeStokeRequest::now_tm_height() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeRequest.now_tm_height)
  return _internal_now_tm_height();
}
inline void SyncNodeStokeRequest::_internal_set_now_tm_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  now_tm_height_ = value;
}
inline void SyncNodeStokeRequest::set_now_tm_height(uint64_t value) {
  _internal_set_now_tm_height(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.SyncNodeStokeRequest.now_tm_height)
}

// -------------------------------------------------------------------

// SyncNodeStokeResItem

// optional bytes id = 1;
inline bool SyncNodeStokeResItem::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncNodeStokeResItem::has_id() const {
  return _internal_has_id();
}
inline void SyncNodeStokeResItem::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncNodeStokeResItem::id() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeResItem.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncNodeStokeResItem::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.SyncNodeStokeResItem.id)
}
inline std::string* SyncNodeStokeResItem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.SyncNodeStokeResItem.id)
  return _s;
}
inline const std::string& SyncNodeStokeResItem::_internal_id() const {
  return id_.Get();
}
inline void SyncNodeStokeResItem::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncNodeStokeResItem::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncNodeStokeResItem::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.SyncNodeStokeResItem.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncNodeStokeResItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.SyncNodeStokeResItem.id)
}

// optional uint64 balance = 2;
inline bool SyncNodeStokeResItem::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SyncNodeStokeResItem::has_balance() const {
  return _internal_has_balance();
}
inline void SyncNodeStokeResItem::clear_balance() {
  balance_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SyncNodeStokeResItem::_internal_balance() const {
  return balance_;
}
inline uint64_t SyncNodeStokeResItem::balance() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeResItem.balance)
  return _internal_balance();
}
inline void SyncNodeStokeResItem::_internal_set_balance(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  balance_ = value;
}
inline void SyncNodeStokeResItem::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.SyncNodeStokeResItem.balance)
}

// -------------------------------------------------------------------

// SyncNodeStokeResponse

// repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
inline int SyncNodeStokeResponse::_internal_items_size() const {
  return items_.size();
}
inline int SyncNodeStokeResponse::items_size() const {
  return _internal_items_size();
}
inline void SyncNodeStokeResponse::clear_items() {
  items_.Clear();
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResItem* SyncNodeStokeResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.SyncNodeStokeResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >*
SyncNodeStokeResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.elect.protobuf.SyncNodeStokeResponse.items)
  return &items_;
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeResItem& SyncNodeStokeResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeResItem& SyncNodeStokeResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeResponse.items)
  return _internal_items(index);
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResItem* SyncNodeStokeResponse::_internal_add_items() {
  return items_.Add();
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResItem* SyncNodeStokeResponse::add_items() {
  ::zjchain::elect::protobuf::SyncNodeStokeResItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:zjchain.elect.protobuf.SyncNodeStokeResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >&
SyncNodeStokeResponse::items() const {
  // @@protoc_insertion_point(field_list:zjchain.elect.protobuf.SyncNodeStokeResponse.items)
  return items_;
}

// optional uint64 now_tm_height = 2;
inline bool SyncNodeStokeResponse::_internal_has_now_tm_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncNodeStokeResponse::has_now_tm_height() const {
  return _internal_has_now_tm_height();
}
inline void SyncNodeStokeResponse::clear_now_tm_height() {
  now_tm_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SyncNodeStokeResponse::_internal_now_tm_height() const {
  return now_tm_height_;
}
inline uint64_t SyncNodeStokeResponse::now_tm_height() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.SyncNodeStokeResponse.now_tm_height)
  return _internal_now_tm_height();
}
inline void SyncNodeStokeResponse::_internal_set_now_tm_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  now_tm_height_ = value;
}
inline void SyncNodeStokeResponse::set_now_tm_height(uint64_t value) {
  _internal_set_now_tm_height(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.SyncNodeStokeResponse.now_tm_height)
}

// -------------------------------------------------------------------

// ElectMessage

// optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
inline bool ElectMessage::_internal_has_elect_block() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || elect_block_ != nullptr);
  return value;
}
inline bool ElectMessage::has_elect_block() const {
  return _internal_has_elect_block();
}
inline void ElectMessage::clear_elect_block() {
  if (elect_block_ != nullptr) elect_block_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zjchain::elect::protobuf::ElectBlock& ElectMessage::_internal_elect_block() const {
  const ::zjchain::elect::protobuf::ElectBlock* p = elect_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::ElectBlock&>(
      ::zjchain::elect::protobuf::_ElectBlock_default_instance_);
}
inline const ::zjchain::elect::protobuf::ElectBlock& ElectMessage::elect_block() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.elect_block)
  return _internal_elect_block();
}
inline void ElectMessage::unsafe_arena_set_allocated_elect_block(
    ::zjchain::elect::protobuf::ElectBlock* elect_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elect_block_);
  }
  elect_block_ = elect_block;
  if (elect_block) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectMessage.elect_block)
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::release_elect_block() {
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::elect::protobuf::ElectBlock* temp = elect_block_;
  elect_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::unsafe_arena_release_elect_block() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.elect_block)
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::elect::protobuf::ElectBlock* temp = elect_block_;
  elect_block_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::_internal_mutable_elect_block() {
  _has_bits_[0] |= 0x00000004u;
  if (elect_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::ElectBlock>(GetArenaForAllocation());
    elect_block_ = p;
  }
  return elect_block_;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::mutable_elect_block() {
  ::zjchain::elect::protobuf::ElectBlock* _msg = _internal_mutable_elect_block();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.elect_block)
  return _msg;
}
inline void ElectMessage::set_allocated_elect_block(::zjchain::elect::protobuf::ElectBlock* elect_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete elect_block_;
  }
  if (elect_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(elect_block);
    if (message_arena != submessage_arena) {
      elect_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elect_block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  elect_block_ = elect_block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.elect_block)
}

// optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
inline bool ElectMessage::_internal_has_prev_elect_block() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || prev_elect_block_ != nullptr);
  return value;
}
inline bool ElectMessage::has_prev_elect_block() const {
  return _internal_has_prev_elect_block();
}
inline void ElectMessage::clear_prev_elect_block() {
  if (prev_elect_block_ != nullptr) prev_elect_block_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zjchain::elect::protobuf::ElectBlock& ElectMessage::_internal_prev_elect_block() const {
  const ::zjchain::elect::protobuf::ElectBlock* p = prev_elect_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::ElectBlock&>(
      ::zjchain::elect::protobuf::_ElectBlock_default_instance_);
}
inline const ::zjchain::elect::protobuf::ElectBlock& ElectMessage::prev_elect_block() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.prev_elect_block)
  return _internal_prev_elect_block();
}
inline void ElectMessage::unsafe_arena_set_allocated_prev_elect_block(
    ::zjchain::elect::protobuf::ElectBlock* prev_elect_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_elect_block_);
  }
  prev_elect_block_ = prev_elect_block;
  if (prev_elect_block) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectMessage.prev_elect_block)
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::release_prev_elect_block() {
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::elect::protobuf::ElectBlock* temp = prev_elect_block_;
  prev_elect_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::unsafe_arena_release_prev_elect_block() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.prev_elect_block)
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::elect::protobuf::ElectBlock* temp = prev_elect_block_;
  prev_elect_block_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::_internal_mutable_prev_elect_block() {
  _has_bits_[0] |= 0x00000008u;
  if (prev_elect_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::ElectBlock>(GetArenaForAllocation());
    prev_elect_block_ = p;
  }
  return prev_elect_block_;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::mutable_prev_elect_block() {
  ::zjchain::elect::protobuf::ElectBlock* _msg = _internal_mutable_prev_elect_block();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.prev_elect_block)
  return _msg;
}
inline void ElectMessage::set_allocated_prev_elect_block(::zjchain::elect::protobuf::ElectBlock* prev_elect_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prev_elect_block_;
  }
  if (prev_elect_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prev_elect_block);
    if (message_arena != submessage_arena) {
      prev_elect_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_elect_block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prev_elect_block_ = prev_elect_block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.prev_elect_block)
}

// optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
inline bool ElectMessage::_internal_has_waiting_nodes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || waiting_nodes_ != nullptr);
  return value;
}
inline bool ElectMessage::has_waiting_nodes() const {
  return _internal_has_waiting_nodes();
}
inline void ElectMessage::clear_waiting_nodes() {
  if (waiting_nodes_ != nullptr) waiting_nodes_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::zjchain::elect::protobuf::WaitingNodesMessage& ElectMessage::_internal_waiting_nodes() const {
  const ::zjchain::elect::protobuf::WaitingNodesMessage* p = waiting_nodes_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::WaitingNodesMessage&>(
      ::zjchain::elect::protobuf::_WaitingNodesMessage_default_instance_);
}
inline const ::zjchain::elect::protobuf::WaitingNodesMessage& ElectMessage::waiting_nodes() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.waiting_nodes)
  return _internal_waiting_nodes();
}
inline void ElectMessage::unsafe_arena_set_allocated_waiting_nodes(
    ::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waiting_nodes_);
  }
  waiting_nodes_ = waiting_nodes;
  if (waiting_nodes) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectMessage.waiting_nodes)
}
inline ::zjchain::elect::protobuf::WaitingNodesMessage* ElectMessage::release_waiting_nodes() {
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::elect::protobuf::WaitingNodesMessage* temp = waiting_nodes_;
  waiting_nodes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::WaitingNodesMessage* ElectMessage::unsafe_arena_release_waiting_nodes() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.waiting_nodes)
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::elect::protobuf::WaitingNodesMessage* temp = waiting_nodes_;
  waiting_nodes_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::WaitingNodesMessage* ElectMessage::_internal_mutable_waiting_nodes() {
  _has_bits_[0] |= 0x00000010u;
  if (waiting_nodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::WaitingNodesMessage>(GetArenaForAllocation());
    waiting_nodes_ = p;
  }
  return waiting_nodes_;
}
inline ::zjchain::elect::protobuf::WaitingNodesMessage* ElectMessage::mutable_waiting_nodes() {
  ::zjchain::elect::protobuf::WaitingNodesMessage* _msg = _internal_mutable_waiting_nodes();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.waiting_nodes)
  return _msg;
}
inline void ElectMessage::set_allocated_waiting_nodes(::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete waiting_nodes_;
  }
  if (waiting_nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(waiting_nodes);
    if (message_arena != submessage_arena) {
      waiting_nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waiting_nodes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  waiting_nodes_ = waiting_nodes;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.waiting_nodes)
}

// optional int32 member_index = 4;
inline bool ElectMessage::_internal_has_member_index() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ElectMessage::has_member_index() const {
  return _internal_has_member_index();
}
inline void ElectMessage::clear_member_index() {
  member_index_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t ElectMessage::_internal_member_index() const {
  return member_index_;
}
inline int32_t ElectMessage::member_index() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.member_index)
  return _internal_member_index();
}
inline void ElectMessage::_internal_set_member_index(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  member_index_ = value;
}
inline void ElectMessage::set_member_index(int32_t value) {
  _internal_set_member_index(value);
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.ElectMessage.member_index)
}

// optional bytes sign_ch = 5;
inline bool ElectMessage::_internal_has_sign_ch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ElectMessage::has_sign_ch() const {
  return _internal_has_sign_ch();
}
inline void ElectMessage::clear_sign_ch() {
  sign_ch_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ElectMessage::sign_ch() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.sign_ch)
  return _internal_sign_ch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElectMessage::set_sign_ch(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sign_ch_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.ElectMessage.sign_ch)
}
inline std::string* ElectMessage::mutable_sign_ch() {
  std::string* _s = _internal_mutable_sign_ch();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.sign_ch)
  return _s;
}
inline const std::string& ElectMessage::_internal_sign_ch() const {
  return sign_ch_.Get();
}
inline void ElectMessage::_internal_set_sign_ch(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sign_ch_.Set(value, GetArenaForAllocation());
}
inline std::string* ElectMessage::_internal_mutable_sign_ch() {
  _has_bits_[0] |= 0x00000001u;
  return sign_ch_.Mutable(GetArenaForAllocation());
}
inline std::string* ElectMessage::release_sign_ch() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.sign_ch)
  if (!_internal_has_sign_ch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sign_ch_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_ch_.IsDefault()) {
    sign_ch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ElectMessage::set_allocated_sign_ch(std::string* sign_ch) {
  if (sign_ch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sign_ch_.SetAllocated(sign_ch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_ch_.IsDefault()) {
    sign_ch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.sign_ch)
}

// optional bytes sign_res = 6;
inline bool ElectMessage::_internal_has_sign_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ElectMessage::has_sign_res() const {
  return _internal_has_sign_res();
}
inline void ElectMessage::clear_sign_res() {
  sign_res_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ElectMessage::sign_res() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.sign_res)
  return _internal_sign_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ElectMessage::set_sign_res(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sign_res_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.elect.protobuf.ElectMessage.sign_res)
}
inline std::string* ElectMessage::mutable_sign_res() {
  std::string* _s = _internal_mutable_sign_res();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.sign_res)
  return _s;
}
inline const std::string& ElectMessage::_internal_sign_res() const {
  return sign_res_.Get();
}
inline void ElectMessage::_internal_set_sign_res(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sign_res_.Set(value, GetArenaForAllocation());
}
inline std::string* ElectMessage::_internal_mutable_sign_res() {
  _has_bits_[0] |= 0x00000002u;
  return sign_res_.Mutable(GetArenaForAllocation());
}
inline std::string* ElectMessage::release_sign_res() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.sign_res)
  if (!_internal_has_sign_res()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sign_res_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_res_.IsDefault()) {
    sign_res_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ElectMessage::set_allocated_sign_res(std::string* sign_res) {
  if (sign_res != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sign_res_.SetAllocated(sign_res, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_res_.IsDefault()) {
    sign_res_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.sign_res)
}

// optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
inline bool ElectMessage::_internal_has_waiting_heartbeat() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || waiting_heartbeat_ != nullptr);
  return value;
}
inline bool ElectMessage::has_waiting_heartbeat() const {
  return _internal_has_waiting_heartbeat();
}
inline void ElectMessage::clear_waiting_heartbeat() {
  if (waiting_heartbeat_ != nullptr) waiting_heartbeat_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::zjchain::elect::protobuf::WaitingNodeHeartbeat& ElectMessage::_internal_waiting_heartbeat() const {
  const ::zjchain::elect::protobuf::WaitingNodeHeartbeat* p = waiting_heartbeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::WaitingNodeHeartbeat&>(
      ::zjchain::elect::protobuf::_WaitingNodeHeartbeat_default_instance_);
}
inline const ::zjchain::elect::protobuf::WaitingNodeHeartbeat& ElectMessage::waiting_heartbeat() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.waiting_heartbeat)
  return _internal_waiting_heartbeat();
}
inline void ElectMessage::unsafe_arena_set_allocated_waiting_heartbeat(
    ::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waiting_heartbeat_);
  }
  waiting_heartbeat_ = waiting_heartbeat;
  if (waiting_heartbeat) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectMessage.waiting_heartbeat)
}
inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* ElectMessage::release_waiting_heartbeat() {
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* temp = waiting_heartbeat_;
  waiting_heartbeat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* ElectMessage::unsafe_arena_release_waiting_heartbeat() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.waiting_heartbeat)
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* temp = waiting_heartbeat_;
  waiting_heartbeat_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* ElectMessage::_internal_mutable_waiting_heartbeat() {
  _has_bits_[0] |= 0x00000020u;
  if (waiting_heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::WaitingNodeHeartbeat>(GetArenaForAllocation());
    waiting_heartbeat_ = p;
  }
  return waiting_heartbeat_;
}
inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* ElectMessage::mutable_waiting_heartbeat() {
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* _msg = _internal_mutable_waiting_heartbeat();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.waiting_heartbeat)
  return _msg;
}
inline void ElectMessage::set_allocated_waiting_heartbeat(::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete waiting_heartbeat_;
  }
  if (waiting_heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(waiting_heartbeat);
    if (message_arena != submessage_arena) {
      waiting_heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waiting_heartbeat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  waiting_heartbeat_ = waiting_heartbeat;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.waiting_heartbeat)
}

// optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
inline bool ElectMessage::_internal_has_leader_rotation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || leader_rotation_ != nullptr);
  return value;
}
inline bool ElectMessage::has_leader_rotation() const {
  return _internal_has_leader_rotation();
}
inline void ElectMessage::clear_leader_rotation() {
  if (leader_rotation_ != nullptr) leader_rotation_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::zjchain::elect::protobuf::LeaderRotationMessage& ElectMessage::_internal_leader_rotation() const {
  const ::zjchain::elect::protobuf::LeaderRotationMessage* p = leader_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::LeaderRotationMessage&>(
      ::zjchain::elect::protobuf::_LeaderRotationMessage_default_instance_);
}
inline const ::zjchain::elect::protobuf::LeaderRotationMessage& ElectMessage::leader_rotation() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.leader_rotation)
  return _internal_leader_rotation();
}
inline void ElectMessage::unsafe_arena_set_allocated_leader_rotation(
    ::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_rotation_);
  }
  leader_rotation_ = leader_rotation;
  if (leader_rotation) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectMessage.leader_rotation)
}
inline ::zjchain::elect::protobuf::LeaderRotationMessage* ElectMessage::release_leader_rotation() {
  _has_bits_[0] &= ~0x00000040u;
  ::zjchain::elect::protobuf::LeaderRotationMessage* temp = leader_rotation_;
  leader_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::LeaderRotationMessage* ElectMessage::unsafe_arena_release_leader_rotation() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.leader_rotation)
  _has_bits_[0] &= ~0x00000040u;
  ::zjchain::elect::protobuf::LeaderRotationMessage* temp = leader_rotation_;
  leader_rotation_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::LeaderRotationMessage* ElectMessage::_internal_mutable_leader_rotation() {
  _has_bits_[0] |= 0x00000040u;
  if (leader_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::LeaderRotationMessage>(GetArenaForAllocation());
    leader_rotation_ = p;
  }
  return leader_rotation_;
}
inline ::zjchain::elect::protobuf::LeaderRotationMessage* ElectMessage::mutable_leader_rotation() {
  ::zjchain::elect::protobuf::LeaderRotationMessage* _msg = _internal_mutable_leader_rotation();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.leader_rotation)
  return _msg;
}
inline void ElectMessage::set_allocated_leader_rotation(::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete leader_rotation_;
  }
  if (leader_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leader_rotation);
    if (message_arena != submessage_arena) {
      leader_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  leader_rotation_ = leader_rotation;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.leader_rotation)
}

// optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
inline bool ElectMessage::_internal_has_sync_stoke_req() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || sync_stoke_req_ != nullptr);
  return value;
}
inline bool ElectMessage::has_sync_stoke_req() const {
  return _internal_has_sync_stoke_req();
}
inline void ElectMessage::clear_sync_stoke_req() {
  if (sync_stoke_req_ != nullptr) sync_stoke_req_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeRequest& ElectMessage::_internal_sync_stoke_req() const {
  const ::zjchain::elect::protobuf::SyncNodeStokeRequest* p = sync_stoke_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::SyncNodeStokeRequest&>(
      ::zjchain::elect::protobuf::_SyncNodeStokeRequest_default_instance_);
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeRequest& ElectMessage::sync_stoke_req() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.sync_stoke_req)
  return _internal_sync_stoke_req();
}
inline void ElectMessage::unsafe_arena_set_allocated_sync_stoke_req(
    ::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_stoke_req_);
  }
  sync_stoke_req_ = sync_stoke_req;
  if (sync_stoke_req) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectMessage.sync_stoke_req)
}
inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* ElectMessage::release_sync_stoke_req() {
  _has_bits_[0] &= ~0x00000080u;
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* temp = sync_stoke_req_;
  sync_stoke_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* ElectMessage::unsafe_arena_release_sync_stoke_req() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.sync_stoke_req)
  _has_bits_[0] &= ~0x00000080u;
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* temp = sync_stoke_req_;
  sync_stoke_req_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* ElectMessage::_internal_mutable_sync_stoke_req() {
  _has_bits_[0] |= 0x00000080u;
  if (sync_stoke_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::SyncNodeStokeRequest>(GetArenaForAllocation());
    sync_stoke_req_ = p;
  }
  return sync_stoke_req_;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* ElectMessage::mutable_sync_stoke_req() {
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* _msg = _internal_mutable_sync_stoke_req();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.sync_stoke_req)
  return _msg;
}
inline void ElectMessage::set_allocated_sync_stoke_req(::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sync_stoke_req_;
  }
  if (sync_stoke_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sync_stoke_req);
    if (message_arena != submessage_arena) {
      sync_stoke_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_stoke_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sync_stoke_req_ = sync_stoke_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.sync_stoke_req)
}

// optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
inline bool ElectMessage::_internal_has_sync_stoke_res() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || sync_stoke_res_ != nullptr);
  return value;
}
inline bool ElectMessage::has_sync_stoke_res() const {
  return _internal_has_sync_stoke_res();
}
inline void ElectMessage::clear_sync_stoke_res() {
  if (sync_stoke_res_ != nullptr) sync_stoke_res_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeResponse& ElectMessage::_internal_sync_stoke_res() const {
  const ::zjchain::elect::protobuf::SyncNodeStokeResponse* p = sync_stoke_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::SyncNodeStokeResponse&>(
      ::zjchain::elect::protobuf::_SyncNodeStokeResponse_default_instance_);
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeResponse& ElectMessage::sync_stoke_res() const {
  // @@protoc_insertion_point(field_get:zjchain.elect.protobuf.ElectMessage.sync_stoke_res)
  return _internal_sync_stoke_res();
}
inline void ElectMessage::unsafe_arena_set_allocated_sync_stoke_res(
    ::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_stoke_res_);
  }
  sync_stoke_res_ = sync_stoke_res;
  if (sync_stoke_res) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.elect.protobuf.ElectMessage.sync_stoke_res)
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* ElectMessage::release_sync_stoke_res() {
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* temp = sync_stoke_res_;
  sync_stoke_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* ElectMessage::unsafe_arena_release_sync_stoke_res() {
  // @@protoc_insertion_point(field_release:zjchain.elect.protobuf.ElectMessage.sync_stoke_res)
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* temp = sync_stoke_res_;
  sync_stoke_res_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* ElectMessage::_internal_mutable_sync_stoke_res() {
  _has_bits_[0] |= 0x00000100u;
  if (sync_stoke_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::SyncNodeStokeResponse>(GetArenaForAllocation());
    sync_stoke_res_ = p;
  }
  return sync_stoke_res_;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* ElectMessage::mutable_sync_stoke_res() {
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* _msg = _internal_mutable_sync_stoke_res();
  // @@protoc_insertion_point(field_mutable:zjchain.elect.protobuf.ElectMessage.sync_stoke_res)
  return _msg;
}
inline void ElectMessage::set_allocated_sync_stoke_res(::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sync_stoke_res_;
  }
  if (sync_stoke_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sync_stoke_res);
    if (message_arena != submessage_arena) {
      sync_stoke_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_stoke_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sync_stoke_res_ = sync_stoke_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.elect.protobuf.ElectMessage.sync_stoke_res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace elect
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2felect_2eproto
