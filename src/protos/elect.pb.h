// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/elect.proto

#ifndef PROTOBUF_protos_2felect_2eproto__INCLUDED
#define PROTOBUF_protos_2felect_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace elect {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protos_2felect_2eproto();
void protobuf_AssignDesc_protos_2felect_2eproto();
void protobuf_ShutdownFile_protos_2felect_2eproto();

class VerifyVecValue;
class BlsPublicKey;
class PrevMemberInfo;
class PrevMembers;
class member;
class ElectBlock;
class WaitingNodesMessage;
class WaitingNodeHeartbeat;
class LeaderRotationMessage;
class SyncNodeStokeItem;
class SyncNodeStokeRequest;
class SyncNodeStokeResItem;
class SyncNodeStokeResponse;
class ElectMessage;

// ===================================================================

class VerifyVecValue : public ::google::protobuf::Message {
 public:
  VerifyVecValue();
  virtual ~VerifyVecValue();

  VerifyVecValue(const VerifyVecValue& from);

  inline VerifyVecValue& operator=(const VerifyVecValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyVecValue& default_instance();

  void Swap(VerifyVecValue* other);

  // implements Message ----------------------------------------------

  VerifyVecValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyVecValue& from);
  void MergeFrom(const VerifyVecValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes x_c0 = 1;
  inline bool has_x_c0() const;
  inline void clear_x_c0();
  static const int kXC0FieldNumber = 1;
  inline const ::std::string& x_c0() const;
  inline void set_x_c0(const ::std::string& value);
  inline void set_x_c0(const char* value);
  inline void set_x_c0(const void* value, size_t size);
  inline ::std::string* mutable_x_c0();
  inline ::std::string* release_x_c0();
  inline void set_allocated_x_c0(::std::string* x_c0);

  // optional bytes x_c1 = 2;
  inline bool has_x_c1() const;
  inline void clear_x_c1();
  static const int kXC1FieldNumber = 2;
  inline const ::std::string& x_c1() const;
  inline void set_x_c1(const ::std::string& value);
  inline void set_x_c1(const char* value);
  inline void set_x_c1(const void* value, size_t size);
  inline ::std::string* mutable_x_c1();
  inline ::std::string* release_x_c1();
  inline void set_allocated_x_c1(::std::string* x_c1);

  // optional bytes y_c0 = 3;
  inline bool has_y_c0() const;
  inline void clear_y_c0();
  static const int kYC0FieldNumber = 3;
  inline const ::std::string& y_c0() const;
  inline void set_y_c0(const ::std::string& value);
  inline void set_y_c0(const char* value);
  inline void set_y_c0(const void* value, size_t size);
  inline ::std::string* mutable_y_c0();
  inline ::std::string* release_y_c0();
  inline void set_allocated_y_c0(::std::string* y_c0);

  // optional bytes y_c1 = 4;
  inline bool has_y_c1() const;
  inline void clear_y_c1();
  static const int kYC1FieldNumber = 4;
  inline const ::std::string& y_c1() const;
  inline void set_y_c1(const ::std::string& value);
  inline void set_y_c1(const char* value);
  inline void set_y_c1(const void* value, size_t size);
  inline ::std::string* mutable_y_c1();
  inline ::std::string* release_y_c1();
  inline void set_allocated_y_c1(::std::string* y_c1);

  // optional bytes z_c0 = 5;
  inline bool has_z_c0() const;
  inline void clear_z_c0();
  static const int kZC0FieldNumber = 5;
  inline const ::std::string& z_c0() const;
  inline void set_z_c0(const ::std::string& value);
  inline void set_z_c0(const char* value);
  inline void set_z_c0(const void* value, size_t size);
  inline ::std::string* mutable_z_c0();
  inline ::std::string* release_z_c0();
  inline void set_allocated_z_c0(::std::string* z_c0);

  // optional bytes z_c1 = 6;
  inline bool has_z_c1() const;
  inline void clear_z_c1();
  static const int kZC1FieldNumber = 6;
  inline const ::std::string& z_c1() const;
  inline void set_z_c1(const ::std::string& value);
  inline void set_z_c1(const char* value);
  inline void set_z_c1(const void* value, size_t size);
  inline ::std::string* mutable_z_c1();
  inline ::std::string* release_z_c1();
  inline void set_allocated_z_c1(::std::string* z_c1);

  // optional uint32 valid_t = 7;
  inline bool has_valid_t() const;
  inline void clear_valid_t();
  static const int kValidTFieldNumber = 7;
  inline ::google::protobuf::uint32 valid_t() const;
  inline void set_valid_t(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.VerifyVecValue)
 private:
  inline void set_has_x_c0();
  inline void clear_has_x_c0();
  inline void set_has_x_c1();
  inline void clear_has_x_c1();
  inline void set_has_y_c0();
  inline void clear_has_y_c0();
  inline void set_has_y_c1();
  inline void clear_has_y_c1();
  inline void set_has_z_c0();
  inline void clear_has_z_c0();
  inline void set_has_z_c1();
  inline void clear_has_z_c1();
  inline void set_has_valid_t();
  inline void clear_has_valid_t();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* x_c0_;
  ::std::string* x_c1_;
  ::std::string* y_c0_;
  ::std::string* y_c1_;
  ::std::string* z_c0_;
  ::std::string* z_c1_;
  ::google::protobuf::uint32 valid_t_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static VerifyVecValue* default_instance_;
};
// -------------------------------------------------------------------

class BlsPublicKey : public ::google::protobuf::Message {
 public:
  BlsPublicKey();
  virtual ~BlsPublicKey();

  BlsPublicKey(const BlsPublicKey& from);

  inline BlsPublicKey& operator=(const BlsPublicKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlsPublicKey& default_instance();

  void Swap(BlsPublicKey* other);

  // implements Message ----------------------------------------------

  BlsPublicKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlsPublicKey& from);
  void MergeFrom(const BlsPublicKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes x_c0 = 1;
  inline bool has_x_c0() const;
  inline void clear_x_c0();
  static const int kXC0FieldNumber = 1;
  inline const ::std::string& x_c0() const;
  inline void set_x_c0(const ::std::string& value);
  inline void set_x_c0(const char* value);
  inline void set_x_c0(const void* value, size_t size);
  inline ::std::string* mutable_x_c0();
  inline ::std::string* release_x_c0();
  inline void set_allocated_x_c0(::std::string* x_c0);

  // optional bytes x_c1 = 2;
  inline bool has_x_c1() const;
  inline void clear_x_c1();
  static const int kXC1FieldNumber = 2;
  inline const ::std::string& x_c1() const;
  inline void set_x_c1(const ::std::string& value);
  inline void set_x_c1(const char* value);
  inline void set_x_c1(const void* value, size_t size);
  inline ::std::string* mutable_x_c1();
  inline ::std::string* release_x_c1();
  inline void set_allocated_x_c1(::std::string* x_c1);

  // optional bytes y_c0 = 3;
  inline bool has_y_c0() const;
  inline void clear_y_c0();
  static const int kYC0FieldNumber = 3;
  inline const ::std::string& y_c0() const;
  inline void set_y_c0(const ::std::string& value);
  inline void set_y_c0(const char* value);
  inline void set_y_c0(const void* value, size_t size);
  inline ::std::string* mutable_y_c0();
  inline ::std::string* release_y_c0();
  inline void set_allocated_y_c0(::std::string* y_c0);

  // optional bytes y_c1 = 4;
  inline bool has_y_c1() const;
  inline void clear_y_c1();
  static const int kYC1FieldNumber = 4;
  inline const ::std::string& y_c1() const;
  inline void set_y_c1(const ::std::string& value);
  inline void set_y_c1(const char* value);
  inline void set_y_c1(const void* value, size_t size);
  inline ::std::string* mutable_y_c1();
  inline ::std::string* release_y_c1();
  inline void set_allocated_y_c1(::std::string* y_c1);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.BlsPublicKey)
 private:
  inline void set_has_x_c0();
  inline void clear_has_x_c0();
  inline void set_has_x_c1();
  inline void clear_has_x_c1();
  inline void set_has_y_c0();
  inline void clear_has_y_c0();
  inline void set_has_y_c1();
  inline void clear_has_y_c1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* x_c0_;
  ::std::string* x_c1_;
  ::std::string* y_c0_;
  ::std::string* y_c1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static BlsPublicKey* default_instance_;
};
// -------------------------------------------------------------------

class PrevMemberInfo : public ::google::protobuf::Message {
 public:
  PrevMemberInfo();
  virtual ~PrevMemberInfo();

  PrevMemberInfo(const PrevMemberInfo& from);

  inline PrevMemberInfo& operator=(const PrevMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevMemberInfo& default_instance();

  void Swap(PrevMemberInfo* other);

  // implements Message ----------------------------------------------

  PrevMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevMemberInfo& from);
  void MergeFrom(const PrevMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes x_c0 = 1;
  inline bool has_x_c0() const;
  inline void clear_x_c0();
  static const int kXC0FieldNumber = 1;
  inline const ::std::string& x_c0() const;
  inline void set_x_c0(const ::std::string& value);
  inline void set_x_c0(const char* value);
  inline void set_x_c0(const void* value, size_t size);
  inline ::std::string* mutable_x_c0();
  inline ::std::string* release_x_c0();
  inline void set_allocated_x_c0(::std::string* x_c0);

  // optional bytes x_c1 = 2;
  inline bool has_x_c1() const;
  inline void clear_x_c1();
  static const int kXC1FieldNumber = 2;
  inline const ::std::string& x_c1() const;
  inline void set_x_c1(const ::std::string& value);
  inline void set_x_c1(const char* value);
  inline void set_x_c1(const void* value, size_t size);
  inline ::std::string* mutable_x_c1();
  inline ::std::string* release_x_c1();
  inline void set_allocated_x_c1(::std::string* x_c1);

  // optional bytes y_c0 = 3;
  inline bool has_y_c0() const;
  inline void clear_y_c0();
  static const int kYC0FieldNumber = 3;
  inline const ::std::string& y_c0() const;
  inline void set_y_c0(const ::std::string& value);
  inline void set_y_c0(const char* value);
  inline void set_y_c0(const void* value, size_t size);
  inline ::std::string* mutable_y_c0();
  inline ::std::string* release_y_c0();
  inline void set_allocated_y_c0(::std::string* y_c0);

  // optional bytes y_c1 = 4;
  inline bool has_y_c1() const;
  inline void clear_y_c1();
  static const int kYC1FieldNumber = 4;
  inline const ::std::string& y_c1() const;
  inline void set_y_c1(const ::std::string& value);
  inline void set_y_c1(const char* value);
  inline void set_y_c1(const void* value, size_t size);
  inline ::std::string* mutable_y_c1();
  inline ::std::string* release_y_c1();
  inline void set_allocated_y_c1(::std::string* y_c1);

  // optional int32 pool_idx_mod_num = 5 [default = -1];
  inline bool has_pool_idx_mod_num() const;
  inline void clear_pool_idx_mod_num();
  static const int kPoolIdxModNumFieldNumber = 5;
  inline ::google::protobuf::int32 pool_idx_mod_num() const;
  inline void set_pool_idx_mod_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.PrevMemberInfo)
 private:
  inline void set_has_x_c0();
  inline void clear_has_x_c0();
  inline void set_has_x_c1();
  inline void clear_has_x_c1();
  inline void set_has_y_c0();
  inline void clear_has_y_c0();
  inline void set_has_y_c1();
  inline void clear_has_y_c1();
  inline void set_has_pool_idx_mod_num();
  inline void clear_has_pool_idx_mod_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* x_c0_;
  ::std::string* x_c1_;
  ::std::string* y_c0_;
  ::std::string* y_c1_;
  ::google::protobuf::int32 pool_idx_mod_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static PrevMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class PrevMembers : public ::google::protobuf::Message {
 public:
  PrevMembers();
  virtual ~PrevMembers();

  PrevMembers(const PrevMembers& from);

  inline PrevMembers& operator=(const PrevMembers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevMembers& default_instance();

  void Swap(PrevMembers* other);

  // implements Message ----------------------------------------------

  PrevMembers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevMembers& from);
  void MergeFrom(const PrevMembers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
  inline int bls_pubkey_size() const;
  inline void clear_bls_pubkey();
  static const int kBlsPubkeyFieldNumber = 1;
  inline const ::zjchain::elect::protobuf::PrevMemberInfo& bls_pubkey(int index) const;
  inline ::zjchain::elect::protobuf::PrevMemberInfo* mutable_bls_pubkey(int index);
  inline ::zjchain::elect::protobuf::PrevMemberInfo* add_bls_pubkey();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >&
      bls_pubkey() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >*
      mutable_bls_pubkey();

  // optional uint64 prev_elect_height = 2;
  inline bool has_prev_elect_height() const;
  inline void clear_prev_elect_height();
  static const int kPrevElectHeightFieldNumber = 2;
  inline ::google::protobuf::uint64 prev_elect_height() const;
  inline void set_prev_elect_height(::google::protobuf::uint64 value);

  // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
  inline bool has_common_pubkey() const;
  inline void clear_common_pubkey();
  static const int kCommonPubkeyFieldNumber = 3;
  inline const ::zjchain::elect::protobuf::BlsPublicKey& common_pubkey() const;
  inline ::zjchain::elect::protobuf::BlsPublicKey* mutable_common_pubkey();
  inline ::zjchain::elect::protobuf::BlsPublicKey* release_common_pubkey();
  inline void set_allocated_common_pubkey(::zjchain::elect::protobuf::BlsPublicKey* common_pubkey);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.PrevMembers)
 private:
  inline void set_has_prev_elect_height();
  inline void clear_has_prev_elect_height();
  inline void set_has_common_pubkey();
  inline void clear_has_common_pubkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo > bls_pubkey_;
  ::google::protobuf::uint64 prev_elect_height_;
  ::zjchain::elect::protobuf::BlsPublicKey* common_pubkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static PrevMembers* default_instance_;
};
// -------------------------------------------------------------------

class member : public ::google::protobuf::Message {
 public:
  member();
  virtual ~member();

  member(const member& from);

  inline member& operator=(const member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const member& default_instance();

  void Swap(member* other);

  // implements Message ----------------------------------------------

  member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const member& from);
  void MergeFrom(const member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  inline bool has_pubkey() const;
  inline void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  inline const ::std::string& pubkey() const;
  inline void set_pubkey(const ::std::string& value);
  inline void set_pubkey(const char* value);
  inline void set_pubkey(const void* value, size_t size);
  inline ::std::string* mutable_pubkey();
  inline ::std::string* release_pubkey();
  inline void set_allocated_pubkey(::std::string* pubkey);

  // optional int32 pool_idx_mod_num = 2;
  inline bool has_pool_idx_mod_num() const;
  inline void clear_pool_idx_mod_num();
  static const int kPoolIdxModNumFieldNumber = 2;
  inline ::google::protobuf::int32 pool_idx_mod_num() const;
  inline void set_pool_idx_mod_num(::google::protobuf::int32 value);

  // optional uint64 mining_amount = 3;
  inline bool has_mining_amount() const;
  inline void clear_mining_amount();
  static const int kMiningAmountFieldNumber = 3;
  inline ::google::protobuf::uint64 mining_amount() const;
  inline void set_mining_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.member)
 private:
  inline void set_has_pubkey();
  inline void clear_has_pubkey();
  inline void set_has_pool_idx_mod_num();
  inline void clear_has_pool_idx_mod_num();
  inline void set_has_mining_amount();
  inline void clear_has_mining_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pubkey_;
  ::google::protobuf::uint64 mining_amount_;
  ::google::protobuf::int32 pool_idx_mod_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static member* default_instance_;
};
// -------------------------------------------------------------------

class ElectBlock : public ::google::protobuf::Message {
 public:
  ElectBlock();
  virtual ~ElectBlock();

  ElectBlock(const ElectBlock& from);

  inline ElectBlock& operator=(const ElectBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectBlock& default_instance();

  void Swap(ElectBlock* other);

  // implements Message ----------------------------------------------

  ElectBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElectBlock& from);
  void MergeFrom(const ElectBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.elect.protobuf.member in = 1;
  inline int in_size() const;
  inline void clear_in();
  static const int kInFieldNumber = 1;
  inline const ::zjchain::elect::protobuf::member& in(int index) const;
  inline ::zjchain::elect::protobuf::member* mutable_in(int index);
  inline ::zjchain::elect::protobuf::member* add_in();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::member >&
      in() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::member >*
      mutable_in();

  // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
  inline bool has_prev_members() const;
  inline void clear_prev_members();
  static const int kPrevMembersFieldNumber = 2;
  inline const ::zjchain::elect::protobuf::PrevMembers& prev_members() const;
  inline ::zjchain::elect::protobuf::PrevMembers* mutable_prev_members();
  inline ::zjchain::elect::protobuf::PrevMembers* release_prev_members();
  inline void set_allocated_prev_members(::zjchain::elect::protobuf::PrevMembers* prev_members);

  // optional uint32 shard_network_id = 3;
  inline bool has_shard_network_id() const;
  inline void clear_shard_network_id();
  static const int kShardNetworkIdFieldNumber = 3;
  inline ::google::protobuf::uint32 shard_network_id() const;
  inline void set_shard_network_id(::google::protobuf::uint32 value);

  // optional uint64 elect_height = 4;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 4;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // optional uint64 all_gas_amount = 5;
  inline bool has_all_gas_amount() const;
  inline void clear_all_gas_amount();
  static const int kAllGasAmountFieldNumber = 5;
  inline ::google::protobuf::uint64 all_gas_amount() const;
  inline void set_all_gas_amount(::google::protobuf::uint64 value);

  // optional uint64 gas_for_root = 6;
  inline bool has_gas_for_root() const;
  inline void clear_gas_for_root();
  static const int kGasForRootFieldNumber = 6;
  inline ::google::protobuf::uint64 gas_for_root() const;
  inline void set_gas_for_root(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.ElectBlock)
 private:
  inline void set_has_prev_members();
  inline void clear_has_prev_members();
  inline void set_has_shard_network_id();
  inline void clear_has_shard_network_id();
  inline void set_has_elect_height();
  inline void clear_has_elect_height();
  inline void set_has_all_gas_amount();
  inline void clear_has_all_gas_amount();
  inline void set_has_gas_for_root();
  inline void clear_has_gas_for_root();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::member > in_;
  ::zjchain::elect::protobuf::PrevMembers* prev_members_;
  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::uint64 all_gas_amount_;
  ::google::protobuf::uint64 gas_for_root_;
  ::google::protobuf::uint32 shard_network_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static ElectBlock* default_instance_;
};
// -------------------------------------------------------------------

class WaitingNodesMessage : public ::google::protobuf::Message {
 public:
  WaitingNodesMessage();
  virtual ~WaitingNodesMessage();

  WaitingNodesMessage(const WaitingNodesMessage& from);

  inline WaitingNodesMessage& operator=(const WaitingNodesMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitingNodesMessage& default_instance();

  void Swap(WaitingNodesMessage* other);

  // implements Message ----------------------------------------------

  WaitingNodesMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitingNodesMessage& from);
  void MergeFrom(const WaitingNodesMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 nodes_filter = 1;
  inline int nodes_filter_size() const;
  inline void clear_nodes_filter();
  static const int kNodesFilterFieldNumber = 1;
  inline ::google::protobuf::uint64 nodes_filter(int index) const;
  inline void set_nodes_filter(int index, ::google::protobuf::uint64 value);
  inline void add_nodes_filter(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      nodes_filter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_nodes_filter();

  // optional uint32 waiting_shard_id = 2;
  inline bool has_waiting_shard_id() const;
  inline void clear_waiting_shard_id();
  static const int kWaitingShardIdFieldNumber = 2;
  inline ::google::protobuf::uint32 waiting_shard_id() const;
  inline void set_waiting_shard_id(::google::protobuf::uint32 value);

  // optional bytes stoke_hash = 3;
  inline bool has_stoke_hash() const;
  inline void clear_stoke_hash();
  static const int kStokeHashFieldNumber = 3;
  inline const ::std::string& stoke_hash() const;
  inline void set_stoke_hash(const ::std::string& value);
  inline void set_stoke_hash(const char* value);
  inline void set_stoke_hash(const void* value, size_t size);
  inline ::std::string* mutable_stoke_hash();
  inline ::std::string* release_stoke_hash();
  inline void set_allocated_stoke_hash(::std::string* stoke_hash);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.WaitingNodesMessage)
 private:
  inline void set_has_waiting_shard_id();
  inline void clear_has_waiting_shard_id();
  inline void set_has_stoke_hash();
  inline void clear_has_stoke_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > nodes_filter_;
  ::std::string* stoke_hash_;
  ::google::protobuf::uint32 waiting_shard_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static WaitingNodesMessage* default_instance_;
};
// -------------------------------------------------------------------

class WaitingNodeHeartbeat : public ::google::protobuf::Message {
 public:
  WaitingNodeHeartbeat();
  virtual ~WaitingNodeHeartbeat();

  WaitingNodeHeartbeat(const WaitingNodeHeartbeat& from);

  inline WaitingNodeHeartbeat& operator=(const WaitingNodeHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitingNodeHeartbeat& default_instance();

  void Swap(WaitingNodeHeartbeat* other);

  // implements Message ----------------------------------------------

  WaitingNodeHeartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitingNodeHeartbeat& from);
  void MergeFrom(const WaitingNodeHeartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_ip = 1;
  inline bool has_public_ip() const;
  inline void clear_public_ip();
  static const int kPublicIpFieldNumber = 1;
  inline const ::std::string& public_ip() const;
  inline void set_public_ip(const ::std::string& value);
  inline void set_public_ip(const char* value);
  inline void set_public_ip(const void* value, size_t size);
  inline ::std::string* mutable_public_ip();
  inline ::std::string* release_public_ip();
  inline void set_allocated_public_ip(::std::string* public_ip);

  // optional uint32 public_port = 2;
  inline bool has_public_port() const;
  inline void clear_public_port();
  static const int kPublicPortFieldNumber = 2;
  inline ::google::protobuf::uint32 public_port() const;
  inline void set_public_port(::google::protobuf::uint32 value);

  // optional uint32 network_id = 3;
  inline bool has_network_id() const;
  inline void clear_network_id();
  static const int kNetworkIdFieldNumber = 3;
  inline ::google::protobuf::uint32 network_id() const;
  inline void set_network_id(::google::protobuf::uint32 value);

  // optional uint64 timestamp_sec = 4;
  inline bool has_timestamp_sec() const;
  inline void clear_timestamp_sec();
  static const int kTimestampSecFieldNumber = 4;
  inline ::google::protobuf::uint64 timestamp_sec() const;
  inline void set_timestamp_sec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.WaitingNodeHeartbeat)
 private:
  inline void set_has_public_ip();
  inline void clear_has_public_ip();
  inline void set_has_public_port();
  inline void clear_has_public_port();
  inline void set_has_network_id();
  inline void clear_has_network_id();
  inline void set_has_timestamp_sec();
  inline void clear_has_timestamp_sec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* public_ip_;
  ::google::protobuf::uint32 public_port_;
  ::google::protobuf::uint32 network_id_;
  ::google::protobuf::uint64 timestamp_sec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static WaitingNodeHeartbeat* default_instance_;
};
// -------------------------------------------------------------------

class LeaderRotationMessage : public ::google::protobuf::Message {
 public:
  LeaderRotationMessage();
  virtual ~LeaderRotationMessage();

  LeaderRotationMessage(const LeaderRotationMessage& from);

  inline LeaderRotationMessage& operator=(const LeaderRotationMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderRotationMessage& default_instance();

  void Swap(LeaderRotationMessage* other);

  // implements Message ----------------------------------------------

  LeaderRotationMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaderRotationMessage& from);
  void MergeFrom(const LeaderRotationMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes leader_id = 1;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 1;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const void* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  inline void set_allocated_leader_id(::std::string* leader_id);

  // optional uint32 pool_mod_num = 2;
  inline bool has_pool_mod_num() const;
  inline void clear_pool_mod_num();
  static const int kPoolModNumFieldNumber = 2;
  inline ::google::protobuf::uint32 pool_mod_num() const;
  inline void set_pool_mod_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.LeaderRotationMessage)
 private:
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_pool_mod_num();
  inline void clear_has_pool_mod_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* leader_id_;
  ::google::protobuf::uint32 pool_mod_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static LeaderRotationMessage* default_instance_;
};
// -------------------------------------------------------------------

class SyncNodeStokeItem : public ::google::protobuf::Message {
 public:
  SyncNodeStokeItem();
  virtual ~SyncNodeStokeItem();

  SyncNodeStokeItem(const SyncNodeStokeItem& from);

  inline SyncNodeStokeItem& operator=(const SyncNodeStokeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncNodeStokeItem& default_instance();

  void Swap(SyncNodeStokeItem* other);

  // implements Message ----------------------------------------------

  SyncNodeStokeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncNodeStokeItem& from);
  void MergeFrom(const SyncNodeStokeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint64 synced_tm_height = 2;
  inline bool has_synced_tm_height() const;
  inline void clear_synced_tm_height();
  static const int kSyncedTmHeightFieldNumber = 2;
  inline ::google::protobuf::uint64 synced_tm_height() const;
  inline void set_synced_tm_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_synced_tm_height();
  inline void clear_has_synced_tm_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 synced_tm_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static SyncNodeStokeItem* default_instance_;
};
// -------------------------------------------------------------------

class SyncNodeStokeRequest : public ::google::protobuf::Message {
 public:
  SyncNodeStokeRequest();
  virtual ~SyncNodeStokeRequest();

  SyncNodeStokeRequest(const SyncNodeStokeRequest& from);

  inline SyncNodeStokeRequest& operator=(const SyncNodeStokeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncNodeStokeRequest& default_instance();

  void Swap(SyncNodeStokeRequest* other);

  // implements Message ----------------------------------------------

  SyncNodeStokeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncNodeStokeRequest& from);
  void MergeFrom(const SyncNodeStokeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
  inline int sync_item_size() const;
  inline void clear_sync_item();
  static const int kSyncItemFieldNumber = 1;
  inline const ::zjchain::elect::protobuf::SyncNodeStokeItem& sync_item(int index) const;
  inline ::zjchain::elect::protobuf::SyncNodeStokeItem* mutable_sync_item(int index);
  inline ::zjchain::elect::protobuf::SyncNodeStokeItem* add_sync_item();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >&
      sync_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >*
      mutable_sync_item();

  // optional uint64 now_tm_height = 2;
  inline bool has_now_tm_height() const;
  inline void clear_now_tm_height();
  static const int kNowTmHeightFieldNumber = 2;
  inline ::google::protobuf::uint64 now_tm_height() const;
  inline void set_now_tm_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeRequest)
 private:
  inline void set_has_now_tm_height();
  inline void clear_has_now_tm_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem > sync_item_;
  ::google::protobuf::uint64 now_tm_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static SyncNodeStokeRequest* default_instance_;
};
// -------------------------------------------------------------------

class SyncNodeStokeResItem : public ::google::protobuf::Message {
 public:
  SyncNodeStokeResItem();
  virtual ~SyncNodeStokeResItem();

  SyncNodeStokeResItem(const SyncNodeStokeResItem& from);

  inline SyncNodeStokeResItem& operator=(const SyncNodeStokeResItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncNodeStokeResItem& default_instance();

  void Swap(SyncNodeStokeResItem* other);

  // implements Message ----------------------------------------------

  SyncNodeStokeResItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncNodeStokeResItem& from);
  void MergeFrom(const SyncNodeStokeResItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint64 balance = 2;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 2;
  inline ::google::protobuf::uint64 balance() const;
  inline void set_balance(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeResItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_balance();
  inline void clear_has_balance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 balance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static SyncNodeStokeResItem* default_instance_;
};
// -------------------------------------------------------------------

class SyncNodeStokeResponse : public ::google::protobuf::Message {
 public:
  SyncNodeStokeResponse();
  virtual ~SyncNodeStokeResponse();

  SyncNodeStokeResponse(const SyncNodeStokeResponse& from);

  inline SyncNodeStokeResponse& operator=(const SyncNodeStokeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncNodeStokeResponse& default_instance();

  void Swap(SyncNodeStokeResponse* other);

  // implements Message ----------------------------------------------

  SyncNodeStokeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncNodeStokeResponse& from);
  void MergeFrom(const SyncNodeStokeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::zjchain::elect::protobuf::SyncNodeStokeResItem& items(int index) const;
  inline ::zjchain::elect::protobuf::SyncNodeStokeResItem* mutable_items(int index);
  inline ::zjchain::elect::protobuf::SyncNodeStokeResItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >*
      mutable_items();

  // optional uint64 now_tm_height = 2;
  inline bool has_now_tm_height() const;
  inline void clear_now_tm_height();
  static const int kNowTmHeightFieldNumber = 2;
  inline ::google::protobuf::uint64 now_tm_height() const;
  inline void set_now_tm_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.SyncNodeStokeResponse)
 private:
  inline void set_has_now_tm_height();
  inline void clear_has_now_tm_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem > items_;
  ::google::protobuf::uint64 now_tm_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static SyncNodeStokeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ElectMessage : public ::google::protobuf::Message {
 public:
  ElectMessage();
  virtual ~ElectMessage();

  ElectMessage(const ElectMessage& from);

  inline ElectMessage& operator=(const ElectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectMessage& default_instance();

  void Swap(ElectMessage* other);

  // implements Message ----------------------------------------------

  ElectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElectMessage& from);
  void MergeFrom(const ElectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
  inline bool has_elect_block() const;
  inline void clear_elect_block();
  static const int kElectBlockFieldNumber = 1;
  inline const ::zjchain::elect::protobuf::ElectBlock& elect_block() const;
  inline ::zjchain::elect::protobuf::ElectBlock* mutable_elect_block();
  inline ::zjchain::elect::protobuf::ElectBlock* release_elect_block();
  inline void set_allocated_elect_block(::zjchain::elect::protobuf::ElectBlock* elect_block);

  // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
  inline bool has_prev_elect_block() const;
  inline void clear_prev_elect_block();
  static const int kPrevElectBlockFieldNumber = 2;
  inline const ::zjchain::elect::protobuf::ElectBlock& prev_elect_block() const;
  inline ::zjchain::elect::protobuf::ElectBlock* mutable_prev_elect_block();
  inline ::zjchain::elect::protobuf::ElectBlock* release_prev_elect_block();
  inline void set_allocated_prev_elect_block(::zjchain::elect::protobuf::ElectBlock* prev_elect_block);

  // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
  inline bool has_waiting_nodes() const;
  inline void clear_waiting_nodes();
  static const int kWaitingNodesFieldNumber = 3;
  inline const ::zjchain::elect::protobuf::WaitingNodesMessage& waiting_nodes() const;
  inline ::zjchain::elect::protobuf::WaitingNodesMessage* mutable_waiting_nodes();
  inline ::zjchain::elect::protobuf::WaitingNodesMessage* release_waiting_nodes();
  inline void set_allocated_waiting_nodes(::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes);

  // optional int32 member_index = 4;
  inline bool has_member_index() const;
  inline void clear_member_index();
  static const int kMemberIndexFieldNumber = 4;
  inline ::google::protobuf::int32 member_index() const;
  inline void set_member_index(::google::protobuf::int32 value);

  // optional bytes sign_ch = 5;
  inline bool has_sign_ch() const;
  inline void clear_sign_ch();
  static const int kSignChFieldNumber = 5;
  inline const ::std::string& sign_ch() const;
  inline void set_sign_ch(const ::std::string& value);
  inline void set_sign_ch(const char* value);
  inline void set_sign_ch(const void* value, size_t size);
  inline ::std::string* mutable_sign_ch();
  inline ::std::string* release_sign_ch();
  inline void set_allocated_sign_ch(::std::string* sign_ch);

  // optional bytes sign_res = 6;
  inline bool has_sign_res() const;
  inline void clear_sign_res();
  static const int kSignResFieldNumber = 6;
  inline const ::std::string& sign_res() const;
  inline void set_sign_res(const ::std::string& value);
  inline void set_sign_res(const char* value);
  inline void set_sign_res(const void* value, size_t size);
  inline ::std::string* mutable_sign_res();
  inline ::std::string* release_sign_res();
  inline void set_allocated_sign_res(::std::string* sign_res);

  // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
  inline bool has_waiting_heartbeat() const;
  inline void clear_waiting_heartbeat();
  static const int kWaitingHeartbeatFieldNumber = 7;
  inline const ::zjchain::elect::protobuf::WaitingNodeHeartbeat& waiting_heartbeat() const;
  inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* mutable_waiting_heartbeat();
  inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* release_waiting_heartbeat();
  inline void set_allocated_waiting_heartbeat(::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat);

  // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
  inline bool has_leader_rotation() const;
  inline void clear_leader_rotation();
  static const int kLeaderRotationFieldNumber = 8;
  inline const ::zjchain::elect::protobuf::LeaderRotationMessage& leader_rotation() const;
  inline ::zjchain::elect::protobuf::LeaderRotationMessage* mutable_leader_rotation();
  inline ::zjchain::elect::protobuf::LeaderRotationMessage* release_leader_rotation();
  inline void set_allocated_leader_rotation(::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation);

  // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
  inline bool has_sync_stoke_req() const;
  inline void clear_sync_stoke_req();
  static const int kSyncStokeReqFieldNumber = 9;
  inline const ::zjchain::elect::protobuf::SyncNodeStokeRequest& sync_stoke_req() const;
  inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* mutable_sync_stoke_req();
  inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* release_sync_stoke_req();
  inline void set_allocated_sync_stoke_req(::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req);

  // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
  inline bool has_sync_stoke_res() const;
  inline void clear_sync_stoke_res();
  static const int kSyncStokeResFieldNumber = 10;
  inline const ::zjchain::elect::protobuf::SyncNodeStokeResponse& sync_stoke_res() const;
  inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* mutable_sync_stoke_res();
  inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* release_sync_stoke_res();
  inline void set_allocated_sync_stoke_res(::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res);

  // @@protoc_insertion_point(class_scope:zjchain.elect.protobuf.ElectMessage)
 private:
  inline void set_has_elect_block();
  inline void clear_has_elect_block();
  inline void set_has_prev_elect_block();
  inline void clear_has_prev_elect_block();
  inline void set_has_waiting_nodes();
  inline void clear_has_waiting_nodes();
  inline void set_has_member_index();
  inline void clear_has_member_index();
  inline void set_has_sign_ch();
  inline void clear_has_sign_ch();
  inline void set_has_sign_res();
  inline void clear_has_sign_res();
  inline void set_has_waiting_heartbeat();
  inline void clear_has_waiting_heartbeat();
  inline void set_has_leader_rotation();
  inline void clear_has_leader_rotation();
  inline void set_has_sync_stoke_req();
  inline void clear_has_sync_stoke_req();
  inline void set_has_sync_stoke_res();
  inline void clear_has_sync_stoke_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::elect::protobuf::ElectBlock* elect_block_;
  ::zjchain::elect::protobuf::ElectBlock* prev_elect_block_;
  ::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes_;
  ::std::string* sign_ch_;
  ::std::string* sign_res_;
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat_;
  ::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation_;
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req_;
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res_;
  ::google::protobuf::int32 member_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2felect_2eproto();
  friend void protobuf_AssignDesc_protos_2felect_2eproto();
  friend void protobuf_ShutdownFile_protos_2felect_2eproto();

  void InitAsDefaultInstance();
  static ElectMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// VerifyVecValue

// optional bytes x_c0 = 1;
inline bool VerifyVecValue::has_x_c0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyVecValue::set_has_x_c0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyVecValue::clear_has_x_c0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyVecValue::clear_x_c0() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    x_c0_->clear();
  }
  clear_has_x_c0();
}
inline const ::std::string& VerifyVecValue::x_c0() const {
  return *x_c0_;
}
inline void VerifyVecValue::set_x_c0(const ::std::string& value) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(value);
}
inline void VerifyVecValue::set_x_c0(const char* value) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(value);
}
inline void VerifyVecValue::set_x_c0(const void* value, size_t size) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyVecValue::mutable_x_c0() {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  return x_c0_;
}
inline ::std::string* VerifyVecValue::release_x_c0() {
  clear_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_c0_;
    x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyVecValue::set_allocated_x_c0(::std::string* x_c0) {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c0) {
    set_has_x_c0();
    x_c0_ = x_c0;
  } else {
    clear_has_x_c0();
    x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes x_c1 = 2;
inline bool VerifyVecValue::has_x_c1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyVecValue::set_has_x_c1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyVecValue::clear_has_x_c1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyVecValue::clear_x_c1() {
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    x_c1_->clear();
  }
  clear_has_x_c1();
}
inline const ::std::string& VerifyVecValue::x_c1() const {
  return *x_c1_;
}
inline void VerifyVecValue::set_x_c1(const ::std::string& value) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(value);
}
inline void VerifyVecValue::set_x_c1(const char* value) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(value);
}
inline void VerifyVecValue::set_x_c1(const void* value, size_t size) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyVecValue::mutable_x_c1() {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  return x_c1_;
}
inline ::std::string* VerifyVecValue::release_x_c1() {
  clear_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_c1_;
    x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyVecValue::set_allocated_x_c1(::std::string* x_c1) {
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (x_c1) {
    set_has_x_c1();
    x_c1_ = x_c1;
  } else {
    clear_has_x_c1();
    x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes y_c0 = 3;
inline bool VerifyVecValue::has_y_c0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyVecValue::set_has_y_c0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyVecValue::clear_has_y_c0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyVecValue::clear_y_c0() {
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    y_c0_->clear();
  }
  clear_has_y_c0();
}
inline const ::std::string& VerifyVecValue::y_c0() const {
  return *y_c0_;
}
inline void VerifyVecValue::set_y_c0(const ::std::string& value) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(value);
}
inline void VerifyVecValue::set_y_c0(const char* value) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(value);
}
inline void VerifyVecValue::set_y_c0(const void* value, size_t size) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyVecValue::mutable_y_c0() {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  return y_c0_;
}
inline ::std::string* VerifyVecValue::release_y_c0() {
  clear_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_c0_;
    y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyVecValue::set_allocated_y_c0(::std::string* y_c0) {
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c0) {
    set_has_y_c0();
    y_c0_ = y_c0;
  } else {
    clear_has_y_c0();
    y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes y_c1 = 4;
inline bool VerifyVecValue::has_y_c1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyVecValue::set_has_y_c1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyVecValue::clear_has_y_c1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyVecValue::clear_y_c1() {
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    y_c1_->clear();
  }
  clear_has_y_c1();
}
inline const ::std::string& VerifyVecValue::y_c1() const {
  return *y_c1_;
}
inline void VerifyVecValue::set_y_c1(const ::std::string& value) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(value);
}
inline void VerifyVecValue::set_y_c1(const char* value) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(value);
}
inline void VerifyVecValue::set_y_c1(const void* value, size_t size) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyVecValue::mutable_y_c1() {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  return y_c1_;
}
inline ::std::string* VerifyVecValue::release_y_c1() {
  clear_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_c1_;
    y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyVecValue::set_allocated_y_c1(::std::string* y_c1) {
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (y_c1) {
    set_has_y_c1();
    y_c1_ = y_c1;
  } else {
    clear_has_y_c1();
    y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes z_c0 = 5;
inline bool VerifyVecValue::has_z_c0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyVecValue::set_has_z_c0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyVecValue::clear_has_z_c0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyVecValue::clear_z_c0() {
  if (z_c0_ != &::google::protobuf::internal::kEmptyString) {
    z_c0_->clear();
  }
  clear_has_z_c0();
}
inline const ::std::string& VerifyVecValue::z_c0() const {
  return *z_c0_;
}
inline void VerifyVecValue::set_z_c0(const ::std::string& value) {
  set_has_z_c0();
  if (z_c0_ == &::google::protobuf::internal::kEmptyString) {
    z_c0_ = new ::std::string;
  }
  z_c0_->assign(value);
}
inline void VerifyVecValue::set_z_c0(const char* value) {
  set_has_z_c0();
  if (z_c0_ == &::google::protobuf::internal::kEmptyString) {
    z_c0_ = new ::std::string;
  }
  z_c0_->assign(value);
}
inline void VerifyVecValue::set_z_c0(const void* value, size_t size) {
  set_has_z_c0();
  if (z_c0_ == &::google::protobuf::internal::kEmptyString) {
    z_c0_ = new ::std::string;
  }
  z_c0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyVecValue::mutable_z_c0() {
  set_has_z_c0();
  if (z_c0_ == &::google::protobuf::internal::kEmptyString) {
    z_c0_ = new ::std::string;
  }
  return z_c0_;
}
inline ::std::string* VerifyVecValue::release_z_c0() {
  clear_has_z_c0();
  if (z_c0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = z_c0_;
    z_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyVecValue::set_allocated_z_c0(::std::string* z_c0) {
  if (z_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete z_c0_;
  }
  if (z_c0) {
    set_has_z_c0();
    z_c0_ = z_c0;
  } else {
    clear_has_z_c0();
    z_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes z_c1 = 6;
inline bool VerifyVecValue::has_z_c1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VerifyVecValue::set_has_z_c1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VerifyVecValue::clear_has_z_c1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VerifyVecValue::clear_z_c1() {
  if (z_c1_ != &::google::protobuf::internal::kEmptyString) {
    z_c1_->clear();
  }
  clear_has_z_c1();
}
inline const ::std::string& VerifyVecValue::z_c1() const {
  return *z_c1_;
}
inline void VerifyVecValue::set_z_c1(const ::std::string& value) {
  set_has_z_c1();
  if (z_c1_ == &::google::protobuf::internal::kEmptyString) {
    z_c1_ = new ::std::string;
  }
  z_c1_->assign(value);
}
inline void VerifyVecValue::set_z_c1(const char* value) {
  set_has_z_c1();
  if (z_c1_ == &::google::protobuf::internal::kEmptyString) {
    z_c1_ = new ::std::string;
  }
  z_c1_->assign(value);
}
inline void VerifyVecValue::set_z_c1(const void* value, size_t size) {
  set_has_z_c1();
  if (z_c1_ == &::google::protobuf::internal::kEmptyString) {
    z_c1_ = new ::std::string;
  }
  z_c1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VerifyVecValue::mutable_z_c1() {
  set_has_z_c1();
  if (z_c1_ == &::google::protobuf::internal::kEmptyString) {
    z_c1_ = new ::std::string;
  }
  return z_c1_;
}
inline ::std::string* VerifyVecValue::release_z_c1() {
  clear_has_z_c1();
  if (z_c1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = z_c1_;
    z_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VerifyVecValue::set_allocated_z_c1(::std::string* z_c1) {
  if (z_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete z_c1_;
  }
  if (z_c1) {
    set_has_z_c1();
    z_c1_ = z_c1;
  } else {
    clear_has_z_c1();
    z_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 valid_t = 7;
inline bool VerifyVecValue::has_valid_t() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VerifyVecValue::set_has_valid_t() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VerifyVecValue::clear_has_valid_t() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VerifyVecValue::clear_valid_t() {
  valid_t_ = 0u;
  clear_has_valid_t();
}
inline ::google::protobuf::uint32 VerifyVecValue::valid_t() const {
  return valid_t_;
}
inline void VerifyVecValue::set_valid_t(::google::protobuf::uint32 value) {
  set_has_valid_t();
  valid_t_ = value;
}

// -------------------------------------------------------------------

// BlsPublicKey

// optional bytes x_c0 = 1;
inline bool BlsPublicKey::has_x_c0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlsPublicKey::set_has_x_c0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlsPublicKey::clear_has_x_c0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlsPublicKey::clear_x_c0() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    x_c0_->clear();
  }
  clear_has_x_c0();
}
inline const ::std::string& BlsPublicKey::x_c0() const {
  return *x_c0_;
}
inline void BlsPublicKey::set_x_c0(const ::std::string& value) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(value);
}
inline void BlsPublicKey::set_x_c0(const char* value) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(value);
}
inline void BlsPublicKey::set_x_c0(const void* value, size_t size) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlsPublicKey::mutable_x_c0() {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  return x_c0_;
}
inline ::std::string* BlsPublicKey::release_x_c0() {
  clear_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_c0_;
    x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlsPublicKey::set_allocated_x_c0(::std::string* x_c0) {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c0) {
    set_has_x_c0();
    x_c0_ = x_c0;
  } else {
    clear_has_x_c0();
    x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes x_c1 = 2;
inline bool BlsPublicKey::has_x_c1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlsPublicKey::set_has_x_c1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlsPublicKey::clear_has_x_c1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlsPublicKey::clear_x_c1() {
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    x_c1_->clear();
  }
  clear_has_x_c1();
}
inline const ::std::string& BlsPublicKey::x_c1() const {
  return *x_c1_;
}
inline void BlsPublicKey::set_x_c1(const ::std::string& value) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(value);
}
inline void BlsPublicKey::set_x_c1(const char* value) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(value);
}
inline void BlsPublicKey::set_x_c1(const void* value, size_t size) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlsPublicKey::mutable_x_c1() {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  return x_c1_;
}
inline ::std::string* BlsPublicKey::release_x_c1() {
  clear_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_c1_;
    x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlsPublicKey::set_allocated_x_c1(::std::string* x_c1) {
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (x_c1) {
    set_has_x_c1();
    x_c1_ = x_c1;
  } else {
    clear_has_x_c1();
    x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes y_c0 = 3;
inline bool BlsPublicKey::has_y_c0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlsPublicKey::set_has_y_c0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlsPublicKey::clear_has_y_c0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlsPublicKey::clear_y_c0() {
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    y_c0_->clear();
  }
  clear_has_y_c0();
}
inline const ::std::string& BlsPublicKey::y_c0() const {
  return *y_c0_;
}
inline void BlsPublicKey::set_y_c0(const ::std::string& value) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(value);
}
inline void BlsPublicKey::set_y_c0(const char* value) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(value);
}
inline void BlsPublicKey::set_y_c0(const void* value, size_t size) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlsPublicKey::mutable_y_c0() {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  return y_c0_;
}
inline ::std::string* BlsPublicKey::release_y_c0() {
  clear_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_c0_;
    y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlsPublicKey::set_allocated_y_c0(::std::string* y_c0) {
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c0) {
    set_has_y_c0();
    y_c0_ = y_c0;
  } else {
    clear_has_y_c0();
    y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes y_c1 = 4;
inline bool BlsPublicKey::has_y_c1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlsPublicKey::set_has_y_c1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlsPublicKey::clear_has_y_c1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlsPublicKey::clear_y_c1() {
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    y_c1_->clear();
  }
  clear_has_y_c1();
}
inline const ::std::string& BlsPublicKey::y_c1() const {
  return *y_c1_;
}
inline void BlsPublicKey::set_y_c1(const ::std::string& value) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(value);
}
inline void BlsPublicKey::set_y_c1(const char* value) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(value);
}
inline void BlsPublicKey::set_y_c1(const void* value, size_t size) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlsPublicKey::mutable_y_c1() {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  return y_c1_;
}
inline ::std::string* BlsPublicKey::release_y_c1() {
  clear_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_c1_;
    y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlsPublicKey::set_allocated_y_c1(::std::string* y_c1) {
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (y_c1) {
    set_has_y_c1();
    y_c1_ = y_c1;
  } else {
    clear_has_y_c1();
    y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PrevMemberInfo

// optional bytes x_c0 = 1;
inline bool PrevMemberInfo::has_x_c0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrevMemberInfo::set_has_x_c0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrevMemberInfo::clear_has_x_c0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrevMemberInfo::clear_x_c0() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    x_c0_->clear();
  }
  clear_has_x_c0();
}
inline const ::std::string& PrevMemberInfo::x_c0() const {
  return *x_c0_;
}
inline void PrevMemberInfo::set_x_c0(const ::std::string& value) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(value);
}
inline void PrevMemberInfo::set_x_c0(const char* value) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(value);
}
inline void PrevMemberInfo::set_x_c0(const void* value, size_t size) {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  x_c0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrevMemberInfo::mutable_x_c0() {
  set_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    x_c0_ = new ::std::string;
  }
  return x_c0_;
}
inline ::std::string* PrevMemberInfo::release_x_c0() {
  clear_has_x_c0();
  if (x_c0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_c0_;
    x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrevMemberInfo::set_allocated_x_c0(::std::string* x_c0) {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c0) {
    set_has_x_c0();
    x_c0_ = x_c0;
  } else {
    clear_has_x_c0();
    x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes x_c1 = 2;
inline bool PrevMemberInfo::has_x_c1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrevMemberInfo::set_has_x_c1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrevMemberInfo::clear_has_x_c1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrevMemberInfo::clear_x_c1() {
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    x_c1_->clear();
  }
  clear_has_x_c1();
}
inline const ::std::string& PrevMemberInfo::x_c1() const {
  return *x_c1_;
}
inline void PrevMemberInfo::set_x_c1(const ::std::string& value) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(value);
}
inline void PrevMemberInfo::set_x_c1(const char* value) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(value);
}
inline void PrevMemberInfo::set_x_c1(const void* value, size_t size) {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  x_c1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrevMemberInfo::mutable_x_c1() {
  set_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    x_c1_ = new ::std::string;
  }
  return x_c1_;
}
inline ::std::string* PrevMemberInfo::release_x_c1() {
  clear_has_x_c1();
  if (x_c1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_c1_;
    x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrevMemberInfo::set_allocated_x_c1(::std::string* x_c1) {
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (x_c1) {
    set_has_x_c1();
    x_c1_ = x_c1;
  } else {
    clear_has_x_c1();
    x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes y_c0 = 3;
inline bool PrevMemberInfo::has_y_c0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrevMemberInfo::set_has_y_c0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrevMemberInfo::clear_has_y_c0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrevMemberInfo::clear_y_c0() {
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    y_c0_->clear();
  }
  clear_has_y_c0();
}
inline const ::std::string& PrevMemberInfo::y_c0() const {
  return *y_c0_;
}
inline void PrevMemberInfo::set_y_c0(const ::std::string& value) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(value);
}
inline void PrevMemberInfo::set_y_c0(const char* value) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(value);
}
inline void PrevMemberInfo::set_y_c0(const void* value, size_t size) {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  y_c0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrevMemberInfo::mutable_y_c0() {
  set_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    y_c0_ = new ::std::string;
  }
  return y_c0_;
}
inline ::std::string* PrevMemberInfo::release_y_c0() {
  clear_has_y_c0();
  if (y_c0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_c0_;
    y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrevMemberInfo::set_allocated_y_c0(::std::string* y_c0) {
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c0) {
    set_has_y_c0();
    y_c0_ = y_c0;
  } else {
    clear_has_y_c0();
    y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes y_c1 = 4;
inline bool PrevMemberInfo::has_y_c1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrevMemberInfo::set_has_y_c1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrevMemberInfo::clear_has_y_c1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrevMemberInfo::clear_y_c1() {
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    y_c1_->clear();
  }
  clear_has_y_c1();
}
inline const ::std::string& PrevMemberInfo::y_c1() const {
  return *y_c1_;
}
inline void PrevMemberInfo::set_y_c1(const ::std::string& value) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(value);
}
inline void PrevMemberInfo::set_y_c1(const char* value) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(value);
}
inline void PrevMemberInfo::set_y_c1(const void* value, size_t size) {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  y_c1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrevMemberInfo::mutable_y_c1() {
  set_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    y_c1_ = new ::std::string;
  }
  return y_c1_;
}
inline ::std::string* PrevMemberInfo::release_y_c1() {
  clear_has_y_c1();
  if (y_c1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_c1_;
    y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrevMemberInfo::set_allocated_y_c1(::std::string* y_c1) {
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (y_c1) {
    set_has_y_c1();
    y_c1_ = y_c1;
  } else {
    clear_has_y_c1();
    y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 pool_idx_mod_num = 5 [default = -1];
inline bool PrevMemberInfo::has_pool_idx_mod_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrevMemberInfo::set_has_pool_idx_mod_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrevMemberInfo::clear_has_pool_idx_mod_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrevMemberInfo::clear_pool_idx_mod_num() {
  pool_idx_mod_num_ = -1;
  clear_has_pool_idx_mod_num();
}
inline ::google::protobuf::int32 PrevMemberInfo::pool_idx_mod_num() const {
  return pool_idx_mod_num_;
}
inline void PrevMemberInfo::set_pool_idx_mod_num(::google::protobuf::int32 value) {
  set_has_pool_idx_mod_num();
  pool_idx_mod_num_ = value;
}

// -------------------------------------------------------------------

// PrevMembers

// repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
inline int PrevMembers::bls_pubkey_size() const {
  return bls_pubkey_.size();
}
inline void PrevMembers::clear_bls_pubkey() {
  bls_pubkey_.Clear();
}
inline const ::zjchain::elect::protobuf::PrevMemberInfo& PrevMembers::bls_pubkey(int index) const {
  return bls_pubkey_.Get(index);
}
inline ::zjchain::elect::protobuf::PrevMemberInfo* PrevMembers::mutable_bls_pubkey(int index) {
  return bls_pubkey_.Mutable(index);
}
inline ::zjchain::elect::protobuf::PrevMemberInfo* PrevMembers::add_bls_pubkey() {
  return bls_pubkey_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >&
PrevMembers::bls_pubkey() const {
  return bls_pubkey_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::PrevMemberInfo >*
PrevMembers::mutable_bls_pubkey() {
  return &bls_pubkey_;
}

// optional uint64 prev_elect_height = 2;
inline bool PrevMembers::has_prev_elect_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrevMembers::set_has_prev_elect_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrevMembers::clear_has_prev_elect_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrevMembers::clear_prev_elect_height() {
  prev_elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_elect_height();
}
inline ::google::protobuf::uint64 PrevMembers::prev_elect_height() const {
  return prev_elect_height_;
}
inline void PrevMembers::set_prev_elect_height(::google::protobuf::uint64 value) {
  set_has_prev_elect_height();
  prev_elect_height_ = value;
}

// optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
inline bool PrevMembers::has_common_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrevMembers::set_has_common_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrevMembers::clear_has_common_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrevMembers::clear_common_pubkey() {
  if (common_pubkey_ != NULL) common_pubkey_->::zjchain::elect::protobuf::BlsPublicKey::Clear();
  clear_has_common_pubkey();
}
inline const ::zjchain::elect::protobuf::BlsPublicKey& PrevMembers::common_pubkey() const {
  return common_pubkey_ != NULL ? *common_pubkey_ : *default_instance_->common_pubkey_;
}
inline ::zjchain::elect::protobuf::BlsPublicKey* PrevMembers::mutable_common_pubkey() {
  set_has_common_pubkey();
  if (common_pubkey_ == NULL) common_pubkey_ = new ::zjchain::elect::protobuf::BlsPublicKey;
  return common_pubkey_;
}
inline ::zjchain::elect::protobuf::BlsPublicKey* PrevMembers::release_common_pubkey() {
  clear_has_common_pubkey();
  ::zjchain::elect::protobuf::BlsPublicKey* temp = common_pubkey_;
  common_pubkey_ = NULL;
  return temp;
}
inline void PrevMembers::set_allocated_common_pubkey(::zjchain::elect::protobuf::BlsPublicKey* common_pubkey) {
  delete common_pubkey_;
  common_pubkey_ = common_pubkey;
  if (common_pubkey) {
    set_has_common_pubkey();
  } else {
    clear_has_common_pubkey();
  }
}

// -------------------------------------------------------------------

// member

// optional bytes pubkey = 1;
inline bool member::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void member::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void member::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void member::clear_pubkey() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    pubkey_->clear();
  }
  clear_has_pubkey();
}
inline const ::std::string& member::pubkey() const {
  return *pubkey_;
}
inline void member::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void member::set_pubkey(const char* value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void member::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* member::mutable_pubkey() {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  return pubkey_;
}
inline ::std::string* member::release_pubkey() {
  clear_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pubkey_;
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void member::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (pubkey) {
    set_has_pubkey();
    pubkey_ = pubkey;
  } else {
    clear_has_pubkey();
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 pool_idx_mod_num = 2;
inline bool member::has_pool_idx_mod_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void member::set_has_pool_idx_mod_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void member::clear_has_pool_idx_mod_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void member::clear_pool_idx_mod_num() {
  pool_idx_mod_num_ = 0;
  clear_has_pool_idx_mod_num();
}
inline ::google::protobuf::int32 member::pool_idx_mod_num() const {
  return pool_idx_mod_num_;
}
inline void member::set_pool_idx_mod_num(::google::protobuf::int32 value) {
  set_has_pool_idx_mod_num();
  pool_idx_mod_num_ = value;
}

// optional uint64 mining_amount = 3;
inline bool member::has_mining_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void member::set_has_mining_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void member::clear_has_mining_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void member::clear_mining_amount() {
  mining_amount_ = GOOGLE_ULONGLONG(0);
  clear_has_mining_amount();
}
inline ::google::protobuf::uint64 member::mining_amount() const {
  return mining_amount_;
}
inline void member::set_mining_amount(::google::protobuf::uint64 value) {
  set_has_mining_amount();
  mining_amount_ = value;
}

// -------------------------------------------------------------------

// ElectBlock

// repeated .zjchain.elect.protobuf.member in = 1;
inline int ElectBlock::in_size() const {
  return in_.size();
}
inline void ElectBlock::clear_in() {
  in_.Clear();
}
inline const ::zjchain::elect::protobuf::member& ElectBlock::in(int index) const {
  return in_.Get(index);
}
inline ::zjchain::elect::protobuf::member* ElectBlock::mutable_in(int index) {
  return in_.Mutable(index);
}
inline ::zjchain::elect::protobuf::member* ElectBlock::add_in() {
  return in_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::member >&
ElectBlock::in() const {
  return in_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::member >*
ElectBlock::mutable_in() {
  return &in_;
}

// optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
inline bool ElectBlock::has_prev_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElectBlock::set_has_prev_members() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElectBlock::clear_has_prev_members() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElectBlock::clear_prev_members() {
  if (prev_members_ != NULL) prev_members_->::zjchain::elect::protobuf::PrevMembers::Clear();
  clear_has_prev_members();
}
inline const ::zjchain::elect::protobuf::PrevMembers& ElectBlock::prev_members() const {
  return prev_members_ != NULL ? *prev_members_ : *default_instance_->prev_members_;
}
inline ::zjchain::elect::protobuf::PrevMembers* ElectBlock::mutable_prev_members() {
  set_has_prev_members();
  if (prev_members_ == NULL) prev_members_ = new ::zjchain::elect::protobuf::PrevMembers;
  return prev_members_;
}
inline ::zjchain::elect::protobuf::PrevMembers* ElectBlock::release_prev_members() {
  clear_has_prev_members();
  ::zjchain::elect::protobuf::PrevMembers* temp = prev_members_;
  prev_members_ = NULL;
  return temp;
}
inline void ElectBlock::set_allocated_prev_members(::zjchain::elect::protobuf::PrevMembers* prev_members) {
  delete prev_members_;
  prev_members_ = prev_members;
  if (prev_members) {
    set_has_prev_members();
  } else {
    clear_has_prev_members();
  }
}

// optional uint32 shard_network_id = 3;
inline bool ElectBlock::has_shard_network_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ElectBlock::set_has_shard_network_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ElectBlock::clear_has_shard_network_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ElectBlock::clear_shard_network_id() {
  shard_network_id_ = 0u;
  clear_has_shard_network_id();
}
inline ::google::protobuf::uint32 ElectBlock::shard_network_id() const {
  return shard_network_id_;
}
inline void ElectBlock::set_shard_network_id(::google::protobuf::uint32 value) {
  set_has_shard_network_id();
  shard_network_id_ = value;
}

// optional uint64 elect_height = 4;
inline bool ElectBlock::has_elect_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ElectBlock::set_has_elect_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ElectBlock::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ElectBlock::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 ElectBlock::elect_height() const {
  return elect_height_;
}
inline void ElectBlock::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// optional uint64 all_gas_amount = 5;
inline bool ElectBlock::has_all_gas_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ElectBlock::set_has_all_gas_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ElectBlock::clear_has_all_gas_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ElectBlock::clear_all_gas_amount() {
  all_gas_amount_ = GOOGLE_ULONGLONG(0);
  clear_has_all_gas_amount();
}
inline ::google::protobuf::uint64 ElectBlock::all_gas_amount() const {
  return all_gas_amount_;
}
inline void ElectBlock::set_all_gas_amount(::google::protobuf::uint64 value) {
  set_has_all_gas_amount();
  all_gas_amount_ = value;
}

// optional uint64 gas_for_root = 6;
inline bool ElectBlock::has_gas_for_root() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ElectBlock::set_has_gas_for_root() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ElectBlock::clear_has_gas_for_root() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ElectBlock::clear_gas_for_root() {
  gas_for_root_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_for_root();
}
inline ::google::protobuf::uint64 ElectBlock::gas_for_root() const {
  return gas_for_root_;
}
inline void ElectBlock::set_gas_for_root(::google::protobuf::uint64 value) {
  set_has_gas_for_root();
  gas_for_root_ = value;
}

// -------------------------------------------------------------------

// WaitingNodesMessage

// repeated uint64 nodes_filter = 1;
inline int WaitingNodesMessage::nodes_filter_size() const {
  return nodes_filter_.size();
}
inline void WaitingNodesMessage::clear_nodes_filter() {
  nodes_filter_.Clear();
}
inline ::google::protobuf::uint64 WaitingNodesMessage::nodes_filter(int index) const {
  return nodes_filter_.Get(index);
}
inline void WaitingNodesMessage::set_nodes_filter(int index, ::google::protobuf::uint64 value) {
  nodes_filter_.Set(index, value);
}
inline void WaitingNodesMessage::add_nodes_filter(::google::protobuf::uint64 value) {
  nodes_filter_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
WaitingNodesMessage::nodes_filter() const {
  return nodes_filter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
WaitingNodesMessage::mutable_nodes_filter() {
  return &nodes_filter_;
}

// optional uint32 waiting_shard_id = 2;
inline bool WaitingNodesMessage::has_waiting_shard_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WaitingNodesMessage::set_has_waiting_shard_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WaitingNodesMessage::clear_has_waiting_shard_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WaitingNodesMessage::clear_waiting_shard_id() {
  waiting_shard_id_ = 0u;
  clear_has_waiting_shard_id();
}
inline ::google::protobuf::uint32 WaitingNodesMessage::waiting_shard_id() const {
  return waiting_shard_id_;
}
inline void WaitingNodesMessage::set_waiting_shard_id(::google::protobuf::uint32 value) {
  set_has_waiting_shard_id();
  waiting_shard_id_ = value;
}

// optional bytes stoke_hash = 3;
inline bool WaitingNodesMessage::has_stoke_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WaitingNodesMessage::set_has_stoke_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WaitingNodesMessage::clear_has_stoke_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WaitingNodesMessage::clear_stoke_hash() {
  if (stoke_hash_ != &::google::protobuf::internal::kEmptyString) {
    stoke_hash_->clear();
  }
  clear_has_stoke_hash();
}
inline const ::std::string& WaitingNodesMessage::stoke_hash() const {
  return *stoke_hash_;
}
inline void WaitingNodesMessage::set_stoke_hash(const ::std::string& value) {
  set_has_stoke_hash();
  if (stoke_hash_ == &::google::protobuf::internal::kEmptyString) {
    stoke_hash_ = new ::std::string;
  }
  stoke_hash_->assign(value);
}
inline void WaitingNodesMessage::set_stoke_hash(const char* value) {
  set_has_stoke_hash();
  if (stoke_hash_ == &::google::protobuf::internal::kEmptyString) {
    stoke_hash_ = new ::std::string;
  }
  stoke_hash_->assign(value);
}
inline void WaitingNodesMessage::set_stoke_hash(const void* value, size_t size) {
  set_has_stoke_hash();
  if (stoke_hash_ == &::google::protobuf::internal::kEmptyString) {
    stoke_hash_ = new ::std::string;
  }
  stoke_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WaitingNodesMessage::mutable_stoke_hash() {
  set_has_stoke_hash();
  if (stoke_hash_ == &::google::protobuf::internal::kEmptyString) {
    stoke_hash_ = new ::std::string;
  }
  return stoke_hash_;
}
inline ::std::string* WaitingNodesMessage::release_stoke_hash() {
  clear_has_stoke_hash();
  if (stoke_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stoke_hash_;
    stoke_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WaitingNodesMessage::set_allocated_stoke_hash(::std::string* stoke_hash) {
  if (stoke_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete stoke_hash_;
  }
  if (stoke_hash) {
    set_has_stoke_hash();
    stoke_hash_ = stoke_hash;
  } else {
    clear_has_stoke_hash();
    stoke_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WaitingNodeHeartbeat

// optional bytes public_ip = 1;
inline bool WaitingNodeHeartbeat::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WaitingNodeHeartbeat::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WaitingNodeHeartbeat::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WaitingNodeHeartbeat::clear_public_ip() {
  if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
    public_ip_->clear();
  }
  clear_has_public_ip();
}
inline const ::std::string& WaitingNodeHeartbeat::public_ip() const {
  return *public_ip_;
}
inline void WaitingNodeHeartbeat::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  public_ip_->assign(value);
}
inline void WaitingNodeHeartbeat::set_public_ip(const char* value) {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  public_ip_->assign(value);
}
inline void WaitingNodeHeartbeat::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  public_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WaitingNodeHeartbeat::mutable_public_ip() {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  return public_ip_;
}
inline ::std::string* WaitingNodeHeartbeat::release_public_ip() {
  clear_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_ip_;
    public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WaitingNodeHeartbeat::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete public_ip_;
  }
  if (public_ip) {
    set_has_public_ip();
    public_ip_ = public_ip;
  } else {
    clear_has_public_ip();
    public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 public_port = 2;
inline bool WaitingNodeHeartbeat::has_public_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WaitingNodeHeartbeat::set_has_public_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WaitingNodeHeartbeat::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WaitingNodeHeartbeat::clear_public_port() {
  public_port_ = 0u;
  clear_has_public_port();
}
inline ::google::protobuf::uint32 WaitingNodeHeartbeat::public_port() const {
  return public_port_;
}
inline void WaitingNodeHeartbeat::set_public_port(::google::protobuf::uint32 value) {
  set_has_public_port();
  public_port_ = value;
}

// optional uint32 network_id = 3;
inline bool WaitingNodeHeartbeat::has_network_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WaitingNodeHeartbeat::set_has_network_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WaitingNodeHeartbeat::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WaitingNodeHeartbeat::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 WaitingNodeHeartbeat::network_id() const {
  return network_id_;
}
inline void WaitingNodeHeartbeat::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
}

// optional uint64 timestamp_sec = 4;
inline bool WaitingNodeHeartbeat::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WaitingNodeHeartbeat::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WaitingNodeHeartbeat::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WaitingNodeHeartbeat::clear_timestamp_sec() {
  timestamp_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_sec();
}
inline ::google::protobuf::uint64 WaitingNodeHeartbeat::timestamp_sec() const {
  return timestamp_sec_;
}
inline void WaitingNodeHeartbeat::set_timestamp_sec(::google::protobuf::uint64 value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
}

// -------------------------------------------------------------------

// LeaderRotationMessage

// optional bytes leader_id = 1;
inline bool LeaderRotationMessage::has_leader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderRotationMessage::set_has_leader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderRotationMessage::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderRotationMessage::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& LeaderRotationMessage::leader_id() const {
  return *leader_id_;
}
inline void LeaderRotationMessage::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void LeaderRotationMessage::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void LeaderRotationMessage::set_leader_id(const void* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LeaderRotationMessage::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* LeaderRotationMessage::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LeaderRotationMessage::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (leader_id) {
    set_has_leader_id();
    leader_id_ = leader_id;
  } else {
    clear_has_leader_id();
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pool_mod_num = 2;
inline bool LeaderRotationMessage::has_pool_mod_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaderRotationMessage::set_has_pool_mod_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaderRotationMessage::clear_has_pool_mod_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaderRotationMessage::clear_pool_mod_num() {
  pool_mod_num_ = 0u;
  clear_has_pool_mod_num();
}
inline ::google::protobuf::uint32 LeaderRotationMessage::pool_mod_num() const {
  return pool_mod_num_;
}
inline void LeaderRotationMessage::set_pool_mod_num(::google::protobuf::uint32 value) {
  set_has_pool_mod_num();
  pool_mod_num_ = value;
}

// -------------------------------------------------------------------

// SyncNodeStokeItem

// optional bytes id = 1;
inline bool SyncNodeStokeItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncNodeStokeItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncNodeStokeItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncNodeStokeItem::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SyncNodeStokeItem::id() const {
  return *id_;
}
inline void SyncNodeStokeItem::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SyncNodeStokeItem::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SyncNodeStokeItem::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncNodeStokeItem::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SyncNodeStokeItem::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncNodeStokeItem::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 synced_tm_height = 2;
inline bool SyncNodeStokeItem::has_synced_tm_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncNodeStokeItem::set_has_synced_tm_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncNodeStokeItem::clear_has_synced_tm_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncNodeStokeItem::clear_synced_tm_height() {
  synced_tm_height_ = GOOGLE_ULONGLONG(0);
  clear_has_synced_tm_height();
}
inline ::google::protobuf::uint64 SyncNodeStokeItem::synced_tm_height() const {
  return synced_tm_height_;
}
inline void SyncNodeStokeItem::set_synced_tm_height(::google::protobuf::uint64 value) {
  set_has_synced_tm_height();
  synced_tm_height_ = value;
}

// -------------------------------------------------------------------

// SyncNodeStokeRequest

// repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
inline int SyncNodeStokeRequest::sync_item_size() const {
  return sync_item_.size();
}
inline void SyncNodeStokeRequest::clear_sync_item() {
  sync_item_.Clear();
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeItem& SyncNodeStokeRequest::sync_item(int index) const {
  return sync_item_.Get(index);
}
inline ::zjchain::elect::protobuf::SyncNodeStokeItem* SyncNodeStokeRequest::mutable_sync_item(int index) {
  return sync_item_.Mutable(index);
}
inline ::zjchain::elect::protobuf::SyncNodeStokeItem* SyncNodeStokeRequest::add_sync_item() {
  return sync_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >&
SyncNodeStokeRequest::sync_item() const {
  return sync_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeItem >*
SyncNodeStokeRequest::mutable_sync_item() {
  return &sync_item_;
}

// optional uint64 now_tm_height = 2;
inline bool SyncNodeStokeRequest::has_now_tm_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncNodeStokeRequest::set_has_now_tm_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncNodeStokeRequest::clear_has_now_tm_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncNodeStokeRequest::clear_now_tm_height() {
  now_tm_height_ = GOOGLE_ULONGLONG(0);
  clear_has_now_tm_height();
}
inline ::google::protobuf::uint64 SyncNodeStokeRequest::now_tm_height() const {
  return now_tm_height_;
}
inline void SyncNodeStokeRequest::set_now_tm_height(::google::protobuf::uint64 value) {
  set_has_now_tm_height();
  now_tm_height_ = value;
}

// -------------------------------------------------------------------

// SyncNodeStokeResItem

// optional bytes id = 1;
inline bool SyncNodeStokeResItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncNodeStokeResItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncNodeStokeResItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncNodeStokeResItem::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SyncNodeStokeResItem::id() const {
  return *id_;
}
inline void SyncNodeStokeResItem::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SyncNodeStokeResItem::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SyncNodeStokeResItem::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncNodeStokeResItem::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SyncNodeStokeResItem::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncNodeStokeResItem::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 balance = 2;
inline bool SyncNodeStokeResItem::has_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncNodeStokeResItem::set_has_balance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncNodeStokeResItem::clear_has_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncNodeStokeResItem::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 SyncNodeStokeResItem::balance() const {
  return balance_;
}
inline void SyncNodeStokeResItem::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
}

// -------------------------------------------------------------------

// SyncNodeStokeResponse

// repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
inline int SyncNodeStokeResponse::items_size() const {
  return items_.size();
}
inline void SyncNodeStokeResponse::clear_items() {
  items_.Clear();
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeResItem& SyncNodeStokeResponse::items(int index) const {
  return items_.Get(index);
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResItem* SyncNodeStokeResponse::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResItem* SyncNodeStokeResponse::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >&
SyncNodeStokeResponse::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::elect::protobuf::SyncNodeStokeResItem >*
SyncNodeStokeResponse::mutable_items() {
  return &items_;
}

// optional uint64 now_tm_height = 2;
inline bool SyncNodeStokeResponse::has_now_tm_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncNodeStokeResponse::set_has_now_tm_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncNodeStokeResponse::clear_has_now_tm_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncNodeStokeResponse::clear_now_tm_height() {
  now_tm_height_ = GOOGLE_ULONGLONG(0);
  clear_has_now_tm_height();
}
inline ::google::protobuf::uint64 SyncNodeStokeResponse::now_tm_height() const {
  return now_tm_height_;
}
inline void SyncNodeStokeResponse::set_now_tm_height(::google::protobuf::uint64 value) {
  set_has_now_tm_height();
  now_tm_height_ = value;
}

// -------------------------------------------------------------------

// ElectMessage

// optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
inline bool ElectMessage::has_elect_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElectMessage::set_has_elect_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElectMessage::clear_has_elect_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElectMessage::clear_elect_block() {
  if (elect_block_ != NULL) elect_block_->::zjchain::elect::protobuf::ElectBlock::Clear();
  clear_has_elect_block();
}
inline const ::zjchain::elect::protobuf::ElectBlock& ElectMessage::elect_block() const {
  return elect_block_ != NULL ? *elect_block_ : *default_instance_->elect_block_;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::mutable_elect_block() {
  set_has_elect_block();
  if (elect_block_ == NULL) elect_block_ = new ::zjchain::elect::protobuf::ElectBlock;
  return elect_block_;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::release_elect_block() {
  clear_has_elect_block();
  ::zjchain::elect::protobuf::ElectBlock* temp = elect_block_;
  elect_block_ = NULL;
  return temp;
}
inline void ElectMessage::set_allocated_elect_block(::zjchain::elect::protobuf::ElectBlock* elect_block) {
  delete elect_block_;
  elect_block_ = elect_block;
  if (elect_block) {
    set_has_elect_block();
  } else {
    clear_has_elect_block();
  }
}

// optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
inline bool ElectMessage::has_prev_elect_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElectMessage::set_has_prev_elect_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElectMessage::clear_has_prev_elect_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElectMessage::clear_prev_elect_block() {
  if (prev_elect_block_ != NULL) prev_elect_block_->::zjchain::elect::protobuf::ElectBlock::Clear();
  clear_has_prev_elect_block();
}
inline const ::zjchain::elect::protobuf::ElectBlock& ElectMessage::prev_elect_block() const {
  return prev_elect_block_ != NULL ? *prev_elect_block_ : *default_instance_->prev_elect_block_;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::mutable_prev_elect_block() {
  set_has_prev_elect_block();
  if (prev_elect_block_ == NULL) prev_elect_block_ = new ::zjchain::elect::protobuf::ElectBlock;
  return prev_elect_block_;
}
inline ::zjchain::elect::protobuf::ElectBlock* ElectMessage::release_prev_elect_block() {
  clear_has_prev_elect_block();
  ::zjchain::elect::protobuf::ElectBlock* temp = prev_elect_block_;
  prev_elect_block_ = NULL;
  return temp;
}
inline void ElectMessage::set_allocated_prev_elect_block(::zjchain::elect::protobuf::ElectBlock* prev_elect_block) {
  delete prev_elect_block_;
  prev_elect_block_ = prev_elect_block;
  if (prev_elect_block) {
    set_has_prev_elect_block();
  } else {
    clear_has_prev_elect_block();
  }
}

// optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
inline bool ElectMessage::has_waiting_nodes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ElectMessage::set_has_waiting_nodes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ElectMessage::clear_has_waiting_nodes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ElectMessage::clear_waiting_nodes() {
  if (waiting_nodes_ != NULL) waiting_nodes_->::zjchain::elect::protobuf::WaitingNodesMessage::Clear();
  clear_has_waiting_nodes();
}
inline const ::zjchain::elect::protobuf::WaitingNodesMessage& ElectMessage::waiting_nodes() const {
  return waiting_nodes_ != NULL ? *waiting_nodes_ : *default_instance_->waiting_nodes_;
}
inline ::zjchain::elect::protobuf::WaitingNodesMessage* ElectMessage::mutable_waiting_nodes() {
  set_has_waiting_nodes();
  if (waiting_nodes_ == NULL) waiting_nodes_ = new ::zjchain::elect::protobuf::WaitingNodesMessage;
  return waiting_nodes_;
}
inline ::zjchain::elect::protobuf::WaitingNodesMessage* ElectMessage::release_waiting_nodes() {
  clear_has_waiting_nodes();
  ::zjchain::elect::protobuf::WaitingNodesMessage* temp = waiting_nodes_;
  waiting_nodes_ = NULL;
  return temp;
}
inline void ElectMessage::set_allocated_waiting_nodes(::zjchain::elect::protobuf::WaitingNodesMessage* waiting_nodes) {
  delete waiting_nodes_;
  waiting_nodes_ = waiting_nodes;
  if (waiting_nodes) {
    set_has_waiting_nodes();
  } else {
    clear_has_waiting_nodes();
  }
}

// optional int32 member_index = 4;
inline bool ElectMessage::has_member_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ElectMessage::set_has_member_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ElectMessage::clear_has_member_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ElectMessage::clear_member_index() {
  member_index_ = 0;
  clear_has_member_index();
}
inline ::google::protobuf::int32 ElectMessage::member_index() const {
  return member_index_;
}
inline void ElectMessage::set_member_index(::google::protobuf::int32 value) {
  set_has_member_index();
  member_index_ = value;
}

// optional bytes sign_ch = 5;
inline bool ElectMessage::has_sign_ch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ElectMessage::set_has_sign_ch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ElectMessage::clear_has_sign_ch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ElectMessage::clear_sign_ch() {
  if (sign_ch_ != &::google::protobuf::internal::kEmptyString) {
    sign_ch_->clear();
  }
  clear_has_sign_ch();
}
inline const ::std::string& ElectMessage::sign_ch() const {
  return *sign_ch_;
}
inline void ElectMessage::set_sign_ch(const ::std::string& value) {
  set_has_sign_ch();
  if (sign_ch_ == &::google::protobuf::internal::kEmptyString) {
    sign_ch_ = new ::std::string;
  }
  sign_ch_->assign(value);
}
inline void ElectMessage::set_sign_ch(const char* value) {
  set_has_sign_ch();
  if (sign_ch_ == &::google::protobuf::internal::kEmptyString) {
    sign_ch_ = new ::std::string;
  }
  sign_ch_->assign(value);
}
inline void ElectMessage::set_sign_ch(const void* value, size_t size) {
  set_has_sign_ch();
  if (sign_ch_ == &::google::protobuf::internal::kEmptyString) {
    sign_ch_ = new ::std::string;
  }
  sign_ch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ElectMessage::mutable_sign_ch() {
  set_has_sign_ch();
  if (sign_ch_ == &::google::protobuf::internal::kEmptyString) {
    sign_ch_ = new ::std::string;
  }
  return sign_ch_;
}
inline ::std::string* ElectMessage::release_sign_ch() {
  clear_has_sign_ch();
  if (sign_ch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_ch_;
    sign_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ElectMessage::set_allocated_sign_ch(::std::string* sign_ch) {
  if (sign_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_ch_;
  }
  if (sign_ch) {
    set_has_sign_ch();
    sign_ch_ = sign_ch;
  } else {
    clear_has_sign_ch();
    sign_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sign_res = 6;
inline bool ElectMessage::has_sign_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ElectMessage::set_has_sign_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ElectMessage::clear_has_sign_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ElectMessage::clear_sign_res() {
  if (sign_res_ != &::google::protobuf::internal::kEmptyString) {
    sign_res_->clear();
  }
  clear_has_sign_res();
}
inline const ::std::string& ElectMessage::sign_res() const {
  return *sign_res_;
}
inline void ElectMessage::set_sign_res(const ::std::string& value) {
  set_has_sign_res();
  if (sign_res_ == &::google::protobuf::internal::kEmptyString) {
    sign_res_ = new ::std::string;
  }
  sign_res_->assign(value);
}
inline void ElectMessage::set_sign_res(const char* value) {
  set_has_sign_res();
  if (sign_res_ == &::google::protobuf::internal::kEmptyString) {
    sign_res_ = new ::std::string;
  }
  sign_res_->assign(value);
}
inline void ElectMessage::set_sign_res(const void* value, size_t size) {
  set_has_sign_res();
  if (sign_res_ == &::google::protobuf::internal::kEmptyString) {
    sign_res_ = new ::std::string;
  }
  sign_res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ElectMessage::mutable_sign_res() {
  set_has_sign_res();
  if (sign_res_ == &::google::protobuf::internal::kEmptyString) {
    sign_res_ = new ::std::string;
  }
  return sign_res_;
}
inline ::std::string* ElectMessage::release_sign_res() {
  clear_has_sign_res();
  if (sign_res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_res_;
    sign_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ElectMessage::set_allocated_sign_res(::std::string* sign_res) {
  if (sign_res_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_res_;
  }
  if (sign_res) {
    set_has_sign_res();
    sign_res_ = sign_res;
  } else {
    clear_has_sign_res();
    sign_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
inline bool ElectMessage::has_waiting_heartbeat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ElectMessage::set_has_waiting_heartbeat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ElectMessage::clear_has_waiting_heartbeat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ElectMessage::clear_waiting_heartbeat() {
  if (waiting_heartbeat_ != NULL) waiting_heartbeat_->::zjchain::elect::protobuf::WaitingNodeHeartbeat::Clear();
  clear_has_waiting_heartbeat();
}
inline const ::zjchain::elect::protobuf::WaitingNodeHeartbeat& ElectMessage::waiting_heartbeat() const {
  return waiting_heartbeat_ != NULL ? *waiting_heartbeat_ : *default_instance_->waiting_heartbeat_;
}
inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* ElectMessage::mutable_waiting_heartbeat() {
  set_has_waiting_heartbeat();
  if (waiting_heartbeat_ == NULL) waiting_heartbeat_ = new ::zjchain::elect::protobuf::WaitingNodeHeartbeat;
  return waiting_heartbeat_;
}
inline ::zjchain::elect::protobuf::WaitingNodeHeartbeat* ElectMessage::release_waiting_heartbeat() {
  clear_has_waiting_heartbeat();
  ::zjchain::elect::protobuf::WaitingNodeHeartbeat* temp = waiting_heartbeat_;
  waiting_heartbeat_ = NULL;
  return temp;
}
inline void ElectMessage::set_allocated_waiting_heartbeat(::zjchain::elect::protobuf::WaitingNodeHeartbeat* waiting_heartbeat) {
  delete waiting_heartbeat_;
  waiting_heartbeat_ = waiting_heartbeat;
  if (waiting_heartbeat) {
    set_has_waiting_heartbeat();
  } else {
    clear_has_waiting_heartbeat();
  }
}

// optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
inline bool ElectMessage::has_leader_rotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ElectMessage::set_has_leader_rotation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ElectMessage::clear_has_leader_rotation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ElectMessage::clear_leader_rotation() {
  if (leader_rotation_ != NULL) leader_rotation_->::zjchain::elect::protobuf::LeaderRotationMessage::Clear();
  clear_has_leader_rotation();
}
inline const ::zjchain::elect::protobuf::LeaderRotationMessage& ElectMessage::leader_rotation() const {
  return leader_rotation_ != NULL ? *leader_rotation_ : *default_instance_->leader_rotation_;
}
inline ::zjchain::elect::protobuf::LeaderRotationMessage* ElectMessage::mutable_leader_rotation() {
  set_has_leader_rotation();
  if (leader_rotation_ == NULL) leader_rotation_ = new ::zjchain::elect::protobuf::LeaderRotationMessage;
  return leader_rotation_;
}
inline ::zjchain::elect::protobuf::LeaderRotationMessage* ElectMessage::release_leader_rotation() {
  clear_has_leader_rotation();
  ::zjchain::elect::protobuf::LeaderRotationMessage* temp = leader_rotation_;
  leader_rotation_ = NULL;
  return temp;
}
inline void ElectMessage::set_allocated_leader_rotation(::zjchain::elect::protobuf::LeaderRotationMessage* leader_rotation) {
  delete leader_rotation_;
  leader_rotation_ = leader_rotation;
  if (leader_rotation) {
    set_has_leader_rotation();
  } else {
    clear_has_leader_rotation();
  }
}

// optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
inline bool ElectMessage::has_sync_stoke_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ElectMessage::set_has_sync_stoke_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ElectMessage::clear_has_sync_stoke_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ElectMessage::clear_sync_stoke_req() {
  if (sync_stoke_req_ != NULL) sync_stoke_req_->::zjchain::elect::protobuf::SyncNodeStokeRequest::Clear();
  clear_has_sync_stoke_req();
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeRequest& ElectMessage::sync_stoke_req() const {
  return sync_stoke_req_ != NULL ? *sync_stoke_req_ : *default_instance_->sync_stoke_req_;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* ElectMessage::mutable_sync_stoke_req() {
  set_has_sync_stoke_req();
  if (sync_stoke_req_ == NULL) sync_stoke_req_ = new ::zjchain::elect::protobuf::SyncNodeStokeRequest;
  return sync_stoke_req_;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeRequest* ElectMessage::release_sync_stoke_req() {
  clear_has_sync_stoke_req();
  ::zjchain::elect::protobuf::SyncNodeStokeRequest* temp = sync_stoke_req_;
  sync_stoke_req_ = NULL;
  return temp;
}
inline void ElectMessage::set_allocated_sync_stoke_req(::zjchain::elect::protobuf::SyncNodeStokeRequest* sync_stoke_req) {
  delete sync_stoke_req_;
  sync_stoke_req_ = sync_stoke_req;
  if (sync_stoke_req) {
    set_has_sync_stoke_req();
  } else {
    clear_has_sync_stoke_req();
  }
}

// optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
inline bool ElectMessage::has_sync_stoke_res() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ElectMessage::set_has_sync_stoke_res() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ElectMessage::clear_has_sync_stoke_res() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ElectMessage::clear_sync_stoke_res() {
  if (sync_stoke_res_ != NULL) sync_stoke_res_->::zjchain::elect::protobuf::SyncNodeStokeResponse::Clear();
  clear_has_sync_stoke_res();
}
inline const ::zjchain::elect::protobuf::SyncNodeStokeResponse& ElectMessage::sync_stoke_res() const {
  return sync_stoke_res_ != NULL ? *sync_stoke_res_ : *default_instance_->sync_stoke_res_;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* ElectMessage::mutable_sync_stoke_res() {
  set_has_sync_stoke_res();
  if (sync_stoke_res_ == NULL) sync_stoke_res_ = new ::zjchain::elect::protobuf::SyncNodeStokeResponse;
  return sync_stoke_res_;
}
inline ::zjchain::elect::protobuf::SyncNodeStokeResponse* ElectMessage::release_sync_stoke_res() {
  clear_has_sync_stoke_res();
  ::zjchain::elect::protobuf::SyncNodeStokeResponse* temp = sync_stoke_res_;
  sync_stoke_res_ = NULL;
  return temp;
}
inline void ElectMessage::set_allocated_sync_stoke_res(::zjchain::elect::protobuf::SyncNodeStokeResponse* sync_stoke_res) {
  delete sync_stoke_res_;
  sync_stoke_res_ = sync_stoke_res;
  if (sync_stoke_res) {
    set_has_sync_stoke_res();
  } else {
    clear_has_sync_stoke_res();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace elect
}  // namespace zjchain

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protos_2felect_2eproto__INCLUDED
