// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/bls.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fbls_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fbls_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fbls_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fbls_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fbls_2eproto;
namespace zjchain {
namespace bls {
namespace protobuf {
class AgainstParticipant;
struct AgainstParticipantDefaultTypeInternal;
extern AgainstParticipantDefaultTypeInternal _AgainstParticipant_default_instance_;
class BlsMessage;
struct BlsMessageDefaultTypeInternal;
extern BlsMessageDefaultTypeInternal _BlsMessage_default_instance_;
class BlsPublicKey;
struct BlsPublicKeyDefaultTypeInternal;
extern BlsPublicKeyDefaultTypeInternal _BlsPublicKey_default_instance_;
class BlsVerifyValue;
struct BlsVerifyValueDefaultTypeInternal;
extern BlsVerifyValueDefaultTypeInternal _BlsVerifyValue_default_instance_;
class CheckSwapKeyReq;
struct CheckSwapKeyReqDefaultTypeInternal;
extern CheckSwapKeyReqDefaultTypeInternal _CheckSwapKeyReq_default_instance_;
class CheckVerfiyReq;
struct CheckVerfiyReqDefaultTypeInternal;
extern CheckVerfiyReqDefaultTypeInternal _CheckVerfiyReq_default_instance_;
class FinishBroadcast;
struct FinishBroadcastDefaultTypeInternal;
extern FinishBroadcastDefaultTypeInternal _FinishBroadcast_default_instance_;
class JoinElectBlsInfo;
struct JoinElectBlsInfoDefaultTypeInternal;
extern JoinElectBlsInfoDefaultTypeInternal _JoinElectBlsInfo_default_instance_;
class JoinElectInfo;
struct JoinElectInfoDefaultTypeInternal;
extern JoinElectInfoDefaultTypeInternal _JoinElectInfo_default_instance_;
class LocalBlsItem;
struct LocalBlsItemDefaultTypeInternal;
extern LocalBlsItemDefaultTypeInternal _LocalBlsItem_default_instance_;
class LocalPolynomial;
struct LocalPolynomialDefaultTypeInternal;
extern LocalPolynomialDefaultTypeInternal _LocalPolynomial_default_instance_;
class SwapSecKeyItem;
struct SwapSecKeyItemDefaultTypeInternal;
extern SwapSecKeyItemDefaultTypeInternal _SwapSecKeyItem_default_instance_;
class SwapSecKeyReq;
struct SwapSecKeyReqDefaultTypeInternal;
extern SwapSecKeyReqDefaultTypeInternal _SwapSecKeyReq_default_instance_;
class SwapSecKeyRes;
struct SwapSecKeyResDefaultTypeInternal;
extern SwapSecKeyResDefaultTypeInternal _SwapSecKeyRes_default_instance_;
class VerifyVecBrdReq;
struct VerifyVecBrdReqDefaultTypeInternal;
extern VerifyVecBrdReqDefaultTypeInternal _VerifyVecBrdReq_default_instance_;
class VerifyVecBrdRes;
struct VerifyVecBrdResDefaultTypeInternal;
extern VerifyVecBrdResDefaultTypeInternal _VerifyVecBrdRes_default_instance_;
class VerifyVecItem;
struct VerifyVecItemDefaultTypeInternal;
extern VerifyVecItemDefaultTypeInternal _VerifyVecItem_default_instance_;
}  // namespace protobuf
}  // namespace bls
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::bls::protobuf::AgainstParticipant* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::AgainstParticipant>(Arena*);
template<> ::zjchain::bls::protobuf::BlsMessage* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::BlsMessage>(Arena*);
template<> ::zjchain::bls::protobuf::BlsPublicKey* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::BlsPublicKey>(Arena*);
template<> ::zjchain::bls::protobuf::BlsVerifyValue* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::BlsVerifyValue>(Arena*);
template<> ::zjchain::bls::protobuf::CheckSwapKeyReq* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::CheckSwapKeyReq>(Arena*);
template<> ::zjchain::bls::protobuf::CheckVerfiyReq* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::CheckVerfiyReq>(Arena*);
template<> ::zjchain::bls::protobuf::FinishBroadcast* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::FinishBroadcast>(Arena*);
template<> ::zjchain::bls::protobuf::JoinElectBlsInfo* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::JoinElectBlsInfo>(Arena*);
template<> ::zjchain::bls::protobuf::JoinElectInfo* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::JoinElectInfo>(Arena*);
template<> ::zjchain::bls::protobuf::LocalBlsItem* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::LocalBlsItem>(Arena*);
template<> ::zjchain::bls::protobuf::LocalPolynomial* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::LocalPolynomial>(Arena*);
template<> ::zjchain::bls::protobuf::SwapSecKeyItem* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::SwapSecKeyItem>(Arena*);
template<> ::zjchain::bls::protobuf::SwapSecKeyReq* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::SwapSecKeyReq>(Arena*);
template<> ::zjchain::bls::protobuf::SwapSecKeyRes* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::SwapSecKeyRes>(Arena*);
template<> ::zjchain::bls::protobuf::VerifyVecBrdReq* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::VerifyVecBrdReq>(Arena*);
template<> ::zjchain::bls::protobuf::VerifyVecBrdRes* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::VerifyVecBrdRes>(Arena*);
template<> ::zjchain::bls::protobuf::VerifyVecItem* Arena::CreateMaybeMessage<::zjchain::bls::protobuf::VerifyVecItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace bls {
namespace protobuf {

// ===================================================================

class VerifyVecItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.VerifyVecItem) */ {
 public:
  inline VerifyVecItem() : VerifyVecItem(nullptr) {}
  ~VerifyVecItem() override;
  explicit PROTOBUF_CONSTEXPR VerifyVecItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyVecItem(const VerifyVecItem& from);
  VerifyVecItem(VerifyVecItem&& from) noexcept
    : VerifyVecItem() {
    *this = ::std::move(from);
  }

  inline VerifyVecItem& operator=(const VerifyVecItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyVecItem& operator=(VerifyVecItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyVecItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyVecItem* internal_default_instance() {
    return reinterpret_cast<const VerifyVecItem*>(
               &_VerifyVecItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VerifyVecItem& a, VerifyVecItem& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyVecItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyVecItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyVecItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyVecItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyVecItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VerifyVecItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyVecItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.VerifyVecItem";
  }
  protected:
  explicit VerifyVecItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXC0FieldNumber = 1,
    kXC1FieldNumber = 2,
    kYC0FieldNumber = 3,
    kYC1FieldNumber = 4,
    kZC0FieldNumber = 5,
    kZC1FieldNumber = 6,
  };
  // optional bytes x_c0 = 1;
  bool has_x_c0() const;
  private:
  bool _internal_has_x_c0() const;
  public:
  void clear_x_c0();
  const std::string& x_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c0();
  PROTOBUF_NODISCARD std::string* release_x_c0();
  void set_allocated_x_c0(std::string* x_c0);
  private:
  const std::string& _internal_x_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c0(const std::string& value);
  std::string* _internal_mutable_x_c0();
  public:

  // optional bytes x_c1 = 2;
  bool has_x_c1() const;
  private:
  bool _internal_has_x_c1() const;
  public:
  void clear_x_c1();
  const std::string& x_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c1();
  PROTOBUF_NODISCARD std::string* release_x_c1();
  void set_allocated_x_c1(std::string* x_c1);
  private:
  const std::string& _internal_x_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c1(const std::string& value);
  std::string* _internal_mutable_x_c1();
  public:

  // optional bytes y_c0 = 3;
  bool has_y_c0() const;
  private:
  bool _internal_has_y_c0() const;
  public:
  void clear_y_c0();
  const std::string& y_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c0();
  PROTOBUF_NODISCARD std::string* release_y_c0();
  void set_allocated_y_c0(std::string* y_c0);
  private:
  const std::string& _internal_y_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c0(const std::string& value);
  std::string* _internal_mutable_y_c0();
  public:

  // optional bytes y_c1 = 4;
  bool has_y_c1() const;
  private:
  bool _internal_has_y_c1() const;
  public:
  void clear_y_c1();
  const std::string& y_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c1();
  PROTOBUF_NODISCARD std::string* release_y_c1();
  void set_allocated_y_c1(std::string* y_c1);
  private:
  const std::string& _internal_y_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c1(const std::string& value);
  std::string* _internal_mutable_y_c1();
  public:

  // optional bytes z_c0 = 5;
  bool has_z_c0() const;
  private:
  bool _internal_has_z_c0() const;
  public:
  void clear_z_c0();
  const std::string& z_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_z_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_z_c0();
  PROTOBUF_NODISCARD std::string* release_z_c0();
  void set_allocated_z_c0(std::string* z_c0);
  private:
  const std::string& _internal_z_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_z_c0(const std::string& value);
  std::string* _internal_mutable_z_c0();
  public:

  // optional bytes z_c1 = 6;
  bool has_z_c1() const;
  private:
  bool _internal_has_z_c1() const;
  public:
  void clear_z_c1();
  const std::string& z_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_z_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_z_c1();
  PROTOBUF_NODISCARD std::string* release_z_c1();
  void set_allocated_z_c1(std::string* z_c1);
  private:
  const std::string& _internal_z_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_z_c1(const std::string& value);
  std::string* _internal_mutable_z_c1();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.VerifyVecItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr z_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr z_c1_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class BlsPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.BlsPublicKey) */ {
 public:
  inline BlsPublicKey() : BlsPublicKey(nullptr) {}
  ~BlsPublicKey() override;
  explicit PROTOBUF_CONSTEXPR BlsPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlsPublicKey(const BlsPublicKey& from);
  BlsPublicKey(BlsPublicKey&& from) noexcept
    : BlsPublicKey() {
    *this = ::std::move(from);
  }

  inline BlsPublicKey& operator=(const BlsPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlsPublicKey& operator=(BlsPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlsPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlsPublicKey* internal_default_instance() {
    return reinterpret_cast<const BlsPublicKey*>(
               &_BlsPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlsPublicKey& a, BlsPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(BlsPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlsPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlsPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlsPublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlsPublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlsPublicKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlsPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.BlsPublicKey";
  }
  protected:
  explicit BlsPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXC0FieldNumber = 1,
    kXC1FieldNumber = 2,
    kYC0FieldNumber = 3,
    kYC1FieldNumber = 4,
  };
  // optional bytes x_c0 = 1;
  bool has_x_c0() const;
  private:
  bool _internal_has_x_c0() const;
  public:
  void clear_x_c0();
  const std::string& x_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c0();
  PROTOBUF_NODISCARD std::string* release_x_c0();
  void set_allocated_x_c0(std::string* x_c0);
  private:
  const std::string& _internal_x_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c0(const std::string& value);
  std::string* _internal_mutable_x_c0();
  public:

  // optional bytes x_c1 = 2;
  bool has_x_c1() const;
  private:
  bool _internal_has_x_c1() const;
  public:
  void clear_x_c1();
  const std::string& x_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_c1();
  PROTOBUF_NODISCARD std::string* release_x_c1();
  void set_allocated_x_c1(std::string* x_c1);
  private:
  const std::string& _internal_x_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_c1(const std::string& value);
  std::string* _internal_mutable_x_c1();
  public:

  // optional bytes y_c0 = 3;
  bool has_y_c0() const;
  private:
  bool _internal_has_y_c0() const;
  public:
  void clear_y_c0();
  const std::string& y_c0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c0();
  PROTOBUF_NODISCARD std::string* release_y_c0();
  void set_allocated_y_c0(std::string* y_c0);
  private:
  const std::string& _internal_y_c0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c0(const std::string& value);
  std::string* _internal_mutable_y_c0();
  public:

  // optional bytes y_c1 = 4;
  bool has_y_c1() const;
  private:
  bool _internal_has_y_c1() const;
  public:
  void clear_y_c1();
  const std::string& y_c1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y_c1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y_c1();
  PROTOBUF_NODISCARD std::string* release_y_c1();
  void set_allocated_y_c1(std::string* y_c1);
  private:
  const std::string& _internal_y_c1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y_c1(const std::string& value);
  std::string* _internal_mutable_y_c1();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.BlsPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_c1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_c1_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class VerifyVecBrdReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.VerifyVecBrdReq) */ {
 public:
  inline VerifyVecBrdReq() : VerifyVecBrdReq(nullptr) {}
  ~VerifyVecBrdReq() override;
  explicit PROTOBUF_CONSTEXPR VerifyVecBrdReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyVecBrdReq(const VerifyVecBrdReq& from);
  VerifyVecBrdReq(VerifyVecBrdReq&& from) noexcept
    : VerifyVecBrdReq() {
    *this = ::std::move(from);
  }

  inline VerifyVecBrdReq& operator=(const VerifyVecBrdReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyVecBrdReq& operator=(VerifyVecBrdReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyVecBrdReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyVecBrdReq* internal_default_instance() {
    return reinterpret_cast<const VerifyVecBrdReq*>(
               &_VerifyVecBrdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VerifyVecBrdReq& a, VerifyVecBrdReq& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyVecBrdReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyVecBrdReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyVecBrdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyVecBrdReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyVecBrdReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VerifyVecBrdReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyVecBrdReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.VerifyVecBrdReq";
  }
  protected:
  explicit VerifyVecBrdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifyVecFieldNumber = 1,
    kChangeIdxFieldNumber = 2,
  };
  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  int verify_vec_size() const;
  private:
  int _internal_verify_vec_size() const;
  public:
  void clear_verify_vec();
  ::zjchain::bls::protobuf::VerifyVecItem* mutable_verify_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >*
      mutable_verify_vec();
  private:
  const ::zjchain::bls::protobuf::VerifyVecItem& _internal_verify_vec(int index) const;
  ::zjchain::bls::protobuf::VerifyVecItem* _internal_add_verify_vec();
  public:
  const ::zjchain::bls::protobuf::VerifyVecItem& verify_vec(int index) const;
  ::zjchain::bls::protobuf::VerifyVecItem* add_verify_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >&
      verify_vec() const;

  // optional uint32 change_idx = 2;
  bool has_change_idx() const;
  private:
  bool _internal_has_change_idx() const;
  public:
  void clear_change_idx();
  uint32_t change_idx() const;
  void set_change_idx(uint32_t value);
  private:
  uint32_t _internal_change_idx() const;
  void _internal_set_change_idx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.VerifyVecBrdReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem > verify_vec_;
  uint32_t change_idx_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class JoinElectBlsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.JoinElectBlsInfo) */ {
 public:
  inline JoinElectBlsInfo() : JoinElectBlsInfo(nullptr) {}
  ~JoinElectBlsInfo() override;
  explicit PROTOBUF_CONSTEXPR JoinElectBlsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinElectBlsInfo(const JoinElectBlsInfo& from);
  JoinElectBlsInfo(JoinElectBlsInfo&& from) noexcept
    : JoinElectBlsInfo() {
    *this = ::std::move(from);
  }

  inline JoinElectBlsInfo& operator=(const JoinElectBlsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinElectBlsInfo& operator=(JoinElectBlsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinElectBlsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinElectBlsInfo* internal_default_instance() {
    return reinterpret_cast<const JoinElectBlsInfo*>(
               &_JoinElectBlsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JoinElectBlsInfo& a, JoinElectBlsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinElectBlsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinElectBlsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinElectBlsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinElectBlsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinElectBlsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinElectBlsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinElectBlsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.JoinElectBlsInfo";
  }
  protected:
  explicit JoinElectBlsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifiedG2FieldNumber = 1,
  };
  // optional .zjchain.bls.protobuf.VerifyVecItem verified_g2 = 1;
  bool has_verified_g2() const;
  private:
  bool _internal_has_verified_g2() const;
  public:
  void clear_verified_g2();
  const ::zjchain::bls::protobuf::VerifyVecItem& verified_g2() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::VerifyVecItem* release_verified_g2();
  ::zjchain::bls::protobuf::VerifyVecItem* mutable_verified_g2();
  void set_allocated_verified_g2(::zjchain::bls::protobuf::VerifyVecItem* verified_g2);
  private:
  const ::zjchain::bls::protobuf::VerifyVecItem& _internal_verified_g2() const;
  ::zjchain::bls::protobuf::VerifyVecItem* _internal_mutable_verified_g2();
  public:
  void unsafe_arena_set_allocated_verified_g2(
      ::zjchain::bls::protobuf::VerifyVecItem* verified_g2);
  ::zjchain::bls::protobuf::VerifyVecItem* unsafe_arena_release_verified_g2();

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.JoinElectBlsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::bls::protobuf::VerifyVecItem* verified_g2_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class JoinElectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.JoinElectInfo) */ {
 public:
  inline JoinElectInfo() : JoinElectInfo(nullptr) {}
  ~JoinElectInfo() override;
  explicit PROTOBUF_CONSTEXPR JoinElectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinElectInfo(const JoinElectInfo& from);
  JoinElectInfo(JoinElectInfo&& from) noexcept
    : JoinElectInfo() {
    *this = ::std::move(from);
  }

  inline JoinElectInfo& operator=(const JoinElectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinElectInfo& operator=(JoinElectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinElectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinElectInfo* internal_default_instance() {
    return reinterpret_cast<const JoinElectInfo*>(
               &_JoinElectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinElectInfo& a, JoinElectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinElectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinElectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinElectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinElectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinElectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinElectInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinElectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.JoinElectInfo";
  }
  protected:
  explicit JoinElectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kG2ReqFieldNumber = 4,
    kShardIdFieldNumber = 1,
    kMemberIdxFieldNumber = 2,
    kChangeIdxFieldNumber = 3,
  };
  // optional .zjchain.bls.protobuf.VerifyVecBrdReq g2_req = 4;
  bool has_g2_req() const;
  private:
  bool _internal_has_g2_req() const;
  public:
  void clear_g2_req();
  const ::zjchain::bls::protobuf::VerifyVecBrdReq& g2_req() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::VerifyVecBrdReq* release_g2_req();
  ::zjchain::bls::protobuf::VerifyVecBrdReq* mutable_g2_req();
  void set_allocated_g2_req(::zjchain::bls::protobuf::VerifyVecBrdReq* g2_req);
  private:
  const ::zjchain::bls::protobuf::VerifyVecBrdReq& _internal_g2_req() const;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* _internal_mutable_g2_req();
  public:
  void unsafe_arena_set_allocated_g2_req(
      ::zjchain::bls::protobuf::VerifyVecBrdReq* g2_req);
  ::zjchain::bls::protobuf::VerifyVecBrdReq* unsafe_arena_release_g2_req();

  // optional uint32 shard_id = 1;
  bool has_shard_id() const;
  private:
  bool _internal_has_shard_id() const;
  public:
  void clear_shard_id();
  uint32_t shard_id() const;
  void set_shard_id(uint32_t value);
  private:
  uint32_t _internal_shard_id() const;
  void _internal_set_shard_id(uint32_t value);
  public:

  // optional uint32 member_idx = 2;
  bool has_member_idx() const;
  private:
  bool _internal_has_member_idx() const;
  public:
  void clear_member_idx();
  uint32_t member_idx() const;
  void set_member_idx(uint32_t value);
  private:
  uint32_t _internal_member_idx() const;
  void _internal_set_member_idx(uint32_t value);
  public:

  // optional uint32 change_idx = 3;
  bool has_change_idx() const;
  private:
  bool _internal_has_change_idx() const;
  public:
  void clear_change_idx();
  uint32_t change_idx() const;
  void set_change_idx(uint32_t value);
  private:
  uint32_t _internal_change_idx() const;
  void _internal_set_change_idx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.JoinElectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* g2_req_;
  uint32_t shard_id_;
  uint32_t member_idx_;
  uint32_t change_idx_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class LocalPolynomial final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.LocalPolynomial) */ {
 public:
  inline LocalPolynomial() : LocalPolynomial(nullptr) {}
  ~LocalPolynomial() override;
  explicit PROTOBUF_CONSTEXPR LocalPolynomial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalPolynomial(const LocalPolynomial& from);
  LocalPolynomial(LocalPolynomial&& from) noexcept
    : LocalPolynomial() {
    *this = ::std::move(from);
  }

  inline LocalPolynomial& operator=(const LocalPolynomial& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPolynomial& operator=(LocalPolynomial&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalPolynomial& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalPolynomial* internal_default_instance() {
    return reinterpret_cast<const LocalPolynomial*>(
               &_LocalPolynomial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LocalPolynomial& a, LocalPolynomial& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPolynomial* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPolynomial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalPolynomial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalPolynomial>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalPolynomial& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocalPolynomial& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPolynomial* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.LocalPolynomial";
  }
  protected:
  explicit LocalPolynomial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolynomialFieldNumber = 1,
    kChangeIdxFieldNumber = 2,
  };
  // repeated bytes polynomial = 1;
  int polynomial_size() const;
  private:
  int _internal_polynomial_size() const;
  public:
  void clear_polynomial();
  const std::string& polynomial(int index) const;
  std::string* mutable_polynomial(int index);
  void set_polynomial(int index, const std::string& value);
  void set_polynomial(int index, std::string&& value);
  void set_polynomial(int index, const char* value);
  void set_polynomial(int index, const void* value, size_t size);
  std::string* add_polynomial();
  void add_polynomial(const std::string& value);
  void add_polynomial(std::string&& value);
  void add_polynomial(const char* value);
  void add_polynomial(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& polynomial() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_polynomial();
  private:
  const std::string& _internal_polynomial(int index) const;
  std::string* _internal_add_polynomial();
  public:

  // optional uint32 change_idx = 2 [default = 0];
  bool has_change_idx() const;
  private:
  bool _internal_has_change_idx() const;
  public:
  void clear_change_idx();
  uint32_t change_idx() const;
  void set_change_idx(uint32_t value);
  private:
  uint32_t _internal_change_idx() const;
  void _internal_set_change_idx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.LocalPolynomial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> polynomial_;
  uint32_t change_idx_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class LocalBlsItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.LocalBlsItem) */ {
 public:
  inline LocalBlsItem() : LocalBlsItem(nullptr) {}
  ~LocalBlsItem() override;
  explicit PROTOBUF_CONSTEXPR LocalBlsItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalBlsItem(const LocalBlsItem& from);
  LocalBlsItem(LocalBlsItem&& from) noexcept
    : LocalBlsItem() {
    *this = ::std::move(from);
  }

  inline LocalBlsItem& operator=(const LocalBlsItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalBlsItem& operator=(LocalBlsItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalBlsItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalBlsItem* internal_default_instance() {
    return reinterpret_cast<const LocalBlsItem*>(
               &_LocalBlsItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LocalBlsItem& a, LocalBlsItem& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalBlsItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalBlsItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalBlsItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalBlsItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalBlsItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocalBlsItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalBlsItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.LocalBlsItem";
  }
  protected:
  explicit LocalBlsItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolynomialFieldNumber = 1,
    kVerifyVecFieldNumber = 2,
    kValidTFieldNumber = 3,
    kValidNFieldNumber = 4,
  };
  // repeated bytes polynomial = 1;
  int polynomial_size() const;
  private:
  int _internal_polynomial_size() const;
  public:
  void clear_polynomial();
  const std::string& polynomial(int index) const;
  std::string* mutable_polynomial(int index);
  void set_polynomial(int index, const std::string& value);
  void set_polynomial(int index, std::string&& value);
  void set_polynomial(int index, const char* value);
  void set_polynomial(int index, const void* value, size_t size);
  std::string* add_polynomial();
  void add_polynomial(const std::string& value);
  void add_polynomial(std::string&& value);
  void add_polynomial(const char* value);
  void add_polynomial(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& polynomial() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_polynomial();
  private:
  const std::string& _internal_polynomial(int index) const;
  std::string* _internal_add_polynomial();
  public:

  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 2;
  int verify_vec_size() const;
  private:
  int _internal_verify_vec_size() const;
  public:
  void clear_verify_vec();
  ::zjchain::bls::protobuf::VerifyVecItem* mutable_verify_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >*
      mutable_verify_vec();
  private:
  const ::zjchain::bls::protobuf::VerifyVecItem& _internal_verify_vec(int index) const;
  ::zjchain::bls::protobuf::VerifyVecItem* _internal_add_verify_vec();
  public:
  const ::zjchain::bls::protobuf::VerifyVecItem& verify_vec(int index) const;
  ::zjchain::bls::protobuf::VerifyVecItem* add_verify_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >&
      verify_vec() const;

  // optional uint32 valid_t = 3;
  bool has_valid_t() const;
  private:
  bool _internal_has_valid_t() const;
  public:
  void clear_valid_t();
  uint32_t valid_t() const;
  void set_valid_t(uint32_t value);
  private:
  uint32_t _internal_valid_t() const;
  void _internal_set_valid_t(uint32_t value);
  public:

  // optional uint32 valid_n = 4;
  bool has_valid_n() const;
  private:
  bool _internal_has_valid_n() const;
  public:
  void clear_valid_n();
  uint32_t valid_n() const;
  void set_valid_n(uint32_t value);
  private:
  uint32_t _internal_valid_n() const;
  void _internal_set_valid_n(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.LocalBlsItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> polynomial_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem > verify_vec_;
  uint32_t valid_t_;
  uint32_t valid_n_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class BlsVerifyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.BlsVerifyValue) */ {
 public:
  inline BlsVerifyValue() : BlsVerifyValue(nullptr) {}
  ~BlsVerifyValue() override;
  explicit PROTOBUF_CONSTEXPR BlsVerifyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlsVerifyValue(const BlsVerifyValue& from);
  BlsVerifyValue(BlsVerifyValue&& from) noexcept
    : BlsVerifyValue() {
    *this = ::std::move(from);
  }

  inline BlsVerifyValue& operator=(const BlsVerifyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlsVerifyValue& operator=(BlsVerifyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlsVerifyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlsVerifyValue* internal_default_instance() {
    return reinterpret_cast<const BlsVerifyValue*>(
               &_BlsVerifyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlsVerifyValue& a, BlsVerifyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BlsVerifyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlsVerifyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlsVerifyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlsVerifyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlsVerifyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlsVerifyValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlsVerifyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.BlsVerifyValue";
  }
  protected:
  explicit BlsVerifyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifyVecFieldNumber = 1,
  };
  // repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
  int verify_vec_size() const;
  private:
  int _internal_verify_vec_size() const;
  public:
  void clear_verify_vec();
  ::zjchain::bls::protobuf::VerifyVecItem* mutable_verify_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >*
      mutable_verify_vec();
  private:
  const ::zjchain::bls::protobuf::VerifyVecItem& _internal_verify_vec(int index) const;
  ::zjchain::bls::protobuf::VerifyVecItem* _internal_add_verify_vec();
  public:
  const ::zjchain::bls::protobuf::VerifyVecItem& verify_vec(int index) const;
  ::zjchain::bls::protobuf::VerifyVecItem* add_verify_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >&
      verify_vec() const;

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.BlsVerifyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem > verify_vec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class VerifyVecBrdRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.VerifyVecBrdRes) */ {
 public:
  inline VerifyVecBrdRes() : VerifyVecBrdRes(nullptr) {}
  ~VerifyVecBrdRes() override;
  explicit PROTOBUF_CONSTEXPR VerifyVecBrdRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyVecBrdRes(const VerifyVecBrdRes& from);
  VerifyVecBrdRes(VerifyVecBrdRes&& from) noexcept
    : VerifyVecBrdRes() {
    *this = ::std::move(from);
  }

  inline VerifyVecBrdRes& operator=(const VerifyVecBrdRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyVecBrdRes& operator=(VerifyVecBrdRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyVecBrdRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyVecBrdRes* internal_default_instance() {
    return reinterpret_cast<const VerifyVecBrdRes*>(
               &_VerifyVecBrdRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VerifyVecBrdRes& a, VerifyVecBrdRes& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyVecBrdRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyVecBrdRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyVecBrdRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyVecBrdRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyVecBrdRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VerifyVecBrdRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyVecBrdRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.VerifyVecBrdRes";
  }
  protected:
  explicit VerifyVecBrdRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIpFieldNumber = 1,
    kPublicPortFieldNumber = 2,
  };
  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const std::string& public_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_ip();
  PROTOBUF_NODISCARD std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // optional uint32 public_port = 2;
  bool has_public_port() const;
  private:
  bool _internal_has_public_port() const;
  public:
  void clear_public_port();
  uint32_t public_port() const;
  void set_public_port(uint32_t value);
  private:
  uint32_t _internal_public_port() const;
  void _internal_set_public_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.VerifyVecBrdRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  uint32_t public_port_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class SwapSecKeyItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.SwapSecKeyItem) */ {
 public:
  inline SwapSecKeyItem() : SwapSecKeyItem(nullptr) {}
  ~SwapSecKeyItem() override;
  explicit PROTOBUF_CONSTEXPR SwapSecKeyItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapSecKeyItem(const SwapSecKeyItem& from);
  SwapSecKeyItem(SwapSecKeyItem&& from) noexcept
    : SwapSecKeyItem() {
    *this = ::std::move(from);
  }

  inline SwapSecKeyItem& operator=(const SwapSecKeyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapSecKeyItem& operator=(SwapSecKeyItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapSecKeyItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapSecKeyItem* internal_default_instance() {
    return reinterpret_cast<const SwapSecKeyItem*>(
               &_SwapSecKeyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SwapSecKeyItem& a, SwapSecKeyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapSecKeyItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapSecKeyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapSecKeyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapSecKeyItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapSecKeyItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapSecKeyItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapSecKeyItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.SwapSecKeyItem";
  }
  protected:
  explicit SwapSecKeyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecKeyFieldNumber = 1,
    kOldG2FieldNumber = 3,
    kSecKeyLenFieldNumber = 2,
  };
  // optional bytes sec_key = 1;
  bool has_sec_key() const;
  private:
  bool _internal_has_sec_key() const;
  public:
  void clear_sec_key();
  const std::string& sec_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sec_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sec_key();
  PROTOBUF_NODISCARD std::string* release_sec_key();
  void set_allocated_sec_key(std::string* sec_key);
  private:
  const std::string& _internal_sec_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sec_key(const std::string& value);
  std::string* _internal_mutable_sec_key();
  public:

  // optional .zjchain.bls.protobuf.BlsPublicKey old_g2 = 3;
  bool has_old_g2() const;
  private:
  bool _internal_has_old_g2() const;
  public:
  void clear_old_g2();
  const ::zjchain::bls::protobuf::BlsPublicKey& old_g2() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::BlsPublicKey* release_old_g2();
  ::zjchain::bls::protobuf::BlsPublicKey* mutable_old_g2();
  void set_allocated_old_g2(::zjchain::bls::protobuf::BlsPublicKey* old_g2);
  private:
  const ::zjchain::bls::protobuf::BlsPublicKey& _internal_old_g2() const;
  ::zjchain::bls::protobuf::BlsPublicKey* _internal_mutable_old_g2();
  public:
  void unsafe_arena_set_allocated_old_g2(
      ::zjchain::bls::protobuf::BlsPublicKey* old_g2);
  ::zjchain::bls::protobuf::BlsPublicKey* unsafe_arena_release_old_g2();

  // optional uint32 sec_key_len = 2;
  bool has_sec_key_len() const;
  private:
  bool _internal_has_sec_key_len() const;
  public:
  void clear_sec_key_len();
  uint32_t sec_key_len() const;
  void set_sec_key_len(uint32_t value);
  private:
  uint32_t _internal_sec_key_len() const;
  void _internal_set_sec_key_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.SwapSecKeyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_key_;
  ::zjchain::bls::protobuf::BlsPublicKey* old_g2_;
  uint32_t sec_key_len_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class SwapSecKeyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.SwapSecKeyReq) */ {
 public:
  inline SwapSecKeyReq() : SwapSecKeyReq(nullptr) {}
  ~SwapSecKeyReq() override;
  explicit PROTOBUF_CONSTEXPR SwapSecKeyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapSecKeyReq(const SwapSecKeyReq& from);
  SwapSecKeyReq(SwapSecKeyReq&& from) noexcept
    : SwapSecKeyReq() {
    *this = ::std::move(from);
  }

  inline SwapSecKeyReq& operator=(const SwapSecKeyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapSecKeyReq& operator=(SwapSecKeyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapSecKeyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapSecKeyReq* internal_default_instance() {
    return reinterpret_cast<const SwapSecKeyReq*>(
               &_SwapSecKeyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SwapSecKeyReq& a, SwapSecKeyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapSecKeyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapSecKeyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapSecKeyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapSecKeyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapSecKeyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapSecKeyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapSecKeyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.SwapSecKeyReq";
  }
  protected:
  explicit SwapSecKeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated .zjchain.bls.protobuf.SwapSecKeyItem keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::zjchain::bls::protobuf::SwapSecKeyItem* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::SwapSecKeyItem >*
      mutable_keys();
  private:
  const ::zjchain::bls::protobuf::SwapSecKeyItem& _internal_keys(int index) const;
  ::zjchain::bls::protobuf::SwapSecKeyItem* _internal_add_keys();
  public:
  const ::zjchain::bls::protobuf::SwapSecKeyItem& keys(int index) const;
  ::zjchain::bls::protobuf::SwapSecKeyItem* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::SwapSecKeyItem >&
      keys() const;

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.SwapSecKeyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::SwapSecKeyItem > keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class SwapSecKeyRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.SwapSecKeyRes) */ {
 public:
  inline SwapSecKeyRes() : SwapSecKeyRes(nullptr) {}
  ~SwapSecKeyRes() override;
  explicit PROTOBUF_CONSTEXPR SwapSecKeyRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapSecKeyRes(const SwapSecKeyRes& from);
  SwapSecKeyRes(SwapSecKeyRes&& from) noexcept
    : SwapSecKeyRes() {
    *this = ::std::move(from);
  }

  inline SwapSecKeyRes& operator=(const SwapSecKeyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapSecKeyRes& operator=(SwapSecKeyRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapSecKeyRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapSecKeyRes* internal_default_instance() {
    return reinterpret_cast<const SwapSecKeyRes*>(
               &_SwapSecKeyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SwapSecKeyRes& a, SwapSecKeyRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapSecKeyRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapSecKeyRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapSecKeyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapSecKeyRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapSecKeyRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapSecKeyRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapSecKeyRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.SwapSecKeyRes";
  }
  protected:
  explicit SwapSecKeyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecKeyFieldNumber = 2,
    kIndexFieldNumber = 1,
    kSecKeyLenFieldNumber = 3,
  };
  // optional bytes sec_key = 2;
  bool has_sec_key() const;
  private:
  bool _internal_has_sec_key() const;
  public:
  void clear_sec_key();
  const std::string& sec_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sec_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sec_key();
  PROTOBUF_NODISCARD std::string* release_sec_key();
  void set_allocated_sec_key(std::string* sec_key);
  private:
  const std::string& _internal_sec_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sec_key(const std::string& value);
  std::string* _internal_mutable_sec_key();
  public:

  // optional uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional uint32 sec_key_len = 3;
  bool has_sec_key_len() const;
  private:
  bool _internal_has_sec_key_len() const;
  public:
  void clear_sec_key_len();
  uint32_t sec_key_len() const;
  void set_sec_key_len(uint32_t value);
  private:
  uint32_t _internal_sec_key_len() const;
  void _internal_set_sec_key_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.SwapSecKeyRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_key_;
  uint32_t index_;
  uint32_t sec_key_len_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class AgainstParticipant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.AgainstParticipant) */ {
 public:
  inline AgainstParticipant() : AgainstParticipant(nullptr) {}
  ~AgainstParticipant() override;
  explicit PROTOBUF_CONSTEXPR AgainstParticipant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgainstParticipant(const AgainstParticipant& from);
  AgainstParticipant(AgainstParticipant&& from) noexcept
    : AgainstParticipant() {
    *this = ::std::move(from);
  }

  inline AgainstParticipant& operator=(const AgainstParticipant& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgainstParticipant& operator=(AgainstParticipant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgainstParticipant& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgainstParticipant* internal_default_instance() {
    return reinterpret_cast<const AgainstParticipant*>(
               &_AgainstParticipant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AgainstParticipant& a, AgainstParticipant& b) {
    a.Swap(&b);
  }
  inline void Swap(AgainstParticipant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgainstParticipant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgainstParticipant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgainstParticipant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgainstParticipant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgainstParticipant& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgainstParticipant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.AgainstParticipant";
  }
  protected:
  explicit AgainstParticipant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgainstIndexFieldNumber = 1,
  };
  // optional uint32 against_index = 1;
  bool has_against_index() const;
  private:
  bool _internal_has_against_index() const;
  public:
  void clear_against_index();
  uint32_t against_index() const;
  void set_against_index(uint32_t value);
  private:
  uint32_t _internal_against_index() const;
  void _internal_set_against_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.AgainstParticipant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t against_index_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class FinishBroadcast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.FinishBroadcast) */ {
 public:
  inline FinishBroadcast() : FinishBroadcast(nullptr) {}
  ~FinishBroadcast() override;
  explicit PROTOBUF_CONSTEXPR FinishBroadcast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinishBroadcast(const FinishBroadcast& from);
  FinishBroadcast(FinishBroadcast&& from) noexcept
    : FinishBroadcast() {
    *this = ::std::move(from);
  }

  inline FinishBroadcast& operator=(const FinishBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinishBroadcast& operator=(FinishBroadcast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinishBroadcast& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinishBroadcast* internal_default_instance() {
    return reinterpret_cast<const FinishBroadcast*>(
               &_FinishBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FinishBroadcast& a, FinishBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(FinishBroadcast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinishBroadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FinishBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FinishBroadcast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FinishBroadcast& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FinishBroadcast& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishBroadcast* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.FinishBroadcast";
  }
  protected:
  explicit FinishBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitmapFieldNumber = 1,
    kBlsSignXFieldNumber = 5,
    kBlsSignYFieldNumber = 6,
    kPubkeyFieldNumber = 2,
    kCommonPubkeyFieldNumber = 3,
    kNetworkIdFieldNumber = 4,
  };
  // repeated uint64 bitmap = 1;
  int bitmap_size() const;
  private:
  int _internal_bitmap_size() const;
  public:
  void clear_bitmap();
  private:
  uint64_t _internal_bitmap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_bitmap() const;
  void _internal_add_bitmap(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_bitmap();
  public:
  uint64_t bitmap(int index) const;
  void set_bitmap(int index, uint64_t value);
  void add_bitmap(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      bitmap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_bitmap();

  // optional bytes bls_sign_x = 5;
  bool has_bls_sign_x() const;
  private:
  bool _internal_has_bls_sign_x() const;
  public:
  void clear_bls_sign_x();
  const std::string& bls_sign_x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_sign_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_sign_x();
  PROTOBUF_NODISCARD std::string* release_bls_sign_x();
  void set_allocated_bls_sign_x(std::string* bls_sign_x);
  private:
  const std::string& _internal_bls_sign_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_sign_x(const std::string& value);
  std::string* _internal_mutable_bls_sign_x();
  public:

  // optional bytes bls_sign_y = 6;
  bool has_bls_sign_y() const;
  private:
  bool _internal_has_bls_sign_y() const;
  public:
  void clear_bls_sign_y();
  const std::string& bls_sign_y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_sign_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_sign_y();
  PROTOBUF_NODISCARD std::string* release_bls_sign_y();
  void set_allocated_bls_sign_y(std::string* bls_sign_y);
  private:
  const std::string& _internal_bls_sign_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_sign_y(const std::string& value);
  std::string* _internal_mutable_bls_sign_y();
  public:

  // optional .zjchain.bls.protobuf.BlsPublicKey pubkey = 2;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const ::zjchain::bls::protobuf::BlsPublicKey& pubkey() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::BlsPublicKey* release_pubkey();
  ::zjchain::bls::protobuf::BlsPublicKey* mutable_pubkey();
  void set_allocated_pubkey(::zjchain::bls::protobuf::BlsPublicKey* pubkey);
  private:
  const ::zjchain::bls::protobuf::BlsPublicKey& _internal_pubkey() const;
  ::zjchain::bls::protobuf::BlsPublicKey* _internal_mutable_pubkey();
  public:
  void unsafe_arena_set_allocated_pubkey(
      ::zjchain::bls::protobuf::BlsPublicKey* pubkey);
  ::zjchain::bls::protobuf::BlsPublicKey* unsafe_arena_release_pubkey();

  // optional .zjchain.bls.protobuf.BlsPublicKey common_pubkey = 3;
  bool has_common_pubkey() const;
  private:
  bool _internal_has_common_pubkey() const;
  public:
  void clear_common_pubkey();
  const ::zjchain::bls::protobuf::BlsPublicKey& common_pubkey() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::BlsPublicKey* release_common_pubkey();
  ::zjchain::bls::protobuf::BlsPublicKey* mutable_common_pubkey();
  void set_allocated_common_pubkey(::zjchain::bls::protobuf::BlsPublicKey* common_pubkey);
  private:
  const ::zjchain::bls::protobuf::BlsPublicKey& _internal_common_pubkey() const;
  ::zjchain::bls::protobuf::BlsPublicKey* _internal_mutable_common_pubkey();
  public:
  void unsafe_arena_set_allocated_common_pubkey(
      ::zjchain::bls::protobuf::BlsPublicKey* common_pubkey);
  ::zjchain::bls::protobuf::BlsPublicKey* unsafe_arena_release_common_pubkey();

  // optional uint32 network_id = 4;
  bool has_network_id() const;
  private:
  bool _internal_has_network_id() const;
  public:
  void clear_network_id();
  uint32_t network_id() const;
  void set_network_id(uint32_t value);
  private:
  uint32_t _internal_network_id() const;
  void _internal_set_network_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.FinishBroadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > bitmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_sign_x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_sign_y_;
  ::zjchain::bls::protobuf::BlsPublicKey* pubkey_;
  ::zjchain::bls::protobuf::BlsPublicKey* common_pubkey_;
  uint32_t network_id_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class CheckVerfiyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.CheckVerfiyReq) */ {
 public:
  inline CheckVerfiyReq() : CheckVerfiyReq(nullptr) {}
  ~CheckVerfiyReq() override;
  explicit PROTOBUF_CONSTEXPR CheckVerfiyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckVerfiyReq(const CheckVerfiyReq& from);
  CheckVerfiyReq(CheckVerfiyReq&& from) noexcept
    : CheckVerfiyReq() {
    *this = ::std::move(from);
  }

  inline CheckVerfiyReq& operator=(const CheckVerfiyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckVerfiyReq& operator=(CheckVerfiyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckVerfiyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckVerfiyReq* internal_default_instance() {
    return reinterpret_cast<const CheckVerfiyReq*>(
               &_CheckVerfiyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CheckVerfiyReq& a, CheckVerfiyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckVerfiyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckVerfiyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckVerfiyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckVerfiyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckVerfiyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckVerfiyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckVerfiyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.CheckVerfiyReq";
  }
  protected:
  explicit CheckVerfiyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // optional uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.CheckVerfiyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t index_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class CheckSwapKeyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.CheckSwapKeyReq) */ {
 public:
  inline CheckSwapKeyReq() : CheckSwapKeyReq(nullptr) {}
  ~CheckSwapKeyReq() override;
  explicit PROTOBUF_CONSTEXPR CheckSwapKeyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckSwapKeyReq(const CheckSwapKeyReq& from);
  CheckSwapKeyReq(CheckSwapKeyReq&& from) noexcept
    : CheckSwapKeyReq() {
    *this = ::std::move(from);
  }

  inline CheckSwapKeyReq& operator=(const CheckSwapKeyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckSwapKeyReq& operator=(CheckSwapKeyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckSwapKeyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckSwapKeyReq* internal_default_instance() {
    return reinterpret_cast<const CheckSwapKeyReq*>(
               &_CheckSwapKeyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CheckSwapKeyReq& a, CheckSwapKeyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckSwapKeyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckSwapKeyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckSwapKeyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckSwapKeyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckSwapKeyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckSwapKeyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckSwapKeyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.CheckSwapKeyReq";
  }
  protected:
  explicit CheckSwapKeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // optional uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.CheckSwapKeyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t index_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// -------------------------------------------------------------------

class BlsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.bls.protobuf.BlsMessage) */ {
 public:
  inline BlsMessage() : BlsMessage(nullptr) {}
  ~BlsMessage() override;
  explicit PROTOBUF_CONSTEXPR BlsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlsMessage(const BlsMessage& from);
  BlsMessage(BlsMessage&& from) noexcept
    : BlsMessage() {
    *this = ::std::move(from);
  }

  inline BlsMessage& operator=(const BlsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlsMessage& operator=(BlsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlsMessage* internal_default_instance() {
    return reinterpret_cast<const BlsMessage*>(
               &_BlsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BlsMessage& a, BlsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlsMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlsMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.bls.protobuf.BlsMessage";
  }
  protected:
  explicit BlsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifyBrdFieldNumber = 1,
    kSwapReqFieldNumber = 2,
    kFinishReqFieldNumber = 3,
    kCheckVerifyReqFieldNumber = 4,
    kCheckSwapkeyReqFieldNumber = 5,
    kElectHeightFieldNumber = 7,
    kIndexFieldNumber = 6,
  };
  // optional .zjchain.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
  bool has_verify_brd() const;
  private:
  bool _internal_has_verify_brd() const;
  public:
  void clear_verify_brd();
  const ::zjchain::bls::protobuf::VerifyVecBrdReq& verify_brd() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::VerifyVecBrdReq* release_verify_brd();
  ::zjchain::bls::protobuf::VerifyVecBrdReq* mutable_verify_brd();
  void set_allocated_verify_brd(::zjchain::bls::protobuf::VerifyVecBrdReq* verify_brd);
  private:
  const ::zjchain::bls::protobuf::VerifyVecBrdReq& _internal_verify_brd() const;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* _internal_mutable_verify_brd();
  public:
  void unsafe_arena_set_allocated_verify_brd(
      ::zjchain::bls::protobuf::VerifyVecBrdReq* verify_brd);
  ::zjchain::bls::protobuf::VerifyVecBrdReq* unsafe_arena_release_verify_brd();

  // optional .zjchain.bls.protobuf.SwapSecKeyReq swap_req = 2;
  bool has_swap_req() const;
  private:
  bool _internal_has_swap_req() const;
  public:
  void clear_swap_req();
  const ::zjchain::bls::protobuf::SwapSecKeyReq& swap_req() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::SwapSecKeyReq* release_swap_req();
  ::zjchain::bls::protobuf::SwapSecKeyReq* mutable_swap_req();
  void set_allocated_swap_req(::zjchain::bls::protobuf::SwapSecKeyReq* swap_req);
  private:
  const ::zjchain::bls::protobuf::SwapSecKeyReq& _internal_swap_req() const;
  ::zjchain::bls::protobuf::SwapSecKeyReq* _internal_mutable_swap_req();
  public:
  void unsafe_arena_set_allocated_swap_req(
      ::zjchain::bls::protobuf::SwapSecKeyReq* swap_req);
  ::zjchain::bls::protobuf::SwapSecKeyReq* unsafe_arena_release_swap_req();

  // optional .zjchain.bls.protobuf.FinishBroadcast finish_req = 3;
  bool has_finish_req() const;
  private:
  bool _internal_has_finish_req() const;
  public:
  void clear_finish_req();
  const ::zjchain::bls::protobuf::FinishBroadcast& finish_req() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::FinishBroadcast* release_finish_req();
  ::zjchain::bls::protobuf::FinishBroadcast* mutable_finish_req();
  void set_allocated_finish_req(::zjchain::bls::protobuf::FinishBroadcast* finish_req);
  private:
  const ::zjchain::bls::protobuf::FinishBroadcast& _internal_finish_req() const;
  ::zjchain::bls::protobuf::FinishBroadcast* _internal_mutable_finish_req();
  public:
  void unsafe_arena_set_allocated_finish_req(
      ::zjchain::bls::protobuf::FinishBroadcast* finish_req);
  ::zjchain::bls::protobuf::FinishBroadcast* unsafe_arena_release_finish_req();

  // optional .zjchain.bls.protobuf.CheckVerfiyReq check_verify_req = 4;
  bool has_check_verify_req() const;
  private:
  bool _internal_has_check_verify_req() const;
  public:
  void clear_check_verify_req();
  const ::zjchain::bls::protobuf::CheckVerfiyReq& check_verify_req() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::CheckVerfiyReq* release_check_verify_req();
  ::zjchain::bls::protobuf::CheckVerfiyReq* mutable_check_verify_req();
  void set_allocated_check_verify_req(::zjchain::bls::protobuf::CheckVerfiyReq* check_verify_req);
  private:
  const ::zjchain::bls::protobuf::CheckVerfiyReq& _internal_check_verify_req() const;
  ::zjchain::bls::protobuf::CheckVerfiyReq* _internal_mutable_check_verify_req();
  public:
  void unsafe_arena_set_allocated_check_verify_req(
      ::zjchain::bls::protobuf::CheckVerfiyReq* check_verify_req);
  ::zjchain::bls::protobuf::CheckVerfiyReq* unsafe_arena_release_check_verify_req();

  // optional .zjchain.bls.protobuf.CheckSwapKeyReq check_swapkey_req = 5;
  bool has_check_swapkey_req() const;
  private:
  bool _internal_has_check_swapkey_req() const;
  public:
  void clear_check_swapkey_req();
  const ::zjchain::bls::protobuf::CheckSwapKeyReq& check_swapkey_req() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::CheckSwapKeyReq* release_check_swapkey_req();
  ::zjchain::bls::protobuf::CheckSwapKeyReq* mutable_check_swapkey_req();
  void set_allocated_check_swapkey_req(::zjchain::bls::protobuf::CheckSwapKeyReq* check_swapkey_req);
  private:
  const ::zjchain::bls::protobuf::CheckSwapKeyReq& _internal_check_swapkey_req() const;
  ::zjchain::bls::protobuf::CheckSwapKeyReq* _internal_mutable_check_swapkey_req();
  public:
  void unsafe_arena_set_allocated_check_swapkey_req(
      ::zjchain::bls::protobuf::CheckSwapKeyReq* check_swapkey_req);
  ::zjchain::bls::protobuf::CheckSwapKeyReq* unsafe_arena_release_check_swapkey_req();

  // optional uint64 elect_height = 7;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // optional uint32 index = 6;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.bls.protobuf.BlsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* verify_brd_;
  ::zjchain::bls::protobuf::SwapSecKeyReq* swap_req_;
  ::zjchain::bls::protobuf::FinishBroadcast* finish_req_;
  ::zjchain::bls::protobuf::CheckVerfiyReq* check_verify_req_;
  ::zjchain::bls::protobuf::CheckSwapKeyReq* check_swapkey_req_;
  uint64_t elect_height_;
  uint32_t index_;
  friend struct ::TableStruct_protos_2fbls_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VerifyVecItem

// optional bytes x_c0 = 1;
inline bool VerifyVecItem::_internal_has_x_c0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerifyVecItem::has_x_c0() const {
  return _internal_has_x_c0();
}
inline void VerifyVecItem::clear_x_c0() {
  x_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VerifyVecItem::x_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecItem.x_c0)
  return _internal_x_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecItem::set_x_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 x_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecItem.x_c0)
}
inline std::string* VerifyVecItem::mutable_x_c0() {
  std::string* _s = _internal_mutable_x_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecItem.x_c0)
  return _s;
}
inline const std::string& VerifyVecItem::_internal_x_c0() const {
  return x_c0_.Get();
}
inline void VerifyVecItem::_internal_set_x_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecItem::_internal_mutable_x_c0() {
  _has_bits_[0] |= 0x00000001u;
  return x_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecItem::release_x_c0() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.VerifyVecItem.x_c0)
  if (!_internal_has_x_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = x_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecItem::set_allocated_x_c0(std::string* x_c0) {
  if (x_c0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_c0_.SetAllocated(x_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.VerifyVecItem.x_c0)
}

// optional bytes x_c1 = 2;
inline bool VerifyVecItem::_internal_has_x_c1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerifyVecItem::has_x_c1() const {
  return _internal_has_x_c1();
}
inline void VerifyVecItem::clear_x_c1() {
  x_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VerifyVecItem::x_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecItem.x_c1)
  return _internal_x_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecItem::set_x_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 x_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecItem.x_c1)
}
inline std::string* VerifyVecItem::mutable_x_c1() {
  std::string* _s = _internal_mutable_x_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecItem.x_c1)
  return _s;
}
inline const std::string& VerifyVecItem::_internal_x_c1() const {
  return x_c1_.Get();
}
inline void VerifyVecItem::_internal_set_x_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  x_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecItem::_internal_mutable_x_c1() {
  _has_bits_[0] |= 0x00000002u;
  return x_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecItem::release_x_c1() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.VerifyVecItem.x_c1)
  if (!_internal_has_x_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = x_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecItem::set_allocated_x_c1(std::string* x_c1) {
  if (x_c1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_c1_.SetAllocated(x_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.VerifyVecItem.x_c1)
}

// optional bytes y_c0 = 3;
inline bool VerifyVecItem::_internal_has_y_c0() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VerifyVecItem::has_y_c0() const {
  return _internal_has_y_c0();
}
inline void VerifyVecItem::clear_y_c0() {
  y_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VerifyVecItem::y_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecItem.y_c0)
  return _internal_y_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecItem::set_y_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 y_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecItem.y_c0)
}
inline std::string* VerifyVecItem::mutable_y_c0() {
  std::string* _s = _internal_mutable_y_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecItem.y_c0)
  return _s;
}
inline const std::string& VerifyVecItem::_internal_y_c0() const {
  return y_c0_.Get();
}
inline void VerifyVecItem::_internal_set_y_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  y_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecItem::_internal_mutable_y_c0() {
  _has_bits_[0] |= 0x00000004u;
  return y_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecItem::release_y_c0() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.VerifyVecItem.y_c0)
  if (!_internal_has_y_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = y_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecItem::set_allocated_y_c0(std::string* y_c0) {
  if (y_c0 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  y_c0_.SetAllocated(y_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.VerifyVecItem.y_c0)
}

// optional bytes y_c1 = 4;
inline bool VerifyVecItem::_internal_has_y_c1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VerifyVecItem::has_y_c1() const {
  return _internal_has_y_c1();
}
inline void VerifyVecItem::clear_y_c1() {
  y_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& VerifyVecItem::y_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecItem.y_c1)
  return _internal_y_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecItem::set_y_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 y_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecItem.y_c1)
}
inline std::string* VerifyVecItem::mutable_y_c1() {
  std::string* _s = _internal_mutable_y_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecItem.y_c1)
  return _s;
}
inline const std::string& VerifyVecItem::_internal_y_c1() const {
  return y_c1_.Get();
}
inline void VerifyVecItem::_internal_set_y_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  y_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecItem::_internal_mutable_y_c1() {
  _has_bits_[0] |= 0x00000008u;
  return y_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecItem::release_y_c1() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.VerifyVecItem.y_c1)
  if (!_internal_has_y_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = y_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecItem::set_allocated_y_c1(std::string* y_c1) {
  if (y_c1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  y_c1_.SetAllocated(y_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.VerifyVecItem.y_c1)
}

// optional bytes z_c0 = 5;
inline bool VerifyVecItem::_internal_has_z_c0() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VerifyVecItem::has_z_c0() const {
  return _internal_has_z_c0();
}
inline void VerifyVecItem::clear_z_c0() {
  z_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& VerifyVecItem::z_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecItem.z_c0)
  return _internal_z_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecItem::set_z_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 z_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecItem.z_c0)
}
inline std::string* VerifyVecItem::mutable_z_c0() {
  std::string* _s = _internal_mutable_z_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecItem.z_c0)
  return _s;
}
inline const std::string& VerifyVecItem::_internal_z_c0() const {
  return z_c0_.Get();
}
inline void VerifyVecItem::_internal_set_z_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  z_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecItem::_internal_mutable_z_c0() {
  _has_bits_[0] |= 0x00000010u;
  return z_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecItem::release_z_c0() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.VerifyVecItem.z_c0)
  if (!_internal_has_z_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = z_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c0_.IsDefault()) {
    z_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecItem::set_allocated_z_c0(std::string* z_c0) {
  if (z_c0 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  z_c0_.SetAllocated(z_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c0_.IsDefault()) {
    z_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.VerifyVecItem.z_c0)
}

// optional bytes z_c1 = 6;
inline bool VerifyVecItem::_internal_has_z_c1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VerifyVecItem::has_z_c1() const {
  return _internal_has_z_c1();
}
inline void VerifyVecItem::clear_z_c1() {
  z_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& VerifyVecItem::z_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecItem.z_c1)
  return _internal_z_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecItem::set_z_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 z_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecItem.z_c1)
}
inline std::string* VerifyVecItem::mutable_z_c1() {
  std::string* _s = _internal_mutable_z_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecItem.z_c1)
  return _s;
}
inline const std::string& VerifyVecItem::_internal_z_c1() const {
  return z_c1_.Get();
}
inline void VerifyVecItem::_internal_set_z_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  z_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecItem::_internal_mutable_z_c1() {
  _has_bits_[0] |= 0x00000020u;
  return z_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecItem::release_z_c1() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.VerifyVecItem.z_c1)
  if (!_internal_has_z_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = z_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c1_.IsDefault()) {
    z_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecItem::set_allocated_z_c1(std::string* z_c1) {
  if (z_c1 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  z_c1_.SetAllocated(z_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (z_c1_.IsDefault()) {
    z_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.VerifyVecItem.z_c1)
}

// -------------------------------------------------------------------

// BlsPublicKey

// optional bytes x_c0 = 1;
inline bool BlsPublicKey::_internal_has_x_c0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlsPublicKey::has_x_c0() const {
  return _internal_has_x_c0();
}
inline void BlsPublicKey::clear_x_c0() {
  x_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlsPublicKey::x_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsPublicKey.x_c0)
  return _internal_x_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_x_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 x_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.BlsPublicKey.x_c0)
}
inline std::string* BlsPublicKey::mutable_x_c0() {
  std::string* _s = _internal_mutable_x_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsPublicKey.x_c0)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_x_c0() const {
  return x_c0_.Get();
}
inline void BlsPublicKey::_internal_set_x_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_x_c0() {
  _has_bits_[0] |= 0x00000001u;
  return x_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_x_c0() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsPublicKey.x_c0)
  if (!_internal_has_x_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = x_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_x_c0(std::string* x_c0) {
  if (x_c0 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_c0_.SetAllocated(x_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c0_.IsDefault()) {
    x_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsPublicKey.x_c0)
}

// optional bytes x_c1 = 2;
inline bool BlsPublicKey::_internal_has_x_c1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlsPublicKey::has_x_c1() const {
  return _internal_has_x_c1();
}
inline void BlsPublicKey::clear_x_c1() {
  x_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlsPublicKey::x_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsPublicKey.x_c1)
  return _internal_x_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_x_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 x_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.BlsPublicKey.x_c1)
}
inline std::string* BlsPublicKey::mutable_x_c1() {
  std::string* _s = _internal_mutable_x_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsPublicKey.x_c1)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_x_c1() const {
  return x_c1_.Get();
}
inline void BlsPublicKey::_internal_set_x_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  x_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_x_c1() {
  _has_bits_[0] |= 0x00000002u;
  return x_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_x_c1() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsPublicKey.x_c1)
  if (!_internal_has_x_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = x_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_x_c1(std::string* x_c1) {
  if (x_c1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_c1_.SetAllocated(x_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_c1_.IsDefault()) {
    x_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsPublicKey.x_c1)
}

// optional bytes y_c0 = 3;
inline bool BlsPublicKey::_internal_has_y_c0() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlsPublicKey::has_y_c0() const {
  return _internal_has_y_c0();
}
inline void BlsPublicKey::clear_y_c0() {
  y_c0_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BlsPublicKey::y_c0() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsPublicKey.y_c0)
  return _internal_y_c0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_y_c0(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 y_c0_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.BlsPublicKey.y_c0)
}
inline std::string* BlsPublicKey::mutable_y_c0() {
  std::string* _s = _internal_mutable_y_c0();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsPublicKey.y_c0)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_y_c0() const {
  return y_c0_.Get();
}
inline void BlsPublicKey::_internal_set_y_c0(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  y_c0_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_y_c0() {
  _has_bits_[0] |= 0x00000004u;
  return y_c0_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_y_c0() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsPublicKey.y_c0)
  if (!_internal_has_y_c0()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = y_c0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_y_c0(std::string* y_c0) {
  if (y_c0 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  y_c0_.SetAllocated(y_c0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c0_.IsDefault()) {
    y_c0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsPublicKey.y_c0)
}

// optional bytes y_c1 = 4;
inline bool BlsPublicKey::_internal_has_y_c1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlsPublicKey::has_y_c1() const {
  return _internal_has_y_c1();
}
inline void BlsPublicKey::clear_y_c1() {
  y_c1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BlsPublicKey::y_c1() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsPublicKey.y_c1)
  return _internal_y_c1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlsPublicKey::set_y_c1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 y_c1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.BlsPublicKey.y_c1)
}
inline std::string* BlsPublicKey::mutable_y_c1() {
  std::string* _s = _internal_mutable_y_c1();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsPublicKey.y_c1)
  return _s;
}
inline const std::string& BlsPublicKey::_internal_y_c1() const {
  return y_c1_.Get();
}
inline void BlsPublicKey::_internal_set_y_c1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  y_c1_.Set(value, GetArenaForAllocation());
}
inline std::string* BlsPublicKey::_internal_mutable_y_c1() {
  _has_bits_[0] |= 0x00000008u;
  return y_c1_.Mutable(GetArenaForAllocation());
}
inline std::string* BlsPublicKey::release_y_c1() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsPublicKey.y_c1)
  if (!_internal_has_y_c1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = y_c1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlsPublicKey::set_allocated_y_c1(std::string* y_c1) {
  if (y_c1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  y_c1_.SetAllocated(y_c1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (y_c1_.IsDefault()) {
    y_c1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsPublicKey.y_c1)
}

// -------------------------------------------------------------------

// VerifyVecBrdReq

// repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
inline int VerifyVecBrdReq::_internal_verify_vec_size() const {
  return verify_vec_.size();
}
inline int VerifyVecBrdReq::verify_vec_size() const {
  return _internal_verify_vec_size();
}
inline void VerifyVecBrdReq::clear_verify_vec() {
  verify_vec_.Clear();
}
inline ::zjchain::bls::protobuf::VerifyVecItem* VerifyVecBrdReq::mutable_verify_vec(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return verify_vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >*
VerifyVecBrdReq::mutable_verify_vec() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return &verify_vec_;
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& VerifyVecBrdReq::_internal_verify_vec(int index) const {
  return verify_vec_.Get(index);
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& VerifyVecBrdReq::verify_vec(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return _internal_verify_vec(index);
}
inline ::zjchain::bls::protobuf::VerifyVecItem* VerifyVecBrdReq::_internal_add_verify_vec() {
  return verify_vec_.Add();
}
inline ::zjchain::bls::protobuf::VerifyVecItem* VerifyVecBrdReq::add_verify_vec() {
  ::zjchain::bls::protobuf::VerifyVecItem* _add = _internal_add_verify_vec();
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >&
VerifyVecBrdReq::verify_vec() const {
  // @@protoc_insertion_point(field_list:zjchain.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return verify_vec_;
}

// optional uint32 change_idx = 2;
inline bool VerifyVecBrdReq::_internal_has_change_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerifyVecBrdReq::has_change_idx() const {
  return _internal_has_change_idx();
}
inline void VerifyVecBrdReq::clear_change_idx() {
  change_idx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t VerifyVecBrdReq::_internal_change_idx() const {
  return change_idx_;
}
inline uint32_t VerifyVecBrdReq::change_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecBrdReq.change_idx)
  return _internal_change_idx();
}
inline void VerifyVecBrdReq::_internal_set_change_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  change_idx_ = value;
}
inline void VerifyVecBrdReq::set_change_idx(uint32_t value) {
  _internal_set_change_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecBrdReq.change_idx)
}

// -------------------------------------------------------------------

// JoinElectBlsInfo

// optional .zjchain.bls.protobuf.VerifyVecItem verified_g2 = 1;
inline bool JoinElectBlsInfo::_internal_has_verified_g2() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || verified_g2_ != nullptr);
  return value;
}
inline bool JoinElectBlsInfo::has_verified_g2() const {
  return _internal_has_verified_g2();
}
inline void JoinElectBlsInfo::clear_verified_g2() {
  if (verified_g2_ != nullptr) verified_g2_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& JoinElectBlsInfo::_internal_verified_g2() const {
  const ::zjchain::bls::protobuf::VerifyVecItem* p = verified_g2_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::VerifyVecItem&>(
      ::zjchain::bls::protobuf::_VerifyVecItem_default_instance_);
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& JoinElectBlsInfo::verified_g2() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.JoinElectBlsInfo.verified_g2)
  return _internal_verified_g2();
}
inline void JoinElectBlsInfo::unsafe_arena_set_allocated_verified_g2(
    ::zjchain::bls::protobuf::VerifyVecItem* verified_g2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verified_g2_);
  }
  verified_g2_ = verified_g2;
  if (verified_g2) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.JoinElectBlsInfo.verified_g2)
}
inline ::zjchain::bls::protobuf::VerifyVecItem* JoinElectBlsInfo::release_verified_g2() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::bls::protobuf::VerifyVecItem* temp = verified_g2_;
  verified_g2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::VerifyVecItem* JoinElectBlsInfo::unsafe_arena_release_verified_g2() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.JoinElectBlsInfo.verified_g2)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::bls::protobuf::VerifyVecItem* temp = verified_g2_;
  verified_g2_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::VerifyVecItem* JoinElectBlsInfo::_internal_mutable_verified_g2() {
  _has_bits_[0] |= 0x00000001u;
  if (verified_g2_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::VerifyVecItem>(GetArenaForAllocation());
    verified_g2_ = p;
  }
  return verified_g2_;
}
inline ::zjchain::bls::protobuf::VerifyVecItem* JoinElectBlsInfo::mutable_verified_g2() {
  ::zjchain::bls::protobuf::VerifyVecItem* _msg = _internal_mutable_verified_g2();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.JoinElectBlsInfo.verified_g2)
  return _msg;
}
inline void JoinElectBlsInfo::set_allocated_verified_g2(::zjchain::bls::protobuf::VerifyVecItem* verified_g2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete verified_g2_;
  }
  if (verified_g2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verified_g2);
    if (message_arena != submessage_arena) {
      verified_g2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verified_g2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verified_g2_ = verified_g2;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.JoinElectBlsInfo.verified_g2)
}

// -------------------------------------------------------------------

// JoinElectInfo

// optional uint32 shard_id = 1;
inline bool JoinElectInfo::_internal_has_shard_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JoinElectInfo::has_shard_id() const {
  return _internal_has_shard_id();
}
inline void JoinElectInfo::clear_shard_id() {
  shard_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t JoinElectInfo::_internal_shard_id() const {
  return shard_id_;
}
inline uint32_t JoinElectInfo::shard_id() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.JoinElectInfo.shard_id)
  return _internal_shard_id();
}
inline void JoinElectInfo::_internal_set_shard_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  shard_id_ = value;
}
inline void JoinElectInfo::set_shard_id(uint32_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.JoinElectInfo.shard_id)
}

// optional uint32 member_idx = 2;
inline bool JoinElectInfo::_internal_has_member_idx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JoinElectInfo::has_member_idx() const {
  return _internal_has_member_idx();
}
inline void JoinElectInfo::clear_member_idx() {
  member_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t JoinElectInfo::_internal_member_idx() const {
  return member_idx_;
}
inline uint32_t JoinElectInfo::member_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.JoinElectInfo.member_idx)
  return _internal_member_idx();
}
inline void JoinElectInfo::_internal_set_member_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  member_idx_ = value;
}
inline void JoinElectInfo::set_member_idx(uint32_t value) {
  _internal_set_member_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.JoinElectInfo.member_idx)
}

// optional uint32 change_idx = 3;
inline bool JoinElectInfo::_internal_has_change_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JoinElectInfo::has_change_idx() const {
  return _internal_has_change_idx();
}
inline void JoinElectInfo::clear_change_idx() {
  change_idx_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t JoinElectInfo::_internal_change_idx() const {
  return change_idx_;
}
inline uint32_t JoinElectInfo::change_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.JoinElectInfo.change_idx)
  return _internal_change_idx();
}
inline void JoinElectInfo::_internal_set_change_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  change_idx_ = value;
}
inline void JoinElectInfo::set_change_idx(uint32_t value) {
  _internal_set_change_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.JoinElectInfo.change_idx)
}

// optional .zjchain.bls.protobuf.VerifyVecBrdReq g2_req = 4;
inline bool JoinElectInfo::_internal_has_g2_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || g2_req_ != nullptr);
  return value;
}
inline bool JoinElectInfo::has_g2_req() const {
  return _internal_has_g2_req();
}
inline void JoinElectInfo::clear_g2_req() {
  if (g2_req_ != nullptr) g2_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::bls::protobuf::VerifyVecBrdReq& JoinElectInfo::_internal_g2_req() const {
  const ::zjchain::bls::protobuf::VerifyVecBrdReq* p = g2_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::VerifyVecBrdReq&>(
      ::zjchain::bls::protobuf::_VerifyVecBrdReq_default_instance_);
}
inline const ::zjchain::bls::protobuf::VerifyVecBrdReq& JoinElectInfo::g2_req() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.JoinElectInfo.g2_req)
  return _internal_g2_req();
}
inline void JoinElectInfo::unsafe_arena_set_allocated_g2_req(
    ::zjchain::bls::protobuf::VerifyVecBrdReq* g2_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g2_req_);
  }
  g2_req_ = g2_req;
  if (g2_req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.JoinElectInfo.g2_req)
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* JoinElectInfo::release_g2_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* temp = g2_req_;
  g2_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* JoinElectInfo::unsafe_arena_release_g2_req() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.JoinElectInfo.g2_req)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* temp = g2_req_;
  g2_req_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* JoinElectInfo::_internal_mutable_g2_req() {
  _has_bits_[0] |= 0x00000001u;
  if (g2_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::VerifyVecBrdReq>(GetArenaForAllocation());
    g2_req_ = p;
  }
  return g2_req_;
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* JoinElectInfo::mutable_g2_req() {
  ::zjchain::bls::protobuf::VerifyVecBrdReq* _msg = _internal_mutable_g2_req();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.JoinElectInfo.g2_req)
  return _msg;
}
inline void JoinElectInfo::set_allocated_g2_req(::zjchain::bls::protobuf::VerifyVecBrdReq* g2_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete g2_req_;
  }
  if (g2_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(g2_req);
    if (message_arena != submessage_arena) {
      g2_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g2_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  g2_req_ = g2_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.JoinElectInfo.g2_req)
}

// -------------------------------------------------------------------

// LocalPolynomial

// repeated bytes polynomial = 1;
inline int LocalPolynomial::_internal_polynomial_size() const {
  return polynomial_.size();
}
inline int LocalPolynomial::polynomial_size() const {
  return _internal_polynomial_size();
}
inline void LocalPolynomial::clear_polynomial() {
  polynomial_.Clear();
}
inline std::string* LocalPolynomial::add_polynomial() {
  std::string* _s = _internal_add_polynomial();
  // @@protoc_insertion_point(field_add_mutable:zjchain.bls.protobuf.LocalPolynomial.polynomial)
  return _s;
}
inline const std::string& LocalPolynomial::_internal_polynomial(int index) const {
  return polynomial_.Get(index);
}
inline const std::string& LocalPolynomial::polynomial(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.LocalPolynomial.polynomial)
  return _internal_polynomial(index);
}
inline std::string* LocalPolynomial::mutable_polynomial(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.LocalPolynomial.polynomial)
  return polynomial_.Mutable(index);
}
inline void LocalPolynomial::set_polynomial(int index, const std::string& value) {
  polynomial_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline void LocalPolynomial::set_polynomial(int index, std::string&& value) {
  polynomial_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline void LocalPolynomial::set_polynomial(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  polynomial_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline void LocalPolynomial::set_polynomial(int index, const void* value, size_t size) {
  polynomial_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline std::string* LocalPolynomial::_internal_add_polynomial() {
  return polynomial_.Add();
}
inline void LocalPolynomial::add_polynomial(const std::string& value) {
  polynomial_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline void LocalPolynomial::add_polynomial(std::string&& value) {
  polynomial_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline void LocalPolynomial::add_polynomial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  polynomial_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline void LocalPolynomial::add_polynomial(const void* value, size_t size) {
  polynomial_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zjchain.bls.protobuf.LocalPolynomial.polynomial)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LocalPolynomial::polynomial() const {
  // @@protoc_insertion_point(field_list:zjchain.bls.protobuf.LocalPolynomial.polynomial)
  return polynomial_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LocalPolynomial::mutable_polynomial() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.bls.protobuf.LocalPolynomial.polynomial)
  return &polynomial_;
}

// optional uint32 change_idx = 2 [default = 0];
inline bool LocalPolynomial::_internal_has_change_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalPolynomial::has_change_idx() const {
  return _internal_has_change_idx();
}
inline void LocalPolynomial::clear_change_idx() {
  change_idx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LocalPolynomial::_internal_change_idx() const {
  return change_idx_;
}
inline uint32_t LocalPolynomial::change_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.LocalPolynomial.change_idx)
  return _internal_change_idx();
}
inline void LocalPolynomial::_internal_set_change_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  change_idx_ = value;
}
inline void LocalPolynomial::set_change_idx(uint32_t value) {
  _internal_set_change_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.LocalPolynomial.change_idx)
}

// -------------------------------------------------------------------

// LocalBlsItem

// repeated bytes polynomial = 1;
inline int LocalBlsItem::_internal_polynomial_size() const {
  return polynomial_.size();
}
inline int LocalBlsItem::polynomial_size() const {
  return _internal_polynomial_size();
}
inline void LocalBlsItem::clear_polynomial() {
  polynomial_.Clear();
}
inline std::string* LocalBlsItem::add_polynomial() {
  std::string* _s = _internal_add_polynomial();
  // @@protoc_insertion_point(field_add_mutable:zjchain.bls.protobuf.LocalBlsItem.polynomial)
  return _s;
}
inline const std::string& LocalBlsItem::_internal_polynomial(int index) const {
  return polynomial_.Get(index);
}
inline const std::string& LocalBlsItem::polynomial(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.LocalBlsItem.polynomial)
  return _internal_polynomial(index);
}
inline std::string* LocalBlsItem::mutable_polynomial(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.LocalBlsItem.polynomial)
  return polynomial_.Mutable(index);
}
inline void LocalBlsItem::set_polynomial(int index, const std::string& value) {
  polynomial_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline void LocalBlsItem::set_polynomial(int index, std::string&& value) {
  polynomial_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline void LocalBlsItem::set_polynomial(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  polynomial_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline void LocalBlsItem::set_polynomial(int index, const void* value, size_t size) {
  polynomial_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline std::string* LocalBlsItem::_internal_add_polynomial() {
  return polynomial_.Add();
}
inline void LocalBlsItem::add_polynomial(const std::string& value) {
  polynomial_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline void LocalBlsItem::add_polynomial(std::string&& value) {
  polynomial_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline void LocalBlsItem::add_polynomial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  polynomial_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline void LocalBlsItem::add_polynomial(const void* value, size_t size) {
  polynomial_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zjchain.bls.protobuf.LocalBlsItem.polynomial)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LocalBlsItem::polynomial() const {
  // @@protoc_insertion_point(field_list:zjchain.bls.protobuf.LocalBlsItem.polynomial)
  return polynomial_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LocalBlsItem::mutable_polynomial() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.bls.protobuf.LocalBlsItem.polynomial)
  return &polynomial_;
}

// repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 2;
inline int LocalBlsItem::_internal_verify_vec_size() const {
  return verify_vec_.size();
}
inline int LocalBlsItem::verify_vec_size() const {
  return _internal_verify_vec_size();
}
inline void LocalBlsItem::clear_verify_vec() {
  verify_vec_.Clear();
}
inline ::zjchain::bls::protobuf::VerifyVecItem* LocalBlsItem::mutable_verify_vec(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.LocalBlsItem.verify_vec)
  return verify_vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >*
LocalBlsItem::mutable_verify_vec() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.bls.protobuf.LocalBlsItem.verify_vec)
  return &verify_vec_;
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& LocalBlsItem::_internal_verify_vec(int index) const {
  return verify_vec_.Get(index);
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& LocalBlsItem::verify_vec(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.LocalBlsItem.verify_vec)
  return _internal_verify_vec(index);
}
inline ::zjchain::bls::protobuf::VerifyVecItem* LocalBlsItem::_internal_add_verify_vec() {
  return verify_vec_.Add();
}
inline ::zjchain::bls::protobuf::VerifyVecItem* LocalBlsItem::add_verify_vec() {
  ::zjchain::bls::protobuf::VerifyVecItem* _add = _internal_add_verify_vec();
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.LocalBlsItem.verify_vec)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >&
LocalBlsItem::verify_vec() const {
  // @@protoc_insertion_point(field_list:zjchain.bls.protobuf.LocalBlsItem.verify_vec)
  return verify_vec_;
}

// optional uint32 valid_t = 3;
inline bool LocalBlsItem::_internal_has_valid_t() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalBlsItem::has_valid_t() const {
  return _internal_has_valid_t();
}
inline void LocalBlsItem::clear_valid_t() {
  valid_t_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LocalBlsItem::_internal_valid_t() const {
  return valid_t_;
}
inline uint32_t LocalBlsItem::valid_t() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.LocalBlsItem.valid_t)
  return _internal_valid_t();
}
inline void LocalBlsItem::_internal_set_valid_t(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  valid_t_ = value;
}
inline void LocalBlsItem::set_valid_t(uint32_t value) {
  _internal_set_valid_t(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.LocalBlsItem.valid_t)
}

// optional uint32 valid_n = 4;
inline bool LocalBlsItem::_internal_has_valid_n() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalBlsItem::has_valid_n() const {
  return _internal_has_valid_n();
}
inline void LocalBlsItem::clear_valid_n() {
  valid_n_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LocalBlsItem::_internal_valid_n() const {
  return valid_n_;
}
inline uint32_t LocalBlsItem::valid_n() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.LocalBlsItem.valid_n)
  return _internal_valid_n();
}
inline void LocalBlsItem::_internal_set_valid_n(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  valid_n_ = value;
}
inline void LocalBlsItem::set_valid_n(uint32_t value) {
  _internal_set_valid_n(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.LocalBlsItem.valid_n)
}

// -------------------------------------------------------------------

// BlsVerifyValue

// repeated .zjchain.bls.protobuf.VerifyVecItem verify_vec = 1;
inline int BlsVerifyValue::_internal_verify_vec_size() const {
  return verify_vec_.size();
}
inline int BlsVerifyValue::verify_vec_size() const {
  return _internal_verify_vec_size();
}
inline void BlsVerifyValue::clear_verify_vec() {
  verify_vec_.Clear();
}
inline ::zjchain::bls::protobuf::VerifyVecItem* BlsVerifyValue::mutable_verify_vec(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsVerifyValue.verify_vec)
  return verify_vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >*
BlsVerifyValue::mutable_verify_vec() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.bls.protobuf.BlsVerifyValue.verify_vec)
  return &verify_vec_;
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& BlsVerifyValue::_internal_verify_vec(int index) const {
  return verify_vec_.Get(index);
}
inline const ::zjchain::bls::protobuf::VerifyVecItem& BlsVerifyValue::verify_vec(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsVerifyValue.verify_vec)
  return _internal_verify_vec(index);
}
inline ::zjchain::bls::protobuf::VerifyVecItem* BlsVerifyValue::_internal_add_verify_vec() {
  return verify_vec_.Add();
}
inline ::zjchain::bls::protobuf::VerifyVecItem* BlsVerifyValue::add_verify_vec() {
  ::zjchain::bls::protobuf::VerifyVecItem* _add = _internal_add_verify_vec();
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.BlsVerifyValue.verify_vec)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::VerifyVecItem >&
BlsVerifyValue::verify_vec() const {
  // @@protoc_insertion_point(field_list:zjchain.bls.protobuf.BlsVerifyValue.verify_vec)
  return verify_vec_;
}

// -------------------------------------------------------------------

// VerifyVecBrdRes

// optional bytes public_ip = 1;
inline bool VerifyVecBrdRes::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerifyVecBrdRes::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void VerifyVecBrdRes::clear_public_ip() {
  public_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VerifyVecBrdRes::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecBrdRes.public_ip)
  return _internal_public_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyVecBrdRes::set_public_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 public_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecBrdRes.public_ip)
}
inline std::string* VerifyVecBrdRes::mutable_public_ip() {
  std::string* _s = _internal_mutable_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.VerifyVecBrdRes.public_ip)
  return _s;
}
inline const std::string& VerifyVecBrdRes::_internal_public_ip() const {
  return public_ip_.Get();
}
inline void VerifyVecBrdRes::_internal_set_public_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyVecBrdRes::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  return public_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyVecBrdRes::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.VerifyVecBrdRes.public_ip)
  if (!_internal_has_public_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = public_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_.IsDefault()) {
    public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VerifyVecBrdRes::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.SetAllocated(public_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_.IsDefault()) {
    public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.VerifyVecBrdRes.public_ip)
}

// optional uint32 public_port = 2;
inline bool VerifyVecBrdRes::_internal_has_public_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerifyVecBrdRes::has_public_port() const {
  return _internal_has_public_port();
}
inline void VerifyVecBrdRes::clear_public_port() {
  public_port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t VerifyVecBrdRes::_internal_public_port() const {
  return public_port_;
}
inline uint32_t VerifyVecBrdRes::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.VerifyVecBrdRes.public_port)
  return _internal_public_port();
}
inline void VerifyVecBrdRes::_internal_set_public_port(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  public_port_ = value;
}
inline void VerifyVecBrdRes::set_public_port(uint32_t value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.VerifyVecBrdRes.public_port)
}

// -------------------------------------------------------------------

// SwapSecKeyItem

// optional bytes sec_key = 1;
inline bool SwapSecKeyItem::_internal_has_sec_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SwapSecKeyItem::has_sec_key() const {
  return _internal_has_sec_key();
}
inline void SwapSecKeyItem::clear_sec_key() {
  sec_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SwapSecKeyItem::sec_key() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.SwapSecKeyItem.sec_key)
  return _internal_sec_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapSecKeyItem::set_sec_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sec_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.SwapSecKeyItem.sec_key)
}
inline std::string* SwapSecKeyItem::mutable_sec_key() {
  std::string* _s = _internal_mutable_sec_key();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.SwapSecKeyItem.sec_key)
  return _s;
}
inline const std::string& SwapSecKeyItem::_internal_sec_key() const {
  return sec_key_.Get();
}
inline void SwapSecKeyItem::_internal_set_sec_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sec_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapSecKeyItem::_internal_mutable_sec_key() {
  _has_bits_[0] |= 0x00000001u;
  return sec_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapSecKeyItem::release_sec_key() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.SwapSecKeyItem.sec_key)
  if (!_internal_has_sec_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sec_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sec_key_.IsDefault()) {
    sec_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwapSecKeyItem::set_allocated_sec_key(std::string* sec_key) {
  if (sec_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sec_key_.SetAllocated(sec_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sec_key_.IsDefault()) {
    sec_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.SwapSecKeyItem.sec_key)
}

// optional uint32 sec_key_len = 2;
inline bool SwapSecKeyItem::_internal_has_sec_key_len() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SwapSecKeyItem::has_sec_key_len() const {
  return _internal_has_sec_key_len();
}
inline void SwapSecKeyItem::clear_sec_key_len() {
  sec_key_len_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SwapSecKeyItem::_internal_sec_key_len() const {
  return sec_key_len_;
}
inline uint32_t SwapSecKeyItem::sec_key_len() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.SwapSecKeyItem.sec_key_len)
  return _internal_sec_key_len();
}
inline void SwapSecKeyItem::_internal_set_sec_key_len(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  sec_key_len_ = value;
}
inline void SwapSecKeyItem::set_sec_key_len(uint32_t value) {
  _internal_set_sec_key_len(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.SwapSecKeyItem.sec_key_len)
}

// optional .zjchain.bls.protobuf.BlsPublicKey old_g2 = 3;
inline bool SwapSecKeyItem::_internal_has_old_g2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_g2_ != nullptr);
  return value;
}
inline bool SwapSecKeyItem::has_old_g2() const {
  return _internal_has_old_g2();
}
inline void SwapSecKeyItem::clear_old_g2() {
  if (old_g2_ != nullptr) old_g2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& SwapSecKeyItem::_internal_old_g2() const {
  const ::zjchain::bls::protobuf::BlsPublicKey* p = old_g2_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::BlsPublicKey&>(
      ::zjchain::bls::protobuf::_BlsPublicKey_default_instance_);
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& SwapSecKeyItem::old_g2() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.SwapSecKeyItem.old_g2)
  return _internal_old_g2();
}
inline void SwapSecKeyItem::unsafe_arena_set_allocated_old_g2(
    ::zjchain::bls::protobuf::BlsPublicKey* old_g2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_g2_);
  }
  old_g2_ = old_g2;
  if (old_g2) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.SwapSecKeyItem.old_g2)
}
inline ::zjchain::bls::protobuf::BlsPublicKey* SwapSecKeyItem::release_old_g2() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::bls::protobuf::BlsPublicKey* temp = old_g2_;
  old_g2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* SwapSecKeyItem::unsafe_arena_release_old_g2() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.SwapSecKeyItem.old_g2)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::bls::protobuf::BlsPublicKey* temp = old_g2_;
  old_g2_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* SwapSecKeyItem::_internal_mutable_old_g2() {
  _has_bits_[0] |= 0x00000002u;
  if (old_g2_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::BlsPublicKey>(GetArenaForAllocation());
    old_g2_ = p;
  }
  return old_g2_;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* SwapSecKeyItem::mutable_old_g2() {
  ::zjchain::bls::protobuf::BlsPublicKey* _msg = _internal_mutable_old_g2();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.SwapSecKeyItem.old_g2)
  return _msg;
}
inline void SwapSecKeyItem::set_allocated_old_g2(::zjchain::bls::protobuf::BlsPublicKey* old_g2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete old_g2_;
  }
  if (old_g2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_g2);
    if (message_arena != submessage_arena) {
      old_g2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_g2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_g2_ = old_g2;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.SwapSecKeyItem.old_g2)
}

// -------------------------------------------------------------------

// SwapSecKeyReq

// repeated .zjchain.bls.protobuf.SwapSecKeyItem keys = 1;
inline int SwapSecKeyReq::_internal_keys_size() const {
  return keys_.size();
}
inline int SwapSecKeyReq::keys_size() const {
  return _internal_keys_size();
}
inline void SwapSecKeyReq::clear_keys() {
  keys_.Clear();
}
inline ::zjchain::bls::protobuf::SwapSecKeyItem* SwapSecKeyReq::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.SwapSecKeyReq.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::SwapSecKeyItem >*
SwapSecKeyReq::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.bls.protobuf.SwapSecKeyReq.keys)
  return &keys_;
}
inline const ::zjchain::bls::protobuf::SwapSecKeyItem& SwapSecKeyReq::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::zjchain::bls::protobuf::SwapSecKeyItem& SwapSecKeyReq::keys(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.SwapSecKeyReq.keys)
  return _internal_keys(index);
}
inline ::zjchain::bls::protobuf::SwapSecKeyItem* SwapSecKeyReq::_internal_add_keys() {
  return keys_.Add();
}
inline ::zjchain::bls::protobuf::SwapSecKeyItem* SwapSecKeyReq::add_keys() {
  ::zjchain::bls::protobuf::SwapSecKeyItem* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.SwapSecKeyReq.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::SwapSecKeyItem >&
SwapSecKeyReq::keys() const {
  // @@protoc_insertion_point(field_list:zjchain.bls.protobuf.SwapSecKeyReq.keys)
  return keys_;
}

// -------------------------------------------------------------------

// SwapSecKeyRes

// optional uint32 index = 1;
inline bool SwapSecKeyRes::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SwapSecKeyRes::has_index() const {
  return _internal_has_index();
}
inline void SwapSecKeyRes::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SwapSecKeyRes::_internal_index() const {
  return index_;
}
inline uint32_t SwapSecKeyRes::index() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.SwapSecKeyRes.index)
  return _internal_index();
}
inline void SwapSecKeyRes::_internal_set_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void SwapSecKeyRes::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.SwapSecKeyRes.index)
}

// optional bytes sec_key = 2;
inline bool SwapSecKeyRes::_internal_has_sec_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SwapSecKeyRes::has_sec_key() const {
  return _internal_has_sec_key();
}
inline void SwapSecKeyRes::clear_sec_key() {
  sec_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SwapSecKeyRes::sec_key() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.SwapSecKeyRes.sec_key)
  return _internal_sec_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapSecKeyRes::set_sec_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sec_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.SwapSecKeyRes.sec_key)
}
inline std::string* SwapSecKeyRes::mutable_sec_key() {
  std::string* _s = _internal_mutable_sec_key();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.SwapSecKeyRes.sec_key)
  return _s;
}
inline const std::string& SwapSecKeyRes::_internal_sec_key() const {
  return sec_key_.Get();
}
inline void SwapSecKeyRes::_internal_set_sec_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sec_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapSecKeyRes::_internal_mutable_sec_key() {
  _has_bits_[0] |= 0x00000001u;
  return sec_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapSecKeyRes::release_sec_key() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.SwapSecKeyRes.sec_key)
  if (!_internal_has_sec_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sec_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sec_key_.IsDefault()) {
    sec_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SwapSecKeyRes::set_allocated_sec_key(std::string* sec_key) {
  if (sec_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sec_key_.SetAllocated(sec_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sec_key_.IsDefault()) {
    sec_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.SwapSecKeyRes.sec_key)
}

// optional uint32 sec_key_len = 3;
inline bool SwapSecKeyRes::_internal_has_sec_key_len() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SwapSecKeyRes::has_sec_key_len() const {
  return _internal_has_sec_key_len();
}
inline void SwapSecKeyRes::clear_sec_key_len() {
  sec_key_len_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SwapSecKeyRes::_internal_sec_key_len() const {
  return sec_key_len_;
}
inline uint32_t SwapSecKeyRes::sec_key_len() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.SwapSecKeyRes.sec_key_len)
  return _internal_sec_key_len();
}
inline void SwapSecKeyRes::_internal_set_sec_key_len(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  sec_key_len_ = value;
}
inline void SwapSecKeyRes::set_sec_key_len(uint32_t value) {
  _internal_set_sec_key_len(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.SwapSecKeyRes.sec_key_len)
}

// -------------------------------------------------------------------

// AgainstParticipant

// optional uint32 against_index = 1;
inline bool AgainstParticipant::_internal_has_against_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AgainstParticipant::has_against_index() const {
  return _internal_has_against_index();
}
inline void AgainstParticipant::clear_against_index() {
  against_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t AgainstParticipant::_internal_against_index() const {
  return against_index_;
}
inline uint32_t AgainstParticipant::against_index() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.AgainstParticipant.against_index)
  return _internal_against_index();
}
inline void AgainstParticipant::_internal_set_against_index(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  against_index_ = value;
}
inline void AgainstParticipant::set_against_index(uint32_t value) {
  _internal_set_against_index(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.AgainstParticipant.against_index)
}

// -------------------------------------------------------------------

// FinishBroadcast

// repeated uint64 bitmap = 1;
inline int FinishBroadcast::_internal_bitmap_size() const {
  return bitmap_.size();
}
inline int FinishBroadcast::bitmap_size() const {
  return _internal_bitmap_size();
}
inline void FinishBroadcast::clear_bitmap() {
  bitmap_.Clear();
}
inline uint64_t FinishBroadcast::_internal_bitmap(int index) const {
  return bitmap_.Get(index);
}
inline uint64_t FinishBroadcast::bitmap(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.FinishBroadcast.bitmap)
  return _internal_bitmap(index);
}
inline void FinishBroadcast::set_bitmap(int index, uint64_t value) {
  bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.FinishBroadcast.bitmap)
}
inline void FinishBroadcast::_internal_add_bitmap(uint64_t value) {
  bitmap_.Add(value);
}
inline void FinishBroadcast::add_bitmap(uint64_t value) {
  _internal_add_bitmap(value);
  // @@protoc_insertion_point(field_add:zjchain.bls.protobuf.FinishBroadcast.bitmap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FinishBroadcast::_internal_bitmap() const {
  return bitmap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FinishBroadcast::bitmap() const {
  // @@protoc_insertion_point(field_list:zjchain.bls.protobuf.FinishBroadcast.bitmap)
  return _internal_bitmap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FinishBroadcast::_internal_mutable_bitmap() {
  return &bitmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FinishBroadcast::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.bls.protobuf.FinishBroadcast.bitmap)
  return _internal_mutable_bitmap();
}

// optional .zjchain.bls.protobuf.BlsPublicKey pubkey = 2;
inline bool FinishBroadcast::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pubkey_ != nullptr);
  return value;
}
inline bool FinishBroadcast::has_pubkey() const {
  return _internal_has_pubkey();
}
inline void FinishBroadcast::clear_pubkey() {
  if (pubkey_ != nullptr) pubkey_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& FinishBroadcast::_internal_pubkey() const {
  const ::zjchain::bls::protobuf::BlsPublicKey* p = pubkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::BlsPublicKey&>(
      ::zjchain::bls::protobuf::_BlsPublicKey_default_instance_);
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& FinishBroadcast::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.FinishBroadcast.pubkey)
  return _internal_pubkey();
}
inline void FinishBroadcast::unsafe_arena_set_allocated_pubkey(
    ::zjchain::bls::protobuf::BlsPublicKey* pubkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubkey_);
  }
  pubkey_ = pubkey;
  if (pubkey) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.FinishBroadcast.pubkey)
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::release_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::bls::protobuf::BlsPublicKey* temp = pubkey_;
  pubkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::unsafe_arena_release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.FinishBroadcast.pubkey)
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::bls::protobuf::BlsPublicKey* temp = pubkey_;
  pubkey_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000004u;
  if (pubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::BlsPublicKey>(GetArenaForAllocation());
    pubkey_ = p;
  }
  return pubkey_;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::mutable_pubkey() {
  ::zjchain::bls::protobuf::BlsPublicKey* _msg = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.FinishBroadcast.pubkey)
  return _msg;
}
inline void FinishBroadcast::set_allocated_pubkey(::zjchain::bls::protobuf::BlsPublicKey* pubkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pubkey_;
  }
  if (pubkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pubkey);
    if (message_arena != submessage_arena) {
      pubkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pubkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pubkey_ = pubkey;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.FinishBroadcast.pubkey)
}

// optional .zjchain.bls.protobuf.BlsPublicKey common_pubkey = 3;
inline bool FinishBroadcast::_internal_has_common_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || common_pubkey_ != nullptr);
  return value;
}
inline bool FinishBroadcast::has_common_pubkey() const {
  return _internal_has_common_pubkey();
}
inline void FinishBroadcast::clear_common_pubkey() {
  if (common_pubkey_ != nullptr) common_pubkey_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& FinishBroadcast::_internal_common_pubkey() const {
  const ::zjchain::bls::protobuf::BlsPublicKey* p = common_pubkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::BlsPublicKey&>(
      ::zjchain::bls::protobuf::_BlsPublicKey_default_instance_);
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& FinishBroadcast::common_pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.FinishBroadcast.common_pubkey)
  return _internal_common_pubkey();
}
inline void FinishBroadcast::unsafe_arena_set_allocated_common_pubkey(
    ::zjchain::bls::protobuf::BlsPublicKey* common_pubkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_pubkey_);
  }
  common_pubkey_ = common_pubkey;
  if (common_pubkey) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.FinishBroadcast.common_pubkey)
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::release_common_pubkey() {
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::bls::protobuf::BlsPublicKey* temp = common_pubkey_;
  common_pubkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::unsafe_arena_release_common_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.FinishBroadcast.common_pubkey)
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::bls::protobuf::BlsPublicKey* temp = common_pubkey_;
  common_pubkey_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::_internal_mutable_common_pubkey() {
  _has_bits_[0] |= 0x00000008u;
  if (common_pubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::BlsPublicKey>(GetArenaForAllocation());
    common_pubkey_ = p;
  }
  return common_pubkey_;
}
inline ::zjchain::bls::protobuf::BlsPublicKey* FinishBroadcast::mutable_common_pubkey() {
  ::zjchain::bls::protobuf::BlsPublicKey* _msg = _internal_mutable_common_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.FinishBroadcast.common_pubkey)
  return _msg;
}
inline void FinishBroadcast::set_allocated_common_pubkey(::zjchain::bls::protobuf::BlsPublicKey* common_pubkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_pubkey_;
  }
  if (common_pubkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common_pubkey);
    if (message_arena != submessage_arena) {
      common_pubkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_pubkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  common_pubkey_ = common_pubkey;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.FinishBroadcast.common_pubkey)
}

// optional uint32 network_id = 4;
inline bool FinishBroadcast::_internal_has_network_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FinishBroadcast::has_network_id() const {
  return _internal_has_network_id();
}
inline void FinishBroadcast::clear_network_id() {
  network_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FinishBroadcast::_internal_network_id() const {
  return network_id_;
}
inline uint32_t FinishBroadcast::network_id() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.FinishBroadcast.network_id)
  return _internal_network_id();
}
inline void FinishBroadcast::_internal_set_network_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  network_id_ = value;
}
inline void FinishBroadcast::set_network_id(uint32_t value) {
  _internal_set_network_id(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.FinishBroadcast.network_id)
}

// optional bytes bls_sign_x = 5;
inline bool FinishBroadcast::_internal_has_bls_sign_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FinishBroadcast::has_bls_sign_x() const {
  return _internal_has_bls_sign_x();
}
inline void FinishBroadcast::clear_bls_sign_x() {
  bls_sign_x_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FinishBroadcast::bls_sign_x() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.FinishBroadcast.bls_sign_x)
  return _internal_bls_sign_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FinishBroadcast::set_bls_sign_x(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 bls_sign_x_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.FinishBroadcast.bls_sign_x)
}
inline std::string* FinishBroadcast::mutable_bls_sign_x() {
  std::string* _s = _internal_mutable_bls_sign_x();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.FinishBroadcast.bls_sign_x)
  return _s;
}
inline const std::string& FinishBroadcast::_internal_bls_sign_x() const {
  return bls_sign_x_.Get();
}
inline void FinishBroadcast::_internal_set_bls_sign_x(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bls_sign_x_.Set(value, GetArenaForAllocation());
}
inline std::string* FinishBroadcast::_internal_mutable_bls_sign_x() {
  _has_bits_[0] |= 0x00000001u;
  return bls_sign_x_.Mutable(GetArenaForAllocation());
}
inline std::string* FinishBroadcast::release_bls_sign_x() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.FinishBroadcast.bls_sign_x)
  if (!_internal_has_bls_sign_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = bls_sign_x_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_x_.IsDefault()) {
    bls_sign_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FinishBroadcast::set_allocated_bls_sign_x(std::string* bls_sign_x) {
  if (bls_sign_x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bls_sign_x_.SetAllocated(bls_sign_x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_x_.IsDefault()) {
    bls_sign_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.FinishBroadcast.bls_sign_x)
}

// optional bytes bls_sign_y = 6;
inline bool FinishBroadcast::_internal_has_bls_sign_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FinishBroadcast::has_bls_sign_y() const {
  return _internal_has_bls_sign_y();
}
inline void FinishBroadcast::clear_bls_sign_y() {
  bls_sign_y_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FinishBroadcast::bls_sign_y() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.FinishBroadcast.bls_sign_y)
  return _internal_bls_sign_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FinishBroadcast::set_bls_sign_y(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 bls_sign_y_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.FinishBroadcast.bls_sign_y)
}
inline std::string* FinishBroadcast::mutable_bls_sign_y() {
  std::string* _s = _internal_mutable_bls_sign_y();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.FinishBroadcast.bls_sign_y)
  return _s;
}
inline const std::string& FinishBroadcast::_internal_bls_sign_y() const {
  return bls_sign_y_.Get();
}
inline void FinishBroadcast::_internal_set_bls_sign_y(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bls_sign_y_.Set(value, GetArenaForAllocation());
}
inline std::string* FinishBroadcast::_internal_mutable_bls_sign_y() {
  _has_bits_[0] |= 0x00000002u;
  return bls_sign_y_.Mutable(GetArenaForAllocation());
}
inline std::string* FinishBroadcast::release_bls_sign_y() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.FinishBroadcast.bls_sign_y)
  if (!_internal_has_bls_sign_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = bls_sign_y_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_y_.IsDefault()) {
    bls_sign_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FinishBroadcast::set_allocated_bls_sign_y(std::string* bls_sign_y) {
  if (bls_sign_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bls_sign_y_.SetAllocated(bls_sign_y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_y_.IsDefault()) {
    bls_sign_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.FinishBroadcast.bls_sign_y)
}

// -------------------------------------------------------------------

// CheckVerfiyReq

// optional uint32 index = 1;
inline bool CheckVerfiyReq::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckVerfiyReq::has_index() const {
  return _internal_has_index();
}
inline void CheckVerfiyReq::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CheckVerfiyReq::_internal_index() const {
  return index_;
}
inline uint32_t CheckVerfiyReq::index() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.CheckVerfiyReq.index)
  return _internal_index();
}
inline void CheckVerfiyReq::_internal_set_index(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
}
inline void CheckVerfiyReq::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.CheckVerfiyReq.index)
}

// -------------------------------------------------------------------

// CheckSwapKeyReq

// optional uint32 index = 1;
inline bool CheckSwapKeyReq::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckSwapKeyReq::has_index() const {
  return _internal_has_index();
}
inline void CheckSwapKeyReq::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CheckSwapKeyReq::_internal_index() const {
  return index_;
}
inline uint32_t CheckSwapKeyReq::index() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.CheckSwapKeyReq.index)
  return _internal_index();
}
inline void CheckSwapKeyReq::_internal_set_index(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
}
inline void CheckSwapKeyReq::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.CheckSwapKeyReq.index)
}

// -------------------------------------------------------------------

// BlsMessage

// optional .zjchain.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
inline bool BlsMessage::_internal_has_verify_brd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || verify_brd_ != nullptr);
  return value;
}
inline bool BlsMessage::has_verify_brd() const {
  return _internal_has_verify_brd();
}
inline void BlsMessage::clear_verify_brd() {
  if (verify_brd_ != nullptr) verify_brd_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::bls::protobuf::VerifyVecBrdReq& BlsMessage::_internal_verify_brd() const {
  const ::zjchain::bls::protobuf::VerifyVecBrdReq* p = verify_brd_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::VerifyVecBrdReq&>(
      ::zjchain::bls::protobuf::_VerifyVecBrdReq_default_instance_);
}
inline const ::zjchain::bls::protobuf::VerifyVecBrdReq& BlsMessage::verify_brd() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsMessage.verify_brd)
  return _internal_verify_brd();
}
inline void BlsMessage::unsafe_arena_set_allocated_verify_brd(
    ::zjchain::bls::protobuf::VerifyVecBrdReq* verify_brd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verify_brd_);
  }
  verify_brd_ = verify_brd;
  if (verify_brd) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.BlsMessage.verify_brd)
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* BlsMessage::release_verify_brd() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* temp = verify_brd_;
  verify_brd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* BlsMessage::unsafe_arena_release_verify_brd() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsMessage.verify_brd)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::bls::protobuf::VerifyVecBrdReq* temp = verify_brd_;
  verify_brd_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* BlsMessage::_internal_mutable_verify_brd() {
  _has_bits_[0] |= 0x00000001u;
  if (verify_brd_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::VerifyVecBrdReq>(GetArenaForAllocation());
    verify_brd_ = p;
  }
  return verify_brd_;
}
inline ::zjchain::bls::protobuf::VerifyVecBrdReq* BlsMessage::mutable_verify_brd() {
  ::zjchain::bls::protobuf::VerifyVecBrdReq* _msg = _internal_mutable_verify_brd();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsMessage.verify_brd)
  return _msg;
}
inline void BlsMessage::set_allocated_verify_brd(::zjchain::bls::protobuf::VerifyVecBrdReq* verify_brd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete verify_brd_;
  }
  if (verify_brd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verify_brd);
    if (message_arena != submessage_arena) {
      verify_brd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verify_brd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  verify_brd_ = verify_brd;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsMessage.verify_brd)
}

// optional .zjchain.bls.protobuf.SwapSecKeyReq swap_req = 2;
inline bool BlsMessage::_internal_has_swap_req() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || swap_req_ != nullptr);
  return value;
}
inline bool BlsMessage::has_swap_req() const {
  return _internal_has_swap_req();
}
inline void BlsMessage::clear_swap_req() {
  if (swap_req_ != nullptr) swap_req_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::bls::protobuf::SwapSecKeyReq& BlsMessage::_internal_swap_req() const {
  const ::zjchain::bls::protobuf::SwapSecKeyReq* p = swap_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::SwapSecKeyReq&>(
      ::zjchain::bls::protobuf::_SwapSecKeyReq_default_instance_);
}
inline const ::zjchain::bls::protobuf::SwapSecKeyReq& BlsMessage::swap_req() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsMessage.swap_req)
  return _internal_swap_req();
}
inline void BlsMessage::unsafe_arena_set_allocated_swap_req(
    ::zjchain::bls::protobuf::SwapSecKeyReq* swap_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swap_req_);
  }
  swap_req_ = swap_req;
  if (swap_req) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.BlsMessage.swap_req)
}
inline ::zjchain::bls::protobuf::SwapSecKeyReq* BlsMessage::release_swap_req() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::bls::protobuf::SwapSecKeyReq* temp = swap_req_;
  swap_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::SwapSecKeyReq* BlsMessage::unsafe_arena_release_swap_req() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsMessage.swap_req)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::bls::protobuf::SwapSecKeyReq* temp = swap_req_;
  swap_req_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::SwapSecKeyReq* BlsMessage::_internal_mutable_swap_req() {
  _has_bits_[0] |= 0x00000002u;
  if (swap_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::SwapSecKeyReq>(GetArenaForAllocation());
    swap_req_ = p;
  }
  return swap_req_;
}
inline ::zjchain::bls::protobuf::SwapSecKeyReq* BlsMessage::mutable_swap_req() {
  ::zjchain::bls::protobuf::SwapSecKeyReq* _msg = _internal_mutable_swap_req();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsMessage.swap_req)
  return _msg;
}
inline void BlsMessage::set_allocated_swap_req(::zjchain::bls::protobuf::SwapSecKeyReq* swap_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete swap_req_;
  }
  if (swap_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swap_req);
    if (message_arena != submessage_arena) {
      swap_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swap_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  swap_req_ = swap_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsMessage.swap_req)
}

// optional .zjchain.bls.protobuf.FinishBroadcast finish_req = 3;
inline bool BlsMessage::_internal_has_finish_req() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || finish_req_ != nullptr);
  return value;
}
inline bool BlsMessage::has_finish_req() const {
  return _internal_has_finish_req();
}
inline void BlsMessage::clear_finish_req() {
  if (finish_req_ != nullptr) finish_req_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zjchain::bls::protobuf::FinishBroadcast& BlsMessage::_internal_finish_req() const {
  const ::zjchain::bls::protobuf::FinishBroadcast* p = finish_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::FinishBroadcast&>(
      ::zjchain::bls::protobuf::_FinishBroadcast_default_instance_);
}
inline const ::zjchain::bls::protobuf::FinishBroadcast& BlsMessage::finish_req() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsMessage.finish_req)
  return _internal_finish_req();
}
inline void BlsMessage::unsafe_arena_set_allocated_finish_req(
    ::zjchain::bls::protobuf::FinishBroadcast* finish_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_req_);
  }
  finish_req_ = finish_req;
  if (finish_req) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.BlsMessage.finish_req)
}
inline ::zjchain::bls::protobuf::FinishBroadcast* BlsMessage::release_finish_req() {
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::bls::protobuf::FinishBroadcast* temp = finish_req_;
  finish_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::FinishBroadcast* BlsMessage::unsafe_arena_release_finish_req() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsMessage.finish_req)
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::bls::protobuf::FinishBroadcast* temp = finish_req_;
  finish_req_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::FinishBroadcast* BlsMessage::_internal_mutable_finish_req() {
  _has_bits_[0] |= 0x00000004u;
  if (finish_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::FinishBroadcast>(GetArenaForAllocation());
    finish_req_ = p;
  }
  return finish_req_;
}
inline ::zjchain::bls::protobuf::FinishBroadcast* BlsMessage::mutable_finish_req() {
  ::zjchain::bls::protobuf::FinishBroadcast* _msg = _internal_mutable_finish_req();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsMessage.finish_req)
  return _msg;
}
inline void BlsMessage::set_allocated_finish_req(::zjchain::bls::protobuf::FinishBroadcast* finish_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete finish_req_;
  }
  if (finish_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(finish_req);
    if (message_arena != submessage_arena) {
      finish_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  finish_req_ = finish_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsMessage.finish_req)
}

// optional .zjchain.bls.protobuf.CheckVerfiyReq check_verify_req = 4;
inline bool BlsMessage::_internal_has_check_verify_req() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || check_verify_req_ != nullptr);
  return value;
}
inline bool BlsMessage::has_check_verify_req() const {
  return _internal_has_check_verify_req();
}
inline void BlsMessage::clear_check_verify_req() {
  if (check_verify_req_ != nullptr) check_verify_req_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zjchain::bls::protobuf::CheckVerfiyReq& BlsMessage::_internal_check_verify_req() const {
  const ::zjchain::bls::protobuf::CheckVerfiyReq* p = check_verify_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::CheckVerfiyReq&>(
      ::zjchain::bls::protobuf::_CheckVerfiyReq_default_instance_);
}
inline const ::zjchain::bls::protobuf::CheckVerfiyReq& BlsMessage::check_verify_req() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsMessage.check_verify_req)
  return _internal_check_verify_req();
}
inline void BlsMessage::unsafe_arena_set_allocated_check_verify_req(
    ::zjchain::bls::protobuf::CheckVerfiyReq* check_verify_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_verify_req_);
  }
  check_verify_req_ = check_verify_req;
  if (check_verify_req) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.BlsMessage.check_verify_req)
}
inline ::zjchain::bls::protobuf::CheckVerfiyReq* BlsMessage::release_check_verify_req() {
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::bls::protobuf::CheckVerfiyReq* temp = check_verify_req_;
  check_verify_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::CheckVerfiyReq* BlsMessage::unsafe_arena_release_check_verify_req() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsMessage.check_verify_req)
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::bls::protobuf::CheckVerfiyReq* temp = check_verify_req_;
  check_verify_req_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::CheckVerfiyReq* BlsMessage::_internal_mutable_check_verify_req() {
  _has_bits_[0] |= 0x00000008u;
  if (check_verify_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::CheckVerfiyReq>(GetArenaForAllocation());
    check_verify_req_ = p;
  }
  return check_verify_req_;
}
inline ::zjchain::bls::protobuf::CheckVerfiyReq* BlsMessage::mutable_check_verify_req() {
  ::zjchain::bls::protobuf::CheckVerfiyReq* _msg = _internal_mutable_check_verify_req();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsMessage.check_verify_req)
  return _msg;
}
inline void BlsMessage::set_allocated_check_verify_req(::zjchain::bls::protobuf::CheckVerfiyReq* check_verify_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete check_verify_req_;
  }
  if (check_verify_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(check_verify_req);
    if (message_arena != submessage_arena) {
      check_verify_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_verify_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  check_verify_req_ = check_verify_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsMessage.check_verify_req)
}

// optional .zjchain.bls.protobuf.CheckSwapKeyReq check_swapkey_req = 5;
inline bool BlsMessage::_internal_has_check_swapkey_req() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || check_swapkey_req_ != nullptr);
  return value;
}
inline bool BlsMessage::has_check_swapkey_req() const {
  return _internal_has_check_swapkey_req();
}
inline void BlsMessage::clear_check_swapkey_req() {
  if (check_swapkey_req_ != nullptr) check_swapkey_req_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::zjchain::bls::protobuf::CheckSwapKeyReq& BlsMessage::_internal_check_swapkey_req() const {
  const ::zjchain::bls::protobuf::CheckSwapKeyReq* p = check_swapkey_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::CheckSwapKeyReq&>(
      ::zjchain::bls::protobuf::_CheckSwapKeyReq_default_instance_);
}
inline const ::zjchain::bls::protobuf::CheckSwapKeyReq& BlsMessage::check_swapkey_req() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsMessage.check_swapkey_req)
  return _internal_check_swapkey_req();
}
inline void BlsMessage::unsafe_arena_set_allocated_check_swapkey_req(
    ::zjchain::bls::protobuf::CheckSwapKeyReq* check_swapkey_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_swapkey_req_);
  }
  check_swapkey_req_ = check_swapkey_req;
  if (check_swapkey_req) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.bls.protobuf.BlsMessage.check_swapkey_req)
}
inline ::zjchain::bls::protobuf::CheckSwapKeyReq* BlsMessage::release_check_swapkey_req() {
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::bls::protobuf::CheckSwapKeyReq* temp = check_swapkey_req_;
  check_swapkey_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::CheckSwapKeyReq* BlsMessage::unsafe_arena_release_check_swapkey_req() {
  // @@protoc_insertion_point(field_release:zjchain.bls.protobuf.BlsMessage.check_swapkey_req)
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::bls::protobuf::CheckSwapKeyReq* temp = check_swapkey_req_;
  check_swapkey_req_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::CheckSwapKeyReq* BlsMessage::_internal_mutable_check_swapkey_req() {
  _has_bits_[0] |= 0x00000010u;
  if (check_swapkey_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::CheckSwapKeyReq>(GetArenaForAllocation());
    check_swapkey_req_ = p;
  }
  return check_swapkey_req_;
}
inline ::zjchain::bls::protobuf::CheckSwapKeyReq* BlsMessage::mutable_check_swapkey_req() {
  ::zjchain::bls::protobuf::CheckSwapKeyReq* _msg = _internal_mutable_check_swapkey_req();
  // @@protoc_insertion_point(field_mutable:zjchain.bls.protobuf.BlsMessage.check_swapkey_req)
  return _msg;
}
inline void BlsMessage::set_allocated_check_swapkey_req(::zjchain::bls::protobuf::CheckSwapKeyReq* check_swapkey_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete check_swapkey_req_;
  }
  if (check_swapkey_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(check_swapkey_req);
    if (message_arena != submessage_arena) {
      check_swapkey_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_swapkey_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  check_swapkey_req_ = check_swapkey_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.bls.protobuf.BlsMessage.check_swapkey_req)
}

// optional uint32 index = 6;
inline bool BlsMessage::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BlsMessage::has_index() const {
  return _internal_has_index();
}
inline void BlsMessage::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t BlsMessage::_internal_index() const {
  return index_;
}
inline uint32_t BlsMessage::index() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsMessage.index)
  return _internal_index();
}
inline void BlsMessage::_internal_set_index(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  index_ = value;
}
inline void BlsMessage::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.BlsMessage.index)
}

// optional uint64 elect_height = 7;
inline bool BlsMessage::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BlsMessage::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void BlsMessage::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t BlsMessage::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t BlsMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.bls.protobuf.BlsMessage.elect_height)
  return _internal_elect_height();
}
inline void BlsMessage::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  elect_height_ = value;
}
inline void BlsMessage::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.bls.protobuf.BlsMessage.elect_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace bls
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fbls_2eproto
