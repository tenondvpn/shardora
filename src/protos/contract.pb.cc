// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/contract.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/contract.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace contract {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* GetAttrByKeyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttrByKeyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttrByKeyRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttrByKeyRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContractMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContractMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2fcontract_2eproto() {
  protobuf_AddDesc_protos_2fcontract_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/contract.proto");
  GOOGLE_CHECK(file != NULL);
  GetAttrByKeyReq_descriptor_ = file->message_type(0);
  static const int GetAttrByKeyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyReq, call_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyReq, attr_key_),
  };
  GetAttrByKeyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttrByKeyReq_descriptor_,
      GetAttrByKeyReq::default_instance_,
      GetAttrByKeyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttrByKeyReq));
  GetAttrByKeyRes_descriptor_ = file->message_type(1);
  static const int GetAttrByKeyRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyRes, call_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyRes, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyRes, attr_value_),
  };
  GetAttrByKeyRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttrByKeyRes_descriptor_,
      GetAttrByKeyRes::default_instance_,
      GetAttrByKeyRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrByKeyRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttrByKeyRes));
  ContractMessage_descriptor_ = file->message_type(2);
  static const int ContractMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMessage, get_attr_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMessage, get_attr_res_),
  };
  ContractMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContractMessage_descriptor_,
      ContractMessage::default_instance_,
      ContractMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContractMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2fcontract_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttrByKeyReq_descriptor_, &GetAttrByKeyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttrByKeyRes_descriptor_, &GetAttrByKeyRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContractMessage_descriptor_, &ContractMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2fcontract_2eproto() {
  delete GetAttrByKeyReq::default_instance_;
  delete GetAttrByKeyReq_reflection_;
  delete GetAttrByKeyRes::default_instance_;
  delete GetAttrByKeyRes_reflection_;
  delete ContractMessage::default_instance_;
  delete ContractMessage_reflection_;
}

void protobuf_AddDesc_protos_2fcontract_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025protos/contract.proto\022\031zjchain.contrac"
    "t.protobuf\"6\n\017GetAttrByKeyReq\022\021\n\tcall_ad"
    "dr\030\001 \001(\014\022\020\n\010attr_key\030\002 \001(\014\"J\n\017GetAttrByK"
    "eyRes\022\021\n\tcall_addr\030\001 \001(\014\022\020\n\010attr_key\030\002 \001"
    "(\014\022\022\n\nattr_value\030\003 \001(\014\"\225\001\n\017ContractMessa"
    "ge\022@\n\014get_attr_req\030\001 \001(\0132*.zjchain.contr"
    "act.protobuf.GetAttrByKeyReq\022@\n\014get_attr"
    "_res\030\002 \001(\0132*.zjchain.contract.protobuf.G"
    "etAttrByKeyRes", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/contract.proto", &protobuf_RegisterTypes);
  GetAttrByKeyReq::default_instance_ = new GetAttrByKeyReq();
  GetAttrByKeyRes::default_instance_ = new GetAttrByKeyRes();
  ContractMessage::default_instance_ = new ContractMessage();
  GetAttrByKeyReq::default_instance_->InitAsDefaultInstance();
  GetAttrByKeyRes::default_instance_->InitAsDefaultInstance();
  ContractMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2fcontract_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2fcontract_2eproto {
  StaticDescriptorInitializer_protos_2fcontract_2eproto() {
    protobuf_AddDesc_protos_2fcontract_2eproto();
  }
} static_descriptor_initializer_protos_2fcontract_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetAttrByKeyReq::kCallAddrFieldNumber;
const int GetAttrByKeyReq::kAttrKeyFieldNumber;
#endif  // !_MSC_VER

GetAttrByKeyReq::GetAttrByKeyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttrByKeyReq::InitAsDefaultInstance() {
}

GetAttrByKeyReq::GetAttrByKeyReq(const GetAttrByKeyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttrByKeyReq::SharedCtor() {
  _cached_size_ = 0;
  call_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttrByKeyReq::~GetAttrByKeyReq() {
  SharedDtor();
}

void GetAttrByKeyReq::SharedDtor() {
  if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete call_addr_;
  }
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (this != default_instance_) {
  }
}

void GetAttrByKeyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttrByKeyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttrByKeyReq_descriptor_;
}

const GetAttrByKeyReq& GetAttrByKeyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fcontract_2eproto();
  return *default_instance_;
}

GetAttrByKeyReq* GetAttrByKeyReq::default_instance_ = NULL;

GetAttrByKeyReq* GetAttrByKeyReq::New() const {
  return new GetAttrByKeyReq;
}

void GetAttrByKeyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_call_addr()) {
      if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
        call_addr_->clear();
      }
    }
    if (has_attr_key()) {
      if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
        attr_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttrByKeyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes call_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_call_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_key;
        break;
      }

      // optional bytes attr_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttrByKeyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes call_addr = 1;
  if (has_call_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->call_addr(), output);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attr_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttrByKeyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes call_addr = 1;
  if (has_call_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->call_addr(), target);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attr_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttrByKeyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes call_addr = 1;
    if (has_call_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->call_addr());
    }

    // optional bytes attr_key = 2;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttrByKeyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttrByKeyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttrByKeyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttrByKeyReq::MergeFrom(const GetAttrByKeyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_addr()) {
      set_call_addr(from.call_addr());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttrByKeyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttrByKeyReq::CopyFrom(const GetAttrByKeyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrByKeyReq::IsInitialized() const {

  return true;
}

void GetAttrByKeyReq::Swap(GetAttrByKeyReq* other) {
  if (other != this) {
    std::swap(call_addr_, other->call_addr_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttrByKeyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttrByKeyReq_descriptor_;
  metadata.reflection = GetAttrByKeyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAttrByKeyRes::kCallAddrFieldNumber;
const int GetAttrByKeyRes::kAttrKeyFieldNumber;
const int GetAttrByKeyRes::kAttrValueFieldNumber;
#endif  // !_MSC_VER

GetAttrByKeyRes::GetAttrByKeyRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttrByKeyRes::InitAsDefaultInstance() {
}

GetAttrByKeyRes::GetAttrByKeyRes(const GetAttrByKeyRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttrByKeyRes::SharedCtor() {
  _cached_size_ = 0;
  call_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attr_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttrByKeyRes::~GetAttrByKeyRes() {
  SharedDtor();
}

void GetAttrByKeyRes::SharedDtor() {
  if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete call_addr_;
  }
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (attr_value_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_value_;
  }
  if (this != default_instance_) {
  }
}

void GetAttrByKeyRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttrByKeyRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttrByKeyRes_descriptor_;
}

const GetAttrByKeyRes& GetAttrByKeyRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fcontract_2eproto();
  return *default_instance_;
}

GetAttrByKeyRes* GetAttrByKeyRes::default_instance_ = NULL;

GetAttrByKeyRes* GetAttrByKeyRes::New() const {
  return new GetAttrByKeyRes;
}

void GetAttrByKeyRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_call_addr()) {
      if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
        call_addr_->clear();
      }
    }
    if (has_attr_key()) {
      if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
        attr_key_->clear();
      }
    }
    if (has_attr_value()) {
      if (attr_value_ != &::google::protobuf::internal::kEmptyString) {
        attr_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttrByKeyRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes call_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_call_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_key;
        break;
      }

      // optional bytes attr_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr_value;
        break;
      }

      // optional bytes attr_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttrByKeyRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes call_addr = 1;
  if (has_call_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->call_addr(), output);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attr_key(), output);
  }

  // optional bytes attr_value = 3;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->attr_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttrByKeyRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes call_addr = 1;
  if (has_call_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->call_addr(), target);
  }

  // optional bytes attr_key = 2;
  if (has_attr_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attr_key(), target);
  }

  // optional bytes attr_value = 3;
  if (has_attr_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attr_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttrByKeyRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes call_addr = 1;
    if (has_call_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->call_addr());
    }

    // optional bytes attr_key = 2;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_key());
    }

    // optional bytes attr_value = 3;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttrByKeyRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttrByKeyRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttrByKeyRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttrByKeyRes::MergeFrom(const GetAttrByKeyRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_addr()) {
      set_call_addr(from.call_addr());
    }
    if (from.has_attr_key()) {
      set_attr_key(from.attr_key());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttrByKeyRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttrByKeyRes::CopyFrom(const GetAttrByKeyRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrByKeyRes::IsInitialized() const {

  return true;
}

void GetAttrByKeyRes::Swap(GetAttrByKeyRes* other) {
  if (other != this) {
    std::swap(call_addr_, other->call_addr_);
    std::swap(attr_key_, other->attr_key_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttrByKeyRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttrByKeyRes_descriptor_;
  metadata.reflection = GetAttrByKeyRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContractMessage::kGetAttrReqFieldNumber;
const int ContractMessage::kGetAttrResFieldNumber;
#endif  // !_MSC_VER

ContractMessage::ContractMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContractMessage::InitAsDefaultInstance() {
  get_attr_req_ = const_cast< ::zjchain::contract::protobuf::GetAttrByKeyReq*>(&::zjchain::contract::protobuf::GetAttrByKeyReq::default_instance());
  get_attr_res_ = const_cast< ::zjchain::contract::protobuf::GetAttrByKeyRes*>(&::zjchain::contract::protobuf::GetAttrByKeyRes::default_instance());
}

ContractMessage::ContractMessage(const ContractMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContractMessage::SharedCtor() {
  _cached_size_ = 0;
  get_attr_req_ = NULL;
  get_attr_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContractMessage::~ContractMessage() {
  SharedDtor();
}

void ContractMessage::SharedDtor() {
  if (this != default_instance_) {
    delete get_attr_req_;
    delete get_attr_res_;
  }
}

void ContractMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractMessage_descriptor_;
}

const ContractMessage& ContractMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fcontract_2eproto();
  return *default_instance_;
}

ContractMessage* ContractMessage::default_instance_ = NULL;

ContractMessage* ContractMessage::New() const {
  return new ContractMessage;
}

void ContractMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_get_attr_req()) {
      if (get_attr_req_ != NULL) get_attr_req_->::zjchain::contract::protobuf::GetAttrByKeyReq::Clear();
    }
    if (has_get_attr_res()) {
      if (get_attr_res_ != NULL) get_attr_res_->::zjchain::contract::protobuf::GetAttrByKeyRes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContractMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_attr_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get_attr_res;
        break;
      }

      // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_attr_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_attr_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContractMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
  if (has_get_attr_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_attr_req(), output);
  }

  // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
  if (has_get_attr_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_attr_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContractMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
  if (has_get_attr_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_attr_req(), target);
  }

  // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
  if (has_get_attr_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_attr_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContractMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
    if (has_get_attr_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_attr_req());
    }

    // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
    if (has_get_attr_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_attr_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContractMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContractMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContractMessage::MergeFrom(const ContractMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_attr_req()) {
      mutable_get_attr_req()->::zjchain::contract::protobuf::GetAttrByKeyReq::MergeFrom(from.get_attr_req());
    }
    if (from.has_get_attr_res()) {
      mutable_get_attr_res()->::zjchain::contract::protobuf::GetAttrByKeyRes::MergeFrom(from.get_attr_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContractMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractMessage::CopyFrom(const ContractMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractMessage::IsInitialized() const {

  return true;
}

void ContractMessage::Swap(ContractMessage* other) {
  if (other != this) {
    std::swap(get_attr_req_, other->get_attr_req_);
    std::swap(get_attr_res_, other->get_attr_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContractMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContractMessage_descriptor_;
  metadata.reflection = ContractMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace contract
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
