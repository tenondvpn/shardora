// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/contract.proto

#include "protos/contract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zjchain {
namespace contract {
namespace protobuf {
PROTOBUF_CONSTEXPR GetAttrByKeyReq::GetAttrByKeyReq(
    ::_pbi::ConstantInitialized)
  : call_addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attr_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetAttrByKeyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAttrByKeyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAttrByKeyReqDefaultTypeInternal() {}
  union {
    GetAttrByKeyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAttrByKeyReqDefaultTypeInternal _GetAttrByKeyReq_default_instance_;
PROTOBUF_CONSTEXPR GetAttrByKeyRes::GetAttrByKeyRes(
    ::_pbi::ConstantInitialized)
  : call_addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attr_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attr_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetAttrByKeyResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAttrByKeyResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAttrByKeyResDefaultTypeInternal() {}
  union {
    GetAttrByKeyRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAttrByKeyResDefaultTypeInternal _GetAttrByKeyRes_default_instance_;
PROTOBUF_CONSTEXPR ContractMessage::ContractMessage(
    ::_pbi::ConstantInitialized)
  : get_attr_req_(nullptr)
  , get_attr_res_(nullptr){}
struct ContractMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractMessageDefaultTypeInternal() {}
  union {
    ContractMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractMessageDefaultTypeInternal _ContractMessage_default_instance_;
}  // namespace protobuf
}  // namespace contract
}  // namespace zjchain
static ::_pb::Metadata file_level_metadata_protos_2fcontract_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fcontract_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fcontract_2eproto = nullptr;

const uint32_t TableStruct_protos_2fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyReq, call_addr_),
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyReq, attr_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyRes, call_addr_),
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyRes, attr_key_),
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::GetAttrByKeyRes, attr_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::ContractMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::ContractMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::ContractMessage, get_attr_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::contract::protobuf::ContractMessage, get_attr_res_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::zjchain::contract::protobuf::GetAttrByKeyReq)},
  { 10, 19, -1, sizeof(::zjchain::contract::protobuf::GetAttrByKeyRes)},
  { 22, 30, -1, sizeof(::zjchain::contract::protobuf::ContractMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zjchain::contract::protobuf::_GetAttrByKeyReq_default_instance_._instance,
  &::zjchain::contract::protobuf::_GetAttrByKeyRes_default_instance_._instance,
  &::zjchain::contract::protobuf::_ContractMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025protos/contract.proto\022\031zjchain.contrac"
  "t.protobuf\"6\n\017GetAttrByKeyReq\022\021\n\tcall_ad"
  "dr\030\001 \001(\014\022\020\n\010attr_key\030\002 \001(\014\"J\n\017GetAttrByK"
  "eyRes\022\021\n\tcall_addr\030\001 \001(\014\022\020\n\010attr_key\030\002 \001"
  "(\014\022\022\n\nattr_value\030\003 \001(\014\"\225\001\n\017ContractMessa"
  "ge\022@\n\014get_attr_req\030\001 \001(\0132*.zjchain.contr"
  "act.protobuf.GetAttrByKeyReq\022@\n\014get_attr"
  "_res\030\002 \001(\0132*.zjchain.contract.protobuf.G"
  "etAttrByKeyRes"
  ;
static ::_pbi::once_flag descriptor_table_protos_2fcontract_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fcontract_2eproto = {
    false, false, 334, descriptor_table_protodef_protos_2fcontract_2eproto,
    "protos/contract.proto",
    &descriptor_table_protos_2fcontract_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_protos_2fcontract_2eproto::offsets,
    file_level_metadata_protos_2fcontract_2eproto, file_level_enum_descriptors_protos_2fcontract_2eproto,
    file_level_service_descriptors_protos_2fcontract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fcontract_2eproto_getter() {
  return &descriptor_table_protos_2fcontract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fcontract_2eproto(&descriptor_table_protos_2fcontract_2eproto);
namespace zjchain {
namespace contract {
namespace protobuf {

// ===================================================================

class GetAttrByKeyReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAttrByKeyReq>()._has_bits_);
  static void set_has_call_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attr_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetAttrByKeyReq::GetAttrByKeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.contract.protobuf.GetAttrByKeyReq)
}
GetAttrByKeyReq::GetAttrByKeyReq(const GetAttrByKeyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    call_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_call_addr()) {
    call_addr_.Set(from._internal_call_addr(), 
      GetArenaForAllocation());
  }
  attr_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attr_key()) {
    attr_key_.Set(from._internal_attr_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.contract.protobuf.GetAttrByKeyReq)
}

inline void GetAttrByKeyReq::SharedCtor() {
call_addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  call_addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAttrByKeyReq::~GetAttrByKeyReq() {
  // @@protoc_insertion_point(destructor:zjchain.contract.protobuf.GetAttrByKeyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAttrByKeyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  call_addr_.Destroy();
  attr_key_.Destroy();
}

void GetAttrByKeyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAttrByKeyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.contract.protobuf.GetAttrByKeyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      call_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attr_key_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAttrByKeyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes call_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_call_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attr_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attr_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAttrByKeyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.contract.protobuf.GetAttrByKeyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes call_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_call_addr(), target);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_attr_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.contract.protobuf.GetAttrByKeyReq)
  return target;
}

size_t GetAttrByKeyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.contract.protobuf.GetAttrByKeyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes call_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_call_addr());
    }

    // optional bytes attr_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attr_key());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAttrByKeyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAttrByKeyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAttrByKeyReq::GetClassData() const { return &_class_data_; }

void GetAttrByKeyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAttrByKeyReq *>(to)->MergeFrom(
      static_cast<const GetAttrByKeyReq &>(from));
}


void GetAttrByKeyReq::MergeFrom(const GetAttrByKeyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.contract.protobuf.GetAttrByKeyReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_call_addr(from._internal_call_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_attr_key(from._internal_attr_key());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAttrByKeyReq::CopyFrom(const GetAttrByKeyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.contract.protobuf.GetAttrByKeyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrByKeyReq::IsInitialized() const {
  return true;
}

void GetAttrByKeyReq::InternalSwap(GetAttrByKeyReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &call_addr_, lhs_arena,
      &other->call_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &attr_key_, lhs_arena,
      &other->attr_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttrByKeyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcontract_2eproto_getter, &descriptor_table_protos_2fcontract_2eproto_once,
      file_level_metadata_protos_2fcontract_2eproto[0]);
}

// ===================================================================

class GetAttrByKeyRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAttrByKeyRes>()._has_bits_);
  static void set_has_call_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attr_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attr_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GetAttrByKeyRes::GetAttrByKeyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.contract.protobuf.GetAttrByKeyRes)
}
GetAttrByKeyRes::GetAttrByKeyRes(const GetAttrByKeyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    call_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_call_addr()) {
    call_addr_.Set(from._internal_call_addr(), 
      GetArenaForAllocation());
  }
  attr_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attr_key()) {
    attr_key_.Set(from._internal_attr_key(), 
      GetArenaForAllocation());
  }
  attr_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attr_value()) {
    attr_value_.Set(from._internal_attr_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.contract.protobuf.GetAttrByKeyRes)
}

inline void GetAttrByKeyRes::SharedCtor() {
call_addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  call_addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAttrByKeyRes::~GetAttrByKeyRes() {
  // @@protoc_insertion_point(destructor:zjchain.contract.protobuf.GetAttrByKeyRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAttrByKeyRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  call_addr_.Destroy();
  attr_key_.Destroy();
  attr_value_.Destroy();
}

void GetAttrByKeyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAttrByKeyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.contract.protobuf.GetAttrByKeyRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      call_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attr_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      attr_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAttrByKeyRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes call_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_call_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attr_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attr_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attr_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_attr_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAttrByKeyRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.contract.protobuf.GetAttrByKeyRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes call_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_call_addr(), target);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_attr_key(), target);
  }

  // optional bytes attr_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_attr_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.contract.protobuf.GetAttrByKeyRes)
  return target;
}

size_t GetAttrByKeyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.contract.protobuf.GetAttrByKeyRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes call_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_call_addr());
    }

    // optional bytes attr_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attr_key());
    }

    // optional bytes attr_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attr_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAttrByKeyRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAttrByKeyRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAttrByKeyRes::GetClassData() const { return &_class_data_; }

void GetAttrByKeyRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAttrByKeyRes *>(to)->MergeFrom(
      static_cast<const GetAttrByKeyRes &>(from));
}


void GetAttrByKeyRes::MergeFrom(const GetAttrByKeyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.contract.protobuf.GetAttrByKeyRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_call_addr(from._internal_call_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_attr_key(from._internal_attr_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_attr_value(from._internal_attr_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAttrByKeyRes::CopyFrom(const GetAttrByKeyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.contract.protobuf.GetAttrByKeyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrByKeyRes::IsInitialized() const {
  return true;
}

void GetAttrByKeyRes::InternalSwap(GetAttrByKeyRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &call_addr_, lhs_arena,
      &other->call_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &attr_key_, lhs_arena,
      &other->attr_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &attr_value_, lhs_arena,
      &other->attr_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttrByKeyRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcontract_2eproto_getter, &descriptor_table_protos_2fcontract_2eproto_once,
      file_level_metadata_protos_2fcontract_2eproto[1]);
}

// ===================================================================

class ContractMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractMessage>()._has_bits_);
  static const ::zjchain::contract::protobuf::GetAttrByKeyReq& get_attr_req(const ContractMessage* msg);
  static void set_has_get_attr_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zjchain::contract::protobuf::GetAttrByKeyRes& get_attr_res(const ContractMessage* msg);
  static void set_has_get_attr_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zjchain::contract::protobuf::GetAttrByKeyReq&
ContractMessage::_Internal::get_attr_req(const ContractMessage* msg) {
  return *msg->get_attr_req_;
}
const ::zjchain::contract::protobuf::GetAttrByKeyRes&
ContractMessage::_Internal::get_attr_res(const ContractMessage* msg) {
  return *msg->get_attr_res_;
}
ContractMessage::ContractMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.contract.protobuf.ContractMessage)
}
ContractMessage::ContractMessage(const ContractMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_get_attr_req()) {
    get_attr_req_ = new ::zjchain::contract::protobuf::GetAttrByKeyReq(*from.get_attr_req_);
  } else {
    get_attr_req_ = nullptr;
  }
  if (from._internal_has_get_attr_res()) {
    get_attr_res_ = new ::zjchain::contract::protobuf::GetAttrByKeyRes(*from.get_attr_res_);
  } else {
    get_attr_res_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.contract.protobuf.ContractMessage)
}

inline void ContractMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&get_attr_req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&get_attr_res_) -
    reinterpret_cast<char*>(&get_attr_req_)) + sizeof(get_attr_res_));
}

ContractMessage::~ContractMessage() {
  // @@protoc_insertion_point(destructor:zjchain.contract.protobuf.ContractMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete get_attr_req_;
  if (this != internal_default_instance()) delete get_attr_res_;
}

void ContractMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContractMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.contract.protobuf.ContractMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(get_attr_req_ != nullptr);
      get_attr_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_attr_res_ != nullptr);
      get_attr_res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_attr_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_attr_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.contract.protobuf.ContractMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::get_attr_req(this),
        _Internal::get_attr_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::get_attr_res(this),
        _Internal::get_attr_res(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.contract.protobuf.ContractMessage)
  return target;
}

size_t ContractMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.contract.protobuf.ContractMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_attr_req_);
    }

    // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_attr_res_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContractMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractMessage::GetClassData() const { return &_class_data_; }

void ContractMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContractMessage *>(to)->MergeFrom(
      static_cast<const ContractMessage &>(from));
}


void ContractMessage::MergeFrom(const ContractMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.contract.protobuf.ContractMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_get_attr_req()->::zjchain::contract::protobuf::GetAttrByKeyReq::MergeFrom(from._internal_get_attr_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_get_attr_res()->::zjchain::contract::protobuf::GetAttrByKeyRes::MergeFrom(from._internal_get_attr_res());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractMessage::CopyFrom(const ContractMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.contract.protobuf.ContractMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractMessage::IsInitialized() const {
  return true;
}

void ContractMessage::InternalSwap(ContractMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractMessage, get_attr_res_)
      + sizeof(ContractMessage::get_attr_res_)
      - PROTOBUF_FIELD_OFFSET(ContractMessage, get_attr_req_)>(
          reinterpret_cast<char*>(&get_attr_req_),
          reinterpret_cast<char*>(&other->get_attr_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fcontract_2eproto_getter, &descriptor_table_protos_2fcontract_2eproto_once,
      file_level_metadata_protos_2fcontract_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace contract
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zjchain::contract::protobuf::GetAttrByKeyReq*
Arena::CreateMaybeMessage< ::zjchain::contract::protobuf::GetAttrByKeyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::contract::protobuf::GetAttrByKeyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::contract::protobuf::GetAttrByKeyRes*
Arena::CreateMaybeMessage< ::zjchain::contract::protobuf::GetAttrByKeyRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::contract::protobuf::GetAttrByKeyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::contract::protobuf::ContractMessage*
Arena::CreateMaybeMessage< ::zjchain::contract::protobuf::ContractMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::contract::protobuf::ContractMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
