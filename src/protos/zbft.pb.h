// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/zbft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fzbft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fzbft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/block.pb.h"
#include "protos/pools.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fzbft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fzbft_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fzbft_2eproto;
namespace zjchain {
namespace zbft {
namespace protobuf {
class TxBft;
struct TxBftDefaultTypeInternal;
extern TxBftDefaultTypeInternal _TxBft_default_instance_;
class ZbftMessage;
struct ZbftMessageDefaultTypeInternal;
extern ZbftMessageDefaultTypeInternal _ZbftMessage_default_instance_;
}  // namespace protobuf
}  // namespace zbft
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::zbft::protobuf::TxBft* Arena::CreateMaybeMessage<::zjchain::zbft::protobuf::TxBft>(Arena*);
template<> ::zjchain::zbft::protobuf::ZbftMessage* Arena::CreateMaybeMessage<::zjchain::zbft::protobuf::ZbftMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace zbft {
namespace protobuf {

// ===================================================================

class TxBft final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.zbft.protobuf.TxBft) */ {
 public:
  inline TxBft() : TxBft(nullptr) {}
  ~TxBft() override;
  explicit PROTOBUF_CONSTEXPR TxBft(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxBft(const TxBft& from);
  TxBft(TxBft&& from) noexcept
    : TxBft() {
    *this = ::std::move(from);
  }

  inline TxBft& operator=(const TxBft& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxBft& operator=(TxBft&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxBft& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxBft* internal_default_instance() {
    return reinterpret_cast<const TxBft*>(
               &_TxBft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxBft& a, TxBft& b) {
    a.Swap(&b);
  }
  inline void Swap(TxBft* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxBft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxBft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxBft>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxBft& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TxBft& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBft* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.zbft.protobuf.TxBft";
  }
  protected:
  explicit TxBft(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxHashListFieldNumber = 4,
    kPrepareFinalHashFieldNumber = 2,
    kBlockFieldNumber = 1,
    kHeightFieldNumber = 3,
    kTxTypeFieldNumber = 5,
  };
  // repeated bytes tx_hash_list = 4;
  int tx_hash_list_size() const;
  private:
  int _internal_tx_hash_list_size() const;
  public:
  void clear_tx_hash_list();
  const std::string& tx_hash_list(int index) const;
  std::string* mutable_tx_hash_list(int index);
  void set_tx_hash_list(int index, const std::string& value);
  void set_tx_hash_list(int index, std::string&& value);
  void set_tx_hash_list(int index, const char* value);
  void set_tx_hash_list(int index, const void* value, size_t size);
  std::string* add_tx_hash_list();
  void add_tx_hash_list(const std::string& value);
  void add_tx_hash_list(std::string&& value);
  void add_tx_hash_list(const char* value);
  void add_tx_hash_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tx_hash_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tx_hash_list();
  private:
  const std::string& _internal_tx_hash_list(int index) const;
  std::string* _internal_add_tx_hash_list();
  public:

  // optional bytes prepare_final_hash = 2;
  bool has_prepare_final_hash() const;
  private:
  bool _internal_has_prepare_final_hash() const;
  public:
  void clear_prepare_final_hash();
  const std::string& prepare_final_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prepare_final_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prepare_final_hash();
  PROTOBUF_NODISCARD std::string* release_prepare_final_hash();
  void set_allocated_prepare_final_hash(std::string* prepare_final_hash);
  private:
  const std::string& _internal_prepare_final_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prepare_final_hash(const std::string& value);
  std::string* _internal_mutable_prepare_final_hash();
  public:

  // optional .zjchain.block.protobuf.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::zjchain::block::protobuf::Block& block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::Block* release_block();
  ::zjchain::block::protobuf::Block* mutable_block();
  void set_allocated_block(::zjchain::block::protobuf::Block* block);
  private:
  const ::zjchain::block::protobuf::Block& _internal_block() const;
  ::zjchain::block::protobuf::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::zjchain::block::protobuf::Block* block);
  ::zjchain::block::protobuf::Block* unsafe_arena_release_block();

  // optional uint64 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // optional .zjchain.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
  bool has_tx_type() const;
  private:
  bool _internal_has_tx_type() const;
  public:
  void clear_tx_type();
  ::zjchain::pools::protobuf::StepType tx_type() const;
  void set_tx_type(::zjchain::pools::protobuf::StepType value);
  private:
  ::zjchain::pools::protobuf::StepType _internal_tx_type() const;
  void _internal_set_tx_type(::zjchain::pools::protobuf::StepType value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.zbft.protobuf.TxBft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tx_hash_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prepare_final_hash_;
  ::zjchain::block::protobuf::Block* block_;
  uint64_t height_;
  int tx_type_;
  friend struct ::TableStruct_protos_2fzbft_2eproto;
};
// -------------------------------------------------------------------

class ZbftMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.zbft.protobuf.ZbftMessage) */ {
 public:
  inline ZbftMessage() : ZbftMessage(nullptr) {}
  ~ZbftMessage() override;
  explicit PROTOBUF_CONSTEXPR ZbftMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZbftMessage(const ZbftMessage& from);
  ZbftMessage(ZbftMessage&& from) noexcept
    : ZbftMessage() {
    *this = ::std::move(from);
  }

  inline ZbftMessage& operator=(const ZbftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZbftMessage& operator=(ZbftMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZbftMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZbftMessage* internal_default_instance() {
    return reinterpret_cast<const ZbftMessage*>(
               &_ZbftMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ZbftMessage& a, ZbftMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ZbftMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZbftMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZbftMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZbftMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZbftMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZbftMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZbftMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.zbft.protobuf.ZbftMessage";
  }
  protected:
  explicit ZbftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpsFieldNumber = 20,
    kInvaidTxsFieldNumber = 22,
    kPrepareGidFieldNumber = 1,
    kPrecommitGidFieldNumber = 2,
    kCommitGidFieldNumber = 3,
    kBackupEncDataFieldNumber = 12,
    kBlsSignXFieldNumber = 14,
    kBlsSignYFieldNumber = 15,
    kPrepareHashFieldNumber = 17,
    kOpposePrepareGidFieldNumber = 21,
    kTxBftFieldNumber = 10,
    kBlockFieldNumber = 18,
    kNetIdFieldNumber = 5,
    kErrorFieldNumber = 9,
    kAgreePrecommitFieldNumber = 6,
    kAgreeCommitFieldNumber = 7,
    kSyncBlockFieldNumber = 19,
    kMemberIndexFieldNumber = 11,
    kElectHeightFieldNumber = 13,
    kPrepareHeightFieldNumber = 16,
    kLeaderIdxFieldNumber = 4,
    kPoolIndexFieldNumber = 8,
  };
  // repeated uint32 ips = 20;
  int ips_size() const;
  private:
  int _internal_ips_size() const;
  public:
  void clear_ips();
  private:
  uint32_t _internal_ips(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ips() const;
  void _internal_add_ips(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ips();
  public:
  uint32_t ips(int index) const;
  void set_ips(int index, uint32_t value);
  void add_ips(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ips();

  // repeated uint32 invaid_txs = 22;
  int invaid_txs_size() const;
  private:
  int _internal_invaid_txs_size() const;
  public:
  void clear_invaid_txs();
  private:
  uint32_t _internal_invaid_txs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_invaid_txs() const;
  void _internal_add_invaid_txs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_invaid_txs();
  public:
  uint32_t invaid_txs(int index) const;
  void set_invaid_txs(int index, uint32_t value);
  void add_invaid_txs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      invaid_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_invaid_txs();

  // optional bytes prepare_gid = 1;
  bool has_prepare_gid() const;
  private:
  bool _internal_has_prepare_gid() const;
  public:
  void clear_prepare_gid();
  const std::string& prepare_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prepare_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prepare_gid();
  PROTOBUF_NODISCARD std::string* release_prepare_gid();
  void set_allocated_prepare_gid(std::string* prepare_gid);
  private:
  const std::string& _internal_prepare_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prepare_gid(const std::string& value);
  std::string* _internal_mutable_prepare_gid();
  public:

  // optional bytes precommit_gid = 2;
  bool has_precommit_gid() const;
  private:
  bool _internal_has_precommit_gid() const;
  public:
  void clear_precommit_gid();
  const std::string& precommit_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_precommit_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_precommit_gid();
  PROTOBUF_NODISCARD std::string* release_precommit_gid();
  void set_allocated_precommit_gid(std::string* precommit_gid);
  private:
  const std::string& _internal_precommit_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_precommit_gid(const std::string& value);
  std::string* _internal_mutable_precommit_gid();
  public:

  // optional bytes commit_gid = 3;
  bool has_commit_gid() const;
  private:
  bool _internal_has_commit_gid() const;
  public:
  void clear_commit_gid();
  const std::string& commit_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commit_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commit_gid();
  PROTOBUF_NODISCARD std::string* release_commit_gid();
  void set_allocated_commit_gid(std::string* commit_gid);
  private:
  const std::string& _internal_commit_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commit_gid(const std::string& value);
  std::string* _internal_mutable_commit_gid();
  public:

  // optional bytes backup_enc_data = 12;
  bool has_backup_enc_data() const;
  private:
  bool _internal_has_backup_enc_data() const;
  public:
  void clear_backup_enc_data();
  const std::string& backup_enc_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_backup_enc_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_backup_enc_data();
  PROTOBUF_NODISCARD std::string* release_backup_enc_data();
  void set_allocated_backup_enc_data(std::string* backup_enc_data);
  private:
  const std::string& _internal_backup_enc_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backup_enc_data(const std::string& value);
  std::string* _internal_mutable_backup_enc_data();
  public:

  // optional bytes bls_sign_x = 14;
  bool has_bls_sign_x() const;
  private:
  bool _internal_has_bls_sign_x() const;
  public:
  void clear_bls_sign_x();
  const std::string& bls_sign_x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_sign_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_sign_x();
  PROTOBUF_NODISCARD std::string* release_bls_sign_x();
  void set_allocated_bls_sign_x(std::string* bls_sign_x);
  private:
  const std::string& _internal_bls_sign_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_sign_x(const std::string& value);
  std::string* _internal_mutable_bls_sign_x();
  public:

  // optional bytes bls_sign_y = 15;
  bool has_bls_sign_y() const;
  private:
  bool _internal_has_bls_sign_y() const;
  public:
  void clear_bls_sign_y();
  const std::string& bls_sign_y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_sign_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_sign_y();
  PROTOBUF_NODISCARD std::string* release_bls_sign_y();
  void set_allocated_bls_sign_y(std::string* bls_sign_y);
  private:
  const std::string& _internal_bls_sign_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_sign_y(const std::string& value);
  std::string* _internal_mutable_bls_sign_y();
  public:

  // optional bytes prepare_hash = 17;
  bool has_prepare_hash() const;
  private:
  bool _internal_has_prepare_hash() const;
  public:
  void clear_prepare_hash();
  const std::string& prepare_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prepare_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prepare_hash();
  PROTOBUF_NODISCARD std::string* release_prepare_hash();
  void set_allocated_prepare_hash(std::string* prepare_hash);
  private:
  const std::string& _internal_prepare_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prepare_hash(const std::string& value);
  std::string* _internal_mutable_prepare_hash();
  public:

  // optional bytes oppose_prepare_gid = 21;
  bool has_oppose_prepare_gid() const;
  private:
  bool _internal_has_oppose_prepare_gid() const;
  public:
  void clear_oppose_prepare_gid();
  const std::string& oppose_prepare_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oppose_prepare_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oppose_prepare_gid();
  PROTOBUF_NODISCARD std::string* release_oppose_prepare_gid();
  void set_allocated_oppose_prepare_gid(std::string* oppose_prepare_gid);
  private:
  const std::string& _internal_oppose_prepare_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oppose_prepare_gid(const std::string& value);
  std::string* _internal_mutable_oppose_prepare_gid();
  public:

  // optional .zjchain.zbft.protobuf.TxBft tx_bft = 10;
  bool has_tx_bft() const;
  private:
  bool _internal_has_tx_bft() const;
  public:
  void clear_tx_bft();
  const ::zjchain::zbft::protobuf::TxBft& tx_bft() const;
  PROTOBUF_NODISCARD ::zjchain::zbft::protobuf::TxBft* release_tx_bft();
  ::zjchain::zbft::protobuf::TxBft* mutable_tx_bft();
  void set_allocated_tx_bft(::zjchain::zbft::protobuf::TxBft* tx_bft);
  private:
  const ::zjchain::zbft::protobuf::TxBft& _internal_tx_bft() const;
  ::zjchain::zbft::protobuf::TxBft* _internal_mutable_tx_bft();
  public:
  void unsafe_arena_set_allocated_tx_bft(
      ::zjchain::zbft::protobuf::TxBft* tx_bft);
  ::zjchain::zbft::protobuf::TxBft* unsafe_arena_release_tx_bft();

  // optional .zjchain.block.protobuf.Block block = 18;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::zjchain::block::protobuf::Block& block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::Block* release_block();
  ::zjchain::block::protobuf::Block* mutable_block();
  void set_allocated_block(::zjchain::block::protobuf::Block* block);
  private:
  const ::zjchain::block::protobuf::Block& _internal_block() const;
  ::zjchain::block::protobuf::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::zjchain::block::protobuf::Block* block);
  ::zjchain::block::protobuf::Block* unsafe_arena_release_block();

  // optional uint32 net_id = 5;
  bool has_net_id() const;
  private:
  bool _internal_has_net_id() const;
  public:
  void clear_net_id();
  uint32_t net_id() const;
  void set_net_id(uint32_t value);
  private:
  uint32_t _internal_net_id() const;
  void _internal_set_net_id(uint32_t value);
  public:

  // optional int32 error = 9;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // optional bool agree_precommit = 6 [default = false];
  bool has_agree_precommit() const;
  private:
  bool _internal_has_agree_precommit() const;
  public:
  void clear_agree_precommit();
  bool agree_precommit() const;
  void set_agree_precommit(bool value);
  private:
  bool _internal_agree_precommit() const;
  void _internal_set_agree_precommit(bool value);
  public:

  // optional bool agree_commit = 7 [default = false];
  bool has_agree_commit() const;
  private:
  bool _internal_has_agree_commit() const;
  public:
  void clear_agree_commit();
  bool agree_commit() const;
  void set_agree_commit(bool value);
  private:
  bool _internal_agree_commit() const;
  void _internal_set_agree_commit(bool value);
  public:

  // optional bool sync_block = 19;
  bool has_sync_block() const;
  private:
  bool _internal_has_sync_block() const;
  public:
  void clear_sync_block();
  bool sync_block() const;
  void set_sync_block(bool value);
  private:
  bool _internal_sync_block() const;
  void _internal_set_sync_block(bool value);
  public:

  // optional uint32 member_index = 11;
  bool has_member_index() const;
  private:
  bool _internal_has_member_index() const;
  public:
  void clear_member_index();
  uint32_t member_index() const;
  void set_member_index(uint32_t value);
  private:
  uint32_t _internal_member_index() const;
  void _internal_set_member_index(uint32_t value);
  public:

  // optional uint64 elect_height = 13;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // optional uint64 prepare_height = 16;
  bool has_prepare_height() const;
  private:
  bool _internal_has_prepare_height() const;
  public:
  void clear_prepare_height();
  uint64_t prepare_height() const;
  void set_prepare_height(uint64_t value);
  private:
  uint64_t _internal_prepare_height() const;
  void _internal_set_prepare_height(uint64_t value);
  public:

  // optional int32 leader_idx = 4 [default = -1];
  bool has_leader_idx() const;
  private:
  bool _internal_has_leader_idx() const;
  public:
  void clear_leader_idx();
  int32_t leader_idx() const;
  void set_leader_idx(int32_t value);
  private:
  int32_t _internal_leader_idx() const;
  void _internal_set_leader_idx(int32_t value);
  public:

  // optional uint32 pool_index = 8 [default = 4294967295];
  bool has_pool_index() const;
  private:
  bool _internal_has_pool_index() const;
  public:
  void clear_pool_index();
  uint32_t pool_index() const;
  void set_pool_index(uint32_t value);
  private:
  uint32_t _internal_pool_index() const;
  void _internal_set_pool_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.zbft.protobuf.ZbftMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > invaid_txs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prepare_gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr precommit_gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commit_gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backup_enc_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_sign_x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_sign_y_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prepare_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oppose_prepare_gid_;
  ::zjchain::zbft::protobuf::TxBft* tx_bft_;
  ::zjchain::block::protobuf::Block* block_;
  uint32_t net_id_;
  int32_t error_;
  bool agree_precommit_;
  bool agree_commit_;
  bool sync_block_;
  uint32_t member_index_;
  uint64_t elect_height_;
  uint64_t prepare_height_;
  int32_t leader_idx_;
  uint32_t pool_index_;
  friend struct ::TableStruct_protos_2fzbft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxBft

// optional .zjchain.block.protobuf.Block block = 1;
inline bool TxBft::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool TxBft::has_block() const {
  return _internal_has_block();
}
inline const ::zjchain::block::protobuf::Block& TxBft::_internal_block() const {
  const ::zjchain::block::protobuf::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::Block&>(
      ::zjchain::block::protobuf::_Block_default_instance_);
}
inline const ::zjchain::block::protobuf::Block& TxBft::block() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.TxBft.block)
  return _internal_block();
}
inline void TxBft::unsafe_arena_set_allocated_block(
    ::zjchain::block::protobuf::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.zbft.protobuf.TxBft.block)
}
inline ::zjchain::block::protobuf::Block* TxBft::release_block() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::Block* TxBft::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.TxBft.block)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::Block* TxBft::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000002u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::zjchain::block::protobuf::Block* TxBft::mutable_block() {
  ::zjchain::block::protobuf::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.TxBft.block)
  return _msg;
}
inline void TxBft::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.TxBft.block)
}

// optional bytes prepare_final_hash = 2;
inline bool TxBft::_internal_has_prepare_final_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TxBft::has_prepare_final_hash() const {
  return _internal_has_prepare_final_hash();
}
inline void TxBft::clear_prepare_final_hash() {
  prepare_final_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TxBft::prepare_final_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.TxBft.prepare_final_hash)
  return _internal_prepare_final_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxBft::set_prepare_final_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 prepare_final_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.TxBft.prepare_final_hash)
}
inline std::string* TxBft::mutable_prepare_final_hash() {
  std::string* _s = _internal_mutable_prepare_final_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.TxBft.prepare_final_hash)
  return _s;
}
inline const std::string& TxBft::_internal_prepare_final_hash() const {
  return prepare_final_hash_.Get();
}
inline void TxBft::_internal_set_prepare_final_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prepare_final_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* TxBft::_internal_mutable_prepare_final_hash() {
  _has_bits_[0] |= 0x00000001u;
  return prepare_final_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* TxBft::release_prepare_final_hash() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.TxBft.prepare_final_hash)
  if (!_internal_has_prepare_final_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = prepare_final_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prepare_final_hash_.IsDefault()) {
    prepare_final_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxBft::set_allocated_prepare_final_hash(std::string* prepare_final_hash) {
  if (prepare_final_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prepare_final_hash_.SetAllocated(prepare_final_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prepare_final_hash_.IsDefault()) {
    prepare_final_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.TxBft.prepare_final_hash)
}

// optional uint64 height = 3;
inline bool TxBft::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TxBft::has_height() const {
  return _internal_has_height();
}
inline void TxBft::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t TxBft::_internal_height() const {
  return height_;
}
inline uint64_t TxBft::height() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.TxBft.height)
  return _internal_height();
}
inline void TxBft::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void TxBft::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.TxBft.height)
}

// repeated bytes tx_hash_list = 4;
inline int TxBft::_internal_tx_hash_list_size() const {
  return tx_hash_list_.size();
}
inline int TxBft::tx_hash_list_size() const {
  return _internal_tx_hash_list_size();
}
inline void TxBft::clear_tx_hash_list() {
  tx_hash_list_.Clear();
}
inline std::string* TxBft::add_tx_hash_list() {
  std::string* _s = _internal_add_tx_hash_list();
  // @@protoc_insertion_point(field_add_mutable:zjchain.zbft.protobuf.TxBft.tx_hash_list)
  return _s;
}
inline const std::string& TxBft::_internal_tx_hash_list(int index) const {
  return tx_hash_list_.Get(index);
}
inline const std::string& TxBft::tx_hash_list(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.TxBft.tx_hash_list)
  return _internal_tx_hash_list(index);
}
inline std::string* TxBft::mutable_tx_hash_list(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.TxBft.tx_hash_list)
  return tx_hash_list_.Mutable(index);
}
inline void TxBft::set_tx_hash_list(int index, const std::string& value) {
  tx_hash_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::set_tx_hash_list(int index, std::string&& value) {
  tx_hash_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::set_tx_hash_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tx_hash_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::set_tx_hash_list(int index, const void* value, size_t size) {
  tx_hash_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline std::string* TxBft::_internal_add_tx_hash_list() {
  return tx_hash_list_.Add();
}
inline void TxBft::add_tx_hash_list(const std::string& value) {
  tx_hash_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::add_tx_hash_list(std::string&& value) {
  tx_hash_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::add_tx_hash_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tx_hash_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::add_tx_hash_list(const void* value, size_t size) {
  tx_hash_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zjchain.zbft.protobuf.TxBft.tx_hash_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxBft::tx_hash_list() const {
  // @@protoc_insertion_point(field_list:zjchain.zbft.protobuf.TxBft.tx_hash_list)
  return tx_hash_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxBft::mutable_tx_hash_list() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.zbft.protobuf.TxBft.tx_hash_list)
  return &tx_hash_list_;
}

// optional .zjchain.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
inline bool TxBft::_internal_has_tx_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TxBft::has_tx_type() const {
  return _internal_has_tx_type();
}
inline void TxBft::clear_tx_type() {
  tx_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::zjchain::pools::protobuf::StepType TxBft::_internal_tx_type() const {
  return static_cast< ::zjchain::pools::protobuf::StepType >(tx_type_);
}
inline ::zjchain::pools::protobuf::StepType TxBft::tx_type() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.TxBft.tx_type)
  return _internal_tx_type();
}
inline void TxBft::_internal_set_tx_type(::zjchain::pools::protobuf::StepType value) {
  assert(::zjchain::pools::protobuf::StepType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  tx_type_ = value;
}
inline void TxBft::set_tx_type(::zjchain::pools::protobuf::StepType value) {
  _internal_set_tx_type(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.TxBft.tx_type)
}

// -------------------------------------------------------------------

// ZbftMessage

// optional bytes prepare_gid = 1;
inline bool ZbftMessage::_internal_has_prepare_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ZbftMessage::has_prepare_gid() const {
  return _internal_has_prepare_gid();
}
inline void ZbftMessage::clear_prepare_gid() {
  prepare_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ZbftMessage::prepare_gid() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.prepare_gid)
  return _internal_prepare_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_prepare_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 prepare_gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.prepare_gid)
}
inline std::string* ZbftMessage::mutable_prepare_gid() {
  std::string* _s = _internal_mutable_prepare_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.prepare_gid)
  return _s;
}
inline const std::string& ZbftMessage::_internal_prepare_gid() const {
  return prepare_gid_.Get();
}
inline void ZbftMessage::_internal_set_prepare_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prepare_gid_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_prepare_gid() {
  _has_bits_[0] |= 0x00000001u;
  return prepare_gid_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_prepare_gid() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.prepare_gid)
  if (!_internal_has_prepare_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = prepare_gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prepare_gid_.IsDefault()) {
    prepare_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_prepare_gid(std::string* prepare_gid) {
  if (prepare_gid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prepare_gid_.SetAllocated(prepare_gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prepare_gid_.IsDefault()) {
    prepare_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.prepare_gid)
}

// optional bytes precommit_gid = 2;
inline bool ZbftMessage::_internal_has_precommit_gid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ZbftMessage::has_precommit_gid() const {
  return _internal_has_precommit_gid();
}
inline void ZbftMessage::clear_precommit_gid() {
  precommit_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ZbftMessage::precommit_gid() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.precommit_gid)
  return _internal_precommit_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_precommit_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 precommit_gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.precommit_gid)
}
inline std::string* ZbftMessage::mutable_precommit_gid() {
  std::string* _s = _internal_mutable_precommit_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.precommit_gid)
  return _s;
}
inline const std::string& ZbftMessage::_internal_precommit_gid() const {
  return precommit_gid_.Get();
}
inline void ZbftMessage::_internal_set_precommit_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  precommit_gid_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_precommit_gid() {
  _has_bits_[0] |= 0x00000002u;
  return precommit_gid_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_precommit_gid() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.precommit_gid)
  if (!_internal_has_precommit_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = precommit_gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (precommit_gid_.IsDefault()) {
    precommit_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_precommit_gid(std::string* precommit_gid) {
  if (precommit_gid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  precommit_gid_.SetAllocated(precommit_gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (precommit_gid_.IsDefault()) {
    precommit_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.precommit_gid)
}

// optional bytes commit_gid = 3;
inline bool ZbftMessage::_internal_has_commit_gid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ZbftMessage::has_commit_gid() const {
  return _internal_has_commit_gid();
}
inline void ZbftMessage::clear_commit_gid() {
  commit_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ZbftMessage::commit_gid() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.commit_gid)
  return _internal_commit_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_commit_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 commit_gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.commit_gid)
}
inline std::string* ZbftMessage::mutable_commit_gid() {
  std::string* _s = _internal_mutable_commit_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.commit_gid)
  return _s;
}
inline const std::string& ZbftMessage::_internal_commit_gid() const {
  return commit_gid_.Get();
}
inline void ZbftMessage::_internal_set_commit_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  commit_gid_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_commit_gid() {
  _has_bits_[0] |= 0x00000004u;
  return commit_gid_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_commit_gid() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.commit_gid)
  if (!_internal_has_commit_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = commit_gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (commit_gid_.IsDefault()) {
    commit_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_commit_gid(std::string* commit_gid) {
  if (commit_gid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  commit_gid_.SetAllocated(commit_gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (commit_gid_.IsDefault()) {
    commit_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.commit_gid)
}

// optional int32 leader_idx = 4 [default = -1];
inline bool ZbftMessage::_internal_has_leader_idx() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ZbftMessage::has_leader_idx() const {
  return _internal_has_leader_idx();
}
inline void ZbftMessage::clear_leader_idx() {
  leader_idx_ = -1;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t ZbftMessage::_internal_leader_idx() const {
  return leader_idx_;
}
inline int32_t ZbftMessage::leader_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.leader_idx)
  return _internal_leader_idx();
}
inline void ZbftMessage::_internal_set_leader_idx(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  leader_idx_ = value;
}
inline void ZbftMessage::set_leader_idx(int32_t value) {
  _internal_set_leader_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.leader_idx)
}

// optional uint32 net_id = 5;
inline bool ZbftMessage::_internal_has_net_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ZbftMessage::has_net_id() const {
  return _internal_has_net_id();
}
inline void ZbftMessage::clear_net_id() {
  net_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ZbftMessage::_internal_net_id() const {
  return net_id_;
}
inline uint32_t ZbftMessage::net_id() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.net_id)
  return _internal_net_id();
}
inline void ZbftMessage::_internal_set_net_id(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  net_id_ = value;
}
inline void ZbftMessage::set_net_id(uint32_t value) {
  _internal_set_net_id(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.net_id)
}

// optional bool agree_precommit = 6 [default = false];
inline bool ZbftMessage::_internal_has_agree_precommit() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ZbftMessage::has_agree_precommit() const {
  return _internal_has_agree_precommit();
}
inline void ZbftMessage::clear_agree_precommit() {
  agree_precommit_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ZbftMessage::_internal_agree_precommit() const {
  return agree_precommit_;
}
inline bool ZbftMessage::agree_precommit() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.agree_precommit)
  return _internal_agree_precommit();
}
inline void ZbftMessage::_internal_set_agree_precommit(bool value) {
  _has_bits_[0] |= 0x00001000u;
  agree_precommit_ = value;
}
inline void ZbftMessage::set_agree_precommit(bool value) {
  _internal_set_agree_precommit(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.agree_precommit)
}

// optional bool agree_commit = 7 [default = false];
inline bool ZbftMessage::_internal_has_agree_commit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ZbftMessage::has_agree_commit() const {
  return _internal_has_agree_commit();
}
inline void ZbftMessage::clear_agree_commit() {
  agree_commit_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ZbftMessage::_internal_agree_commit() const {
  return agree_commit_;
}
inline bool ZbftMessage::agree_commit() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.agree_commit)
  return _internal_agree_commit();
}
inline void ZbftMessage::_internal_set_agree_commit(bool value) {
  _has_bits_[0] |= 0x00002000u;
  agree_commit_ = value;
}
inline void ZbftMessage::set_agree_commit(bool value) {
  _internal_set_agree_commit(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.agree_commit)
}

// optional uint32 pool_index = 8 [default = 4294967295];
inline bool ZbftMessage::_internal_has_pool_index() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ZbftMessage::has_pool_index() const {
  return _internal_has_pool_index();
}
inline void ZbftMessage::clear_pool_index() {
  pool_index_ = 4294967295u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t ZbftMessage::_internal_pool_index() const {
  return pool_index_;
}
inline uint32_t ZbftMessage::pool_index() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.pool_index)
  return _internal_pool_index();
}
inline void ZbftMessage::_internal_set_pool_index(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  pool_index_ = value;
}
inline void ZbftMessage::set_pool_index(uint32_t value) {
  _internal_set_pool_index(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.pool_index)
}

// optional int32 error = 9;
inline bool ZbftMessage::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ZbftMessage::has_error() const {
  return _internal_has_error();
}
inline void ZbftMessage::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t ZbftMessage::_internal_error() const {
  return error_;
}
inline int32_t ZbftMessage::error() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.error)
  return _internal_error();
}
inline void ZbftMessage::_internal_set_error(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  error_ = value;
}
inline void ZbftMessage::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.error)
}

// optional .zjchain.zbft.protobuf.TxBft tx_bft = 10;
inline bool ZbftMessage::_internal_has_tx_bft() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tx_bft_ != nullptr);
  return value;
}
inline bool ZbftMessage::has_tx_bft() const {
  return _internal_has_tx_bft();
}
inline void ZbftMessage::clear_tx_bft() {
  if (tx_bft_ != nullptr) tx_bft_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::zjchain::zbft::protobuf::TxBft& ZbftMessage::_internal_tx_bft() const {
  const ::zjchain::zbft::protobuf::TxBft* p = tx_bft_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::zbft::protobuf::TxBft&>(
      ::zjchain::zbft::protobuf::_TxBft_default_instance_);
}
inline const ::zjchain::zbft::protobuf::TxBft& ZbftMessage::tx_bft() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.tx_bft)
  return _internal_tx_bft();
}
inline void ZbftMessage::unsafe_arena_set_allocated_tx_bft(
    ::zjchain::zbft::protobuf::TxBft* tx_bft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_bft_);
  }
  tx_bft_ = tx_bft;
  if (tx_bft) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.zbft.protobuf.ZbftMessage.tx_bft)
}
inline ::zjchain::zbft::protobuf::TxBft* ZbftMessage::release_tx_bft() {
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::zbft::protobuf::TxBft* temp = tx_bft_;
  tx_bft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::zbft::protobuf::TxBft* ZbftMessage::unsafe_arena_release_tx_bft() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.tx_bft)
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::zbft::protobuf::TxBft* temp = tx_bft_;
  tx_bft_ = nullptr;
  return temp;
}
inline ::zjchain::zbft::protobuf::TxBft* ZbftMessage::_internal_mutable_tx_bft() {
  _has_bits_[0] |= 0x00000100u;
  if (tx_bft_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::zbft::protobuf::TxBft>(GetArenaForAllocation());
    tx_bft_ = p;
  }
  return tx_bft_;
}
inline ::zjchain::zbft::protobuf::TxBft* ZbftMessage::mutable_tx_bft() {
  ::zjchain::zbft::protobuf::TxBft* _msg = _internal_mutable_tx_bft();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.tx_bft)
  return _msg;
}
inline void ZbftMessage::set_allocated_tx_bft(::zjchain::zbft::protobuf::TxBft* tx_bft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tx_bft_;
  }
  if (tx_bft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tx_bft);
    if (message_arena != submessage_arena) {
      tx_bft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_bft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tx_bft_ = tx_bft;
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.tx_bft)
}

// optional uint32 member_index = 11;
inline bool ZbftMessage::_internal_has_member_index() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ZbftMessage::has_member_index() const {
  return _internal_has_member_index();
}
inline void ZbftMessage::clear_member_index() {
  member_index_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t ZbftMessage::_internal_member_index() const {
  return member_index_;
}
inline uint32_t ZbftMessage::member_index() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.member_index)
  return _internal_member_index();
}
inline void ZbftMessage::_internal_set_member_index(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  member_index_ = value;
}
inline void ZbftMessage::set_member_index(uint32_t value) {
  _internal_set_member_index(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.member_index)
}

// optional bytes backup_enc_data = 12;
inline bool ZbftMessage::_internal_has_backup_enc_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ZbftMessage::has_backup_enc_data() const {
  return _internal_has_backup_enc_data();
}
inline void ZbftMessage::clear_backup_enc_data() {
  backup_enc_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ZbftMessage::backup_enc_data() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.backup_enc_data)
  return _internal_backup_enc_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_backup_enc_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 backup_enc_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.backup_enc_data)
}
inline std::string* ZbftMessage::mutable_backup_enc_data() {
  std::string* _s = _internal_mutable_backup_enc_data();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.backup_enc_data)
  return _s;
}
inline const std::string& ZbftMessage::_internal_backup_enc_data() const {
  return backup_enc_data_.Get();
}
inline void ZbftMessage::_internal_set_backup_enc_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  backup_enc_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_backup_enc_data() {
  _has_bits_[0] |= 0x00000008u;
  return backup_enc_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_backup_enc_data() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.backup_enc_data)
  if (!_internal_has_backup_enc_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = backup_enc_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (backup_enc_data_.IsDefault()) {
    backup_enc_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_backup_enc_data(std::string* backup_enc_data) {
  if (backup_enc_data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  backup_enc_data_.SetAllocated(backup_enc_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (backup_enc_data_.IsDefault()) {
    backup_enc_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.backup_enc_data)
}

// optional uint64 elect_height = 13;
inline bool ZbftMessage::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ZbftMessage::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void ZbftMessage::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00010000u;
}
inline uint64_t ZbftMessage::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t ZbftMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.elect_height)
  return _internal_elect_height();
}
inline void ZbftMessage::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00010000u;
  elect_height_ = value;
}
inline void ZbftMessage::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.elect_height)
}

// optional bytes bls_sign_x = 14;
inline bool ZbftMessage::_internal_has_bls_sign_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ZbftMessage::has_bls_sign_x() const {
  return _internal_has_bls_sign_x();
}
inline void ZbftMessage::clear_bls_sign_x() {
  bls_sign_x_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ZbftMessage::bls_sign_x() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.bls_sign_x)
  return _internal_bls_sign_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_bls_sign_x(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 bls_sign_x_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.bls_sign_x)
}
inline std::string* ZbftMessage::mutable_bls_sign_x() {
  std::string* _s = _internal_mutable_bls_sign_x();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.bls_sign_x)
  return _s;
}
inline const std::string& ZbftMessage::_internal_bls_sign_x() const {
  return bls_sign_x_.Get();
}
inline void ZbftMessage::_internal_set_bls_sign_x(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bls_sign_x_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_bls_sign_x() {
  _has_bits_[0] |= 0x00000010u;
  return bls_sign_x_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_bls_sign_x() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.bls_sign_x)
  if (!_internal_has_bls_sign_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = bls_sign_x_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_x_.IsDefault()) {
    bls_sign_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_bls_sign_x(std::string* bls_sign_x) {
  if (bls_sign_x != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bls_sign_x_.SetAllocated(bls_sign_x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_x_.IsDefault()) {
    bls_sign_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.bls_sign_x)
}

// optional bytes bls_sign_y = 15;
inline bool ZbftMessage::_internal_has_bls_sign_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ZbftMessage::has_bls_sign_y() const {
  return _internal_has_bls_sign_y();
}
inline void ZbftMessage::clear_bls_sign_y() {
  bls_sign_y_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ZbftMessage::bls_sign_y() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.bls_sign_y)
  return _internal_bls_sign_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_bls_sign_y(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 bls_sign_y_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.bls_sign_y)
}
inline std::string* ZbftMessage::mutable_bls_sign_y() {
  std::string* _s = _internal_mutable_bls_sign_y();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.bls_sign_y)
  return _s;
}
inline const std::string& ZbftMessage::_internal_bls_sign_y() const {
  return bls_sign_y_.Get();
}
inline void ZbftMessage::_internal_set_bls_sign_y(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  bls_sign_y_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_bls_sign_y() {
  _has_bits_[0] |= 0x00000020u;
  return bls_sign_y_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_bls_sign_y() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.bls_sign_y)
  if (!_internal_has_bls_sign_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = bls_sign_y_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_y_.IsDefault()) {
    bls_sign_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_bls_sign_y(std::string* bls_sign_y) {
  if (bls_sign_y != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  bls_sign_y_.SetAllocated(bls_sign_y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_sign_y_.IsDefault()) {
    bls_sign_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.bls_sign_y)
}

// optional uint64 prepare_height = 16;
inline bool ZbftMessage::_internal_has_prepare_height() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ZbftMessage::has_prepare_height() const {
  return _internal_has_prepare_height();
}
inline void ZbftMessage::clear_prepare_height() {
  prepare_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00020000u;
}
inline uint64_t ZbftMessage::_internal_prepare_height() const {
  return prepare_height_;
}
inline uint64_t ZbftMessage::prepare_height() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.prepare_height)
  return _internal_prepare_height();
}
inline void ZbftMessage::_internal_set_prepare_height(uint64_t value) {
  _has_bits_[0] |= 0x00020000u;
  prepare_height_ = value;
}
inline void ZbftMessage::set_prepare_height(uint64_t value) {
  _internal_set_prepare_height(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.prepare_height)
}

// optional bytes prepare_hash = 17;
inline bool ZbftMessage::_internal_has_prepare_hash() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ZbftMessage::has_prepare_hash() const {
  return _internal_has_prepare_hash();
}
inline void ZbftMessage::clear_prepare_hash() {
  prepare_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ZbftMessage::prepare_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.prepare_hash)
  return _internal_prepare_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_prepare_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 prepare_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.prepare_hash)
}
inline std::string* ZbftMessage::mutable_prepare_hash() {
  std::string* _s = _internal_mutable_prepare_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.prepare_hash)
  return _s;
}
inline const std::string& ZbftMessage::_internal_prepare_hash() const {
  return prepare_hash_.Get();
}
inline void ZbftMessage::_internal_set_prepare_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  prepare_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_prepare_hash() {
  _has_bits_[0] |= 0x00000040u;
  return prepare_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_prepare_hash() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.prepare_hash)
  if (!_internal_has_prepare_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = prepare_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prepare_hash_.IsDefault()) {
    prepare_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_prepare_hash(std::string* prepare_hash) {
  if (prepare_hash != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  prepare_hash_.SetAllocated(prepare_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prepare_hash_.IsDefault()) {
    prepare_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.prepare_hash)
}

// optional .zjchain.block.protobuf.Block block = 18;
inline bool ZbftMessage::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool ZbftMessage::has_block() const {
  return _internal_has_block();
}
inline const ::zjchain::block::protobuf::Block& ZbftMessage::_internal_block() const {
  const ::zjchain::block::protobuf::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::Block&>(
      ::zjchain::block::protobuf::_Block_default_instance_);
}
inline const ::zjchain::block::protobuf::Block& ZbftMessage::block() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.block)
  return _internal_block();
}
inline void ZbftMessage::unsafe_arena_set_allocated_block(
    ::zjchain::block::protobuf::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.zbft.protobuf.ZbftMessage.block)
}
inline ::zjchain::block::protobuf::Block* ZbftMessage::release_block() {
  _has_bits_[0] &= ~0x00000200u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::Block* ZbftMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.block)
  _has_bits_[0] &= ~0x00000200u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::Block* ZbftMessage::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000200u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::zjchain::block::protobuf::Block* ZbftMessage::mutable_block() {
  ::zjchain::block::protobuf::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.block)
  return _msg;
}
inline void ZbftMessage::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.block)
}

// optional bool sync_block = 19;
inline bool ZbftMessage::_internal_has_sync_block() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ZbftMessage::has_sync_block() const {
  return _internal_has_sync_block();
}
inline void ZbftMessage::clear_sync_block() {
  sync_block_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ZbftMessage::_internal_sync_block() const {
  return sync_block_;
}
inline bool ZbftMessage::sync_block() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.sync_block)
  return _internal_sync_block();
}
inline void ZbftMessage::_internal_set_sync_block(bool value) {
  _has_bits_[0] |= 0x00004000u;
  sync_block_ = value;
}
inline void ZbftMessage::set_sync_block(bool value) {
  _internal_set_sync_block(value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.sync_block)
}

// repeated uint32 ips = 20;
inline int ZbftMessage::_internal_ips_size() const {
  return ips_.size();
}
inline int ZbftMessage::ips_size() const {
  return _internal_ips_size();
}
inline void ZbftMessage::clear_ips() {
  ips_.Clear();
}
inline uint32_t ZbftMessage::_internal_ips(int index) const {
  return ips_.Get(index);
}
inline uint32_t ZbftMessage::ips(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.ips)
  return _internal_ips(index);
}
inline void ZbftMessage::set_ips(int index, uint32_t value) {
  ips_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.ips)
}
inline void ZbftMessage::_internal_add_ips(uint32_t value) {
  ips_.Add(value);
}
inline void ZbftMessage::add_ips(uint32_t value) {
  _internal_add_ips(value);
  // @@protoc_insertion_point(field_add:zjchain.zbft.protobuf.ZbftMessage.ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ZbftMessage::_internal_ips() const {
  return ips_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ZbftMessage::ips() const {
  // @@protoc_insertion_point(field_list:zjchain.zbft.protobuf.ZbftMessage.ips)
  return _internal_ips();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ZbftMessage::_internal_mutable_ips() {
  return &ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ZbftMessage::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.zbft.protobuf.ZbftMessage.ips)
  return _internal_mutable_ips();
}

// optional bytes oppose_prepare_gid = 21;
inline bool ZbftMessage::_internal_has_oppose_prepare_gid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ZbftMessage::has_oppose_prepare_gid() const {
  return _internal_has_oppose_prepare_gid();
}
inline void ZbftMessage::clear_oppose_prepare_gid() {
  oppose_prepare_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ZbftMessage::oppose_prepare_gid() const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
  return _internal_oppose_prepare_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZbftMessage::set_oppose_prepare_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 oppose_prepare_gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
}
inline std::string* ZbftMessage::mutable_oppose_prepare_gid() {
  std::string* _s = _internal_mutable_oppose_prepare_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
  return _s;
}
inline const std::string& ZbftMessage::_internal_oppose_prepare_gid() const {
  return oppose_prepare_gid_.Get();
}
inline void ZbftMessage::_internal_set_oppose_prepare_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  oppose_prepare_gid_.Set(value, GetArenaForAllocation());
}
inline std::string* ZbftMessage::_internal_mutable_oppose_prepare_gid() {
  _has_bits_[0] |= 0x00000080u;
  return oppose_prepare_gid_.Mutable(GetArenaForAllocation());
}
inline std::string* ZbftMessage::release_oppose_prepare_gid() {
  // @@protoc_insertion_point(field_release:zjchain.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
  if (!_internal_has_oppose_prepare_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = oppose_prepare_gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oppose_prepare_gid_.IsDefault()) {
    oppose_prepare_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZbftMessage::set_allocated_oppose_prepare_gid(std::string* oppose_prepare_gid) {
  if (oppose_prepare_gid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  oppose_prepare_gid_.SetAllocated(oppose_prepare_gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oppose_prepare_gid_.IsDefault()) {
    oppose_prepare_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
}

// repeated uint32 invaid_txs = 22;
inline int ZbftMessage::_internal_invaid_txs_size() const {
  return invaid_txs_.size();
}
inline int ZbftMessage::invaid_txs_size() const {
  return _internal_invaid_txs_size();
}
inline void ZbftMessage::clear_invaid_txs() {
  invaid_txs_.Clear();
}
inline uint32_t ZbftMessage::_internal_invaid_txs(int index) const {
  return invaid_txs_.Get(index);
}
inline uint32_t ZbftMessage::invaid_txs(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.zbft.protobuf.ZbftMessage.invaid_txs)
  return _internal_invaid_txs(index);
}
inline void ZbftMessage::set_invaid_txs(int index, uint32_t value) {
  invaid_txs_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.zbft.protobuf.ZbftMessage.invaid_txs)
}
inline void ZbftMessage::_internal_add_invaid_txs(uint32_t value) {
  invaid_txs_.Add(value);
}
inline void ZbftMessage::add_invaid_txs(uint32_t value) {
  _internal_add_invaid_txs(value);
  // @@protoc_insertion_point(field_add:zjchain.zbft.protobuf.ZbftMessage.invaid_txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ZbftMessage::_internal_invaid_txs() const {
  return invaid_txs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ZbftMessage::invaid_txs() const {
  // @@protoc_insertion_point(field_list:zjchain.zbft.protobuf.ZbftMessage.invaid_txs)
  return _internal_invaid_txs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ZbftMessage::_internal_mutable_invaid_txs() {
  return &invaid_txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ZbftMessage::mutable_invaid_txs() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.zbft.protobuf.ZbftMessage.invaid_txs)
  return _internal_mutable_invaid_txs();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace zbft
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fzbft_2eproto
