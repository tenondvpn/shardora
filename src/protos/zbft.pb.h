// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/zbft.proto

#ifndef PROTOBUF_INCLUDED_protos_2fzbft_2eproto
#define PROTOBUF_INCLUDED_protos_2fzbft_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/block.pb.h"
#include "protos/pools.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fzbft_2eproto 

namespace protobuf_protos_2fzbft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fzbft_2eproto
namespace shardora {
namespace zbft {
namespace protobuf {
class TxBft;
class TxBftDefaultTypeInternal;
extern TxBftDefaultTypeInternal _TxBft_default_instance_;
class ZbftMessage;
class ZbftMessageDefaultTypeInternal;
extern ZbftMessageDefaultTypeInternal _ZbftMessage_default_instance_;
}  // namespace protobuf
}  // namespace zbft
}  // namespace shardora
namespace google {
namespace protobuf {
template<> ::shardora::zbft::protobuf::TxBft* Arena::CreateMaybeMessage<::shardora::zbft::protobuf::TxBft>(Arena*);
template<> ::shardora::zbft::protobuf::ZbftMessage* Arena::CreateMaybeMessage<::shardora::zbft::protobuf::ZbftMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace shardora {
namespace zbft {
namespace protobuf {

// ===================================================================

class TxBft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shardora.zbft.protobuf.TxBft) */ {
 public:
  TxBft();
  virtual ~TxBft();

  TxBft(const TxBft& from);

  inline TxBft& operator=(const TxBft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxBft(TxBft&& from) noexcept
    : TxBft() {
    *this = ::std::move(from);
  }

  inline TxBft& operator=(TxBft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxBft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxBft* internal_default_instance() {
    return reinterpret_cast<const TxBft*>(
               &_TxBft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TxBft* other);
  friend void swap(TxBft& a, TxBft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxBft* New() const final {
    return CreateMaybeMessage<TxBft>(NULL);
  }

  TxBft* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxBft>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxBft& from);
  void MergeFrom(const TxBft& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes tx_hash_list = 4;
  int tx_hash_list_size() const;
  void clear_tx_hash_list();
  static const int kTxHashListFieldNumber = 4;
  const ::std::string& tx_hash_list(int index) const;
  ::std::string* mutable_tx_hash_list(int index);
  void set_tx_hash_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tx_hash_list(int index, ::std::string&& value);
  #endif
  void set_tx_hash_list(int index, const char* value);
  void set_tx_hash_list(int index, const void* value, size_t size);
  ::std::string* add_tx_hash_list();
  void add_tx_hash_list(const ::std::string& value);
  #if LANG_CXX11
  void add_tx_hash_list(::std::string&& value);
  #endif
  void add_tx_hash_list(const char* value);
  void add_tx_hash_list(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tx_hash_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tx_hash_list();

  // repeated .shardora.pools.protobuf.TxMessage txs = 7;
  int txs_size() const;
  void clear_txs();
  static const int kTxsFieldNumber = 7;
  ::shardora::pools::protobuf::TxMessage* mutable_txs(int index);
  ::google::protobuf::RepeatedPtrField< ::shardora::pools::protobuf::TxMessage >*
      mutable_txs();
  const ::shardora::pools::protobuf::TxMessage& txs(int index) const;
  ::shardora::pools::protobuf::TxMessage* add_txs();
  const ::google::protobuf::RepeatedPtrField< ::shardora::pools::protobuf::TxMessage >&
      txs() const;

  // optional bytes prepare_final_hash = 2;
  bool has_prepare_final_hash() const;
  void clear_prepare_final_hash();
  static const int kPrepareFinalHashFieldNumber = 2;
  const ::std::string& prepare_final_hash() const;
  void set_prepare_final_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_prepare_final_hash(::std::string&& value);
  #endif
  void set_prepare_final_hash(const char* value);
  void set_prepare_final_hash(const void* value, size_t size);
  ::std::string* mutable_prepare_final_hash();
  ::std::string* release_prepare_final_hash();
  void set_allocated_prepare_final_hash(::std::string* prepare_final_hash);

  // optional .shardora.block.protobuf.Block block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  private:
  const ::shardora::block::protobuf::Block& _internal_block() const;
  public:
  const ::shardora::block::protobuf::Block& block() const;
  ::shardora::block::protobuf::Block* release_block();
  ::shardora::block::protobuf::Block* mutable_block();
  void set_allocated_block(::shardora::block::protobuf::Block* block);

  // optional uint64 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // optional uint64 time_stamp = 6;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 6;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // optional .shardora.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
  bool has_tx_type() const;
  void clear_tx_type();
  static const int kTxTypeFieldNumber = 5;
  ::shardora::pools::protobuf::StepType tx_type() const;
  void set_tx_type(::shardora::pools::protobuf::StepType value);

  // @@protoc_insertion_point(class_scope:shardora.zbft.protobuf.TxBft)
 private:
  void set_has_block();
  void clear_has_block();
  void set_has_prepare_final_hash();
  void clear_has_prepare_final_hash();
  void set_has_height();
  void clear_has_height();
  void set_has_tx_type();
  void clear_has_tx_type();
  void set_has_time_stamp();
  void clear_has_time_stamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tx_hash_list_;
  ::google::protobuf::RepeatedPtrField< ::shardora::pools::protobuf::TxMessage > txs_;
  ::google::protobuf::internal::ArenaStringPtr prepare_final_hash_;
  ::shardora::block::protobuf::Block* block_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 time_stamp_;
  int tx_type_;
  friend struct ::protobuf_protos_2fzbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ZbftMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shardora.zbft.protobuf.ZbftMessage) */ {
 public:
  ZbftMessage();
  virtual ~ZbftMessage();

  ZbftMessage(const ZbftMessage& from);

  inline ZbftMessage& operator=(const ZbftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZbftMessage(ZbftMessage&& from) noexcept
    : ZbftMessage() {
    *this = ::std::move(from);
  }

  inline ZbftMessage& operator=(ZbftMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZbftMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZbftMessage* internal_default_instance() {
    return reinterpret_cast<const ZbftMessage*>(
               &_ZbftMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ZbftMessage* other);
  friend void swap(ZbftMessage& a, ZbftMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZbftMessage* New() const final {
    return CreateMaybeMessage<ZbftMessage>(NULL);
  }

  ZbftMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZbftMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZbftMessage& from);
  void MergeFrom(const ZbftMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZbftMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ips = 20;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 20;
  ::google::protobuf::uint32 ips(int index) const;
  void set_ips(int index, ::google::protobuf::uint32 value);
  void add_ips(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ips() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ips();

  // repeated uint32 invaid_txs = 22;
  int invaid_txs_size() const;
  void clear_invaid_txs();
  static const int kInvaidTxsFieldNumber = 22;
  ::google::protobuf::uint32 invaid_txs(int index) const;
  void set_invaid_txs(int index, ::google::protobuf::uint32 value);
  void add_invaid_txs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      invaid_txs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_invaid_txs();

  // optional bytes prepare_gid = 1;
  bool has_prepare_gid() const;
  void clear_prepare_gid();
  static const int kPrepareGidFieldNumber = 1;
  const ::std::string& prepare_gid() const;
  void set_prepare_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_prepare_gid(::std::string&& value);
  #endif
  void set_prepare_gid(const char* value);
  void set_prepare_gid(const void* value, size_t size);
  ::std::string* mutable_prepare_gid();
  ::std::string* release_prepare_gid();
  void set_allocated_prepare_gid(::std::string* prepare_gid);

  // optional bytes precommit_gid = 2;
  bool has_precommit_gid() const;
  void clear_precommit_gid();
  static const int kPrecommitGidFieldNumber = 2;
  const ::std::string& precommit_gid() const;
  void set_precommit_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_precommit_gid(::std::string&& value);
  #endif
  void set_precommit_gid(const char* value);
  void set_precommit_gid(const void* value, size_t size);
  ::std::string* mutable_precommit_gid();
  ::std::string* release_precommit_gid();
  void set_allocated_precommit_gid(::std::string* precommit_gid);

  // optional bytes commit_gid = 3;
  bool has_commit_gid() const;
  void clear_commit_gid();
  static const int kCommitGidFieldNumber = 3;
  const ::std::string& commit_gid() const;
  void set_commit_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_commit_gid(::std::string&& value);
  #endif
  void set_commit_gid(const char* value);
  void set_commit_gid(const void* value, size_t size);
  ::std::string* mutable_commit_gid();
  ::std::string* release_commit_gid();
  void set_allocated_commit_gid(::std::string* commit_gid);

  // optional bytes backup_enc_data = 12;
  bool has_backup_enc_data() const;
  void clear_backup_enc_data();
  static const int kBackupEncDataFieldNumber = 12;
  const ::std::string& backup_enc_data() const;
  void set_backup_enc_data(const ::std::string& value);
  #if LANG_CXX11
  void set_backup_enc_data(::std::string&& value);
  #endif
  void set_backup_enc_data(const char* value);
  void set_backup_enc_data(const void* value, size_t size);
  ::std::string* mutable_backup_enc_data();
  ::std::string* release_backup_enc_data();
  void set_allocated_backup_enc_data(::std::string* backup_enc_data);

  // optional bytes bls_sign_x = 14;
  bool has_bls_sign_x() const;
  void clear_bls_sign_x();
  static const int kBlsSignXFieldNumber = 14;
  const ::std::string& bls_sign_x() const;
  void set_bls_sign_x(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_sign_x(::std::string&& value);
  #endif
  void set_bls_sign_x(const char* value);
  void set_bls_sign_x(const void* value, size_t size);
  ::std::string* mutable_bls_sign_x();
  ::std::string* release_bls_sign_x();
  void set_allocated_bls_sign_x(::std::string* bls_sign_x);

  // optional bytes bls_sign_y = 15;
  bool has_bls_sign_y() const;
  void clear_bls_sign_y();
  static const int kBlsSignYFieldNumber = 15;
  const ::std::string& bls_sign_y() const;
  void set_bls_sign_y(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_sign_y(::std::string&& value);
  #endif
  void set_bls_sign_y(const char* value);
  void set_bls_sign_y(const void* value, size_t size);
  ::std::string* mutable_bls_sign_y();
  ::std::string* release_bls_sign_y();
  void set_allocated_bls_sign_y(::std::string* bls_sign_y);

  // optional bytes prepare_hash = 17;
  bool has_prepare_hash() const;
  void clear_prepare_hash();
  static const int kPrepareHashFieldNumber = 17;
  const ::std::string& prepare_hash() const;
  void set_prepare_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_prepare_hash(::std::string&& value);
  #endif
  void set_prepare_hash(const char* value);
  void set_prepare_hash(const void* value, size_t size);
  ::std::string* mutable_prepare_hash();
  ::std::string* release_prepare_hash();
  void set_allocated_prepare_hash(::std::string* prepare_hash);

  // optional bytes oppose_prepare_gid = 21;
  bool has_oppose_prepare_gid() const;
  void clear_oppose_prepare_gid();
  static const int kOpposePrepareGidFieldNumber = 21;
  const ::std::string& oppose_prepare_gid() const;
  void set_oppose_prepare_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_oppose_prepare_gid(::std::string&& value);
  #endif
  void set_oppose_prepare_gid(const char* value);
  void set_oppose_prepare_gid(const void* value, size_t size);
  ::std::string* mutable_oppose_prepare_gid();
  ::std::string* release_oppose_prepare_gid();
  void set_allocated_oppose_prepare_gid(::std::string* oppose_prepare_gid);

  // optional .shardora.zbft.protobuf.TxBft tx_bft = 10;
  bool has_tx_bft() const;
  void clear_tx_bft();
  static const int kTxBftFieldNumber = 10;
  private:
  const ::shardora::zbft::protobuf::TxBft& _internal_tx_bft() const;
  public:
  const ::shardora::zbft::protobuf::TxBft& tx_bft() const;
  ::shardora::zbft::protobuf::TxBft* release_tx_bft();
  ::shardora::zbft::protobuf::TxBft* mutable_tx_bft();
  void set_allocated_tx_bft(::shardora::zbft::protobuf::TxBft* tx_bft);

  // optional .shardora.block.protobuf.Block block = 18;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 18;
  private:
  const ::shardora::block::protobuf::Block& _internal_block() const;
  public:
  const ::shardora::block::protobuf::Block& block() const;
  ::shardora::block::protobuf::Block* release_block();
  ::shardora::block::protobuf::Block* mutable_block();
  void set_allocated_block(::shardora::block::protobuf::Block* block);

  // optional uint32 net_id = 5;
  bool has_net_id() const;
  void clear_net_id();
  static const int kNetIdFieldNumber = 5;
  ::google::protobuf::uint32 net_id() const;
  void set_net_id(::google::protobuf::uint32 value);

  // optional int32 error = 9;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 9;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // optional bool agree_precommit = 6 [default = false];
  bool has_agree_precommit() const;
  void clear_agree_precommit();
  static const int kAgreePrecommitFieldNumber = 6;
  bool agree_precommit() const;
  void set_agree_precommit(bool value);

  // optional bool agree_commit = 7 [default = false];
  bool has_agree_commit() const;
  void clear_agree_commit();
  static const int kAgreeCommitFieldNumber = 7;
  bool agree_commit() const;
  void set_agree_commit(bool value);

  // optional bool sync_block = 19;
  bool has_sync_block() const;
  void clear_sync_block();
  static const int kSyncBlockFieldNumber = 19;
  bool sync_block() const;
  void set_sync_block(bool value);

  // optional uint32 member_index = 11;
  bool has_member_index() const;
  void clear_member_index();
  static const int kMemberIndexFieldNumber = 11;
  ::google::protobuf::uint32 member_index() const;
  void set_member_index(::google::protobuf::uint32 value);

  // optional uint64 elect_height = 13;
  bool has_elect_height() const;
  void clear_elect_height();
  static const int kElectHeightFieldNumber = 13;
  ::google::protobuf::uint64 elect_height() const;
  void set_elect_height(::google::protobuf::uint64 value);

  // optional uint64 prepare_height = 16;
  bool has_prepare_height() const;
  void clear_prepare_height();
  static const int kPrepareHeightFieldNumber = 16;
  ::google::protobuf::uint64 prepare_height() const;
  void set_prepare_height(::google::protobuf::uint64 value);

  // optional int32 leader_idx = 4 [default = -1];
  bool has_leader_idx() const;
  void clear_leader_idx();
  static const int kLeaderIdxFieldNumber = 4;
  ::google::protobuf::int32 leader_idx() const;
  void set_leader_idx(::google::protobuf::int32 value);

  // optional uint32 pool_index = 8 [default = 4294967295];
  bool has_pool_index() const;
  void clear_pool_index();
  static const int kPoolIndexFieldNumber = 8;
  ::google::protobuf::uint32 pool_index() const;
  void set_pool_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:shardora.zbft.protobuf.ZbftMessage)
 private:
  void set_has_prepare_gid();
  void clear_has_prepare_gid();
  void set_has_precommit_gid();
  void clear_has_precommit_gid();
  void set_has_commit_gid();
  void clear_has_commit_gid();
  void set_has_leader_idx();
  void clear_has_leader_idx();
  void set_has_net_id();
  void clear_has_net_id();
  void set_has_agree_precommit();
  void clear_has_agree_precommit();
  void set_has_agree_commit();
  void clear_has_agree_commit();
  void set_has_pool_index();
  void clear_has_pool_index();
  void set_has_error();
  void clear_has_error();
  void set_has_tx_bft();
  void clear_has_tx_bft();
  void set_has_member_index();
  void clear_has_member_index();
  void set_has_backup_enc_data();
  void clear_has_backup_enc_data();
  void set_has_elect_height();
  void clear_has_elect_height();
  void set_has_bls_sign_x();
  void clear_has_bls_sign_x();
  void set_has_bls_sign_y();
  void clear_has_bls_sign_y();
  void set_has_prepare_height();
  void clear_has_prepare_height();
  void set_has_prepare_hash();
  void clear_has_prepare_hash();
  void set_has_block();
  void clear_has_block();
  void set_has_sync_block();
  void clear_has_sync_block();
  void set_has_oppose_prepare_gid();
  void clear_has_oppose_prepare_gid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ips_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > invaid_txs_;
  ::google::protobuf::internal::ArenaStringPtr prepare_gid_;
  ::google::protobuf::internal::ArenaStringPtr precommit_gid_;
  ::google::protobuf::internal::ArenaStringPtr commit_gid_;
  ::google::protobuf::internal::ArenaStringPtr backup_enc_data_;
  ::google::protobuf::internal::ArenaStringPtr bls_sign_x_;
  ::google::protobuf::internal::ArenaStringPtr bls_sign_y_;
  ::google::protobuf::internal::ArenaStringPtr prepare_hash_;
  ::google::protobuf::internal::ArenaStringPtr oppose_prepare_gid_;
  ::shardora::zbft::protobuf::TxBft* tx_bft_;
  ::shardora::block::protobuf::Block* block_;
  ::google::protobuf::uint32 net_id_;
  ::google::protobuf::int32 error_;
  bool agree_precommit_;
  bool agree_commit_;
  bool sync_block_;
  ::google::protobuf::uint32 member_index_;
  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::uint64 prepare_height_;
  ::google::protobuf::int32 leader_idx_;
  ::google::protobuf::uint32 pool_index_;
  friend struct ::protobuf_protos_2fzbft_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxBft

// optional .shardora.block.protobuf.Block block = 1;
inline bool TxBft::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxBft::set_has_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxBft::clear_has_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::shardora::block::protobuf::Block& TxBft::_internal_block() const {
  return *block_;
}
inline const ::shardora::block::protobuf::Block& TxBft::block() const {
  const ::shardora::block::protobuf::Block* p = block_;
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.TxBft.block)
  return p != NULL ? *p : *reinterpret_cast<const ::shardora::block::protobuf::Block*>(
      &::shardora::block::protobuf::_Block_default_instance_);
}
inline ::shardora::block::protobuf::Block* TxBft::release_block() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.TxBft.block)
  clear_has_block();
  ::shardora::block::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline ::shardora::block::protobuf::Block* TxBft::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    auto* p = CreateMaybeMessage<::shardora::block::protobuf::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.TxBft.block)
  return block_;
}
inline void TxBft::set_allocated_block(::shardora::block::protobuf::Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(block_);
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
  } else {
    clear_has_block();
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.TxBft.block)
}

// optional bytes prepare_final_hash = 2;
inline bool TxBft::has_prepare_final_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxBft::set_has_prepare_final_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxBft::clear_has_prepare_final_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxBft::clear_prepare_final_hash() {
  prepare_final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prepare_final_hash();
}
inline const ::std::string& TxBft::prepare_final_hash() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.TxBft.prepare_final_hash)
  return prepare_final_hash_.GetNoArena();
}
inline void TxBft::set_prepare_final_hash(const ::std::string& value) {
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.TxBft.prepare_final_hash)
}
#if LANG_CXX11
inline void TxBft::set_prepare_final_hash(::std::string&& value) {
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.TxBft.prepare_final_hash)
}
#endif
inline void TxBft::set_prepare_final_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.TxBft.prepare_final_hash)
}
inline void TxBft::set_prepare_final_hash(const void* value, size_t size) {
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.TxBft.prepare_final_hash)
}
inline ::std::string* TxBft::mutable_prepare_final_hash() {
  set_has_prepare_final_hash();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.TxBft.prepare_final_hash)
  return prepare_final_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBft::release_prepare_final_hash() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.TxBft.prepare_final_hash)
  if (!has_prepare_final_hash()) {
    return NULL;
  }
  clear_has_prepare_final_hash();
  return prepare_final_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBft::set_allocated_prepare_final_hash(::std::string* prepare_final_hash) {
  if (prepare_final_hash != NULL) {
    set_has_prepare_final_hash();
  } else {
    clear_has_prepare_final_hash();
  }
  prepare_final_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepare_final_hash);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.TxBft.prepare_final_hash)
}

// optional uint64 height = 3;
inline bool TxBft::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxBft::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxBft::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxBft::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 TxBft::height() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.TxBft.height)
  return height_;
}
inline void TxBft::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.TxBft.height)
}

// repeated bytes tx_hash_list = 4;
inline int TxBft::tx_hash_list_size() const {
  return tx_hash_list_.size();
}
inline void TxBft::clear_tx_hash_list() {
  tx_hash_list_.Clear();
}
inline const ::std::string& TxBft::tx_hash_list(int index) const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.TxBft.tx_hash_list)
  return tx_hash_list_.Get(index);
}
inline ::std::string* TxBft::mutable_tx_hash_list(int index) {
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.TxBft.tx_hash_list)
  return tx_hash_list_.Mutable(index);
}
inline void TxBft::set_tx_hash_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.TxBft.tx_hash_list)
  tx_hash_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TxBft::set_tx_hash_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.TxBft.tx_hash_list)
  tx_hash_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TxBft::set_tx_hash_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tx_hash_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::set_tx_hash_list(int index, const void* value, size_t size) {
  tx_hash_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.TxBft.tx_hash_list)
}
inline ::std::string* TxBft::add_tx_hash_list() {
  // @@protoc_insertion_point(field_add_mutable:shardora.zbft.protobuf.TxBft.tx_hash_list)
  return tx_hash_list_.Add();
}
inline void TxBft::add_tx_hash_list(const ::std::string& value) {
  tx_hash_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:shardora.zbft.protobuf.TxBft.tx_hash_list)
}
#if LANG_CXX11
inline void TxBft::add_tx_hash_list(::std::string&& value) {
  tx_hash_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:shardora.zbft.protobuf.TxBft.tx_hash_list)
}
#endif
inline void TxBft::add_tx_hash_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tx_hash_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:shardora.zbft.protobuf.TxBft.tx_hash_list)
}
inline void TxBft::add_tx_hash_list(const void* value, size_t size) {
  tx_hash_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:shardora.zbft.protobuf.TxBft.tx_hash_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxBft::tx_hash_list() const {
  // @@protoc_insertion_point(field_list:shardora.zbft.protobuf.TxBft.tx_hash_list)
  return tx_hash_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TxBft::mutable_tx_hash_list() {
  // @@protoc_insertion_point(field_mutable_list:shardora.zbft.protobuf.TxBft.tx_hash_list)
  return &tx_hash_list_;
}

// optional .shardora.pools.protobuf.StepType tx_type = 5 [default = kNormalFrom];
inline bool TxBft::has_tx_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxBft::set_has_tx_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxBft::clear_has_tx_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxBft::clear_tx_type() {
  tx_type_ = 0;
  clear_has_tx_type();
}
inline ::shardora::pools::protobuf::StepType TxBft::tx_type() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.TxBft.tx_type)
  return static_cast< ::shardora::pools::protobuf::StepType >(tx_type_);
}
inline void TxBft::set_tx_type(::shardora::pools::protobuf::StepType value) {
  assert(::shardora::pools::protobuf::StepType_IsValid(value));
  set_has_tx_type();
  tx_type_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.TxBft.tx_type)
}

// optional uint64 time_stamp = 6;
inline bool TxBft::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxBft::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxBft::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxBft::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::uint64 TxBft::time_stamp() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.TxBft.time_stamp)
  return time_stamp_;
}
inline void TxBft::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.TxBft.time_stamp)
}

// repeated .shardora.pools.protobuf.TxMessage txs = 7;
inline int TxBft::txs_size() const {
  return txs_.size();
}
inline ::shardora::pools::protobuf::TxMessage* TxBft::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.TxBft.txs)
  return txs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::shardora::pools::protobuf::TxMessage >*
TxBft::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:shardora.zbft.protobuf.TxBft.txs)
  return &txs_;
}
inline const ::shardora::pools::protobuf::TxMessage& TxBft::txs(int index) const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.TxBft.txs)
  return txs_.Get(index);
}
inline ::shardora::pools::protobuf::TxMessage* TxBft::add_txs() {
  // @@protoc_insertion_point(field_add:shardora.zbft.protobuf.TxBft.txs)
  return txs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::shardora::pools::protobuf::TxMessage >&
TxBft::txs() const {
  // @@protoc_insertion_point(field_list:shardora.zbft.protobuf.TxBft.txs)
  return txs_;
}

// -------------------------------------------------------------------

// ZbftMessage

// optional bytes prepare_gid = 1;
inline bool ZbftMessage::has_prepare_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZbftMessage::set_has_prepare_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZbftMessage::clear_has_prepare_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZbftMessage::clear_prepare_gid() {
  prepare_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prepare_gid();
}
inline const ::std::string& ZbftMessage::prepare_gid() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
  return prepare_gid_.GetNoArena();
}
inline void ZbftMessage::set_prepare_gid(const ::std::string& value) {
  set_has_prepare_gid();
  prepare_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
}
#if LANG_CXX11
inline void ZbftMessage::set_prepare_gid(::std::string&& value) {
  set_has_prepare_gid();
  prepare_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
}
#endif
inline void ZbftMessage::set_prepare_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prepare_gid();
  prepare_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
}
inline void ZbftMessage::set_prepare_gid(const void* value, size_t size) {
  set_has_prepare_gid();
  prepare_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
}
inline ::std::string* ZbftMessage::mutable_prepare_gid() {
  set_has_prepare_gid();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
  return prepare_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_prepare_gid() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
  if (!has_prepare_gid()) {
    return NULL;
  }
  clear_has_prepare_gid();
  return prepare_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_prepare_gid(::std::string* prepare_gid) {
  if (prepare_gid != NULL) {
    set_has_prepare_gid();
  } else {
    clear_has_prepare_gid();
  }
  prepare_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepare_gid);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.prepare_gid)
}

// optional bytes precommit_gid = 2;
inline bool ZbftMessage::has_precommit_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZbftMessage::set_has_precommit_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZbftMessage::clear_has_precommit_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZbftMessage::clear_precommit_gid() {
  precommit_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_precommit_gid();
}
inline const ::std::string& ZbftMessage::precommit_gid() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
  return precommit_gid_.GetNoArena();
}
inline void ZbftMessage::set_precommit_gid(const ::std::string& value) {
  set_has_precommit_gid();
  precommit_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
}
#if LANG_CXX11
inline void ZbftMessage::set_precommit_gid(::std::string&& value) {
  set_has_precommit_gid();
  precommit_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
}
#endif
inline void ZbftMessage::set_precommit_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_precommit_gid();
  precommit_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
}
inline void ZbftMessage::set_precommit_gid(const void* value, size_t size) {
  set_has_precommit_gid();
  precommit_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
}
inline ::std::string* ZbftMessage::mutable_precommit_gid() {
  set_has_precommit_gid();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
  return precommit_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_precommit_gid() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
  if (!has_precommit_gid()) {
    return NULL;
  }
  clear_has_precommit_gid();
  return precommit_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_precommit_gid(::std::string* precommit_gid) {
  if (precommit_gid != NULL) {
    set_has_precommit_gid();
  } else {
    clear_has_precommit_gid();
  }
  precommit_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), precommit_gid);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.precommit_gid)
}

// optional bytes commit_gid = 3;
inline bool ZbftMessage::has_commit_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZbftMessage::set_has_commit_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZbftMessage::clear_has_commit_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZbftMessage::clear_commit_gid() {
  commit_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commit_gid();
}
inline const ::std::string& ZbftMessage::commit_gid() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.commit_gid)
  return commit_gid_.GetNoArena();
}
inline void ZbftMessage::set_commit_gid(const ::std::string& value) {
  set_has_commit_gid();
  commit_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.commit_gid)
}
#if LANG_CXX11
inline void ZbftMessage::set_commit_gid(::std::string&& value) {
  set_has_commit_gid();
  commit_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.commit_gid)
}
#endif
inline void ZbftMessage::set_commit_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_commit_gid();
  commit_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.commit_gid)
}
inline void ZbftMessage::set_commit_gid(const void* value, size_t size) {
  set_has_commit_gid();
  commit_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.commit_gid)
}
inline ::std::string* ZbftMessage::mutable_commit_gid() {
  set_has_commit_gid();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.commit_gid)
  return commit_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_commit_gid() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.commit_gid)
  if (!has_commit_gid()) {
    return NULL;
  }
  clear_has_commit_gid();
  return commit_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_commit_gid(::std::string* commit_gid) {
  if (commit_gid != NULL) {
    set_has_commit_gid();
  } else {
    clear_has_commit_gid();
  }
  commit_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commit_gid);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.commit_gid)
}

// optional int32 leader_idx = 4 [default = -1];
inline bool ZbftMessage::has_leader_idx() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ZbftMessage::set_has_leader_idx() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ZbftMessage::clear_has_leader_idx() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ZbftMessage::clear_leader_idx() {
  leader_idx_ = -1;
  clear_has_leader_idx();
}
inline ::google::protobuf::int32 ZbftMessage::leader_idx() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.leader_idx)
  return leader_idx_;
}
inline void ZbftMessage::set_leader_idx(::google::protobuf::int32 value) {
  set_has_leader_idx();
  leader_idx_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.leader_idx)
}

// optional uint32 net_id = 5;
inline bool ZbftMessage::has_net_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZbftMessage::set_has_net_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ZbftMessage::clear_has_net_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ZbftMessage::clear_net_id() {
  net_id_ = 0u;
  clear_has_net_id();
}
inline ::google::protobuf::uint32 ZbftMessage::net_id() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.net_id)
  return net_id_;
}
inline void ZbftMessage::set_net_id(::google::protobuf::uint32 value) {
  set_has_net_id();
  net_id_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.net_id)
}

// optional bool agree_precommit = 6 [default = false];
inline bool ZbftMessage::has_agree_precommit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ZbftMessage::set_has_agree_precommit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ZbftMessage::clear_has_agree_precommit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ZbftMessage::clear_agree_precommit() {
  agree_precommit_ = false;
  clear_has_agree_precommit();
}
inline bool ZbftMessage::agree_precommit() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.agree_precommit)
  return agree_precommit_;
}
inline void ZbftMessage::set_agree_precommit(bool value) {
  set_has_agree_precommit();
  agree_precommit_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.agree_precommit)
}

// optional bool agree_commit = 7 [default = false];
inline bool ZbftMessage::has_agree_commit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ZbftMessage::set_has_agree_commit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ZbftMessage::clear_has_agree_commit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ZbftMessage::clear_agree_commit() {
  agree_commit_ = false;
  clear_has_agree_commit();
}
inline bool ZbftMessage::agree_commit() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.agree_commit)
  return agree_commit_;
}
inline void ZbftMessage::set_agree_commit(bool value) {
  set_has_agree_commit();
  agree_commit_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.agree_commit)
}

// optional uint32 pool_index = 8 [default = 4294967295];
inline bool ZbftMessage::has_pool_index() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ZbftMessage::set_has_pool_index() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ZbftMessage::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ZbftMessage::clear_pool_index() {
  pool_index_ = 4294967295u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 ZbftMessage::pool_index() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.pool_index)
  return pool_index_;
}
inline void ZbftMessage::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.pool_index)
}

// optional int32 error = 9;
inline bool ZbftMessage::has_error() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZbftMessage::set_has_error() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ZbftMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ZbftMessage::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 ZbftMessage::error() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.error)
  return error_;
}
inline void ZbftMessage::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.error)
}

// optional .shardora.zbft.protobuf.TxBft tx_bft = 10;
inline bool ZbftMessage::has_tx_bft() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZbftMessage::set_has_tx_bft() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ZbftMessage::clear_has_tx_bft() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ZbftMessage::clear_tx_bft() {
  if (tx_bft_ != NULL) tx_bft_->Clear();
  clear_has_tx_bft();
}
inline const ::shardora::zbft::protobuf::TxBft& ZbftMessage::_internal_tx_bft() const {
  return *tx_bft_;
}
inline const ::shardora::zbft::protobuf::TxBft& ZbftMessage::tx_bft() const {
  const ::shardora::zbft::protobuf::TxBft* p = tx_bft_;
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.tx_bft)
  return p != NULL ? *p : *reinterpret_cast<const ::shardora::zbft::protobuf::TxBft*>(
      &::shardora::zbft::protobuf::_TxBft_default_instance_);
}
inline ::shardora::zbft::protobuf::TxBft* ZbftMessage::release_tx_bft() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.tx_bft)
  clear_has_tx_bft();
  ::shardora::zbft::protobuf::TxBft* temp = tx_bft_;
  tx_bft_ = NULL;
  return temp;
}
inline ::shardora::zbft::protobuf::TxBft* ZbftMessage::mutable_tx_bft() {
  set_has_tx_bft();
  if (tx_bft_ == NULL) {
    auto* p = CreateMaybeMessage<::shardora::zbft::protobuf::TxBft>(GetArenaNoVirtual());
    tx_bft_ = p;
  }
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.tx_bft)
  return tx_bft_;
}
inline void ZbftMessage::set_allocated_tx_bft(::shardora::zbft::protobuf::TxBft* tx_bft) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_bft_;
  }
  if (tx_bft) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_bft = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_bft, submessage_arena);
    }
    set_has_tx_bft();
  } else {
    clear_has_tx_bft();
  }
  tx_bft_ = tx_bft;
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.tx_bft)
}

// optional uint32 member_index = 11;
inline bool ZbftMessage::has_member_index() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ZbftMessage::set_has_member_index() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ZbftMessage::clear_has_member_index() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ZbftMessage::clear_member_index() {
  member_index_ = 0u;
  clear_has_member_index();
}
inline ::google::protobuf::uint32 ZbftMessage::member_index() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.member_index)
  return member_index_;
}
inline void ZbftMessage::set_member_index(::google::protobuf::uint32 value) {
  set_has_member_index();
  member_index_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.member_index)
}

// optional bytes backup_enc_data = 12;
inline bool ZbftMessage::has_backup_enc_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZbftMessage::set_has_backup_enc_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZbftMessage::clear_has_backup_enc_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZbftMessage::clear_backup_enc_data() {
  backup_enc_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backup_enc_data();
}
inline const ::std::string& ZbftMessage::backup_enc_data() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
  return backup_enc_data_.GetNoArena();
}
inline void ZbftMessage::set_backup_enc_data(const ::std::string& value) {
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
}
#if LANG_CXX11
inline void ZbftMessage::set_backup_enc_data(::std::string&& value) {
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
}
#endif
inline void ZbftMessage::set_backup_enc_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
}
inline void ZbftMessage::set_backup_enc_data(const void* value, size_t size) {
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
}
inline ::std::string* ZbftMessage::mutable_backup_enc_data() {
  set_has_backup_enc_data();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
  return backup_enc_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_backup_enc_data() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
  if (!has_backup_enc_data()) {
    return NULL;
  }
  clear_has_backup_enc_data();
  return backup_enc_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_backup_enc_data(::std::string* backup_enc_data) {
  if (backup_enc_data != NULL) {
    set_has_backup_enc_data();
  } else {
    clear_has_backup_enc_data();
  }
  backup_enc_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backup_enc_data);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.backup_enc_data)
}

// optional uint64 elect_height = 13;
inline bool ZbftMessage::has_elect_height() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ZbftMessage::set_has_elect_height() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ZbftMessage::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ZbftMessage::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 ZbftMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.elect_height)
  return elect_height_;
}
inline void ZbftMessage::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.elect_height)
}

// optional bytes bls_sign_x = 14;
inline bool ZbftMessage::has_bls_sign_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZbftMessage::set_has_bls_sign_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZbftMessage::clear_has_bls_sign_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZbftMessage::clear_bls_sign_x() {
  bls_sign_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_sign_x();
}
inline const ::std::string& ZbftMessage::bls_sign_x() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
  return bls_sign_x_.GetNoArena();
}
inline void ZbftMessage::set_bls_sign_x(const ::std::string& value) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
}
#if LANG_CXX11
inline void ZbftMessage::set_bls_sign_x(::std::string&& value) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
}
#endif
inline void ZbftMessage::set_bls_sign_x(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
}
inline void ZbftMessage::set_bls_sign_x(const void* value, size_t size) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
}
inline ::std::string* ZbftMessage::mutable_bls_sign_x() {
  set_has_bls_sign_x();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
  return bls_sign_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_bls_sign_x() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
  if (!has_bls_sign_x()) {
    return NULL;
  }
  clear_has_bls_sign_x();
  return bls_sign_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_bls_sign_x(::std::string* bls_sign_x) {
  if (bls_sign_x != NULL) {
    set_has_bls_sign_x();
  } else {
    clear_has_bls_sign_x();
  }
  bls_sign_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_sign_x);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.bls_sign_x)
}

// optional bytes bls_sign_y = 15;
inline bool ZbftMessage::has_bls_sign_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZbftMessage::set_has_bls_sign_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZbftMessage::clear_has_bls_sign_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZbftMessage::clear_bls_sign_y() {
  bls_sign_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_sign_y();
}
inline const ::std::string& ZbftMessage::bls_sign_y() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
  return bls_sign_y_.GetNoArena();
}
inline void ZbftMessage::set_bls_sign_y(const ::std::string& value) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
}
#if LANG_CXX11
inline void ZbftMessage::set_bls_sign_y(::std::string&& value) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
}
#endif
inline void ZbftMessage::set_bls_sign_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
}
inline void ZbftMessage::set_bls_sign_y(const void* value, size_t size) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
}
inline ::std::string* ZbftMessage::mutable_bls_sign_y() {
  set_has_bls_sign_y();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
  return bls_sign_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_bls_sign_y() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
  if (!has_bls_sign_y()) {
    return NULL;
  }
  clear_has_bls_sign_y();
  return bls_sign_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_bls_sign_y(::std::string* bls_sign_y) {
  if (bls_sign_y != NULL) {
    set_has_bls_sign_y();
  } else {
    clear_has_bls_sign_y();
  }
  bls_sign_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_sign_y);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.bls_sign_y)
}

// optional uint64 prepare_height = 16;
inline bool ZbftMessage::has_prepare_height() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ZbftMessage::set_has_prepare_height() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ZbftMessage::clear_has_prepare_height() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ZbftMessage::clear_prepare_height() {
  prepare_height_ = GOOGLE_ULONGLONG(0);
  clear_has_prepare_height();
}
inline ::google::protobuf::uint64 ZbftMessage::prepare_height() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.prepare_height)
  return prepare_height_;
}
inline void ZbftMessage::set_prepare_height(::google::protobuf::uint64 value) {
  set_has_prepare_height();
  prepare_height_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.prepare_height)
}

// optional bytes prepare_hash = 17;
inline bool ZbftMessage::has_prepare_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZbftMessage::set_has_prepare_hash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZbftMessage::clear_has_prepare_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZbftMessage::clear_prepare_hash() {
  prepare_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prepare_hash();
}
inline const ::std::string& ZbftMessage::prepare_hash() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
  return prepare_hash_.GetNoArena();
}
inline void ZbftMessage::set_prepare_hash(const ::std::string& value) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
}
#if LANG_CXX11
inline void ZbftMessage::set_prepare_hash(::std::string&& value) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
}
#endif
inline void ZbftMessage::set_prepare_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
}
inline void ZbftMessage::set_prepare_hash(const void* value, size_t size) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
}
inline ::std::string* ZbftMessage::mutable_prepare_hash() {
  set_has_prepare_hash();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
  return prepare_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_prepare_hash() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
  if (!has_prepare_hash()) {
    return NULL;
  }
  clear_has_prepare_hash();
  return prepare_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_prepare_hash(::std::string* prepare_hash) {
  if (prepare_hash != NULL) {
    set_has_prepare_hash();
  } else {
    clear_has_prepare_hash();
  }
  prepare_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepare_hash);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.prepare_hash)
}

// optional .shardora.block.protobuf.Block block = 18;
inline bool ZbftMessage::has_block() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZbftMessage::set_has_block() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ZbftMessage::clear_has_block() {
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::shardora::block::protobuf::Block& ZbftMessage::_internal_block() const {
  return *block_;
}
inline const ::shardora::block::protobuf::Block& ZbftMessage::block() const {
  const ::shardora::block::protobuf::Block* p = block_;
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.block)
  return p != NULL ? *p : *reinterpret_cast<const ::shardora::block::protobuf::Block*>(
      &::shardora::block::protobuf::_Block_default_instance_);
}
inline ::shardora::block::protobuf::Block* ZbftMessage::release_block() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.block)
  clear_has_block();
  ::shardora::block::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline ::shardora::block::protobuf::Block* ZbftMessage::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    auto* p = CreateMaybeMessage<::shardora::block::protobuf::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.block)
  return block_;
}
inline void ZbftMessage::set_allocated_block(::shardora::block::protobuf::Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(block_);
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
  } else {
    clear_has_block();
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.block)
}

// optional bool sync_block = 19;
inline bool ZbftMessage::has_sync_block() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ZbftMessage::set_has_sync_block() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ZbftMessage::clear_has_sync_block() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ZbftMessage::clear_sync_block() {
  sync_block_ = false;
  clear_has_sync_block();
}
inline bool ZbftMessage::sync_block() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.sync_block)
  return sync_block_;
}
inline void ZbftMessage::set_sync_block(bool value) {
  set_has_sync_block();
  sync_block_ = value;
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.sync_block)
}

// repeated uint32 ips = 20;
inline int ZbftMessage::ips_size() const {
  return ips_.size();
}
inline void ZbftMessage::clear_ips() {
  ips_.Clear();
}
inline ::google::protobuf::uint32 ZbftMessage::ips(int index) const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.ips)
  return ips_.Get(index);
}
inline void ZbftMessage::set_ips(int index, ::google::protobuf::uint32 value) {
  ips_.Set(index, value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.ips)
}
inline void ZbftMessage::add_ips(::google::protobuf::uint32 value) {
  ips_.Add(value);
  // @@protoc_insertion_point(field_add:shardora.zbft.protobuf.ZbftMessage.ips)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ZbftMessage::ips() const {
  // @@protoc_insertion_point(field_list:shardora.zbft.protobuf.ZbftMessage.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ZbftMessage::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:shardora.zbft.protobuf.ZbftMessage.ips)
  return &ips_;
}

// optional bytes oppose_prepare_gid = 21;
inline bool ZbftMessage::has_oppose_prepare_gid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZbftMessage::set_has_oppose_prepare_gid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZbftMessage::clear_has_oppose_prepare_gid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZbftMessage::clear_oppose_prepare_gid() {
  oppose_prepare_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oppose_prepare_gid();
}
inline const ::std::string& ZbftMessage::oppose_prepare_gid() const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
  return oppose_prepare_gid_.GetNoArena();
}
inline void ZbftMessage::set_oppose_prepare_gid(const ::std::string& value) {
  set_has_oppose_prepare_gid();
  oppose_prepare_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
}
#if LANG_CXX11
inline void ZbftMessage::set_oppose_prepare_gid(::std::string&& value) {
  set_has_oppose_prepare_gid();
  oppose_prepare_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
}
#endif
inline void ZbftMessage::set_oppose_prepare_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oppose_prepare_gid();
  oppose_prepare_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
}
inline void ZbftMessage::set_oppose_prepare_gid(const void* value, size_t size) {
  set_has_oppose_prepare_gid();
  oppose_prepare_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
}
inline ::std::string* ZbftMessage::mutable_oppose_prepare_gid() {
  set_has_oppose_prepare_gid();
  // @@protoc_insertion_point(field_mutable:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
  return oppose_prepare_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZbftMessage::release_oppose_prepare_gid() {
  // @@protoc_insertion_point(field_release:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
  if (!has_oppose_prepare_gid()) {
    return NULL;
  }
  clear_has_oppose_prepare_gid();
  return oppose_prepare_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZbftMessage::set_allocated_oppose_prepare_gid(::std::string* oppose_prepare_gid) {
  if (oppose_prepare_gid != NULL) {
    set_has_oppose_prepare_gid();
  } else {
    clear_has_oppose_prepare_gid();
  }
  oppose_prepare_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oppose_prepare_gid);
  // @@protoc_insertion_point(field_set_allocated:shardora.zbft.protobuf.ZbftMessage.oppose_prepare_gid)
}

// repeated uint32 invaid_txs = 22;
inline int ZbftMessage::invaid_txs_size() const {
  return invaid_txs_.size();
}
inline void ZbftMessage::clear_invaid_txs() {
  invaid_txs_.Clear();
}
inline ::google::protobuf::uint32 ZbftMessage::invaid_txs(int index) const {
  // @@protoc_insertion_point(field_get:shardora.zbft.protobuf.ZbftMessage.invaid_txs)
  return invaid_txs_.Get(index);
}
inline void ZbftMessage::set_invaid_txs(int index, ::google::protobuf::uint32 value) {
  invaid_txs_.Set(index, value);
  // @@protoc_insertion_point(field_set:shardora.zbft.protobuf.ZbftMessage.invaid_txs)
}
inline void ZbftMessage::add_invaid_txs(::google::protobuf::uint32 value) {
  invaid_txs_.Add(value);
  // @@protoc_insertion_point(field_add:shardora.zbft.protobuf.ZbftMessage.invaid_txs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ZbftMessage::invaid_txs() const {
  // @@protoc_insertion_point(field_list:shardora.zbft.protobuf.ZbftMessage.invaid_txs)
  return invaid_txs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ZbftMessage::mutable_invaid_txs() {
  // @@protoc_insertion_point(field_mutable_list:shardora.zbft.protobuf.ZbftMessage.invaid_txs)
  return &invaid_txs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace zbft
}  // namespace shardora

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fzbft_2eproto
