// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/elect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/elect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace elect {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* VerifyVecValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyVecValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlsPublicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlsPublicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrevMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrevMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrevMembers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrevMembers_reflection_ = NULL;
const ::google::protobuf::Descriptor* member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  member_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElectBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElectBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitingNodesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitingNodesMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitingNodeHeartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitingNodeHeartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderRotationMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderRotationMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncNodeStokeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncNodeStokeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncNodeStokeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncNodeStokeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncNodeStokeResItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncNodeStokeResItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncNodeStokeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncNodeStokeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElectMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2felect_2eproto() {
  protobuf_AddDesc_protos_2felect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/elect.proto");
  GOOGLE_CHECK(file != NULL);
  VerifyVecValue_descriptor_ = file->message_type(0);
  static const int VerifyVecValue_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, x_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, x_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, y_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, y_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, z_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, z_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, valid_t_),
  };
  VerifyVecValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyVecValue_descriptor_,
      VerifyVecValue::default_instance_,
      VerifyVecValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyVecValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyVecValue));
  BlsPublicKey_descriptor_ = file->message_type(1);
  static const int BlsPublicKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, x_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, x_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, y_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, y_c1_),
  };
  BlsPublicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlsPublicKey_descriptor_,
      BlsPublicKey::default_instance_,
      BlsPublicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlsPublicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlsPublicKey));
  PrevMemberInfo_descriptor_ = file->message_type(2);
  static const int PrevMemberInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMemberInfo, x_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMemberInfo, x_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMemberInfo, y_c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMemberInfo, y_c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMemberInfo, pool_idx_mod_num_),
  };
  PrevMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrevMemberInfo_descriptor_,
      PrevMemberInfo::default_instance_,
      PrevMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrevMemberInfo));
  PrevMembers_descriptor_ = file->message_type(3);
  static const int PrevMembers_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMembers, bls_pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMembers, prev_elect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMembers, common_pubkey_),
  };
  PrevMembers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrevMembers_descriptor_,
      PrevMembers::default_instance_,
      PrevMembers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMembers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrevMembers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrevMembers));
  member_descriptor_ = file->message_type(4);
  static const int member_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member, pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member, pool_idx_mod_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member, mining_amount_),
  };
  member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      member_descriptor_,
      member::default_instance_,
      member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(member));
  ElectBlock_descriptor_ = file->message_type(5);
  static const int ElectBlock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, prev_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, shard_network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, elect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, all_gas_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, gas_for_root_),
  };
  ElectBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElectBlock_descriptor_,
      ElectBlock::default_instance_,
      ElectBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElectBlock));
  WaitingNodesMessage_descriptor_ = file->message_type(6);
  static const int WaitingNodesMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodesMessage, nodes_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodesMessage, waiting_shard_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodesMessage, stoke_hash_),
  };
  WaitingNodesMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitingNodesMessage_descriptor_,
      WaitingNodesMessage::default_instance_,
      WaitingNodesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodesMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodesMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitingNodesMessage));
  WaitingNodeHeartbeat_descriptor_ = file->message_type(7);
  static const int WaitingNodeHeartbeat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodeHeartbeat, public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodeHeartbeat, public_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodeHeartbeat, network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodeHeartbeat, timestamp_sec_),
  };
  WaitingNodeHeartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitingNodeHeartbeat_descriptor_,
      WaitingNodeHeartbeat::default_instance_,
      WaitingNodeHeartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodeHeartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitingNodeHeartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitingNodeHeartbeat));
  LeaderRotationMessage_descriptor_ = file->message_type(8);
  static const int LeaderRotationMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderRotationMessage, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderRotationMessage, pool_mod_num_),
  };
  LeaderRotationMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderRotationMessage_descriptor_,
      LeaderRotationMessage::default_instance_,
      LeaderRotationMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderRotationMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderRotationMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderRotationMessage));
  SyncNodeStokeItem_descriptor_ = file->message_type(9);
  static const int SyncNodeStokeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeItem, synced_tm_height_),
  };
  SyncNodeStokeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncNodeStokeItem_descriptor_,
      SyncNodeStokeItem::default_instance_,
      SyncNodeStokeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncNodeStokeItem));
  SyncNodeStokeRequest_descriptor_ = file->message_type(10);
  static const int SyncNodeStokeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeRequest, sync_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeRequest, now_tm_height_),
  };
  SyncNodeStokeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncNodeStokeRequest_descriptor_,
      SyncNodeStokeRequest::default_instance_,
      SyncNodeStokeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncNodeStokeRequest));
  SyncNodeStokeResItem_descriptor_ = file->message_type(11);
  static const int SyncNodeStokeResItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResItem, balance_),
  };
  SyncNodeStokeResItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncNodeStokeResItem_descriptor_,
      SyncNodeStokeResItem::default_instance_,
      SyncNodeStokeResItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncNodeStokeResItem));
  SyncNodeStokeResponse_descriptor_ = file->message_type(12);
  static const int SyncNodeStokeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResponse, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResponse, now_tm_height_),
  };
  SyncNodeStokeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncNodeStokeResponse_descriptor_,
      SyncNodeStokeResponse::default_instance_,
      SyncNodeStokeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncNodeStokeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncNodeStokeResponse));
  ElectMessage_descriptor_ = file->message_type(13);
  static const int ElectMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, elect_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, prev_elect_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, waiting_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, member_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, sign_ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, sign_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, waiting_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, leader_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, sync_stoke_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, sync_stoke_res_),
  };
  ElectMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElectMessage_descriptor_,
      ElectMessage::default_instance_,
      ElectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElectMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2felect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyVecValue_descriptor_, &VerifyVecValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlsPublicKey_descriptor_, &BlsPublicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrevMemberInfo_descriptor_, &PrevMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrevMembers_descriptor_, &PrevMembers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    member_descriptor_, &member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElectBlock_descriptor_, &ElectBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitingNodesMessage_descriptor_, &WaitingNodesMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitingNodeHeartbeat_descriptor_, &WaitingNodeHeartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderRotationMessage_descriptor_, &LeaderRotationMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncNodeStokeItem_descriptor_, &SyncNodeStokeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncNodeStokeRequest_descriptor_, &SyncNodeStokeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncNodeStokeResItem_descriptor_, &SyncNodeStokeResItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncNodeStokeResponse_descriptor_, &SyncNodeStokeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElectMessage_descriptor_, &ElectMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2felect_2eproto() {
  delete VerifyVecValue::default_instance_;
  delete VerifyVecValue_reflection_;
  delete BlsPublicKey::default_instance_;
  delete BlsPublicKey_reflection_;
  delete PrevMemberInfo::default_instance_;
  delete PrevMemberInfo_reflection_;
  delete PrevMembers::default_instance_;
  delete PrevMembers_reflection_;
  delete member::default_instance_;
  delete member_reflection_;
  delete ElectBlock::default_instance_;
  delete ElectBlock_reflection_;
  delete WaitingNodesMessage::default_instance_;
  delete WaitingNodesMessage_reflection_;
  delete WaitingNodeHeartbeat::default_instance_;
  delete WaitingNodeHeartbeat_reflection_;
  delete LeaderRotationMessage::default_instance_;
  delete LeaderRotationMessage_reflection_;
  delete SyncNodeStokeItem::default_instance_;
  delete SyncNodeStokeItem_reflection_;
  delete SyncNodeStokeRequest::default_instance_;
  delete SyncNodeStokeRequest_reflection_;
  delete SyncNodeStokeResItem::default_instance_;
  delete SyncNodeStokeResItem_reflection_;
  delete SyncNodeStokeResponse::default_instance_;
  delete SyncNodeStokeResponse_reflection_;
  delete ElectMessage::default_instance_;
  delete ElectMessage_reflection_;
}

void protobuf_AddDesc_protos_2felect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022protos/elect.proto\022\026zjchain.elect.prot"
    "obuf\"u\n\016VerifyVecValue\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004"
    "x_c1\030\002 \001(\014\022\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\022\014"
    "\n\004z_c0\030\005 \001(\014\022\014\n\004z_c1\030\006 \001(\014\022\017\n\007valid_t\030\007 "
    "\001(\r\"F\n\014BlsPublicKey\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004x_c"
    "1\030\002 \001(\014\022\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\"f\n\016P"
    "revMemberInfo\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004x_c1\030\002 \001("
    "\014\022\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\022\034\n\020pool_id"
    "x_mod_num\030\005 \001(\005:\002-1\"\241\001\n\013PrevMembers\022:\n\nb"
    "ls_pubkey\030\001 \003(\0132&.zjchain.elect.protobuf"
    ".PrevMemberInfo\022\031\n\021prev_elect_height\030\002 \001"
    "(\004\022;\n\rcommon_pubkey\030\003 \001(\0132$.zjchain.elec"
    "t.protobuf.BlsPublicKey\"I\n\006member\022\016\n\006pub"
    "key\030\001 \001(\014\022\030\n\020pool_idx_mod_num\030\002 \001(\005\022\025\n\rm"
    "ining_amount\030\003 \001(\004\"\321\001\n\nElectBlock\022*\n\002in\030"
    "\001 \003(\0132\036.zjchain.elect.protobuf.member\0229\n"
    "\014prev_members\030\002 \001(\0132#.zjchain.elect.prot"
    "obuf.PrevMembers\022\030\n\020shard_network_id\030\003 \001"
    "(\r\022\024\n\014elect_height\030\004 \001(\004\022\026\n\016all_gas_amou"
    "nt\030\005 \001(\004\022\024\n\014gas_for_root\030\006 \001(\004\"Y\n\023Waitin"
    "gNodesMessage\022\024\n\014nodes_filter\030\001 \003(\004\022\030\n\020w"
    "aiting_shard_id\030\002 \001(\r\022\022\n\nstoke_hash\030\003 \001("
    "\014\"i\n\024WaitingNodeHeartbeat\022\021\n\tpublic_ip\030\001"
    " \001(\014\022\023\n\013public_port\030\002 \001(\r\022\022\n\nnetwork_id\030"
    "\003 \001(\r\022\025\n\rtimestamp_sec\030\004 \001(\004\"@\n\025LeaderRo"
    "tationMessage\022\021\n\tleader_id\030\001 \001(\014\022\024\n\014pool"
    "_mod_num\030\002 \001(\r\"9\n\021SyncNodeStokeItem\022\n\n\002i"
    "d\030\001 \001(\014\022\030\n\020synced_tm_height\030\002 \001(\004\"k\n\024Syn"
    "cNodeStokeRequest\022<\n\tsync_item\030\001 \003(\0132).z"
    "jchain.elect.protobuf.SyncNodeStokeItem\022"
    "\025\n\rnow_tm_height\030\002 \001(\004\"3\n\024SyncNodeStokeR"
    "esItem\022\n\n\002id\030\001 \001(\014\022\017\n\007balance\030\002 \001(\004\"k\n\025S"
    "yncNodeStokeResponse\022;\n\005items\030\001 \003(\0132,.zj"
    "chain.elect.protobuf.SyncNodeStokeResIte"
    "m\022\025\n\rnow_tm_height\030\002 \001(\004\"\240\004\n\014ElectMessag"
    "e\0227\n\013elect_block\030\001 \001(\0132\".zjchain.elect.p"
    "rotobuf.ElectBlock\022<\n\020prev_elect_block\030\002"
    " \001(\0132\".zjchain.elect.protobuf.ElectBlock"
    "\022B\n\rwaiting_nodes\030\003 \001(\0132+.zjchain.elect."
    "protobuf.WaitingNodesMessage\022\024\n\014member_i"
    "ndex\030\004 \001(\005\022\017\n\007sign_ch\030\005 \001(\014\022\020\n\010sign_res\030"
    "\006 \001(\014\022G\n\021waiting_heartbeat\030\007 \001(\0132,.zjcha"
    "in.elect.protobuf.WaitingNodeHeartbeat\022F"
    "\n\017leader_rotation\030\010 \001(\0132-.zjchain.elect."
    "protobuf.LeaderRotationMessage\022D\n\016sync_s"
    "toke_req\030\t \001(\0132,.zjchain.elect.protobuf."
    "SyncNodeStokeRequest\022E\n\016sync_stoke_res\030\n"
    " \001(\0132-.zjchain.elect.protobuf.SyncNodeSt"
    "okeResponse", 1931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/elect.proto", &protobuf_RegisterTypes);
  VerifyVecValue::default_instance_ = new VerifyVecValue();
  BlsPublicKey::default_instance_ = new BlsPublicKey();
  PrevMemberInfo::default_instance_ = new PrevMemberInfo();
  PrevMembers::default_instance_ = new PrevMembers();
  member::default_instance_ = new member();
  ElectBlock::default_instance_ = new ElectBlock();
  WaitingNodesMessage::default_instance_ = new WaitingNodesMessage();
  WaitingNodeHeartbeat::default_instance_ = new WaitingNodeHeartbeat();
  LeaderRotationMessage::default_instance_ = new LeaderRotationMessage();
  SyncNodeStokeItem::default_instance_ = new SyncNodeStokeItem();
  SyncNodeStokeRequest::default_instance_ = new SyncNodeStokeRequest();
  SyncNodeStokeResItem::default_instance_ = new SyncNodeStokeResItem();
  SyncNodeStokeResponse::default_instance_ = new SyncNodeStokeResponse();
  ElectMessage::default_instance_ = new ElectMessage();
  VerifyVecValue::default_instance_->InitAsDefaultInstance();
  BlsPublicKey::default_instance_->InitAsDefaultInstance();
  PrevMemberInfo::default_instance_->InitAsDefaultInstance();
  PrevMembers::default_instance_->InitAsDefaultInstance();
  member::default_instance_->InitAsDefaultInstance();
  ElectBlock::default_instance_->InitAsDefaultInstance();
  WaitingNodesMessage::default_instance_->InitAsDefaultInstance();
  WaitingNodeHeartbeat::default_instance_->InitAsDefaultInstance();
  LeaderRotationMessage::default_instance_->InitAsDefaultInstance();
  SyncNodeStokeItem::default_instance_->InitAsDefaultInstance();
  SyncNodeStokeRequest::default_instance_->InitAsDefaultInstance();
  SyncNodeStokeResItem::default_instance_->InitAsDefaultInstance();
  SyncNodeStokeResponse::default_instance_->InitAsDefaultInstance();
  ElectMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2felect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2felect_2eproto {
  StaticDescriptorInitializer_protos_2felect_2eproto() {
    protobuf_AddDesc_protos_2felect_2eproto();
  }
} static_descriptor_initializer_protos_2felect_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VerifyVecValue::kXC0FieldNumber;
const int VerifyVecValue::kXC1FieldNumber;
const int VerifyVecValue::kYC0FieldNumber;
const int VerifyVecValue::kYC1FieldNumber;
const int VerifyVecValue::kZC0FieldNumber;
const int VerifyVecValue::kZC1FieldNumber;
const int VerifyVecValue::kValidTFieldNumber;
#endif  // !_MSC_VER

VerifyVecValue::VerifyVecValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VerifyVecValue::InitAsDefaultInstance() {
}

VerifyVecValue::VerifyVecValue(const VerifyVecValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VerifyVecValue::SharedCtor() {
  _cached_size_ = 0;
  x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valid_t_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyVecValue::~VerifyVecValue() {
  SharedDtor();
}

void VerifyVecValue::SharedDtor() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (z_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete z_c0_;
  }
  if (z_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete z_c1_;
  }
  if (this != default_instance_) {
  }
}

void VerifyVecValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyVecValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyVecValue_descriptor_;
}

const VerifyVecValue& VerifyVecValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

VerifyVecValue* VerifyVecValue::default_instance_ = NULL;

VerifyVecValue* VerifyVecValue::New() const {
  return new VerifyVecValue;
}

void VerifyVecValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x_c0()) {
      if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
        x_c0_->clear();
      }
    }
    if (has_x_c1()) {
      if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
        x_c1_->clear();
      }
    }
    if (has_y_c0()) {
      if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
        y_c0_->clear();
      }
    }
    if (has_y_c1()) {
      if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
        y_c1_->clear();
      }
    }
    if (has_z_c0()) {
      if (z_c0_ != &::google::protobuf::internal::kEmptyString) {
        z_c0_->clear();
      }
    }
    if (has_z_c1()) {
      if (z_c1_ != &::google::protobuf::internal::kEmptyString) {
        z_c1_->clear();
      }
    }
    valid_t_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyVecValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes x_c0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x_c1;
        break;
      }

      // optional bytes x_c1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y_c0;
        break;
      }

      // optional bytes y_c0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y_c1;
        break;
      }

      // optional bytes y_c1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z_c0;
        break;
      }

      // optional bytes z_c0 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z_c0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_z_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_z_c1;
        break;
      }

      // optional bytes z_c1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_z_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_valid_t;
        break;
      }

      // optional uint32 valid_t = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_t_)));
          set_has_valid_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerifyVecValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->x_c0(), output);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->x_c1(), output);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->y_c0(), output);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->y_c1(), output);
  }

  // optional bytes z_c0 = 5;
  if (has_z_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->z_c0(), output);
  }

  // optional bytes z_c1 = 6;
  if (has_z_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->z_c1(), output);
  }

  // optional uint32 valid_t = 7;
  if (has_valid_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->valid_t(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerifyVecValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->y_c1(), target);
  }

  // optional bytes z_c0 = 5;
  if (has_z_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->z_c0(), target);
  }

  // optional bytes z_c1 = 6;
  if (has_z_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->z_c1(), target);
  }

  // optional uint32 valid_t = 7;
  if (has_valid_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->valid_t(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerifyVecValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes x_c0 = 1;
    if (has_x_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c0());
    }

    // optional bytes x_c1 = 2;
    if (has_x_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c1());
    }

    // optional bytes y_c0 = 3;
    if (has_y_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c0());
    }

    // optional bytes y_c1 = 4;
    if (has_y_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c1());
    }

    // optional bytes z_c0 = 5;
    if (has_z_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->z_c0());
    }

    // optional bytes z_c1 = 6;
    if (has_z_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->z_c1());
    }

    // optional uint32 valid_t = 7;
    if (has_valid_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_t());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyVecValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyVecValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyVecValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyVecValue::MergeFrom(const VerifyVecValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_c0()) {
      set_x_c0(from.x_c0());
    }
    if (from.has_x_c1()) {
      set_x_c1(from.x_c1());
    }
    if (from.has_y_c0()) {
      set_y_c0(from.y_c0());
    }
    if (from.has_y_c1()) {
      set_y_c1(from.y_c1());
    }
    if (from.has_z_c0()) {
      set_z_c0(from.z_c0());
    }
    if (from.has_z_c1()) {
      set_z_c1(from.z_c1());
    }
    if (from.has_valid_t()) {
      set_valid_t(from.valid_t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyVecValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyVecValue::CopyFrom(const VerifyVecValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyVecValue::IsInitialized() const {

  return true;
}

void VerifyVecValue::Swap(VerifyVecValue* other) {
  if (other != this) {
    std::swap(x_c0_, other->x_c0_);
    std::swap(x_c1_, other->x_c1_);
    std::swap(y_c0_, other->y_c0_);
    std::swap(y_c1_, other->y_c1_);
    std::swap(z_c0_, other->z_c0_);
    std::swap(z_c1_, other->z_c1_);
    std::swap(valid_t_, other->valid_t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyVecValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyVecValue_descriptor_;
  metadata.reflection = VerifyVecValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlsPublicKey::kXC0FieldNumber;
const int BlsPublicKey::kXC1FieldNumber;
const int BlsPublicKey::kYC0FieldNumber;
const int BlsPublicKey::kYC1FieldNumber;
#endif  // !_MSC_VER

BlsPublicKey::BlsPublicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlsPublicKey::InitAsDefaultInstance() {
}

BlsPublicKey::BlsPublicKey(const BlsPublicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlsPublicKey::SharedCtor() {
  _cached_size_ = 0;
  x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlsPublicKey::~BlsPublicKey() {
  SharedDtor();
}

void BlsPublicKey::SharedDtor() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (this != default_instance_) {
  }
}

void BlsPublicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlsPublicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlsPublicKey_descriptor_;
}

const BlsPublicKey& BlsPublicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

BlsPublicKey* BlsPublicKey::default_instance_ = NULL;

BlsPublicKey* BlsPublicKey::New() const {
  return new BlsPublicKey;
}

void BlsPublicKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x_c0()) {
      if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
        x_c0_->clear();
      }
    }
    if (has_x_c1()) {
      if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
        x_c1_->clear();
      }
    }
    if (has_y_c0()) {
      if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
        y_c0_->clear();
      }
    }
    if (has_y_c1()) {
      if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
        y_c1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlsPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes x_c0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x_c1;
        break;
      }

      // optional bytes x_c1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y_c0;
        break;
      }

      // optional bytes y_c0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y_c1;
        break;
      }

      // optional bytes y_c1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlsPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->x_c0(), output);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->x_c1(), output);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->y_c0(), output);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->y_c1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlsPublicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->y_c1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlsPublicKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes x_c0 = 1;
    if (has_x_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c0());
    }

    // optional bytes x_c1 = 2;
    if (has_x_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c1());
    }

    // optional bytes y_c0 = 3;
    if (has_y_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c0());
    }

    // optional bytes y_c1 = 4;
    if (has_y_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlsPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlsPublicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlsPublicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlsPublicKey::MergeFrom(const BlsPublicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_c0()) {
      set_x_c0(from.x_c0());
    }
    if (from.has_x_c1()) {
      set_x_c1(from.x_c1());
    }
    if (from.has_y_c0()) {
      set_y_c0(from.y_c0());
    }
    if (from.has_y_c1()) {
      set_y_c1(from.y_c1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlsPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlsPublicKey::CopyFrom(const BlsPublicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlsPublicKey::IsInitialized() const {

  return true;
}

void BlsPublicKey::Swap(BlsPublicKey* other) {
  if (other != this) {
    std::swap(x_c0_, other->x_c0_);
    std::swap(x_c1_, other->x_c1_);
    std::swap(y_c0_, other->y_c0_);
    std::swap(y_c1_, other->y_c1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlsPublicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlsPublicKey_descriptor_;
  metadata.reflection = BlsPublicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrevMemberInfo::kXC0FieldNumber;
const int PrevMemberInfo::kXC1FieldNumber;
const int PrevMemberInfo::kYC0FieldNumber;
const int PrevMemberInfo::kYC1FieldNumber;
const int PrevMemberInfo::kPoolIdxModNumFieldNumber;
#endif  // !_MSC_VER

PrevMemberInfo::PrevMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrevMemberInfo::InitAsDefaultInstance() {
}

PrevMemberInfo::PrevMemberInfo(const PrevMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrevMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  x_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_c1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pool_idx_mod_num_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrevMemberInfo::~PrevMemberInfo() {
  SharedDtor();
}

void PrevMemberInfo::SharedDtor() {
  if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c0_;
  }
  if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete x_c1_;
  }
  if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c0_;
  }
  if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
    delete y_c1_;
  }
  if (this != default_instance_) {
  }
}

void PrevMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrevMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrevMemberInfo_descriptor_;
}

const PrevMemberInfo& PrevMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

PrevMemberInfo* PrevMemberInfo::default_instance_ = NULL;

PrevMemberInfo* PrevMemberInfo::New() const {
  return new PrevMemberInfo;
}

void PrevMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x_c0()) {
      if (x_c0_ != &::google::protobuf::internal::kEmptyString) {
        x_c0_->clear();
      }
    }
    if (has_x_c1()) {
      if (x_c1_ != &::google::protobuf::internal::kEmptyString) {
        x_c1_->clear();
      }
    }
    if (has_y_c0()) {
      if (y_c0_ != &::google::protobuf::internal::kEmptyString) {
        y_c0_->clear();
      }
    }
    if (has_y_c1()) {
      if (y_c1_ != &::google::protobuf::internal::kEmptyString) {
        y_c1_->clear();
      }
    }
    pool_idx_mod_num_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrevMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes x_c0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x_c1;
        break;
      }

      // optional bytes x_c1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y_c0;
        break;
      }

      // optional bytes y_c0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y_c1;
        break;
      }

      // optional bytes y_c1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y_c1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pool_idx_mod_num;
        break;
      }

      // optional int32 pool_idx_mod_num = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_idx_mod_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pool_idx_mod_num_)));
          set_has_pool_idx_mod_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrevMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->x_c0(), output);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->x_c1(), output);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->y_c0(), output);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->y_c1(), output);
  }

  // optional int32 pool_idx_mod_num = 5 [default = -1];
  if (has_pool_idx_mod_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pool_idx_mod_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrevMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes x_c0 = 1;
  if (has_x_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (has_x_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (has_y_c0()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (has_y_c1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->y_c1(), target);
  }

  // optional int32 pool_idx_mod_num = 5 [default = -1];
  if (has_pool_idx_mod_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pool_idx_mod_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrevMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes x_c0 = 1;
    if (has_x_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c0());
    }

    // optional bytes x_c1 = 2;
    if (has_x_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c1());
    }

    // optional bytes y_c0 = 3;
    if (has_y_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c0());
    }

    // optional bytes y_c1 = 4;
    if (has_y_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c1());
    }

    // optional int32 pool_idx_mod_num = 5 [default = -1];
    if (has_pool_idx_mod_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pool_idx_mod_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrevMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrevMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrevMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrevMemberInfo::MergeFrom(const PrevMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_c0()) {
      set_x_c0(from.x_c0());
    }
    if (from.has_x_c1()) {
      set_x_c1(from.x_c1());
    }
    if (from.has_y_c0()) {
      set_y_c0(from.y_c0());
    }
    if (from.has_y_c1()) {
      set_y_c1(from.y_c1());
    }
    if (from.has_pool_idx_mod_num()) {
      set_pool_idx_mod_num(from.pool_idx_mod_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrevMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevMemberInfo::CopyFrom(const PrevMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevMemberInfo::IsInitialized() const {

  return true;
}

void PrevMemberInfo::Swap(PrevMemberInfo* other) {
  if (other != this) {
    std::swap(x_c0_, other->x_c0_);
    std::swap(x_c1_, other->x_c1_);
    std::swap(y_c0_, other->y_c0_);
    std::swap(y_c1_, other->y_c1_);
    std::swap(pool_idx_mod_num_, other->pool_idx_mod_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrevMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrevMemberInfo_descriptor_;
  metadata.reflection = PrevMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrevMembers::kBlsPubkeyFieldNumber;
const int PrevMembers::kPrevElectHeightFieldNumber;
const int PrevMembers::kCommonPubkeyFieldNumber;
#endif  // !_MSC_VER

PrevMembers::PrevMembers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrevMembers::InitAsDefaultInstance() {
  common_pubkey_ = const_cast< ::zjchain::elect::protobuf::BlsPublicKey*>(&::zjchain::elect::protobuf::BlsPublicKey::default_instance());
}

PrevMembers::PrevMembers(const PrevMembers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrevMembers::SharedCtor() {
  _cached_size_ = 0;
  prev_elect_height_ = GOOGLE_ULONGLONG(0);
  common_pubkey_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrevMembers::~PrevMembers() {
  SharedDtor();
}

void PrevMembers::SharedDtor() {
  if (this != default_instance_) {
    delete common_pubkey_;
  }
}

void PrevMembers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrevMembers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrevMembers_descriptor_;
}

const PrevMembers& PrevMembers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

PrevMembers* PrevMembers::default_instance_ = NULL;

PrevMembers* PrevMembers::New() const {
  return new PrevMembers;
}

void PrevMembers::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    prev_elect_height_ = GOOGLE_ULONGLONG(0);
    if (has_common_pubkey()) {
      if (common_pubkey_ != NULL) common_pubkey_->::zjchain::elect::protobuf::BlsPublicKey::Clear();
    }
  }
  bls_pubkey_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrevMembers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bls_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bls_pubkey;
        if (input->ExpectTag(16)) goto parse_prev_elect_height;
        break;
      }

      // optional uint64 prev_elect_height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_elect_height_)));
          set_has_prev_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_common_pubkey;
        break;
      }

      // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrevMembers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
  for (int i = 0; i < this->bls_pubkey_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bls_pubkey(i), output);
  }

  // optional uint64 prev_elect_height = 2;
  if (has_prev_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->prev_elect_height(), output);
  }

  // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
  if (has_common_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->common_pubkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrevMembers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
  for (int i = 0; i < this->bls_pubkey_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bls_pubkey(i), target);
  }

  // optional uint64 prev_elect_height = 2;
  if (has_prev_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->prev_elect_height(), target);
  }

  // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
  if (has_common_pubkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->common_pubkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrevMembers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 prev_elect_height = 2;
    if (has_prev_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_elect_height());
    }

    // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
    if (has_common_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_pubkey());
    }

  }
  // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
  total_size += 1 * this->bls_pubkey_size();
  for (int i = 0; i < this->bls_pubkey_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bls_pubkey(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrevMembers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrevMembers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrevMembers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrevMembers::MergeFrom(const PrevMembers& from) {
  GOOGLE_CHECK_NE(&from, this);
  bls_pubkey_.MergeFrom(from.bls_pubkey_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_prev_elect_height()) {
      set_prev_elect_height(from.prev_elect_height());
    }
    if (from.has_common_pubkey()) {
      mutable_common_pubkey()->::zjchain::elect::protobuf::BlsPublicKey::MergeFrom(from.common_pubkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrevMembers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevMembers::CopyFrom(const PrevMembers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevMembers::IsInitialized() const {

  return true;
}

void PrevMembers::Swap(PrevMembers* other) {
  if (other != this) {
    bls_pubkey_.Swap(&other->bls_pubkey_);
    std::swap(prev_elect_height_, other->prev_elect_height_);
    std::swap(common_pubkey_, other->common_pubkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrevMembers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrevMembers_descriptor_;
  metadata.reflection = PrevMembers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int member::kPubkeyFieldNumber;
const int member::kPoolIdxModNumFieldNumber;
const int member::kMiningAmountFieldNumber;
#endif  // !_MSC_VER

member::member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void member::InitAsDefaultInstance() {
}

member::member(const member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void member::SharedCtor() {
  _cached_size_ = 0;
  pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pool_idx_mod_num_ = 0;
  mining_amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

member::~member() {
  SharedDtor();
}

void member::SharedDtor() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (this != default_instance_) {
  }
}

void member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return member_descriptor_;
}

const member& member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

member* member::default_instance_ = NULL;

member* member::New() const {
  return new member;
}

void member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pubkey()) {
      if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
        pubkey_->clear();
      }
    }
    pool_idx_mod_num_ = 0;
    mining_amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pubkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pool_idx_mod_num;
        break;
      }

      // optional int32 pool_idx_mod_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_idx_mod_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pool_idx_mod_num_)));
          set_has_pool_idx_mod_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mining_amount;
        break;
      }

      // optional uint64 mining_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mining_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mining_amount_)));
          set_has_mining_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes pubkey = 1;
  if (has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->pubkey(), output);
  }

  // optional int32 pool_idx_mod_num = 2;
  if (has_pool_idx_mod_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pool_idx_mod_num(), output);
  }

  // optional uint64 mining_amount = 3;
  if (has_mining_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mining_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes pubkey = 1;
  if (has_pubkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pubkey(), target);
  }

  // optional int32 pool_idx_mod_num = 2;
  if (has_pool_idx_mod_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pool_idx_mod_num(), target);
  }

  // optional uint64 mining_amount = 3;
  if (has_mining_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mining_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes pubkey = 1;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional int32 pool_idx_mod_num = 2;
    if (has_pool_idx_mod_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pool_idx_mod_num());
    }

    // optional uint64 mining_amount = 3;
    if (has_mining_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mining_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void member::MergeFrom(const member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pubkey()) {
      set_pubkey(from.pubkey());
    }
    if (from.has_pool_idx_mod_num()) {
      set_pool_idx_mod_num(from.pool_idx_mod_num());
    }
    if (from.has_mining_amount()) {
      set_mining_amount(from.mining_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void member::CopyFrom(const member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool member::IsInitialized() const {

  return true;
}

void member::Swap(member* other) {
  if (other != this) {
    std::swap(pubkey_, other->pubkey_);
    std::swap(pool_idx_mod_num_, other->pool_idx_mod_num_);
    std::swap(mining_amount_, other->mining_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = member_descriptor_;
  metadata.reflection = member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElectBlock::kInFieldNumber;
const int ElectBlock::kPrevMembersFieldNumber;
const int ElectBlock::kShardNetworkIdFieldNumber;
const int ElectBlock::kElectHeightFieldNumber;
const int ElectBlock::kAllGasAmountFieldNumber;
const int ElectBlock::kGasForRootFieldNumber;
#endif  // !_MSC_VER

ElectBlock::ElectBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElectBlock::InitAsDefaultInstance() {
  prev_members_ = const_cast< ::zjchain::elect::protobuf::PrevMembers*>(&::zjchain::elect::protobuf::PrevMembers::default_instance());
}

ElectBlock::ElectBlock(const ElectBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElectBlock::SharedCtor() {
  _cached_size_ = 0;
  prev_members_ = NULL;
  shard_network_id_ = 0u;
  elect_height_ = GOOGLE_ULONGLONG(0);
  all_gas_amount_ = GOOGLE_ULONGLONG(0);
  gas_for_root_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElectBlock::~ElectBlock() {
  SharedDtor();
}

void ElectBlock::SharedDtor() {
  if (this != default_instance_) {
    delete prev_members_;
  }
}

void ElectBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElectBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElectBlock_descriptor_;
}

const ElectBlock& ElectBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

ElectBlock* ElectBlock::default_instance_ = NULL;

ElectBlock* ElectBlock::New() const {
  return new ElectBlock;
}

void ElectBlock::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_prev_members()) {
      if (prev_members_ != NULL) prev_members_->::zjchain::elect::protobuf::PrevMembers::Clear();
    }
    shard_network_id_ = 0u;
    elect_height_ = GOOGLE_ULONGLONG(0);
    all_gas_amount_ = GOOGLE_ULONGLONG(0);
    gas_for_root_ = GOOGLE_ULONGLONG(0);
  }
  in_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElectBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.elect.protobuf.member in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_in()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_in;
        if (input->ExpectTag(18)) goto parse_prev_members;
        break;
      }

      // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shard_network_id;
        break;
      }

      // optional uint32 shard_network_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard_network_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_network_id_)));
          set_has_shard_network_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_all_gas_amount;
        break;
      }

      // optional uint64 all_gas_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_gas_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_gas_amount_)));
          set_has_all_gas_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gas_for_root;
        break;
      }

      // optional uint64 gas_for_root = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gas_for_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_for_root_)));
          set_has_gas_for_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElectBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.elect.protobuf.member in = 1;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->in(i), output);
  }

  // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
  if (has_prev_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prev_members(), output);
  }

  // optional uint32 shard_network_id = 3;
  if (has_shard_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shard_network_id(), output);
  }

  // optional uint64 elect_height = 4;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->elect_height(), output);
  }

  // optional uint64 all_gas_amount = 5;
  if (has_all_gas_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->all_gas_amount(), output);
  }

  // optional uint64 gas_for_root = 6;
  if (has_gas_for_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gas_for_root(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElectBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.elect.protobuf.member in = 1;
  for (int i = 0; i < this->in_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->in(i), target);
  }

  // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
  if (has_prev_members()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prev_members(), target);
  }

  // optional uint32 shard_network_id = 3;
  if (has_shard_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shard_network_id(), target);
  }

  // optional uint64 elect_height = 4;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->elect_height(), target);
  }

  // optional uint64 all_gas_amount = 5;
  if (has_all_gas_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->all_gas_amount(), target);
  }

  // optional uint64 gas_for_root = 6;
  if (has_gas_for_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gas_for_root(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElectBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
    if (has_prev_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_members());
    }

    // optional uint32 shard_network_id = 3;
    if (has_shard_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard_network_id());
    }

    // optional uint64 elect_height = 4;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

    // optional uint64 all_gas_amount = 5;
    if (has_all_gas_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_gas_amount());
    }

    // optional uint64 gas_for_root = 6;
    if (has_gas_for_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_for_root());
    }

  }
  // repeated .zjchain.elect.protobuf.member in = 1;
  total_size += 1 * this->in_size();
  for (int i = 0; i < this->in_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->in(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElectBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElectBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElectBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElectBlock::MergeFrom(const ElectBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  in_.MergeFrom(from.in_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_prev_members()) {
      mutable_prev_members()->::zjchain::elect::protobuf::PrevMembers::MergeFrom(from.prev_members());
    }
    if (from.has_shard_network_id()) {
      set_shard_network_id(from.shard_network_id());
    }
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
    if (from.has_all_gas_amount()) {
      set_all_gas_amount(from.all_gas_amount());
    }
    if (from.has_gas_for_root()) {
      set_gas_for_root(from.gas_for_root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElectBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectBlock::CopyFrom(const ElectBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectBlock::IsInitialized() const {

  return true;
}

void ElectBlock::Swap(ElectBlock* other) {
  if (other != this) {
    in_.Swap(&other->in_);
    std::swap(prev_members_, other->prev_members_);
    std::swap(shard_network_id_, other->shard_network_id_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(all_gas_amount_, other->all_gas_amount_);
    std::swap(gas_for_root_, other->gas_for_root_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElectBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElectBlock_descriptor_;
  metadata.reflection = ElectBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitingNodesMessage::kNodesFilterFieldNumber;
const int WaitingNodesMessage::kWaitingShardIdFieldNumber;
const int WaitingNodesMessage::kStokeHashFieldNumber;
#endif  // !_MSC_VER

WaitingNodesMessage::WaitingNodesMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaitingNodesMessage::InitAsDefaultInstance() {
}

WaitingNodesMessage::WaitingNodesMessage(const WaitingNodesMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaitingNodesMessage::SharedCtor() {
  _cached_size_ = 0;
  waiting_shard_id_ = 0u;
  stoke_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitingNodesMessage::~WaitingNodesMessage() {
  SharedDtor();
}

void WaitingNodesMessage::SharedDtor() {
  if (stoke_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete stoke_hash_;
  }
  if (this != default_instance_) {
  }
}

void WaitingNodesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitingNodesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitingNodesMessage_descriptor_;
}

const WaitingNodesMessage& WaitingNodesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

WaitingNodesMessage* WaitingNodesMessage::default_instance_ = NULL;

WaitingNodesMessage* WaitingNodesMessage::New() const {
  return new WaitingNodesMessage;
}

void WaitingNodesMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    waiting_shard_id_ = 0u;
    if (has_stoke_hash()) {
      if (stoke_hash_ != &::google::protobuf::internal::kEmptyString) {
        stoke_hash_->clear();
      }
    }
  }
  nodes_filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitingNodesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 nodes_filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodes_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_nodes_filter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_nodes_filter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_nodes_filter;
        if (input->ExpectTag(16)) goto parse_waiting_shard_id;
        break;
      }

      // optional uint32 waiting_shard_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waiting_shard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waiting_shard_id_)));
          set_has_waiting_shard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stoke_hash;
        break;
      }

      // optional bytes stoke_hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stoke_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stoke_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaitingNodesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 nodes_filter = 1;
  for (int i = 0; i < this->nodes_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->nodes_filter(i), output);
  }

  // optional uint32 waiting_shard_id = 2;
  if (has_waiting_shard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->waiting_shard_id(), output);
  }

  // optional bytes stoke_hash = 3;
  if (has_stoke_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->stoke_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaitingNodesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 nodes_filter = 1;
  for (int i = 0; i < this->nodes_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->nodes_filter(i), target);
  }

  // optional uint32 waiting_shard_id = 2;
  if (has_waiting_shard_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->waiting_shard_id(), target);
  }

  // optional bytes stoke_hash = 3;
  if (has_stoke_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stoke_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaitingNodesMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 waiting_shard_id = 2;
    if (has_waiting_shard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waiting_shard_id());
    }

    // optional bytes stoke_hash = 3;
    if (has_stoke_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stoke_hash());
    }

  }
  // repeated uint64 nodes_filter = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_filter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->nodes_filter(i));
    }
    total_size += 1 * this->nodes_filter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitingNodesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitingNodesMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitingNodesMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitingNodesMessage::MergeFrom(const WaitingNodesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_filter_.MergeFrom(from.nodes_filter_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_waiting_shard_id()) {
      set_waiting_shard_id(from.waiting_shard_id());
    }
    if (from.has_stoke_hash()) {
      set_stoke_hash(from.stoke_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitingNodesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitingNodesMessage::CopyFrom(const WaitingNodesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitingNodesMessage::IsInitialized() const {

  return true;
}

void WaitingNodesMessage::Swap(WaitingNodesMessage* other) {
  if (other != this) {
    nodes_filter_.Swap(&other->nodes_filter_);
    std::swap(waiting_shard_id_, other->waiting_shard_id_);
    std::swap(stoke_hash_, other->stoke_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitingNodesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitingNodesMessage_descriptor_;
  metadata.reflection = WaitingNodesMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitingNodeHeartbeat::kPublicIpFieldNumber;
const int WaitingNodeHeartbeat::kPublicPortFieldNumber;
const int WaitingNodeHeartbeat::kNetworkIdFieldNumber;
const int WaitingNodeHeartbeat::kTimestampSecFieldNumber;
#endif  // !_MSC_VER

WaitingNodeHeartbeat::WaitingNodeHeartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaitingNodeHeartbeat::InitAsDefaultInstance() {
}

WaitingNodeHeartbeat::WaitingNodeHeartbeat(const WaitingNodeHeartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaitingNodeHeartbeat::SharedCtor() {
  _cached_size_ = 0;
  public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_port_ = 0u;
  network_id_ = 0u;
  timestamp_sec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitingNodeHeartbeat::~WaitingNodeHeartbeat() {
  SharedDtor();
}

void WaitingNodeHeartbeat::SharedDtor() {
  if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete public_ip_;
  }
  if (this != default_instance_) {
  }
}

void WaitingNodeHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitingNodeHeartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitingNodeHeartbeat_descriptor_;
}

const WaitingNodeHeartbeat& WaitingNodeHeartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

WaitingNodeHeartbeat* WaitingNodeHeartbeat::default_instance_ = NULL;

WaitingNodeHeartbeat* WaitingNodeHeartbeat::New() const {
  return new WaitingNodeHeartbeat;
}

void WaitingNodeHeartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_public_ip()) {
      if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
        public_ip_->clear();
      }
    }
    public_port_ = 0u;
    network_id_ = 0u;
    timestamp_sec_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitingNodeHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_public_port;
        break;
      }

      // optional uint32 public_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_port_)));
          set_has_public_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_network_id;
        break;
      }

      // optional uint32 network_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_id_)));
          set_has_network_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp_sec;
        break;
      }

      // optional uint64 timestamp_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_sec_)));
          set_has_timestamp_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaitingNodeHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes public_ip = 1;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->public_ip(), output);
  }

  // optional uint32 public_port = 2;
  if (has_public_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_port(), output);
  }

  // optional uint32 network_id = 3;
  if (has_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->network_id(), output);
  }

  // optional uint64 timestamp_sec = 4;
  if (has_timestamp_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp_sec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaitingNodeHeartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes public_ip = 1;
  if (has_public_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_ip(), target);
  }

  // optional uint32 public_port = 2;
  if (has_public_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->public_port(), target);
  }

  // optional uint32 network_id = 3;
  if (has_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->network_id(), target);
  }

  // optional uint64 timestamp_sec = 4;
  if (has_timestamp_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp_sec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaitingNodeHeartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes public_ip = 1;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional uint32 public_port = 2;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_port());
    }

    // optional uint32 network_id = 3;
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_id());
    }

    // optional uint64 timestamp_sec = 4;
    if (has_timestamp_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_sec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitingNodeHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitingNodeHeartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitingNodeHeartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitingNodeHeartbeat::MergeFrom(const WaitingNodeHeartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_public_port()) {
      set_public_port(from.public_port());
    }
    if (from.has_network_id()) {
      set_network_id(from.network_id());
    }
    if (from.has_timestamp_sec()) {
      set_timestamp_sec(from.timestamp_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitingNodeHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitingNodeHeartbeat::CopyFrom(const WaitingNodeHeartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitingNodeHeartbeat::IsInitialized() const {

  return true;
}

void WaitingNodeHeartbeat::Swap(WaitingNodeHeartbeat* other) {
  if (other != this) {
    std::swap(public_ip_, other->public_ip_);
    std::swap(public_port_, other->public_port_);
    std::swap(network_id_, other->network_id_);
    std::swap(timestamp_sec_, other->timestamp_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitingNodeHeartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitingNodeHeartbeat_descriptor_;
  metadata.reflection = WaitingNodeHeartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderRotationMessage::kLeaderIdFieldNumber;
const int LeaderRotationMessage::kPoolModNumFieldNumber;
#endif  // !_MSC_VER

LeaderRotationMessage::LeaderRotationMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderRotationMessage::InitAsDefaultInstance() {
}

LeaderRotationMessage::LeaderRotationMessage(const LeaderRotationMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderRotationMessage::SharedCtor() {
  _cached_size_ = 0;
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pool_mod_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderRotationMessage::~LeaderRotationMessage() {
  SharedDtor();
}

void LeaderRotationMessage::SharedDtor() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (this != default_instance_) {
  }
}

void LeaderRotationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderRotationMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderRotationMessage_descriptor_;
}

const LeaderRotationMessage& LeaderRotationMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

LeaderRotationMessage* LeaderRotationMessage::default_instance_ = NULL;

LeaderRotationMessage* LeaderRotationMessage::New() const {
  return new LeaderRotationMessage;
}

void LeaderRotationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
        leader_id_->clear();
      }
    }
    pool_mod_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderRotationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes leader_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pool_mod_num;
        break;
      }

      // optional uint32 pool_mod_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_mod_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_mod_num_)));
          set_has_pool_mod_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderRotationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes leader_id = 1;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->leader_id(), output);
  }

  // optional uint32 pool_mod_num = 2;
  if (has_pool_mod_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pool_mod_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderRotationMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes leader_id = 1;
  if (has_leader_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->leader_id(), target);
  }

  // optional uint32 pool_mod_num = 2;
  if (has_pool_mod_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pool_mod_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderRotationMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes leader_id = 1;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_id());
    }

    // optional uint32 pool_mod_num = 2;
    if (has_pool_mod_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_mod_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderRotationMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderRotationMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderRotationMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderRotationMessage::MergeFrom(const LeaderRotationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_pool_mod_num()) {
      set_pool_mod_num(from.pool_mod_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderRotationMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderRotationMessage::CopyFrom(const LeaderRotationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderRotationMessage::IsInitialized() const {

  return true;
}

void LeaderRotationMessage::Swap(LeaderRotationMessage* other) {
  if (other != this) {
    std::swap(leader_id_, other->leader_id_);
    std::swap(pool_mod_num_, other->pool_mod_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderRotationMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderRotationMessage_descriptor_;
  metadata.reflection = LeaderRotationMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncNodeStokeItem::kIdFieldNumber;
const int SyncNodeStokeItem::kSyncedTmHeightFieldNumber;
#endif  // !_MSC_VER

SyncNodeStokeItem::SyncNodeStokeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncNodeStokeItem::InitAsDefaultInstance() {
}

SyncNodeStokeItem::SyncNodeStokeItem(const SyncNodeStokeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncNodeStokeItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  synced_tm_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncNodeStokeItem::~SyncNodeStokeItem() {
  SharedDtor();
}

void SyncNodeStokeItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SyncNodeStokeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncNodeStokeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncNodeStokeItem_descriptor_;
}

const SyncNodeStokeItem& SyncNodeStokeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

SyncNodeStokeItem* SyncNodeStokeItem::default_instance_ = NULL;

SyncNodeStokeItem* SyncNodeStokeItem::New() const {
  return new SyncNodeStokeItem;
}

void SyncNodeStokeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    synced_tm_height_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncNodeStokeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_synced_tm_height;
        break;
      }

      // optional uint64 synced_tm_height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synced_tm_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &synced_tm_height_)));
          set_has_synced_tm_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncNodeStokeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // optional uint64 synced_tm_height = 2;
  if (has_synced_tm_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->synced_tm_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncNodeStokeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional uint64 synced_tm_height = 2;
  if (has_synced_tm_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->synced_tm_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncNodeStokeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint64 synced_tm_height = 2;
    if (has_synced_tm_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->synced_tm_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncNodeStokeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncNodeStokeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncNodeStokeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncNodeStokeItem::MergeFrom(const SyncNodeStokeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_synced_tm_height()) {
      set_synced_tm_height(from.synced_tm_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncNodeStokeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncNodeStokeItem::CopyFrom(const SyncNodeStokeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeItem::IsInitialized() const {

  return true;
}

void SyncNodeStokeItem::Swap(SyncNodeStokeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(synced_tm_height_, other->synced_tm_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncNodeStokeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncNodeStokeItem_descriptor_;
  metadata.reflection = SyncNodeStokeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncNodeStokeRequest::kSyncItemFieldNumber;
const int SyncNodeStokeRequest::kNowTmHeightFieldNumber;
#endif  // !_MSC_VER

SyncNodeStokeRequest::SyncNodeStokeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncNodeStokeRequest::InitAsDefaultInstance() {
}

SyncNodeStokeRequest::SyncNodeStokeRequest(const SyncNodeStokeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncNodeStokeRequest::SharedCtor() {
  _cached_size_ = 0;
  now_tm_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncNodeStokeRequest::~SyncNodeStokeRequest() {
  SharedDtor();
}

void SyncNodeStokeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncNodeStokeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncNodeStokeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncNodeStokeRequest_descriptor_;
}

const SyncNodeStokeRequest& SyncNodeStokeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

SyncNodeStokeRequest* SyncNodeStokeRequest::default_instance_ = NULL;

SyncNodeStokeRequest* SyncNodeStokeRequest::New() const {
  return new SyncNodeStokeRequest;
}

void SyncNodeStokeRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    now_tm_height_ = GOOGLE_ULONGLONG(0);
  }
  sync_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncNodeStokeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sync_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sync_item;
        if (input->ExpectTag(16)) goto parse_now_tm_height;
        break;
      }

      // optional uint64 now_tm_height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_tm_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &now_tm_height_)));
          set_has_now_tm_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncNodeStokeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
  for (int i = 0; i < this->sync_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sync_item(i), output);
  }

  // optional uint64 now_tm_height = 2;
  if (has_now_tm_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->now_tm_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncNodeStokeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
  for (int i = 0; i < this->sync_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sync_item(i), target);
  }

  // optional uint64 now_tm_height = 2;
  if (has_now_tm_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->now_tm_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncNodeStokeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 now_tm_height = 2;
    if (has_now_tm_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->now_tm_height());
    }

  }
  // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
  total_size += 1 * this->sync_item_size();
  for (int i = 0; i < this->sync_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sync_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncNodeStokeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncNodeStokeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncNodeStokeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncNodeStokeRequest::MergeFrom(const SyncNodeStokeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  sync_item_.MergeFrom(from.sync_item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_now_tm_height()) {
      set_now_tm_height(from.now_tm_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncNodeStokeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncNodeStokeRequest::CopyFrom(const SyncNodeStokeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeRequest::IsInitialized() const {

  return true;
}

void SyncNodeStokeRequest::Swap(SyncNodeStokeRequest* other) {
  if (other != this) {
    sync_item_.Swap(&other->sync_item_);
    std::swap(now_tm_height_, other->now_tm_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncNodeStokeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncNodeStokeRequest_descriptor_;
  metadata.reflection = SyncNodeStokeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncNodeStokeResItem::kIdFieldNumber;
const int SyncNodeStokeResItem::kBalanceFieldNumber;
#endif  // !_MSC_VER

SyncNodeStokeResItem::SyncNodeStokeResItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncNodeStokeResItem::InitAsDefaultInstance() {
}

SyncNodeStokeResItem::SyncNodeStokeResItem(const SyncNodeStokeResItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncNodeStokeResItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  balance_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncNodeStokeResItem::~SyncNodeStokeResItem() {
  SharedDtor();
}

void SyncNodeStokeResItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SyncNodeStokeResItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncNodeStokeResItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncNodeStokeResItem_descriptor_;
}

const SyncNodeStokeResItem& SyncNodeStokeResItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

SyncNodeStokeResItem* SyncNodeStokeResItem::default_instance_ = NULL;

SyncNodeStokeResItem* SyncNodeStokeResItem::New() const {
  return new SyncNodeStokeResItem;
}

void SyncNodeStokeResItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    balance_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncNodeStokeResItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_balance;
        break;
      }

      // optional uint64 balance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncNodeStokeResItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // optional uint64 balance = 2;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->balance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncNodeStokeResItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional uint64 balance = 2;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->balance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncNodeStokeResItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint64 balance = 2;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncNodeStokeResItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncNodeStokeResItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncNodeStokeResItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncNodeStokeResItem::MergeFrom(const SyncNodeStokeResItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncNodeStokeResItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncNodeStokeResItem::CopyFrom(const SyncNodeStokeResItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeResItem::IsInitialized() const {

  return true;
}

void SyncNodeStokeResItem::Swap(SyncNodeStokeResItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(balance_, other->balance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncNodeStokeResItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncNodeStokeResItem_descriptor_;
  metadata.reflection = SyncNodeStokeResItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncNodeStokeResponse::kItemsFieldNumber;
const int SyncNodeStokeResponse::kNowTmHeightFieldNumber;
#endif  // !_MSC_VER

SyncNodeStokeResponse::SyncNodeStokeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncNodeStokeResponse::InitAsDefaultInstance() {
}

SyncNodeStokeResponse::SyncNodeStokeResponse(const SyncNodeStokeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncNodeStokeResponse::SharedCtor() {
  _cached_size_ = 0;
  now_tm_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncNodeStokeResponse::~SyncNodeStokeResponse() {
  SharedDtor();
}

void SyncNodeStokeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncNodeStokeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncNodeStokeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncNodeStokeResponse_descriptor_;
}

const SyncNodeStokeResponse& SyncNodeStokeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

SyncNodeStokeResponse* SyncNodeStokeResponse::default_instance_ = NULL;

SyncNodeStokeResponse* SyncNodeStokeResponse::New() const {
  return new SyncNodeStokeResponse;
}

void SyncNodeStokeResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    now_tm_height_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncNodeStokeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_now_tm_height;
        break;
      }

      // optional uint64 now_tm_height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_tm_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &now_tm_height_)));
          set_has_now_tm_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncNodeStokeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional uint64 now_tm_height = 2;
  if (has_now_tm_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->now_tm_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncNodeStokeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional uint64 now_tm_height = 2;
  if (has_now_tm_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->now_tm_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncNodeStokeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 now_tm_height = 2;
    if (has_now_tm_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->now_tm_height());
    }

  }
  // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncNodeStokeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncNodeStokeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncNodeStokeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncNodeStokeResponse::MergeFrom(const SyncNodeStokeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_now_tm_height()) {
      set_now_tm_height(from.now_tm_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncNodeStokeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncNodeStokeResponse::CopyFrom(const SyncNodeStokeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeResponse::IsInitialized() const {

  return true;
}

void SyncNodeStokeResponse::Swap(SyncNodeStokeResponse* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(now_tm_height_, other->now_tm_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncNodeStokeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncNodeStokeResponse_descriptor_;
  metadata.reflection = SyncNodeStokeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElectMessage::kElectBlockFieldNumber;
const int ElectMessage::kPrevElectBlockFieldNumber;
const int ElectMessage::kWaitingNodesFieldNumber;
const int ElectMessage::kMemberIndexFieldNumber;
const int ElectMessage::kSignChFieldNumber;
const int ElectMessage::kSignResFieldNumber;
const int ElectMessage::kWaitingHeartbeatFieldNumber;
const int ElectMessage::kLeaderRotationFieldNumber;
const int ElectMessage::kSyncStokeReqFieldNumber;
const int ElectMessage::kSyncStokeResFieldNumber;
#endif  // !_MSC_VER

ElectMessage::ElectMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElectMessage::InitAsDefaultInstance() {
  elect_block_ = const_cast< ::zjchain::elect::protobuf::ElectBlock*>(&::zjchain::elect::protobuf::ElectBlock::default_instance());
  prev_elect_block_ = const_cast< ::zjchain::elect::protobuf::ElectBlock*>(&::zjchain::elect::protobuf::ElectBlock::default_instance());
  waiting_nodes_ = const_cast< ::zjchain::elect::protobuf::WaitingNodesMessage*>(&::zjchain::elect::protobuf::WaitingNodesMessage::default_instance());
  waiting_heartbeat_ = const_cast< ::zjchain::elect::protobuf::WaitingNodeHeartbeat*>(&::zjchain::elect::protobuf::WaitingNodeHeartbeat::default_instance());
  leader_rotation_ = const_cast< ::zjchain::elect::protobuf::LeaderRotationMessage*>(&::zjchain::elect::protobuf::LeaderRotationMessage::default_instance());
  sync_stoke_req_ = const_cast< ::zjchain::elect::protobuf::SyncNodeStokeRequest*>(&::zjchain::elect::protobuf::SyncNodeStokeRequest::default_instance());
  sync_stoke_res_ = const_cast< ::zjchain::elect::protobuf::SyncNodeStokeResponse*>(&::zjchain::elect::protobuf::SyncNodeStokeResponse::default_instance());
}

ElectMessage::ElectMessage(const ElectMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElectMessage::SharedCtor() {
  _cached_size_ = 0;
  elect_block_ = NULL;
  prev_elect_block_ = NULL;
  waiting_nodes_ = NULL;
  member_index_ = 0;
  sign_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  waiting_heartbeat_ = NULL;
  leader_rotation_ = NULL;
  sync_stoke_req_ = NULL;
  sync_stoke_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElectMessage::~ElectMessage() {
  SharedDtor();
}

void ElectMessage::SharedDtor() {
  if (sign_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_ch_;
  }
  if (sign_res_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_res_;
  }
  if (this != default_instance_) {
    delete elect_block_;
    delete prev_elect_block_;
    delete waiting_nodes_;
    delete waiting_heartbeat_;
    delete leader_rotation_;
    delete sync_stoke_req_;
    delete sync_stoke_res_;
  }
}

void ElectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElectMessage_descriptor_;
}

const ElectMessage& ElectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2felect_2eproto();
  return *default_instance_;
}

ElectMessage* ElectMessage::default_instance_ = NULL;

ElectMessage* ElectMessage::New() const {
  return new ElectMessage;
}

void ElectMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_elect_block()) {
      if (elect_block_ != NULL) elect_block_->::zjchain::elect::protobuf::ElectBlock::Clear();
    }
    if (has_prev_elect_block()) {
      if (prev_elect_block_ != NULL) prev_elect_block_->::zjchain::elect::protobuf::ElectBlock::Clear();
    }
    if (has_waiting_nodes()) {
      if (waiting_nodes_ != NULL) waiting_nodes_->::zjchain::elect::protobuf::WaitingNodesMessage::Clear();
    }
    member_index_ = 0;
    if (has_sign_ch()) {
      if (sign_ch_ != &::google::protobuf::internal::kEmptyString) {
        sign_ch_->clear();
      }
    }
    if (has_sign_res()) {
      if (sign_res_ != &::google::protobuf::internal::kEmptyString) {
        sign_res_->clear();
      }
    }
    if (has_waiting_heartbeat()) {
      if (waiting_heartbeat_ != NULL) waiting_heartbeat_->::zjchain::elect::protobuf::WaitingNodeHeartbeat::Clear();
    }
    if (has_leader_rotation()) {
      if (leader_rotation_ != NULL) leader_rotation_->::zjchain::elect::protobuf::LeaderRotationMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sync_stoke_req()) {
      if (sync_stoke_req_ != NULL) sync_stoke_req_->::zjchain::elect::protobuf::SyncNodeStokeRequest::Clear();
    }
    if (has_sync_stoke_res()) {
      if (sync_stoke_res_ != NULL) sync_stoke_res_->::zjchain::elect::protobuf::SyncNodeStokeResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elect_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prev_elect_block;
        break;
      }

      // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_elect_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_elect_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_waiting_nodes;
        break;
      }

      // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waiting_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waiting_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_member_index;
        break;
      }

      // optional int32 member_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_index_)));
          set_has_member_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign_ch;
        break;
      }

      // optional bytes sign_ch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_ch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_ch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sign_res;
        break;
      }

      // optional bytes sign_res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_waiting_heartbeat;
        break;
      }

      // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waiting_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waiting_heartbeat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leader_rotation;
        break;
      }

      // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sync_stoke_req;
        break;
      }

      // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_stoke_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_stoke_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sync_stoke_res;
        break;
      }

      // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_stoke_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_stoke_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
  if (has_elect_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elect_block(), output);
  }

  // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
  if (has_prev_elect_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prev_elect_block(), output);
  }

  // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
  if (has_waiting_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->waiting_nodes(), output);
  }

  // optional int32 member_index = 4;
  if (has_member_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->member_index(), output);
  }

  // optional bytes sign_ch = 5;
  if (has_sign_ch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->sign_ch(), output);
  }

  // optional bytes sign_res = 6;
  if (has_sign_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->sign_res(), output);
  }

  // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
  if (has_waiting_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->waiting_heartbeat(), output);
  }

  // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
  if (has_leader_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->leader_rotation(), output);
  }

  // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
  if (has_sync_stoke_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sync_stoke_req(), output);
  }

  // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
  if (has_sync_stoke_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sync_stoke_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElectMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
  if (has_elect_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elect_block(), target);
  }

  // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
  if (has_prev_elect_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prev_elect_block(), target);
  }

  // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
  if (has_waiting_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->waiting_nodes(), target);
  }

  // optional int32 member_index = 4;
  if (has_member_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->member_index(), target);
  }

  // optional bytes sign_ch = 5;
  if (has_sign_ch()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sign_ch(), target);
  }

  // optional bytes sign_res = 6;
  if (has_sign_res()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign_res(), target);
  }

  // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
  if (has_waiting_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->waiting_heartbeat(), target);
  }

  // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
  if (has_leader_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->leader_rotation(), target);
  }

  // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
  if (has_sync_stoke_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sync_stoke_req(), target);
  }

  // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
  if (has_sync_stoke_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->sync_stoke_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElectMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
    if (has_elect_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elect_block());
    }

    // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
    if (has_prev_elect_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_elect_block());
    }

    // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
    if (has_waiting_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waiting_nodes());
    }

    // optional int32 member_index = 4;
    if (has_member_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_index());
    }

    // optional bytes sign_ch = 5;
    if (has_sign_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_ch());
    }

    // optional bytes sign_res = 6;
    if (has_sign_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_res());
    }

    // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
    if (has_waiting_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waiting_heartbeat());
    }

    // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
    if (has_leader_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader_rotation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
    if (has_sync_stoke_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_stoke_req());
    }

    // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
    if (has_sync_stoke_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_stoke_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElectMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElectMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElectMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElectMessage::MergeFrom(const ElectMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elect_block()) {
      mutable_elect_block()->::zjchain::elect::protobuf::ElectBlock::MergeFrom(from.elect_block());
    }
    if (from.has_prev_elect_block()) {
      mutable_prev_elect_block()->::zjchain::elect::protobuf::ElectBlock::MergeFrom(from.prev_elect_block());
    }
    if (from.has_waiting_nodes()) {
      mutable_waiting_nodes()->::zjchain::elect::protobuf::WaitingNodesMessage::MergeFrom(from.waiting_nodes());
    }
    if (from.has_member_index()) {
      set_member_index(from.member_index());
    }
    if (from.has_sign_ch()) {
      set_sign_ch(from.sign_ch());
    }
    if (from.has_sign_res()) {
      set_sign_res(from.sign_res());
    }
    if (from.has_waiting_heartbeat()) {
      mutable_waiting_heartbeat()->::zjchain::elect::protobuf::WaitingNodeHeartbeat::MergeFrom(from.waiting_heartbeat());
    }
    if (from.has_leader_rotation()) {
      mutable_leader_rotation()->::zjchain::elect::protobuf::LeaderRotationMessage::MergeFrom(from.leader_rotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sync_stoke_req()) {
      mutable_sync_stoke_req()->::zjchain::elect::protobuf::SyncNodeStokeRequest::MergeFrom(from.sync_stoke_req());
    }
    if (from.has_sync_stoke_res()) {
      mutable_sync_stoke_res()->::zjchain::elect::protobuf::SyncNodeStokeResponse::MergeFrom(from.sync_stoke_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElectMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectMessage::CopyFrom(const ElectMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectMessage::IsInitialized() const {

  return true;
}

void ElectMessage::Swap(ElectMessage* other) {
  if (other != this) {
    std::swap(elect_block_, other->elect_block_);
    std::swap(prev_elect_block_, other->prev_elect_block_);
    std::swap(waiting_nodes_, other->waiting_nodes_);
    std::swap(member_index_, other->member_index_);
    std::swap(sign_ch_, other->sign_ch_);
    std::swap(sign_res_, other->sign_res_);
    std::swap(waiting_heartbeat_, other->waiting_heartbeat_);
    std::swap(leader_rotation_, other->leader_rotation_);
    std::swap(sync_stoke_req_, other->sync_stoke_req_);
    std::swap(sync_stoke_res_, other->sync_stoke_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElectMessage_descriptor_;
  metadata.reflection = ElectMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace elect
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
