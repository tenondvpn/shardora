// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/elect.proto

#include "protos/elect.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zjchain {
namespace elect {
namespace protobuf {
PROTOBUF_CONSTEXPR VerifyVecValue::VerifyVecValue(
    ::_pbi::ConstantInitialized)
  : x_c0_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_c1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_c0_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_c1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , z_c0_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , z_c1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_t_(0u){}
struct VerifyVecValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyVecValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyVecValueDefaultTypeInternal() {}
  union {
    VerifyVecValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyVecValueDefaultTypeInternal _VerifyVecValue_default_instance_;
PROTOBUF_CONSTEXPR BlsPublicKey::BlsPublicKey(
    ::_pbi::ConstantInitialized)
  : x_c0_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_c1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_c0_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_c1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BlsPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlsPublicKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlsPublicKeyDefaultTypeInternal() {}
  union {
    BlsPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlsPublicKeyDefaultTypeInternal _BlsPublicKey_default_instance_;
PROTOBUF_CONSTEXPR PrevMemberInfo::PrevMemberInfo(
    ::_pbi::ConstantInitialized)
  : x_c0_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_c1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_c0_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , y_c1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pool_idx_mod_num_(-1){}
struct PrevMemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrevMemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrevMemberInfoDefaultTypeInternal() {}
  union {
    PrevMemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrevMemberInfoDefaultTypeInternal _PrevMemberInfo_default_instance_;
PROTOBUF_CONSTEXPR PrevMembers::PrevMembers(
    ::_pbi::ConstantInitialized)
  : bls_pubkey_()
  , common_pubkey_(nullptr)
  , prev_elect_height_(uint64_t{0u}){}
struct PrevMembersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrevMembersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrevMembersDefaultTypeInternal() {}
  union {
    PrevMembers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrevMembersDefaultTypeInternal _PrevMembers_default_instance_;
PROTOBUF_CONSTEXPR member::member(
    ::_pbi::ConstantInitialized)
  : pubkey_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mining_amount_(uint64_t{0u})
  , pool_idx_mod_num_(0){}
struct memberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR memberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~memberDefaultTypeInternal() {}
  union {
    member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 memberDefaultTypeInternal _member_default_instance_;
PROTOBUF_CONSTEXPR ElectBlock::ElectBlock(
    ::_pbi::ConstantInitialized)
  : in_()
  , prev_members_(nullptr)
  , elect_height_(uint64_t{0u})
  , all_gas_amount_(uint64_t{0u})
  , gas_for_root_(uint64_t{0u})
  , shard_network_id_(0u){}
struct ElectBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElectBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElectBlockDefaultTypeInternal() {}
  union {
    ElectBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElectBlockDefaultTypeInternal _ElectBlock_default_instance_;
PROTOBUF_CONSTEXPR WaitingNodesMessage::WaitingNodesMessage(
    ::_pbi::ConstantInitialized)
  : nodes_filter_()
  , stoke_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , waiting_shard_id_(0u){}
struct WaitingNodesMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitingNodesMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitingNodesMessageDefaultTypeInternal() {}
  union {
    WaitingNodesMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitingNodesMessageDefaultTypeInternal _WaitingNodesMessage_default_instance_;
PROTOBUF_CONSTEXPR WaitingNodeHeartbeat::WaitingNodeHeartbeat(
    ::_pbi::ConstantInitialized)
  : public_ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , public_port_(0u)
  , network_id_(0u)
  , timestamp_sec_(uint64_t{0u}){}
struct WaitingNodeHeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitingNodeHeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitingNodeHeartbeatDefaultTypeInternal() {}
  union {
    WaitingNodeHeartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitingNodeHeartbeatDefaultTypeInternal _WaitingNodeHeartbeat_default_instance_;
PROTOBUF_CONSTEXPR LeaderRotationMessage::LeaderRotationMessage(
    ::_pbi::ConstantInitialized)
  : leader_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pool_mod_num_(0u){}
struct LeaderRotationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaderRotationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaderRotationMessageDefaultTypeInternal() {}
  union {
    LeaderRotationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaderRotationMessageDefaultTypeInternal _LeaderRotationMessage_default_instance_;
PROTOBUF_CONSTEXPR SyncNodeStokeItem::SyncNodeStokeItem(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , synced_tm_height_(uint64_t{0u}){}
struct SyncNodeStokeItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncNodeStokeItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncNodeStokeItemDefaultTypeInternal() {}
  union {
    SyncNodeStokeItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncNodeStokeItemDefaultTypeInternal _SyncNodeStokeItem_default_instance_;
PROTOBUF_CONSTEXPR SyncNodeStokeRequest::SyncNodeStokeRequest(
    ::_pbi::ConstantInitialized)
  : sync_item_()
  , now_tm_height_(uint64_t{0u}){}
struct SyncNodeStokeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncNodeStokeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncNodeStokeRequestDefaultTypeInternal() {}
  union {
    SyncNodeStokeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncNodeStokeRequestDefaultTypeInternal _SyncNodeStokeRequest_default_instance_;
PROTOBUF_CONSTEXPR SyncNodeStokeResItem::SyncNodeStokeResItem(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , balance_(uint64_t{0u}){}
struct SyncNodeStokeResItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncNodeStokeResItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncNodeStokeResItemDefaultTypeInternal() {}
  union {
    SyncNodeStokeResItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncNodeStokeResItemDefaultTypeInternal _SyncNodeStokeResItem_default_instance_;
PROTOBUF_CONSTEXPR SyncNodeStokeResponse::SyncNodeStokeResponse(
    ::_pbi::ConstantInitialized)
  : items_()
  , now_tm_height_(uint64_t{0u}){}
struct SyncNodeStokeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncNodeStokeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncNodeStokeResponseDefaultTypeInternal() {}
  union {
    SyncNodeStokeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncNodeStokeResponseDefaultTypeInternal _SyncNodeStokeResponse_default_instance_;
PROTOBUF_CONSTEXPR ElectMessage::ElectMessage(
    ::_pbi::ConstantInitialized)
  : sign_ch_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sign_res_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , elect_block_(nullptr)
  , prev_elect_block_(nullptr)
  , waiting_nodes_(nullptr)
  , waiting_heartbeat_(nullptr)
  , leader_rotation_(nullptr)
  , sync_stoke_req_(nullptr)
  , sync_stoke_res_(nullptr)
  , member_index_(0){}
struct ElectMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElectMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElectMessageDefaultTypeInternal() {}
  union {
    ElectMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElectMessageDefaultTypeInternal _ElectMessage_default_instance_;
}  // namespace protobuf
}  // namespace elect
}  // namespace zjchain
static ::_pb::Metadata file_level_metadata_protos_2felect_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2felect_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2felect_2eproto = nullptr;

const uint32_t TableStruct_protos_2felect_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, x_c0_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, x_c1_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, y_c0_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, y_c1_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, z_c0_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, z_c1_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::VerifyVecValue, valid_t_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::BlsPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::BlsPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::BlsPublicKey, x_c0_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::BlsPublicKey, x_c1_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::BlsPublicKey, y_c0_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::BlsPublicKey, y_c1_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMemberInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMemberInfo, x_c0_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMemberInfo, x_c1_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMemberInfo, y_c0_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMemberInfo, y_c1_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMemberInfo, pool_idx_mod_num_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMembers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMembers, bls_pubkey_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMembers, prev_elect_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::PrevMembers, common_pubkey_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::member, pubkey_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::member, pool_idx_mod_num_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::member, mining_amount_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, in_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, prev_members_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, shard_network_id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, elect_height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, all_gas_amount_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectBlock, gas_for_root_),
  ~0u,
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodesMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodesMessage, nodes_filter_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodesMessage, waiting_shard_id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodesMessage, stoke_hash_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodeHeartbeat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodeHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodeHeartbeat, public_ip_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodeHeartbeat, public_port_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodeHeartbeat, network_id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::WaitingNodeHeartbeat, timestamp_sec_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::LeaderRotationMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::LeaderRotationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::LeaderRotationMessage, leader_id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::LeaderRotationMessage, pool_mod_num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeItem, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeItem, synced_tm_height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeRequest, sync_item_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeRequest, now_tm_height_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResItem, id_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResItem, balance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResponse, items_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::SyncNodeStokeResponse, now_tm_height_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, elect_block_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, prev_elect_block_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, waiting_nodes_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, member_index_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, sign_ch_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, sign_res_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, waiting_heartbeat_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, leader_rotation_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, sync_stoke_req_),
  PROTOBUF_FIELD_OFFSET(::zjchain::elect::protobuf::ElectMessage, sync_stoke_res_),
  2,
  3,
  4,
  9,
  0,
  1,
  5,
  6,
  7,
  8,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::zjchain::elect::protobuf::VerifyVecValue)},
  { 20, 30, -1, sizeof(::zjchain::elect::protobuf::BlsPublicKey)},
  { 34, 45, -1, sizeof(::zjchain::elect::protobuf::PrevMemberInfo)},
  { 50, 59, -1, sizeof(::zjchain::elect::protobuf::PrevMembers)},
  { 62, 71, -1, sizeof(::zjchain::elect::protobuf::member)},
  { 74, 86, -1, sizeof(::zjchain::elect::protobuf::ElectBlock)},
  { 92, 101, -1, sizeof(::zjchain::elect::protobuf::WaitingNodesMessage)},
  { 104, 114, -1, sizeof(::zjchain::elect::protobuf::WaitingNodeHeartbeat)},
  { 118, 126, -1, sizeof(::zjchain::elect::protobuf::LeaderRotationMessage)},
  { 128, 136, -1, sizeof(::zjchain::elect::protobuf::SyncNodeStokeItem)},
  { 138, 146, -1, sizeof(::zjchain::elect::protobuf::SyncNodeStokeRequest)},
  { 148, 156, -1, sizeof(::zjchain::elect::protobuf::SyncNodeStokeResItem)},
  { 158, 166, -1, sizeof(::zjchain::elect::protobuf::SyncNodeStokeResponse)},
  { 168, 184, -1, sizeof(::zjchain::elect::protobuf::ElectMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zjchain::elect::protobuf::_VerifyVecValue_default_instance_._instance,
  &::zjchain::elect::protobuf::_BlsPublicKey_default_instance_._instance,
  &::zjchain::elect::protobuf::_PrevMemberInfo_default_instance_._instance,
  &::zjchain::elect::protobuf::_PrevMembers_default_instance_._instance,
  &::zjchain::elect::protobuf::_member_default_instance_._instance,
  &::zjchain::elect::protobuf::_ElectBlock_default_instance_._instance,
  &::zjchain::elect::protobuf::_WaitingNodesMessage_default_instance_._instance,
  &::zjchain::elect::protobuf::_WaitingNodeHeartbeat_default_instance_._instance,
  &::zjchain::elect::protobuf::_LeaderRotationMessage_default_instance_._instance,
  &::zjchain::elect::protobuf::_SyncNodeStokeItem_default_instance_._instance,
  &::zjchain::elect::protobuf::_SyncNodeStokeRequest_default_instance_._instance,
  &::zjchain::elect::protobuf::_SyncNodeStokeResItem_default_instance_._instance,
  &::zjchain::elect::protobuf::_SyncNodeStokeResponse_default_instance_._instance,
  &::zjchain::elect::protobuf::_ElectMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2felect_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022protos/elect.proto\022\026zjchain.elect.prot"
  "obuf\"u\n\016VerifyVecValue\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004"
  "x_c1\030\002 \001(\014\022\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\022\014"
  "\n\004z_c0\030\005 \001(\014\022\014\n\004z_c1\030\006 \001(\014\022\017\n\007valid_t\030\007 "
  "\001(\r\"F\n\014BlsPublicKey\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004x_c"
  "1\030\002 \001(\014\022\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\"f\n\016P"
  "revMemberInfo\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004x_c1\030\002 \001("
  "\014\022\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\022\034\n\020pool_id"
  "x_mod_num\030\005 \001(\005:\002-1\"\241\001\n\013PrevMembers\022:\n\nb"
  "ls_pubkey\030\001 \003(\0132&.zjchain.elect.protobuf"
  ".PrevMemberInfo\022\031\n\021prev_elect_height\030\002 \001"
  "(\004\022;\n\rcommon_pubkey\030\003 \001(\0132$.zjchain.elec"
  "t.protobuf.BlsPublicKey\"I\n\006member\022\016\n\006pub"
  "key\030\001 \001(\014\022\030\n\020pool_idx_mod_num\030\002 \001(\005\022\025\n\rm"
  "ining_amount\030\003 \001(\004\"\321\001\n\nElectBlock\022*\n\002in\030"
  "\001 \003(\0132\036.zjchain.elect.protobuf.member\0229\n"
  "\014prev_members\030\002 \001(\0132#.zjchain.elect.prot"
  "obuf.PrevMembers\022\030\n\020shard_network_id\030\003 \001"
  "(\r\022\024\n\014elect_height\030\004 \001(\004\022\026\n\016all_gas_amou"
  "nt\030\005 \001(\004\022\024\n\014gas_for_root\030\006 \001(\004\"Y\n\023Waitin"
  "gNodesMessage\022\024\n\014nodes_filter\030\001 \003(\004\022\030\n\020w"
  "aiting_shard_id\030\002 \001(\r\022\022\n\nstoke_hash\030\003 \001("
  "\014\"i\n\024WaitingNodeHeartbeat\022\021\n\tpublic_ip\030\001"
  " \001(\014\022\023\n\013public_port\030\002 \001(\r\022\022\n\nnetwork_id\030"
  "\003 \001(\r\022\025\n\rtimestamp_sec\030\004 \001(\004\"@\n\025LeaderRo"
  "tationMessage\022\021\n\tleader_id\030\001 \001(\014\022\024\n\014pool"
  "_mod_num\030\002 \001(\r\"9\n\021SyncNodeStokeItem\022\n\n\002i"
  "d\030\001 \001(\014\022\030\n\020synced_tm_height\030\002 \001(\004\"k\n\024Syn"
  "cNodeStokeRequest\022<\n\tsync_item\030\001 \003(\0132).z"
  "jchain.elect.protobuf.SyncNodeStokeItem\022"
  "\025\n\rnow_tm_height\030\002 \001(\004\"3\n\024SyncNodeStokeR"
  "esItem\022\n\n\002id\030\001 \001(\014\022\017\n\007balance\030\002 \001(\004\"k\n\025S"
  "yncNodeStokeResponse\022;\n\005items\030\001 \003(\0132,.zj"
  "chain.elect.protobuf.SyncNodeStokeResIte"
  "m\022\025\n\rnow_tm_height\030\002 \001(\004\"\240\004\n\014ElectMessag"
  "e\0227\n\013elect_block\030\001 \001(\0132\".zjchain.elect.p"
  "rotobuf.ElectBlock\022<\n\020prev_elect_block\030\002"
  " \001(\0132\".zjchain.elect.protobuf.ElectBlock"
  "\022B\n\rwaiting_nodes\030\003 \001(\0132+.zjchain.elect."
  "protobuf.WaitingNodesMessage\022\024\n\014member_i"
  "ndex\030\004 \001(\005\022\017\n\007sign_ch\030\005 \001(\014\022\020\n\010sign_res\030"
  "\006 \001(\014\022G\n\021waiting_heartbeat\030\007 \001(\0132,.zjcha"
  "in.elect.protobuf.WaitingNodeHeartbeat\022F"
  "\n\017leader_rotation\030\010 \001(\0132-.zjchain.elect."
  "protobuf.LeaderRotationMessage\022D\n\016sync_s"
  "toke_req\030\t \001(\0132,.zjchain.elect.protobuf."
  "SyncNodeStokeRequest\022E\n\016sync_stoke_res\030\n"
  " \001(\0132-.zjchain.elect.protobuf.SyncNodeSt"
  "okeResponse"
  ;
static ::_pbi::once_flag descriptor_table_protos_2felect_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2felect_2eproto = {
    false, false, 1931, descriptor_table_protodef_protos_2felect_2eproto,
    "protos/elect.proto",
    &descriptor_table_protos_2felect_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_protos_2felect_2eproto::offsets,
    file_level_metadata_protos_2felect_2eproto, file_level_enum_descriptors_protos_2felect_2eproto,
    file_level_service_descriptors_protos_2felect_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2felect_2eproto_getter() {
  return &descriptor_table_protos_2felect_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2felect_2eproto(&descriptor_table_protos_2felect_2eproto);
namespace zjchain {
namespace elect {
namespace protobuf {

// ===================================================================

class VerifyVecValue::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyVecValue>()._has_bits_);
  static void set_has_x_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_valid_t(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VerifyVecValue::VerifyVecValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.VerifyVecValue)
}
VerifyVecValue::VerifyVecValue(const VerifyVecValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_c0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_c0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x_c0()) {
    x_c0_.Set(from._internal_x_c0(), 
      GetArenaForAllocation());
  }
  x_c1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_c1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x_c1()) {
    x_c1_.Set(from._internal_x_c1(), 
      GetArenaForAllocation());
  }
  y_c0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    y_c0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y_c0()) {
    y_c0_.Set(from._internal_y_c0(), 
      GetArenaForAllocation());
  }
  y_c1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    y_c1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y_c1()) {
    y_c1_.Set(from._internal_y_c1(), 
      GetArenaForAllocation());
  }
  z_c0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    z_c0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_z_c0()) {
    z_c0_.Set(from._internal_z_c0(), 
      GetArenaForAllocation());
  }
  z_c1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    z_c1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_z_c1()) {
    z_c1_.Set(from._internal_z_c1(), 
      GetArenaForAllocation());
  }
  valid_t_ = from.valid_t_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.VerifyVecValue)
}

inline void VerifyVecValue::SharedCtor() {
x_c0_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_c0_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_c1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_c1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_c0_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  y_c0_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_c1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  y_c1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
z_c0_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  z_c0_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
z_c1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  z_c1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_t_ = 0u;
}

VerifyVecValue::~VerifyVecValue() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.VerifyVecValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyVecValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  x_c0_.Destroy();
  x_c1_.Destroy();
  y_c0_.Destroy();
  y_c1_.Destroy();
  z_c0_.Destroy();
  z_c1_.Destroy();
}

void VerifyVecValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VerifyVecValue::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.VerifyVecValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_c0_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      x_c1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      y_c0_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      y_c1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      z_c0_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      z_c1_.ClearNonDefaultToEmpty();
    }
  }
  valid_t_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyVecValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes x_c0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_x_c0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes x_c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_x_c1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes y_c0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_y_c0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes y_c1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_y_c1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes z_c0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_z_c0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes z_c1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_z_c1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 valid_t = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_valid_t(&has_bits);
          valid_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyVecValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.VerifyVecValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x_c0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_y_c1(), target);
  }

  // optional bytes z_c0 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_z_c0(), target);
  }

  // optional bytes z_c1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_z_c1(), target);
  }

  // optional uint32 valid_t = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_valid_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.VerifyVecValue)
  return target;
}

size_t VerifyVecValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.VerifyVecValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes x_c0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_x_c0());
    }

    // optional bytes x_c1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_x_c1());
    }

    // optional bytes y_c0 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_y_c0());
    }

    // optional bytes y_c1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_y_c1());
    }

    // optional bytes z_c0 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_z_c0());
    }

    // optional bytes z_c1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_z_c1());
    }

    // optional uint32 valid_t = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_valid_t());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyVecValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyVecValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyVecValue::GetClassData() const { return &_class_data_; }

void VerifyVecValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerifyVecValue *>(to)->MergeFrom(
      static_cast<const VerifyVecValue &>(from));
}


void VerifyVecValue::MergeFrom(const VerifyVecValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.VerifyVecValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_x_c0(from._internal_x_c0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_x_c1(from._internal_x_c1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_y_c0(from._internal_y_c0());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_y_c1(from._internal_y_c1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_z_c0(from._internal_z_c0());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_z_c1(from._internal_z_c1());
    }
    if (cached_has_bits & 0x00000040u) {
      valid_t_ = from.valid_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyVecValue::CopyFrom(const VerifyVecValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.VerifyVecValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyVecValue::IsInitialized() const {
  return true;
}

void VerifyVecValue::InternalSwap(VerifyVecValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_c0_, lhs_arena,
      &other->x_c0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_c1_, lhs_arena,
      &other->x_c1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &y_c0_, lhs_arena,
      &other->y_c0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &y_c1_, lhs_arena,
      &other->y_c1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &z_c0_, lhs_arena,
      &other->z_c0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &z_c1_, lhs_arena,
      &other->z_c1_, rhs_arena
  );
  swap(valid_t_, other->valid_t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyVecValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[0]);
}

// ===================================================================

class BlsPublicKey::_Internal {
 public:
  using HasBits = decltype(std::declval<BlsPublicKey>()._has_bits_);
  static void set_has_x_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BlsPublicKey::BlsPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.BlsPublicKey)
}
BlsPublicKey::BlsPublicKey(const BlsPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_c0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_c0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x_c0()) {
    x_c0_.Set(from._internal_x_c0(), 
      GetArenaForAllocation());
  }
  x_c1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_c1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x_c1()) {
    x_c1_.Set(from._internal_x_c1(), 
      GetArenaForAllocation());
  }
  y_c0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    y_c0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y_c0()) {
    y_c0_.Set(from._internal_y_c0(), 
      GetArenaForAllocation());
  }
  y_c1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    y_c1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y_c1()) {
    y_c1_.Set(from._internal_y_c1(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.BlsPublicKey)
}

inline void BlsPublicKey::SharedCtor() {
x_c0_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_c0_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_c1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_c1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_c0_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  y_c0_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_c1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  y_c1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlsPublicKey::~BlsPublicKey() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.BlsPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlsPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  x_c0_.Destroy();
  x_c1_.Destroy();
  y_c0_.Destroy();
  y_c1_.Destroy();
}

void BlsPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlsPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.BlsPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_c0_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      x_c1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      y_c0_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      y_c1_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlsPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes x_c0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_x_c0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes x_c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_x_c1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes y_c0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_y_c0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes y_c1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_y_c1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlsPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.BlsPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x_c0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_y_c1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.BlsPublicKey)
  return target;
}

size_t BlsPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.BlsPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes x_c0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_x_c0());
    }

    // optional bytes x_c1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_x_c1());
    }

    // optional bytes y_c0 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_y_c0());
    }

    // optional bytes y_c1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_y_c1());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlsPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlsPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlsPublicKey::GetClassData() const { return &_class_data_; }

void BlsPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlsPublicKey *>(to)->MergeFrom(
      static_cast<const BlsPublicKey &>(from));
}


void BlsPublicKey::MergeFrom(const BlsPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.BlsPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_x_c0(from._internal_x_c0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_x_c1(from._internal_x_c1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_y_c0(from._internal_y_c0());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_y_c1(from._internal_y_c1());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlsPublicKey::CopyFrom(const BlsPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.BlsPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlsPublicKey::IsInitialized() const {
  return true;
}

void BlsPublicKey::InternalSwap(BlsPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_c0_, lhs_arena,
      &other->x_c0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_c1_, lhs_arena,
      &other->x_c1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &y_c0_, lhs_arena,
      &other->y_c0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &y_c1_, lhs_arena,
      &other->y_c1_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlsPublicKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[1]);
}

// ===================================================================

class PrevMemberInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PrevMemberInfo>()._has_bits_);
  static void set_has_x_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_c0(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pool_idx_mod_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PrevMemberInfo::PrevMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.PrevMemberInfo)
}
PrevMemberInfo::PrevMemberInfo(const PrevMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_c0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_c0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x_c0()) {
    x_c0_.Set(from._internal_x_c0(), 
      GetArenaForAllocation());
  }
  x_c1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_c1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x_c1()) {
    x_c1_.Set(from._internal_x_c1(), 
      GetArenaForAllocation());
  }
  y_c0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    y_c0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y_c0()) {
    y_c0_.Set(from._internal_y_c0(), 
      GetArenaForAllocation());
  }
  y_c1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    y_c1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y_c1()) {
    y_c1_.Set(from._internal_y_c1(), 
      GetArenaForAllocation());
  }
  pool_idx_mod_num_ = from.pool_idx_mod_num_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.PrevMemberInfo)
}

inline void PrevMemberInfo::SharedCtor() {
x_c0_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_c0_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
x_c1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_c1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_c0_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  y_c0_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
y_c1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  y_c1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pool_idx_mod_num_ = -1;
}

PrevMemberInfo::~PrevMemberInfo() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.PrevMemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrevMemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  x_c0_.Destroy();
  x_c1_.Destroy();
  y_c0_.Destroy();
  y_c1_.Destroy();
}

void PrevMemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrevMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.PrevMemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_c0_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      x_c1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      y_c0_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      y_c1_.ClearNonDefaultToEmpty();
    }
    pool_idx_mod_num_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevMemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes x_c0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_x_c0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes x_c1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_x_c1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes y_c0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_y_c0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes y_c1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_y_c1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pool_idx_mod_num = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pool_idx_mod_num(&has_bits);
          pool_idx_mod_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrevMemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.PrevMemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x_c0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_y_c1(), target);
  }

  // optional int32 pool_idx_mod_num = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_pool_idx_mod_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.PrevMemberInfo)
  return target;
}

size_t PrevMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.PrevMemberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes x_c0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_x_c0());
    }

    // optional bytes x_c1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_x_c1());
    }

    // optional bytes y_c0 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_y_c0());
    }

    // optional bytes y_c1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_y_c1());
    }

    // optional int32 pool_idx_mod_num = 5 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pool_idx_mod_num());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrevMemberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrevMemberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrevMemberInfo::GetClassData() const { return &_class_data_; }

void PrevMemberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrevMemberInfo *>(to)->MergeFrom(
      static_cast<const PrevMemberInfo &>(from));
}


void PrevMemberInfo::MergeFrom(const PrevMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.PrevMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_x_c0(from._internal_x_c0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_x_c1(from._internal_x_c1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_y_c0(from._internal_y_c0());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_y_c1(from._internal_y_c1());
    }
    if (cached_has_bits & 0x00000010u) {
      pool_idx_mod_num_ = from.pool_idx_mod_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrevMemberInfo::CopyFrom(const PrevMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.PrevMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevMemberInfo::IsInitialized() const {
  return true;
}

void PrevMemberInfo::InternalSwap(PrevMemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_c0_, lhs_arena,
      &other->x_c0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_c1_, lhs_arena,
      &other->x_c1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &y_c0_, lhs_arena,
      &other->y_c0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &y_c1_, lhs_arena,
      &other->y_c1_, rhs_arena
  );
  swap(pool_idx_mod_num_, other->pool_idx_mod_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevMemberInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[2]);
}

// ===================================================================

class PrevMembers::_Internal {
 public:
  using HasBits = decltype(std::declval<PrevMembers>()._has_bits_);
  static void set_has_prev_elect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zjchain::elect::protobuf::BlsPublicKey& common_pubkey(const PrevMembers* msg);
  static void set_has_common_pubkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zjchain::elect::protobuf::BlsPublicKey&
PrevMembers::_Internal::common_pubkey(const PrevMembers* msg) {
  return *msg->common_pubkey_;
}
PrevMembers::PrevMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bls_pubkey_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.PrevMembers)
}
PrevMembers::PrevMembers(const PrevMembers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bls_pubkey_(from.bls_pubkey_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common_pubkey()) {
    common_pubkey_ = new ::zjchain::elect::protobuf::BlsPublicKey(*from.common_pubkey_);
  } else {
    common_pubkey_ = nullptr;
  }
  prev_elect_height_ = from.prev_elect_height_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.PrevMembers)
}

inline void PrevMembers::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_pubkey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_elect_height_) -
    reinterpret_cast<char*>(&common_pubkey_)) + sizeof(prev_elect_height_));
}

PrevMembers::~PrevMembers() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.PrevMembers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrevMembers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_pubkey_;
}

void PrevMembers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrevMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.PrevMembers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bls_pubkey_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(common_pubkey_ != nullptr);
    common_pubkey_->Clear();
  }
  prev_elect_height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevMembers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bls_pubkey(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 prev_elect_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_prev_elect_height(&has_bits);
          prev_elect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_pubkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrevMembers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.PrevMembers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bls_pubkey_size()); i < n; i++) {
    const auto& repfield = this->_internal_bls_pubkey(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 prev_elect_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prev_elect_height(), target);
  }

  // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::common_pubkey(this),
        _Internal::common_pubkey(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.PrevMembers)
  return target;
}

size_t PrevMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.PrevMembers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.PrevMemberInfo bls_pubkey = 1;
  total_size += 1UL * this->_internal_bls_pubkey_size();
  for (const auto& msg : this->bls_pubkey_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zjchain.elect.protobuf.BlsPublicKey common_pubkey = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *common_pubkey_);
    }

    // optional uint64 prev_elect_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_prev_elect_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrevMembers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrevMembers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrevMembers::GetClassData() const { return &_class_data_; }

void PrevMembers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrevMembers *>(to)->MergeFrom(
      static_cast<const PrevMembers &>(from));
}


void PrevMembers::MergeFrom(const PrevMembers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.PrevMembers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bls_pubkey_.MergeFrom(from.bls_pubkey_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_common_pubkey()->::zjchain::elect::protobuf::BlsPublicKey::MergeFrom(from._internal_common_pubkey());
    }
    if (cached_has_bits & 0x00000002u) {
      prev_elect_height_ = from.prev_elect_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrevMembers::CopyFrom(const PrevMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.PrevMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevMembers::IsInitialized() const {
  return true;
}

void PrevMembers::InternalSwap(PrevMembers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bls_pubkey_.InternalSwap(&other->bls_pubkey_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrevMembers, prev_elect_height_)
      + sizeof(PrevMembers::prev_elect_height_)
      - PROTOBUF_FIELD_OFFSET(PrevMembers, common_pubkey_)>(
          reinterpret_cast<char*>(&common_pubkey_),
          reinterpret_cast<char*>(&other->common_pubkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevMembers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[3]);
}

// ===================================================================

class member::_Internal {
 public:
  using HasBits = decltype(std::declval<member>()._has_bits_);
  static void set_has_pubkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pool_idx_mod_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mining_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

member::member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.member)
}
member::member(const member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pubkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pubkey()) {
    pubkey_.Set(from._internal_pubkey(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mining_amount_, &from.mining_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&pool_idx_mod_num_) -
    reinterpret_cast<char*>(&mining_amount_)) + sizeof(pool_idx_mod_num_));
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.member)
}

inline void member::SharedCtor() {
pubkey_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pubkey_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mining_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pool_idx_mod_num_) -
    reinterpret_cast<char*>(&mining_amount_)) + sizeof(pool_idx_mod_num_));
}

member::~member() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.member)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pubkey_.Destroy();
}

void member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void member::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.member)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pubkey_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&mining_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pool_idx_mod_num_) -
        reinterpret_cast<char*>(&mining_amount_)) + sizeof(pool_idx_mod_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* member::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pool_idx_mod_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pool_idx_mod_num(&has_bits);
          pool_idx_mod_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 mining_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mining_amount(&has_bits);
          mining_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* member::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.member)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes pubkey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // optional int32 pool_idx_mod_num = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pool_idx_mod_num(), target);
  }

  // optional uint64 mining_amount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_mining_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.member)
  return target;
}

size_t member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.member)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes pubkey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pubkey());
    }

    // optional uint64 mining_amount = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mining_amount());
    }

    // optional int32 pool_idx_mod_num = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pool_idx_mod_num());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*member::GetClassData() const { return &_class_data_; }

void member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<member *>(to)->MergeFrom(
      static_cast<const member &>(from));
}


void member::MergeFrom(const member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.member)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pubkey(from._internal_pubkey());
    }
    if (cached_has_bits & 0x00000002u) {
      mining_amount_ = from.mining_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      pool_idx_mod_num_ = from.pool_idx_mod_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void member::CopyFrom(const member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool member::IsInitialized() const {
  return true;
}

void member::InternalSwap(member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pubkey_, lhs_arena,
      &other->pubkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(member, pool_idx_mod_num_)
      + sizeof(member::pool_idx_mod_num_)
      - PROTOBUF_FIELD_OFFSET(member, mining_amount_)>(
          reinterpret_cast<char*>(&mining_amount_),
          reinterpret_cast<char*>(&other->mining_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata member::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[4]);
}

// ===================================================================

class ElectBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<ElectBlock>()._has_bits_);
  static const ::zjchain::elect::protobuf::PrevMembers& prev_members(const ElectBlock* msg);
  static void set_has_prev_members(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shard_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_elect_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_all_gas_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gas_for_root(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zjchain::elect::protobuf::PrevMembers&
ElectBlock::_Internal::prev_members(const ElectBlock* msg) {
  return *msg->prev_members_;
}
ElectBlock::ElectBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  in_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.ElectBlock)
}
ElectBlock::ElectBlock(const ElectBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      in_(from.in_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prev_members()) {
    prev_members_ = new ::zjchain::elect::protobuf::PrevMembers(*from.prev_members_);
  } else {
    prev_members_ = nullptr;
  }
  ::memcpy(&elect_height_, &from.elect_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_network_id_) -
    reinterpret_cast<char*>(&elect_height_)) + sizeof(shard_network_id_));
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.ElectBlock)
}

inline void ElectBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prev_members_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shard_network_id_) -
    reinterpret_cast<char*>(&prev_members_)) + sizeof(shard_network_id_));
}

ElectBlock::~ElectBlock() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.ElectBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElectBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prev_members_;
}

void ElectBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElectBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.ElectBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(prev_members_ != nullptr);
    prev_members_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&elect_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shard_network_id_) -
        reinterpret_cast<char*>(&elect_height_)) + sizeof(shard_network_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zjchain.elect.protobuf.member in = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_members(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shard_network_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shard_network_id(&has_bits);
          shard_network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 elect_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_elect_height(&has_bits);
          elect_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 all_gas_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_all_gas_amount(&has_bits);
          all_gas_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gas_for_root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_gas_for_root(&has_bits);
          gas_for_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElectBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.ElectBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.member in = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_in_size()); i < n; i++) {
    const auto& repfield = this->_internal_in(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prev_members(this),
        _Internal::prev_members(this).GetCachedSize(), target, stream);
  }

  // optional uint32 shard_network_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shard_network_id(), target);
  }

  // optional uint64 elect_height = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_elect_height(), target);
  }

  // optional uint64 all_gas_amount = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_all_gas_amount(), target);
  }

  // optional uint64 gas_for_root = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_for_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.ElectBlock)
  return target;
}

size_t ElectBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.ElectBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.member in = 1;
  total_size += 1UL * this->_internal_in_size();
  for (const auto& msg : this->in_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .zjchain.elect.protobuf.PrevMembers prev_members = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prev_members_);
    }

    // optional uint64 elect_height = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elect_height());
    }

    // optional uint64 all_gas_amount = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_all_gas_amount());
    }

    // optional uint64 gas_for_root = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_for_root());
    }

    // optional uint32 shard_network_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shard_network_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElectBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ElectBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElectBlock::GetClassData() const { return &_class_data_; }

void ElectBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ElectBlock *>(to)->MergeFrom(
      static_cast<const ElectBlock &>(from));
}


void ElectBlock::MergeFrom(const ElectBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.ElectBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_prev_members()->::zjchain::elect::protobuf::PrevMembers::MergeFrom(from._internal_prev_members());
    }
    if (cached_has_bits & 0x00000002u) {
      elect_height_ = from.elect_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      all_gas_amount_ = from.all_gas_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      gas_for_root_ = from.gas_for_root_;
    }
    if (cached_has_bits & 0x00000010u) {
      shard_network_id_ = from.shard_network_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElectBlock::CopyFrom(const ElectBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.ElectBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectBlock::IsInitialized() const {
  return true;
}

void ElectBlock::InternalSwap(ElectBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  in_.InternalSwap(&other->in_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectBlock, shard_network_id_)
      + sizeof(ElectBlock::shard_network_id_)
      - PROTOBUF_FIELD_OFFSET(ElectBlock, prev_members_)>(
          reinterpret_cast<char*>(&prev_members_),
          reinterpret_cast<char*>(&other->prev_members_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[5]);
}

// ===================================================================

class WaitingNodesMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<WaitingNodesMessage>()._has_bits_);
  static void set_has_waiting_shard_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stoke_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WaitingNodesMessage::WaitingNodesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_filter_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.WaitingNodesMessage)
}
WaitingNodesMessage::WaitingNodesMessage(const WaitingNodesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nodes_filter_(from.nodes_filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stoke_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stoke_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stoke_hash()) {
    stoke_hash_.Set(from._internal_stoke_hash(), 
      GetArenaForAllocation());
  }
  waiting_shard_id_ = from.waiting_shard_id_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.WaitingNodesMessage)
}

inline void WaitingNodesMessage::SharedCtor() {
stoke_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stoke_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
waiting_shard_id_ = 0u;
}

WaitingNodesMessage::~WaitingNodesMessage() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.WaitingNodesMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitingNodesMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stoke_hash_.Destroy();
}

void WaitingNodesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitingNodesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.WaitingNodesMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_filter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stoke_hash_.ClearNonDefaultToEmpty();
  }
  waiting_shard_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitingNodesMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 nodes_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nodes_filter(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_nodes_filter(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 waiting_shard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_waiting_shard_id(&has_bits);
          waiting_shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes stoke_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stoke_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitingNodesMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.WaitingNodesMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 nodes_filter = 1;
  for (int i = 0, n = this->_internal_nodes_filter_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nodes_filter(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 waiting_shard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_waiting_shard_id(), target);
  }

  // optional bytes stoke_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_stoke_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.WaitingNodesMessage)
  return target;
}

size_t WaitingNodesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.WaitingNodesMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 nodes_filter = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->nodes_filter_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_nodes_filter_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes stoke_hash = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_stoke_hash());
    }

    // optional uint32 waiting_shard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_waiting_shard_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitingNodesMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitingNodesMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitingNodesMessage::GetClassData() const { return &_class_data_; }

void WaitingNodesMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitingNodesMessage *>(to)->MergeFrom(
      static_cast<const WaitingNodesMessage &>(from));
}


void WaitingNodesMessage::MergeFrom(const WaitingNodesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.WaitingNodesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_filter_.MergeFrom(from.nodes_filter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stoke_hash(from._internal_stoke_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      waiting_shard_id_ = from.waiting_shard_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitingNodesMessage::CopyFrom(const WaitingNodesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.WaitingNodesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitingNodesMessage::IsInitialized() const {
  return true;
}

void WaitingNodesMessage::InternalSwap(WaitingNodesMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_filter_.InternalSwap(&other->nodes_filter_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stoke_hash_, lhs_arena,
      &other->stoke_hash_, rhs_arena
  );
  swap(waiting_shard_id_, other->waiting_shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitingNodesMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[6]);
}

// ===================================================================

class WaitingNodeHeartbeat::_Internal {
 public:
  using HasBits = decltype(std::declval<WaitingNodeHeartbeat>()._has_bits_);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WaitingNodeHeartbeat::WaitingNodeHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.WaitingNodeHeartbeat)
}
WaitingNodeHeartbeat::WaitingNodeHeartbeat(const WaitingNodeHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_ip()) {
    public_ip_.Set(from._internal_public_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&public_port_, &from.public_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&public_port_)) + sizeof(timestamp_sec_));
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.WaitingNodeHeartbeat)
}

inline void WaitingNodeHeartbeat::SharedCtor() {
public_ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&public_port_)) + sizeof(timestamp_sec_));
}

WaitingNodeHeartbeat::~WaitingNodeHeartbeat() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.WaitingNodeHeartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitingNodeHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_ip_.Destroy();
}

void WaitingNodeHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitingNodeHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.WaitingNodeHeartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    public_ip_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&public_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_sec_) -
        reinterpret_cast<char*>(&public_port_)) + sizeof(timestamp_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitingNodeHeartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes public_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 public_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_public_port(&has_bits);
          public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 network_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_network_id(&has_bits);
          network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitingNodeHeartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.WaitingNodeHeartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_ip(), target);
  }

  // optional uint32 public_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_public_port(), target);
  }

  // optional uint32 network_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_network_id(), target);
  }

  // optional uint64 timestamp_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.WaitingNodeHeartbeat)
  return target;
}

size_t WaitingNodeHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.WaitingNodeHeartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes public_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_ip());
    }

    // optional uint32 public_port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_public_port());
    }

    // optional uint32 network_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_network_id());
    }

    // optional uint64 timestamp_sec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_sec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitingNodeHeartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitingNodeHeartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitingNodeHeartbeat::GetClassData() const { return &_class_data_; }

void WaitingNodeHeartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitingNodeHeartbeat *>(to)->MergeFrom(
      static_cast<const WaitingNodeHeartbeat &>(from));
}


void WaitingNodeHeartbeat::MergeFrom(const WaitingNodeHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.WaitingNodeHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_ip(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      public_port_ = from.public_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_id_ = from.network_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitingNodeHeartbeat::CopyFrom(const WaitingNodeHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.WaitingNodeHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitingNodeHeartbeat::IsInitialized() const {
  return true;
}

void WaitingNodeHeartbeat::InternalSwap(WaitingNodeHeartbeat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &public_ip_, lhs_arena,
      &other->public_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitingNodeHeartbeat, timestamp_sec_)
      + sizeof(WaitingNodeHeartbeat::timestamp_sec_)
      - PROTOBUF_FIELD_OFFSET(WaitingNodeHeartbeat, public_port_)>(
          reinterpret_cast<char*>(&public_port_),
          reinterpret_cast<char*>(&other->public_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitingNodeHeartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[7]);
}

// ===================================================================

class LeaderRotationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderRotationMessage>()._has_bits_);
  static void set_has_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pool_mod_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LeaderRotationMessage::LeaderRotationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.LeaderRotationMessage)
}
LeaderRotationMessage::LeaderRotationMessage(const LeaderRotationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    leader_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leader_id()) {
    leader_id_.Set(from._internal_leader_id(), 
      GetArenaForAllocation());
  }
  pool_mod_num_ = from.pool_mod_num_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.LeaderRotationMessage)
}

inline void LeaderRotationMessage::SharedCtor() {
leader_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  leader_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pool_mod_num_ = 0u;
}

LeaderRotationMessage::~LeaderRotationMessage() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.LeaderRotationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaderRotationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  leader_id_.Destroy();
}

void LeaderRotationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaderRotationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.LeaderRotationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leader_id_.ClearNonDefaultToEmpty();
  }
  pool_mod_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderRotationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pool_mod_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pool_mod_num(&has_bits);
          pool_mod_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaderRotationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.LeaderRotationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes leader_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // optional uint32 pool_mod_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pool_mod_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.LeaderRotationMessage)
  return target;
}

size_t LeaderRotationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.LeaderRotationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes leader_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_leader_id());
    }

    // optional uint32 pool_mod_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pool_mod_num());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaderRotationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeaderRotationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaderRotationMessage::GetClassData() const { return &_class_data_; }

void LeaderRotationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeaderRotationMessage *>(to)->MergeFrom(
      static_cast<const LeaderRotationMessage &>(from));
}


void LeaderRotationMessage::MergeFrom(const LeaderRotationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.LeaderRotationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_leader_id(from._internal_leader_id());
    }
    if (cached_has_bits & 0x00000002u) {
      pool_mod_num_ = from.pool_mod_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaderRotationMessage::CopyFrom(const LeaderRotationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.LeaderRotationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderRotationMessage::IsInitialized() const {
  return true;
}

void LeaderRotationMessage::InternalSwap(LeaderRotationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &leader_id_, lhs_arena,
      &other->leader_id_, rhs_arena
  );
  swap(pool_mod_num_, other->pool_mod_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderRotationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[8]);
}

// ===================================================================

class SyncNodeStokeItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncNodeStokeItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_synced_tm_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SyncNodeStokeItem::SyncNodeStokeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.SyncNodeStokeItem)
}
SyncNodeStokeItem::SyncNodeStokeItem(const SyncNodeStokeItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  synced_tm_height_ = from.synced_tm_height_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.SyncNodeStokeItem)
}

inline void SyncNodeStokeItem::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
synced_tm_height_ = uint64_t{0u};
}

SyncNodeStokeItem::~SyncNodeStokeItem() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.SyncNodeStokeItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncNodeStokeItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void SyncNodeStokeItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncNodeStokeItem::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.SyncNodeStokeItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  synced_tm_height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncNodeStokeItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 synced_tm_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_synced_tm_height(&has_bits);
          synced_tm_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncNodeStokeItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.SyncNodeStokeItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint64 synced_tm_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_synced_tm_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.SyncNodeStokeItem)
  return target;
}

size_t SyncNodeStokeItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.SyncNodeStokeItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional uint64 synced_tm_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_synced_tm_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncNodeStokeItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncNodeStokeItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncNodeStokeItem::GetClassData() const { return &_class_data_; }

void SyncNodeStokeItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncNodeStokeItem *>(to)->MergeFrom(
      static_cast<const SyncNodeStokeItem &>(from));
}


void SyncNodeStokeItem::MergeFrom(const SyncNodeStokeItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.SyncNodeStokeItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      synced_tm_height_ = from.synced_tm_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncNodeStokeItem::CopyFrom(const SyncNodeStokeItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.SyncNodeStokeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeItem::IsInitialized() const {
  return true;
}

void SyncNodeStokeItem::InternalSwap(SyncNodeStokeItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(synced_tm_height_, other->synced_tm_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncNodeStokeItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[9]);
}

// ===================================================================

class SyncNodeStokeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncNodeStokeRequest>()._has_bits_);
  static void set_has_now_tm_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncNodeStokeRequest::SyncNodeStokeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sync_item_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.SyncNodeStokeRequest)
}
SyncNodeStokeRequest::SyncNodeStokeRequest(const SyncNodeStokeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sync_item_(from.sync_item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  now_tm_height_ = from.now_tm_height_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.SyncNodeStokeRequest)
}

inline void SyncNodeStokeRequest::SharedCtor() {
now_tm_height_ = uint64_t{0u};
}

SyncNodeStokeRequest::~SyncNodeStokeRequest() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.SyncNodeStokeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncNodeStokeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncNodeStokeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncNodeStokeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.SyncNodeStokeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sync_item_.Clear();
  now_tm_height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncNodeStokeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sync_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 now_tm_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_now_tm_height(&has_bits);
          now_tm_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncNodeStokeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.SyncNodeStokeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sync_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_sync_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 now_tm_height = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_now_tm_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.SyncNodeStokeRequest)
  return target;
}

size_t SyncNodeStokeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.SyncNodeStokeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.SyncNodeStokeItem sync_item = 1;
  total_size += 1UL * this->_internal_sync_item_size();
  for (const auto& msg : this->sync_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 now_tm_height = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_now_tm_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncNodeStokeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncNodeStokeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncNodeStokeRequest::GetClassData() const { return &_class_data_; }

void SyncNodeStokeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncNodeStokeRequest *>(to)->MergeFrom(
      static_cast<const SyncNodeStokeRequest &>(from));
}


void SyncNodeStokeRequest::MergeFrom(const SyncNodeStokeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.SyncNodeStokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sync_item_.MergeFrom(from.sync_item_);
  if (from._internal_has_now_tm_height()) {
    _internal_set_now_tm_height(from._internal_now_tm_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncNodeStokeRequest::CopyFrom(const SyncNodeStokeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.SyncNodeStokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeRequest::IsInitialized() const {
  return true;
}

void SyncNodeStokeRequest::InternalSwap(SyncNodeStokeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sync_item_.InternalSwap(&other->sync_item_);
  swap(now_tm_height_, other->now_tm_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncNodeStokeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[10]);
}

// ===================================================================

class SyncNodeStokeResItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncNodeStokeResItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SyncNodeStokeResItem::SyncNodeStokeResItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.SyncNodeStokeResItem)
}
SyncNodeStokeResItem::SyncNodeStokeResItem(const SyncNodeStokeResItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.SyncNodeStokeResItem)
}

inline void SyncNodeStokeResItem::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
balance_ = uint64_t{0u};
}

SyncNodeStokeResItem::~SyncNodeStokeResItem() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.SyncNodeStokeResItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncNodeStokeResItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void SyncNodeStokeResItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncNodeStokeResItem::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.SyncNodeStokeResItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  balance_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncNodeStokeResItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncNodeStokeResItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.SyncNodeStokeResItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint64 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.SyncNodeStokeResItem)
  return target;
}

size_t SyncNodeStokeResItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.SyncNodeStokeResItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional uint64 balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncNodeStokeResItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncNodeStokeResItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncNodeStokeResItem::GetClassData() const { return &_class_data_; }

void SyncNodeStokeResItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncNodeStokeResItem *>(to)->MergeFrom(
      static_cast<const SyncNodeStokeResItem &>(from));
}


void SyncNodeStokeResItem::MergeFrom(const SyncNodeStokeResItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.SyncNodeStokeResItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncNodeStokeResItem::CopyFrom(const SyncNodeStokeResItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.SyncNodeStokeResItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeResItem::IsInitialized() const {
  return true;
}

void SyncNodeStokeResItem::InternalSwap(SyncNodeStokeResItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(balance_, other->balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncNodeStokeResItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[11]);
}

// ===================================================================

class SyncNodeStokeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncNodeStokeResponse>()._has_bits_);
  static void set_has_now_tm_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncNodeStokeResponse::SyncNodeStokeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.SyncNodeStokeResponse)
}
SyncNodeStokeResponse::SyncNodeStokeResponse(const SyncNodeStokeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  now_tm_height_ = from.now_tm_height_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.SyncNodeStokeResponse)
}

inline void SyncNodeStokeResponse::SharedCtor() {
now_tm_height_ = uint64_t{0u};
}

SyncNodeStokeResponse::~SyncNodeStokeResponse() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.SyncNodeStokeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncNodeStokeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncNodeStokeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncNodeStokeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.SyncNodeStokeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  now_tm_height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncNodeStokeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 now_tm_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_now_tm_height(&has_bits);
          now_tm_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncNodeStokeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.SyncNodeStokeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 now_tm_height = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_now_tm_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.SyncNodeStokeResponse)
  return target;
}

size_t SyncNodeStokeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.SyncNodeStokeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zjchain.elect.protobuf.SyncNodeStokeResItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 now_tm_height = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_now_tm_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncNodeStokeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncNodeStokeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncNodeStokeResponse::GetClassData() const { return &_class_data_; }

void SyncNodeStokeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncNodeStokeResponse *>(to)->MergeFrom(
      static_cast<const SyncNodeStokeResponse &>(from));
}


void SyncNodeStokeResponse::MergeFrom(const SyncNodeStokeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.SyncNodeStokeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_now_tm_height()) {
    _internal_set_now_tm_height(from._internal_now_tm_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncNodeStokeResponse::CopyFrom(const SyncNodeStokeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.SyncNodeStokeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncNodeStokeResponse::IsInitialized() const {
  return true;
}

void SyncNodeStokeResponse::InternalSwap(SyncNodeStokeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(now_tm_height_, other->now_tm_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncNodeStokeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[12]);
}

// ===================================================================

class ElectMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ElectMessage>()._has_bits_);
  static const ::zjchain::elect::protobuf::ElectBlock& elect_block(const ElectMessage* msg);
  static void set_has_elect_block(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zjchain::elect::protobuf::ElectBlock& prev_elect_block(const ElectMessage* msg);
  static void set_has_prev_elect_block(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zjchain::elect::protobuf::WaitingNodesMessage& waiting_nodes(const ElectMessage* msg);
  static void set_has_waiting_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_member_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sign_ch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sign_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zjchain::elect::protobuf::WaitingNodeHeartbeat& waiting_heartbeat(const ElectMessage* msg);
  static void set_has_waiting_heartbeat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zjchain::elect::protobuf::LeaderRotationMessage& leader_rotation(const ElectMessage* msg);
  static void set_has_leader_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zjchain::elect::protobuf::SyncNodeStokeRequest& sync_stoke_req(const ElectMessage* msg);
  static void set_has_sync_stoke_req(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::zjchain::elect::protobuf::SyncNodeStokeResponse& sync_stoke_res(const ElectMessage* msg);
  static void set_has_sync_stoke_res(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::zjchain::elect::protobuf::ElectBlock&
ElectMessage::_Internal::elect_block(const ElectMessage* msg) {
  return *msg->elect_block_;
}
const ::zjchain::elect::protobuf::ElectBlock&
ElectMessage::_Internal::prev_elect_block(const ElectMessage* msg) {
  return *msg->prev_elect_block_;
}
const ::zjchain::elect::protobuf::WaitingNodesMessage&
ElectMessage::_Internal::waiting_nodes(const ElectMessage* msg) {
  return *msg->waiting_nodes_;
}
const ::zjchain::elect::protobuf::WaitingNodeHeartbeat&
ElectMessage::_Internal::waiting_heartbeat(const ElectMessage* msg) {
  return *msg->waiting_heartbeat_;
}
const ::zjchain::elect::protobuf::LeaderRotationMessage&
ElectMessage::_Internal::leader_rotation(const ElectMessage* msg) {
  return *msg->leader_rotation_;
}
const ::zjchain::elect::protobuf::SyncNodeStokeRequest&
ElectMessage::_Internal::sync_stoke_req(const ElectMessage* msg) {
  return *msg->sync_stoke_req_;
}
const ::zjchain::elect::protobuf::SyncNodeStokeResponse&
ElectMessage::_Internal::sync_stoke_res(const ElectMessage* msg) {
  return *msg->sync_stoke_res_;
}
ElectMessage::ElectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.elect.protobuf.ElectMessage)
}
ElectMessage::ElectMessage(const ElectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sign_ch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sign_ch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sign_ch()) {
    sign_ch_.Set(from._internal_sign_ch(), 
      GetArenaForAllocation());
  }
  sign_res_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sign_res_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sign_res()) {
    sign_res_.Set(from._internal_sign_res(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_elect_block()) {
    elect_block_ = new ::zjchain::elect::protobuf::ElectBlock(*from.elect_block_);
  } else {
    elect_block_ = nullptr;
  }
  if (from._internal_has_prev_elect_block()) {
    prev_elect_block_ = new ::zjchain::elect::protobuf::ElectBlock(*from.prev_elect_block_);
  } else {
    prev_elect_block_ = nullptr;
  }
  if (from._internal_has_waiting_nodes()) {
    waiting_nodes_ = new ::zjchain::elect::protobuf::WaitingNodesMessage(*from.waiting_nodes_);
  } else {
    waiting_nodes_ = nullptr;
  }
  if (from._internal_has_waiting_heartbeat()) {
    waiting_heartbeat_ = new ::zjchain::elect::protobuf::WaitingNodeHeartbeat(*from.waiting_heartbeat_);
  } else {
    waiting_heartbeat_ = nullptr;
  }
  if (from._internal_has_leader_rotation()) {
    leader_rotation_ = new ::zjchain::elect::protobuf::LeaderRotationMessage(*from.leader_rotation_);
  } else {
    leader_rotation_ = nullptr;
  }
  if (from._internal_has_sync_stoke_req()) {
    sync_stoke_req_ = new ::zjchain::elect::protobuf::SyncNodeStokeRequest(*from.sync_stoke_req_);
  } else {
    sync_stoke_req_ = nullptr;
  }
  if (from._internal_has_sync_stoke_res()) {
    sync_stoke_res_ = new ::zjchain::elect::protobuf::SyncNodeStokeResponse(*from.sync_stoke_res_);
  } else {
    sync_stoke_res_ = nullptr;
  }
  member_index_ = from.member_index_;
  // @@protoc_insertion_point(copy_constructor:zjchain.elect.protobuf.ElectMessage)
}

inline void ElectMessage::SharedCtor() {
sign_ch_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sign_ch_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sign_res_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sign_res_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&elect_block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_index_) -
    reinterpret_cast<char*>(&elect_block_)) + sizeof(member_index_));
}

ElectMessage::~ElectMessage() {
  // @@protoc_insertion_point(destructor:zjchain.elect.protobuf.ElectMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElectMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sign_ch_.Destroy();
  sign_res_.Destroy();
  if (this != internal_default_instance()) delete elect_block_;
  if (this != internal_default_instance()) delete prev_elect_block_;
  if (this != internal_default_instance()) delete waiting_nodes_;
  if (this != internal_default_instance()) delete waiting_heartbeat_;
  if (this != internal_default_instance()) delete leader_rotation_;
  if (this != internal_default_instance()) delete sync_stoke_req_;
  if (this != internal_default_instance()) delete sync_stoke_res_;
}

void ElectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.elect.protobuf.ElectMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sign_ch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sign_res_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(elect_block_ != nullptr);
      elect_block_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(prev_elect_block_ != nullptr);
      prev_elect_block_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(waiting_nodes_ != nullptr);
      waiting_nodes_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(waiting_heartbeat_ != nullptr);
      waiting_heartbeat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(leader_rotation_ != nullptr);
      leader_rotation_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sync_stoke_req_ != nullptr);
      sync_stoke_req_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(sync_stoke_res_ != nullptr);
    sync_stoke_res_->Clear();
  }
  member_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_elect_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_elect_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_waiting_nodes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 member_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_member_index(&has_bits);
          member_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sign_ch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sign_ch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sign_res = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sign_res();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_waiting_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_stoke_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_stoke_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElectMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.elect.protobuf.ElectMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::elect_block(this),
        _Internal::elect_block(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prev_elect_block(this),
        _Internal::prev_elect_block(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::waiting_nodes(this),
        _Internal::waiting_nodes(this).GetCachedSize(), target, stream);
  }

  // optional int32 member_index = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_member_index(), target);
  }

  // optional bytes sign_ch = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sign_ch(), target);
  }

  // optional bytes sign_res = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sign_res(), target);
  }

  // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::waiting_heartbeat(this),
        _Internal::waiting_heartbeat(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::leader_rotation(this),
        _Internal::leader_rotation(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::sync_stoke_req(this),
        _Internal::sync_stoke_req(this).GetCachedSize(), target, stream);
  }

  // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::sync_stoke_res(this),
        _Internal::sync_stoke_res(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.elect.protobuf.ElectMessage)
  return target;
}

size_t ElectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.elect.protobuf.ElectMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sign_ch = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sign_ch());
    }

    // optional bytes sign_res = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sign_res());
    }

    // optional .zjchain.elect.protobuf.ElectBlock elect_block = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *elect_block_);
    }

    // optional .zjchain.elect.protobuf.ElectBlock prev_elect_block = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prev_elect_block_);
    }

    // optional .zjchain.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *waiting_nodes_);
    }

    // optional .zjchain.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *waiting_heartbeat_);
    }

    // optional .zjchain.elect.protobuf.LeaderRotationMessage leader_rotation = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leader_rotation_);
    }

    // optional .zjchain.elect.protobuf.SyncNodeStokeRequest sync_stoke_req = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sync_stoke_req_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .zjchain.elect.protobuf.SyncNodeStokeResponse sync_stoke_res = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sync_stoke_res_);
    }

    // optional int32 member_index = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_member_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElectMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ElectMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElectMessage::GetClassData() const { return &_class_data_; }

void ElectMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ElectMessage *>(to)->MergeFrom(
      static_cast<const ElectMessage &>(from));
}


void ElectMessage::MergeFrom(const ElectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.elect.protobuf.ElectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sign_ch(from._internal_sign_ch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sign_res(from._internal_sign_res());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_elect_block()->::zjchain::elect::protobuf::ElectBlock::MergeFrom(from._internal_elect_block());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_prev_elect_block()->::zjchain::elect::protobuf::ElectBlock::MergeFrom(from._internal_prev_elect_block());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_waiting_nodes()->::zjchain::elect::protobuf::WaitingNodesMessage::MergeFrom(from._internal_waiting_nodes());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_waiting_heartbeat()->::zjchain::elect::protobuf::WaitingNodeHeartbeat::MergeFrom(from._internal_waiting_heartbeat());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_leader_rotation()->::zjchain::elect::protobuf::LeaderRotationMessage::MergeFrom(from._internal_leader_rotation());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_sync_stoke_req()->::zjchain::elect::protobuf::SyncNodeStokeRequest::MergeFrom(from._internal_sync_stoke_req());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_sync_stoke_res()->::zjchain::elect::protobuf::SyncNodeStokeResponse::MergeFrom(from._internal_sync_stoke_res());
    }
    if (cached_has_bits & 0x00000200u) {
      member_index_ = from.member_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElectMessage::CopyFrom(const ElectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.elect.protobuf.ElectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectMessage::IsInitialized() const {
  return true;
}

void ElectMessage::InternalSwap(ElectMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sign_ch_, lhs_arena,
      &other->sign_ch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sign_res_, lhs_arena,
      &other->sign_res_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectMessage, member_index_)
      + sizeof(ElectMessage::member_index_)
      - PROTOBUF_FIELD_OFFSET(ElectMessage, elect_block_)>(
          reinterpret_cast<char*>(&elect_block_),
          reinterpret_cast<char*>(&other->elect_block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2felect_2eproto_getter, &descriptor_table_protos_2felect_2eproto_once,
      file_level_metadata_protos_2felect_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace elect
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::VerifyVecValue*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::VerifyVecValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::VerifyVecValue >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::BlsPublicKey*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::BlsPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::BlsPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::PrevMemberInfo*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::PrevMemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::PrevMemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::PrevMembers*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::PrevMembers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::PrevMembers >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::member*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::member >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::ElectBlock*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::ElectBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::ElectBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::WaitingNodesMessage*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::WaitingNodesMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::WaitingNodesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::WaitingNodeHeartbeat*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::WaitingNodeHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::WaitingNodeHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::LeaderRotationMessage*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::LeaderRotationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::LeaderRotationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::SyncNodeStokeItem*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::SyncNodeStokeItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::SyncNodeStokeItem >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::SyncNodeStokeRequest*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::SyncNodeStokeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::SyncNodeStokeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::SyncNodeStokeResItem*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::SyncNodeStokeResItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::SyncNodeStokeResItem >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::SyncNodeStokeResponse*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::SyncNodeStokeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::SyncNodeStokeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zjchain::elect::protobuf::ElectMessage*
Arena::CreateMaybeMessage< ::zjchain::elect::protobuf::ElectMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::elect::protobuf::ElectMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
