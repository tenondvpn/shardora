// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/transport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2ftransport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2ftransport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/network.pb.h"
#include "protos/dht.pb.h"
#include "protos/block.pb.h"
#include "protos/bls.pb.h"
#include "protos/pools.pb.h"
#include "protos/contract.pb.h"
#include "protos/elect.pb.h"
#include "protos/zbft.pb.h"
#include "protos/sync.pb.h"
#include "protos/vss.pb.h"
#include "protos/init.pb.h"
#include "protos/c2c.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2ftransport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2ftransport_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2ftransport_2eproto;
namespace zjchain {
namespace transport {
namespace protobuf {
class BroadcastParam;
struct BroadcastParamDefaultTypeInternal;
extern BroadcastParamDefaultTypeInternal _BroadcastParam_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace protobuf
}  // namespace transport
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::transport::protobuf::BroadcastParam* Arena::CreateMaybeMessage<::zjchain::transport::protobuf::BroadcastParam>(Arena*);
template<> ::zjchain::transport::protobuf::Header* Arena::CreateMaybeMessage<::zjchain::transport::protobuf::Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace transport {
namespace protobuf {

// ===================================================================

class BroadcastParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.transport.protobuf.BroadcastParam) */ {
 public:
  inline BroadcastParam() : BroadcastParam(nullptr) {}
  ~BroadcastParam() override;
  explicit PROTOBUF_CONSTEXPR BroadcastParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastParam(const BroadcastParam& from);
  BroadcastParam(BroadcastParam&& from) noexcept
    : BroadcastParam() {
    *this = ::std::move(from);
  }

  inline BroadcastParam& operator=(const BroadcastParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastParam& operator=(BroadcastParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastParam* internal_default_instance() {
    return reinterpret_cast<const BroadcastParam*>(
               &_BroadcastParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BroadcastParam& a, BroadcastParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadcastParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.transport.protobuf.BroadcastParam";
  }
  protected:
  explicit BroadcastParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBloomfilterFieldNumber = 12,
    kHeaderFieldNumber = 9,
    kBodyFieldNumber = 10,
    kTypeFieldNumber = 1,
    kStopTimesFieldNumber = 3,
    kLayerLeftFieldNumber = 5,
    kLayerRightFieldNumber = 6,
    kOverlapFieldNumber = 7,
    kNetCrossedFieldNumber = 11,
    kEvilRateFieldNumber = 13,
    kNeighborCountFieldNumber = 2,
    kHopLimitFieldNumber = 4,
    kHopToLayerFieldNumber = 8,
    kIgnBloomfilterHopFieldNumber = 14,
  };
  // repeated uint64 bloomfilter = 12;
  int bloomfilter_size() const;
  private:
  int _internal_bloomfilter_size() const;
  public:
  void clear_bloomfilter();
  private:
  uint64_t _internal_bloomfilter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_bloomfilter() const;
  void _internal_add_bloomfilter(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_bloomfilter();
  public:
  uint64_t bloomfilter(int index) const;
  void set_bloomfilter(int index, uint64_t value);
  void add_bloomfilter(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      bloomfilter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_bloomfilter();

  // optional bytes header = 9;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // optional bytes body = 10;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint32 stop_times = 3;
  bool has_stop_times() const;
  private:
  bool _internal_has_stop_times() const;
  public:
  void clear_stop_times();
  uint32_t stop_times() const;
  void set_stop_times(uint32_t value);
  private:
  uint32_t _internal_stop_times() const;
  void _internal_set_stop_times(uint32_t value);
  public:

  // optional uint64 layer_left = 5;
  bool has_layer_left() const;
  private:
  bool _internal_has_layer_left() const;
  public:
  void clear_layer_left();
  uint64_t layer_left() const;
  void set_layer_left(uint64_t value);
  private:
  uint64_t _internal_layer_left() const;
  void _internal_set_layer_left(uint64_t value);
  public:

  // optional uint64 layer_right = 6;
  bool has_layer_right() const;
  private:
  bool _internal_has_layer_right() const;
  public:
  void clear_layer_right();
  uint64_t layer_right() const;
  void set_layer_right(uint64_t value);
  private:
  uint64_t _internal_layer_right() const;
  void _internal_set_layer_right(uint64_t value);
  public:

  // optional float overlap = 7;
  bool has_overlap() const;
  private:
  bool _internal_has_overlap() const;
  public:
  void clear_overlap();
  float overlap() const;
  void set_overlap(float value);
  private:
  float _internal_overlap() const;
  void _internal_set_overlap(float value);
  public:

  // optional bool net_crossed = 11;
  bool has_net_crossed() const;
  private:
  bool _internal_has_net_crossed() const;
  public:
  void clear_net_crossed();
  bool net_crossed() const;
  void set_net_crossed(bool value);
  private:
  bool _internal_net_crossed() const;
  void _internal_set_net_crossed(bool value);
  public:

  // optional float evil_rate = 13 [default = 0];
  bool has_evil_rate() const;
  private:
  bool _internal_has_evil_rate() const;
  public:
  void clear_evil_rate();
  float evil_rate() const;
  void set_evil_rate(float value);
  private:
  float _internal_evil_rate() const;
  void _internal_set_evil_rate(float value);
  public:

  // optional uint32 neighbor_count = 2 [default = 7];
  bool has_neighbor_count() const;
  private:
  bool _internal_has_neighbor_count() const;
  public:
  void clear_neighbor_count();
  uint32_t neighbor_count() const;
  void set_neighbor_count(uint32_t value);
  private:
  uint32_t _internal_neighbor_count() const;
  void _internal_set_neighbor_count(uint32_t value);
  public:

  // optional uint32 hop_limit = 4 [default = 10];
  bool has_hop_limit() const;
  private:
  bool _internal_has_hop_limit() const;
  public:
  void clear_hop_limit();
  uint32_t hop_limit() const;
  void set_hop_limit(uint32_t value);
  private:
  uint32_t _internal_hop_limit() const;
  void _internal_set_hop_limit(uint32_t value);
  public:

  // optional uint32 hop_to_layer = 8 [default = 1];
  bool has_hop_to_layer() const;
  private:
  bool _internal_has_hop_to_layer() const;
  public:
  void clear_hop_to_layer();
  uint32_t hop_to_layer() const;
  void set_hop_to_layer(uint32_t value);
  private:
  uint32_t _internal_hop_to_layer() const;
  void _internal_set_hop_to_layer(uint32_t value);
  public:

  // optional uint32 ign_bloomfilter_hop = 14 [default = 1];
  bool has_ign_bloomfilter_hop() const;
  private:
  bool _internal_has_ign_bloomfilter_hop() const;
  public:
  void clear_ign_bloomfilter_hop();
  uint32_t ign_bloomfilter_hop() const;
  void set_ign_bloomfilter_hop(uint32_t value);
  private:
  uint32_t _internal_ign_bloomfilter_hop() const;
  void _internal_set_ign_bloomfilter_hop(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.transport.protobuf.BroadcastParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > bloomfilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  uint32_t type_;
  uint32_t stop_times_;
  uint64_t layer_left_;
  uint64_t layer_right_;
  float overlap_;
  bool net_crossed_;
  float evil_rate_;
  uint32_t neighbor_count_;
  uint32_t hop_limit_;
  uint32_t hop_to_layer_;
  uint32_t ign_bloomfilter_hop_;
  friend struct ::TableStruct_protos_2ftransport_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.transport.protobuf.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.transport.protobuf.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvalidBftsFieldNumber = 28,
    kDesDhtKeyFieldNumber = 2,
    kDebugFieldNumber = 4,
    kSignFieldNumber = 8,
    kBroadcastFieldNumber = 7,
    kNetworkProtoFieldNumber = 10,
    kDhtProtoFieldNumber = 11,
    kBlsProtoFieldNumber = 12,
    kTxProtoFieldNumber = 13,
    kContractProtoFieldNumber = 14,
    kElectProtoFieldNumber = 15,
    kZbftFieldNumber = 16,
    kBlockProtoFieldNumber = 17,
    kToTxHeightsFieldNumber = 18,
    kSyncFieldNumber = 19,
    kSyncProtoFieldNumber = 20,
    kVssProtoFieldNumber = 21,
    kCrossTosFieldNumber = 22,
    kCrossStatisticFieldNumber = 23,
    kElectBlockFieldNumber = 24,
    kInitProtoFieldNumber = 25,
    kSyncHeightsFieldNumber = 26,
    kBlockFieldNumber = 27,
    kC2CFieldNumber = 30,
    kSrcShardingIdFieldNumber = 1,
    kHopCountFieldNumber = 3,
    kHash64FieldNumber = 5,
    kTypeFieldNumber = 6,
    kVersionFieldNumber = 9,
    kFromPublicPortFieldNumber = 29,
  };
  // repeated .zjchain.pools.protobuf.InvalidBftMessage invalid_bfts = 28;
  int invalid_bfts_size() const;
  private:
  int _internal_invalid_bfts_size() const;
  public:
  void clear_invalid_bfts();
  ::zjchain::pools::protobuf::InvalidBftMessage* mutable_invalid_bfts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::InvalidBftMessage >*
      mutable_invalid_bfts();
  private:
  const ::zjchain::pools::protobuf::InvalidBftMessage& _internal_invalid_bfts(int index) const;
  ::zjchain::pools::protobuf::InvalidBftMessage* _internal_add_invalid_bfts();
  public:
  const ::zjchain::pools::protobuf::InvalidBftMessage& invalid_bfts(int index) const;
  ::zjchain::pools::protobuf::InvalidBftMessage* add_invalid_bfts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::InvalidBftMessage >&
      invalid_bfts() const;

  // optional bytes des_dht_key = 2;
  bool has_des_dht_key() const;
  private:
  bool _internal_has_des_dht_key() const;
  public:
  void clear_des_dht_key();
  const std::string& des_dht_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_des_dht_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_des_dht_key();
  PROTOBUF_NODISCARD std::string* release_des_dht_key();
  void set_allocated_des_dht_key(std::string* des_dht_key);
  private:
  const std::string& _internal_des_dht_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_des_dht_key(const std::string& value);
  std::string* _internal_mutable_des_dht_key();
  public:

  // optional bytes debug = 4;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const std::string& debug() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_debug(ArgT0&& arg0, ArgT... args);
  std::string* mutable_debug();
  PROTOBUF_NODISCARD std::string* release_debug();
  void set_allocated_debug(std::string* debug);
  private:
  const std::string& _internal_debug() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debug(const std::string& value);
  std::string* _internal_mutable_debug();
  public:

  // optional bytes sign = 8;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // optional .zjchain.transport.protobuf.BroadcastParam broadcast = 7;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  const ::zjchain::transport::protobuf::BroadcastParam& broadcast() const;
  PROTOBUF_NODISCARD ::zjchain::transport::protobuf::BroadcastParam* release_broadcast();
  ::zjchain::transport::protobuf::BroadcastParam* mutable_broadcast();
  void set_allocated_broadcast(::zjchain::transport::protobuf::BroadcastParam* broadcast);
  private:
  const ::zjchain::transport::protobuf::BroadcastParam& _internal_broadcast() const;
  ::zjchain::transport::protobuf::BroadcastParam* _internal_mutable_broadcast();
  public:
  void unsafe_arena_set_allocated_broadcast(
      ::zjchain::transport::protobuf::BroadcastParam* broadcast);
  ::zjchain::transport::protobuf::BroadcastParam* unsafe_arena_release_broadcast();

  // optional .zjchain.network.protobuf.NetworkMessage network_proto = 10;
  bool has_network_proto() const;
  private:
  bool _internal_has_network_proto() const;
  public:
  void clear_network_proto();
  const ::zjchain::network::protobuf::NetworkMessage& network_proto() const;
  PROTOBUF_NODISCARD ::zjchain::network::protobuf::NetworkMessage* release_network_proto();
  ::zjchain::network::protobuf::NetworkMessage* mutable_network_proto();
  void set_allocated_network_proto(::zjchain::network::protobuf::NetworkMessage* network_proto);
  private:
  const ::zjchain::network::protobuf::NetworkMessage& _internal_network_proto() const;
  ::zjchain::network::protobuf::NetworkMessage* _internal_mutable_network_proto();
  public:
  void unsafe_arena_set_allocated_network_proto(
      ::zjchain::network::protobuf::NetworkMessage* network_proto);
  ::zjchain::network::protobuf::NetworkMessage* unsafe_arena_release_network_proto();

  // optional .zjchain.dht.protobuf.DhtMessage dht_proto = 11;
  bool has_dht_proto() const;
  private:
  bool _internal_has_dht_proto() const;
  public:
  void clear_dht_proto();
  const ::zjchain::dht::protobuf::DhtMessage& dht_proto() const;
  PROTOBUF_NODISCARD ::zjchain::dht::protobuf::DhtMessage* release_dht_proto();
  ::zjchain::dht::protobuf::DhtMessage* mutable_dht_proto();
  void set_allocated_dht_proto(::zjchain::dht::protobuf::DhtMessage* dht_proto);
  private:
  const ::zjchain::dht::protobuf::DhtMessage& _internal_dht_proto() const;
  ::zjchain::dht::protobuf::DhtMessage* _internal_mutable_dht_proto();
  public:
  void unsafe_arena_set_allocated_dht_proto(
      ::zjchain::dht::protobuf::DhtMessage* dht_proto);
  ::zjchain::dht::protobuf::DhtMessage* unsafe_arena_release_dht_proto();

  // optional .zjchain.bls.protobuf.BlsMessage bls_proto = 12;
  bool has_bls_proto() const;
  private:
  bool _internal_has_bls_proto() const;
  public:
  void clear_bls_proto();
  const ::zjchain::bls::protobuf::BlsMessage& bls_proto() const;
  PROTOBUF_NODISCARD ::zjchain::bls::protobuf::BlsMessage* release_bls_proto();
  ::zjchain::bls::protobuf::BlsMessage* mutable_bls_proto();
  void set_allocated_bls_proto(::zjchain::bls::protobuf::BlsMessage* bls_proto);
  private:
  const ::zjchain::bls::protobuf::BlsMessage& _internal_bls_proto() const;
  ::zjchain::bls::protobuf::BlsMessage* _internal_mutable_bls_proto();
  public:
  void unsafe_arena_set_allocated_bls_proto(
      ::zjchain::bls::protobuf::BlsMessage* bls_proto);
  ::zjchain::bls::protobuf::BlsMessage* unsafe_arena_release_bls_proto();

  // optional .zjchain.pools.protobuf.TxMessage tx_proto = 13;
  bool has_tx_proto() const;
  private:
  bool _internal_has_tx_proto() const;
  public:
  void clear_tx_proto();
  const ::zjchain::pools::protobuf::TxMessage& tx_proto() const;
  PROTOBUF_NODISCARD ::zjchain::pools::protobuf::TxMessage* release_tx_proto();
  ::zjchain::pools::protobuf::TxMessage* mutable_tx_proto();
  void set_allocated_tx_proto(::zjchain::pools::protobuf::TxMessage* tx_proto);
  private:
  const ::zjchain::pools::protobuf::TxMessage& _internal_tx_proto() const;
  ::zjchain::pools::protobuf::TxMessage* _internal_mutable_tx_proto();
  public:
  void unsafe_arena_set_allocated_tx_proto(
      ::zjchain::pools::protobuf::TxMessage* tx_proto);
  ::zjchain::pools::protobuf::TxMessage* unsafe_arena_release_tx_proto();

  // optional .zjchain.contract.protobuf.ContractMessage contract_proto = 14;
  bool has_contract_proto() const;
  private:
  bool _internal_has_contract_proto() const;
  public:
  void clear_contract_proto();
  const ::zjchain::contract::protobuf::ContractMessage& contract_proto() const;
  PROTOBUF_NODISCARD ::zjchain::contract::protobuf::ContractMessage* release_contract_proto();
  ::zjchain::contract::protobuf::ContractMessage* mutable_contract_proto();
  void set_allocated_contract_proto(::zjchain::contract::protobuf::ContractMessage* contract_proto);
  private:
  const ::zjchain::contract::protobuf::ContractMessage& _internal_contract_proto() const;
  ::zjchain::contract::protobuf::ContractMessage* _internal_mutable_contract_proto();
  public:
  void unsafe_arena_set_allocated_contract_proto(
      ::zjchain::contract::protobuf::ContractMessage* contract_proto);
  ::zjchain::contract::protobuf::ContractMessage* unsafe_arena_release_contract_proto();

  // optional .zjchain.elect.protobuf.ElectMessage elect_proto = 15;
  bool has_elect_proto() const;
  private:
  bool _internal_has_elect_proto() const;
  public:
  void clear_elect_proto();
  const ::zjchain::elect::protobuf::ElectMessage& elect_proto() const;
  PROTOBUF_NODISCARD ::zjchain::elect::protobuf::ElectMessage* release_elect_proto();
  ::zjchain::elect::protobuf::ElectMessage* mutable_elect_proto();
  void set_allocated_elect_proto(::zjchain::elect::protobuf::ElectMessage* elect_proto);
  private:
  const ::zjchain::elect::protobuf::ElectMessage& _internal_elect_proto() const;
  ::zjchain::elect::protobuf::ElectMessage* _internal_mutable_elect_proto();
  public:
  void unsafe_arena_set_allocated_elect_proto(
      ::zjchain::elect::protobuf::ElectMessage* elect_proto);
  ::zjchain::elect::protobuf::ElectMessage* unsafe_arena_release_elect_proto();

  // optional .zjchain.zbft.protobuf.ZbftMessage zbft = 16;
  bool has_zbft() const;
  private:
  bool _internal_has_zbft() const;
  public:
  void clear_zbft();
  const ::zjchain::zbft::protobuf::ZbftMessage& zbft() const;
  PROTOBUF_NODISCARD ::zjchain::zbft::protobuf::ZbftMessage* release_zbft();
  ::zjchain::zbft::protobuf::ZbftMessage* mutable_zbft();
  void set_allocated_zbft(::zjchain::zbft::protobuf::ZbftMessage* zbft);
  private:
  const ::zjchain::zbft::protobuf::ZbftMessage& _internal_zbft() const;
  ::zjchain::zbft::protobuf::ZbftMessage* _internal_mutable_zbft();
  public:
  void unsafe_arena_set_allocated_zbft(
      ::zjchain::zbft::protobuf::ZbftMessage* zbft);
  ::zjchain::zbft::protobuf::ZbftMessage* unsafe_arena_release_zbft();

  // optional .zjchain.block.protobuf.BlockMessage block_proto = 17;
  bool has_block_proto() const;
  private:
  bool _internal_has_block_proto() const;
  public:
  void clear_block_proto();
  const ::zjchain::block::protobuf::BlockMessage& block_proto() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::BlockMessage* release_block_proto();
  ::zjchain::block::protobuf::BlockMessage* mutable_block_proto();
  void set_allocated_block_proto(::zjchain::block::protobuf::BlockMessage* block_proto);
  private:
  const ::zjchain::block::protobuf::BlockMessage& _internal_block_proto() const;
  ::zjchain::block::protobuf::BlockMessage* _internal_mutable_block_proto();
  public:
  void unsafe_arena_set_allocated_block_proto(
      ::zjchain::block::protobuf::BlockMessage* block_proto);
  ::zjchain::block::protobuf::BlockMessage* unsafe_arena_release_block_proto();

  // optional .zjchain.pools.protobuf.ToTxHeights to_tx_heights = 18;
  bool has_to_tx_heights() const;
  private:
  bool _internal_has_to_tx_heights() const;
  public:
  void clear_to_tx_heights();
  const ::zjchain::pools::protobuf::ToTxHeights& to_tx_heights() const;
  PROTOBUF_NODISCARD ::zjchain::pools::protobuf::ToTxHeights* release_to_tx_heights();
  ::zjchain::pools::protobuf::ToTxHeights* mutable_to_tx_heights();
  void set_allocated_to_tx_heights(::zjchain::pools::protobuf::ToTxHeights* to_tx_heights);
  private:
  const ::zjchain::pools::protobuf::ToTxHeights& _internal_to_tx_heights() const;
  ::zjchain::pools::protobuf::ToTxHeights* _internal_mutable_to_tx_heights();
  public:
  void unsafe_arena_set_allocated_to_tx_heights(
      ::zjchain::pools::protobuf::ToTxHeights* to_tx_heights);
  ::zjchain::pools::protobuf::ToTxHeights* unsafe_arena_release_to_tx_heights();

  // optional .zjchain.sync.protobuf.SyncInfo sync = 19;
  bool has_sync() const;
  private:
  bool _internal_has_sync() const;
  public:
  void clear_sync();
  const ::zjchain::sync::protobuf::SyncInfo& sync() const;
  PROTOBUF_NODISCARD ::zjchain::sync::protobuf::SyncInfo* release_sync();
  ::zjchain::sync::protobuf::SyncInfo* mutable_sync();
  void set_allocated_sync(::zjchain::sync::protobuf::SyncInfo* sync);
  private:
  const ::zjchain::sync::protobuf::SyncInfo& _internal_sync() const;
  ::zjchain::sync::protobuf::SyncInfo* _internal_mutable_sync();
  public:
  void unsafe_arena_set_allocated_sync(
      ::zjchain::sync::protobuf::SyncInfo* sync);
  ::zjchain::sync::protobuf::SyncInfo* unsafe_arena_release_sync();

  // optional .zjchain.sync.protobuf.SyncMessage sync_proto = 20;
  bool has_sync_proto() const;
  private:
  bool _internal_has_sync_proto() const;
  public:
  void clear_sync_proto();
  const ::zjchain::sync::protobuf::SyncMessage& sync_proto() const;
  PROTOBUF_NODISCARD ::zjchain::sync::protobuf::SyncMessage* release_sync_proto();
  ::zjchain::sync::protobuf::SyncMessage* mutable_sync_proto();
  void set_allocated_sync_proto(::zjchain::sync::protobuf::SyncMessage* sync_proto);
  private:
  const ::zjchain::sync::protobuf::SyncMessage& _internal_sync_proto() const;
  ::zjchain::sync::protobuf::SyncMessage* _internal_mutable_sync_proto();
  public:
  void unsafe_arena_set_allocated_sync_proto(
      ::zjchain::sync::protobuf::SyncMessage* sync_proto);
  ::zjchain::sync::protobuf::SyncMessage* unsafe_arena_release_sync_proto();

  // optional .zjchain.vss.protobuf.VssMessage vss_proto = 21;
  bool has_vss_proto() const;
  private:
  bool _internal_has_vss_proto() const;
  public:
  void clear_vss_proto();
  const ::zjchain::vss::protobuf::VssMessage& vss_proto() const;
  PROTOBUF_NODISCARD ::zjchain::vss::protobuf::VssMessage* release_vss_proto();
  ::zjchain::vss::protobuf::VssMessage* mutable_vss_proto();
  void set_allocated_vss_proto(::zjchain::vss::protobuf::VssMessage* vss_proto);
  private:
  const ::zjchain::vss::protobuf::VssMessage& _internal_vss_proto() const;
  ::zjchain::vss::protobuf::VssMessage* _internal_mutable_vss_proto();
  public:
  void unsafe_arena_set_allocated_vss_proto(
      ::zjchain::vss::protobuf::VssMessage* vss_proto);
  ::zjchain::vss::protobuf::VssMessage* unsafe_arena_release_vss_proto();

  // optional .zjchain.block.protobuf.CrossShardingTosMessage cross_tos = 22;
  bool has_cross_tos() const;
  private:
  bool _internal_has_cross_tos() const;
  public:
  void clear_cross_tos();
  const ::zjchain::block::protobuf::CrossShardingTosMessage& cross_tos() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::CrossShardingTosMessage* release_cross_tos();
  ::zjchain::block::protobuf::CrossShardingTosMessage* mutable_cross_tos();
  void set_allocated_cross_tos(::zjchain::block::protobuf::CrossShardingTosMessage* cross_tos);
  private:
  const ::zjchain::block::protobuf::CrossShardingTosMessage& _internal_cross_tos() const;
  ::zjchain::block::protobuf::CrossShardingTosMessage* _internal_mutable_cross_tos();
  public:
  void unsafe_arena_set_allocated_cross_tos(
      ::zjchain::block::protobuf::CrossShardingTosMessage* cross_tos);
  ::zjchain::block::protobuf::CrossShardingTosMessage* unsafe_arena_release_cross_tos();

  // optional .zjchain.block.protobuf.CrossShardingStatisticMessage cross_statistic = 23;
  bool has_cross_statistic() const;
  private:
  bool _internal_has_cross_statistic() const;
  public:
  void clear_cross_statistic();
  const ::zjchain::block::protobuf::CrossShardingStatisticMessage& cross_statistic() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::CrossShardingStatisticMessage* release_cross_statistic();
  ::zjchain::block::protobuf::CrossShardingStatisticMessage* mutable_cross_statistic();
  void set_allocated_cross_statistic(::zjchain::block::protobuf::CrossShardingStatisticMessage* cross_statistic);
  private:
  const ::zjchain::block::protobuf::CrossShardingStatisticMessage& _internal_cross_statistic() const;
  ::zjchain::block::protobuf::CrossShardingStatisticMessage* _internal_mutable_cross_statistic();
  public:
  void unsafe_arena_set_allocated_cross_statistic(
      ::zjchain::block::protobuf::CrossShardingStatisticMessage* cross_statistic);
  ::zjchain::block::protobuf::CrossShardingStatisticMessage* unsafe_arena_release_cross_statistic();

  // optional .zjchain.block.protobuf.ElectBlockMessage elect_block = 24;
  bool has_elect_block() const;
  private:
  bool _internal_has_elect_block() const;
  public:
  void clear_elect_block();
  const ::zjchain::block::protobuf::ElectBlockMessage& elect_block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::ElectBlockMessage* release_elect_block();
  ::zjchain::block::protobuf::ElectBlockMessage* mutable_elect_block();
  void set_allocated_elect_block(::zjchain::block::protobuf::ElectBlockMessage* elect_block);
  private:
  const ::zjchain::block::protobuf::ElectBlockMessage& _internal_elect_block() const;
  ::zjchain::block::protobuf::ElectBlockMessage* _internal_mutable_elect_block();
  public:
  void unsafe_arena_set_allocated_elect_block(
      ::zjchain::block::protobuf::ElectBlockMessage* elect_block);
  ::zjchain::block::protobuf::ElectBlockMessage* unsafe_arena_release_elect_block();

  // optional .zjchain.init.protobuf.InitMessage init_proto = 25;
  bool has_init_proto() const;
  private:
  bool _internal_has_init_proto() const;
  public:
  void clear_init_proto();
  const ::zjchain::init::protobuf::InitMessage& init_proto() const;
  PROTOBUF_NODISCARD ::zjchain::init::protobuf::InitMessage* release_init_proto();
  ::zjchain::init::protobuf::InitMessage* mutable_init_proto();
  void set_allocated_init_proto(::zjchain::init::protobuf::InitMessage* init_proto);
  private:
  const ::zjchain::init::protobuf::InitMessage& _internal_init_proto() const;
  ::zjchain::init::protobuf::InitMessage* _internal_mutable_init_proto();
  public:
  void unsafe_arena_set_allocated_init_proto(
      ::zjchain::init::protobuf::InitMessage* init_proto);
  ::zjchain::init::protobuf::InitMessage* unsafe_arena_release_init_proto();

  // optional .zjchain.pools.protobuf.SyncPoolsMaxHeight sync_heights = 26;
  bool has_sync_heights() const;
  private:
  bool _internal_has_sync_heights() const;
  public:
  void clear_sync_heights();
  const ::zjchain::pools::protobuf::SyncPoolsMaxHeight& sync_heights() const;
  PROTOBUF_NODISCARD ::zjchain::pools::protobuf::SyncPoolsMaxHeight* release_sync_heights();
  ::zjchain::pools::protobuf::SyncPoolsMaxHeight* mutable_sync_heights();
  void set_allocated_sync_heights(::zjchain::pools::protobuf::SyncPoolsMaxHeight* sync_heights);
  private:
  const ::zjchain::pools::protobuf::SyncPoolsMaxHeight& _internal_sync_heights() const;
  ::zjchain::pools::protobuf::SyncPoolsMaxHeight* _internal_mutable_sync_heights();
  public:
  void unsafe_arena_set_allocated_sync_heights(
      ::zjchain::pools::protobuf::SyncPoolsMaxHeight* sync_heights);
  ::zjchain::pools::protobuf::SyncPoolsMaxHeight* unsafe_arena_release_sync_heights();

  // optional .zjchain.block.protobuf.Block block = 27;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::zjchain::block::protobuf::Block& block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::Block* release_block();
  ::zjchain::block::protobuf::Block* mutable_block();
  void set_allocated_block(::zjchain::block::protobuf::Block* block);
  private:
  const ::zjchain::block::protobuf::Block& _internal_block() const;
  ::zjchain::block::protobuf::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::zjchain::block::protobuf::Block* block);
  ::zjchain::block::protobuf::Block* unsafe_arena_release_block();

  // optional .zjchain.c2c.protobuf.C2cMessage c2c = 30;
  bool has_c2c() const;
  private:
  bool _internal_has_c2c() const;
  public:
  void clear_c2c();
  const ::zjchain::c2c::protobuf::C2cMessage& c2c() const;
  PROTOBUF_NODISCARD ::zjchain::c2c::protobuf::C2cMessage* release_c2c();
  ::zjchain::c2c::protobuf::C2cMessage* mutable_c2c();
  void set_allocated_c2c(::zjchain::c2c::protobuf::C2cMessage* c2c);
  private:
  const ::zjchain::c2c::protobuf::C2cMessage& _internal_c2c() const;
  ::zjchain::c2c::protobuf::C2cMessage* _internal_mutable_c2c();
  public:
  void unsafe_arena_set_allocated_c2c(
      ::zjchain::c2c::protobuf::C2cMessage* c2c);
  ::zjchain::c2c::protobuf::C2cMessage* unsafe_arena_release_c2c();

  // optional int32 src_sharding_id = 1;
  bool has_src_sharding_id() const;
  private:
  bool _internal_has_src_sharding_id() const;
  public:
  void clear_src_sharding_id();
  int32_t src_sharding_id() const;
  void set_src_sharding_id(int32_t value);
  private:
  int32_t _internal_src_sharding_id() const;
  void _internal_set_src_sharding_id(int32_t value);
  public:

  // optional uint32 hop_count = 3 [default = 0];
  bool has_hop_count() const;
  private:
  bool _internal_has_hop_count() const;
  public:
  void clear_hop_count();
  uint32_t hop_count() const;
  void set_hop_count(uint32_t value);
  private:
  uint32_t _internal_hop_count() const;
  void _internal_set_hop_count(uint32_t value);
  public:

  // optional uint64 hash64 = 5;
  bool has_hash64() const;
  private:
  bool _internal_has_hash64() const;
  public:
  void clear_hash64();
  uint64_t hash64() const;
  void set_hash64(uint64_t value);
  private:
  uint64_t _internal_hash64() const;
  void _internal_set_hash64(uint64_t value);
  public:

  // optional uint32 type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional int32 version = 9 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional uint32 from_public_port = 29;
  bool has_from_public_port() const;
  private:
  bool _internal_has_from_public_port() const;
  public:
  void clear_from_public_port();
  uint32_t from_public_port() const;
  void set_from_public_port(uint32_t value);
  private:
  uint32_t _internal_from_public_port() const;
  void _internal_set_from_public_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.transport.protobuf.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::InvalidBftMessage > invalid_bfts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr des_dht_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::zjchain::transport::protobuf::BroadcastParam* broadcast_;
  ::zjchain::network::protobuf::NetworkMessage* network_proto_;
  ::zjchain::dht::protobuf::DhtMessage* dht_proto_;
  ::zjchain::bls::protobuf::BlsMessage* bls_proto_;
  ::zjchain::pools::protobuf::TxMessage* tx_proto_;
  ::zjchain::contract::protobuf::ContractMessage* contract_proto_;
  ::zjchain::elect::protobuf::ElectMessage* elect_proto_;
  ::zjchain::zbft::protobuf::ZbftMessage* zbft_;
  ::zjchain::block::protobuf::BlockMessage* block_proto_;
  ::zjchain::pools::protobuf::ToTxHeights* to_tx_heights_;
  ::zjchain::sync::protobuf::SyncInfo* sync_;
  ::zjchain::sync::protobuf::SyncMessage* sync_proto_;
  ::zjchain::vss::protobuf::VssMessage* vss_proto_;
  ::zjchain::block::protobuf::CrossShardingTosMessage* cross_tos_;
  ::zjchain::block::protobuf::CrossShardingStatisticMessage* cross_statistic_;
  ::zjchain::block::protobuf::ElectBlockMessage* elect_block_;
  ::zjchain::init::protobuf::InitMessage* init_proto_;
  ::zjchain::pools::protobuf::SyncPoolsMaxHeight* sync_heights_;
  ::zjchain::block::protobuf::Block* block_;
  ::zjchain::c2c::protobuf::C2cMessage* c2c_;
  int32_t src_sharding_id_;
  uint32_t hop_count_;
  uint64_t hash64_;
  uint32_t type_;
  int32_t version_;
  uint32_t from_public_port_;
  friend struct ::TableStruct_protos_2ftransport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BroadcastParam

// optional uint32 type = 1;
inline bool BroadcastParam::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BroadcastParam::has_type() const {
  return _internal_has_type();
}
inline void BroadcastParam::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BroadcastParam::_internal_type() const {
  return type_;
}
inline uint32_t BroadcastParam::type() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.type)
  return _internal_type();
}
inline void BroadcastParam::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void BroadcastParam::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.type)
}

// optional uint32 neighbor_count = 2 [default = 7];
inline bool BroadcastParam::_internal_has_neighbor_count() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BroadcastParam::has_neighbor_count() const {
  return _internal_has_neighbor_count();
}
inline void BroadcastParam::clear_neighbor_count() {
  neighbor_count_ = 7u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t BroadcastParam::_internal_neighbor_count() const {
  return neighbor_count_;
}
inline uint32_t BroadcastParam::neighbor_count() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.neighbor_count)
  return _internal_neighbor_count();
}
inline void BroadcastParam::_internal_set_neighbor_count(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  neighbor_count_ = value;
}
inline void BroadcastParam::set_neighbor_count(uint32_t value) {
  _internal_set_neighbor_count(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.neighbor_count)
}

// optional uint32 stop_times = 3;
inline bool BroadcastParam::_internal_has_stop_times() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BroadcastParam::has_stop_times() const {
  return _internal_has_stop_times();
}
inline void BroadcastParam::clear_stop_times() {
  stop_times_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BroadcastParam::_internal_stop_times() const {
  return stop_times_;
}
inline uint32_t BroadcastParam::stop_times() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.stop_times)
  return _internal_stop_times();
}
inline void BroadcastParam::_internal_set_stop_times(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  stop_times_ = value;
}
inline void BroadcastParam::set_stop_times(uint32_t value) {
  _internal_set_stop_times(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.stop_times)
}

// optional uint32 hop_limit = 4 [default = 10];
inline bool BroadcastParam::_internal_has_hop_limit() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BroadcastParam::has_hop_limit() const {
  return _internal_has_hop_limit();
}
inline void BroadcastParam::clear_hop_limit() {
  hop_limit_ = 10u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t BroadcastParam::_internal_hop_limit() const {
  return hop_limit_;
}
inline uint32_t BroadcastParam::hop_limit() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.hop_limit)
  return _internal_hop_limit();
}
inline void BroadcastParam::_internal_set_hop_limit(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  hop_limit_ = value;
}
inline void BroadcastParam::set_hop_limit(uint32_t value) {
  _internal_set_hop_limit(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.hop_limit)
}

// optional uint64 layer_left = 5;
inline bool BroadcastParam::_internal_has_layer_left() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BroadcastParam::has_layer_left() const {
  return _internal_has_layer_left();
}
inline void BroadcastParam::clear_layer_left() {
  layer_left_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t BroadcastParam::_internal_layer_left() const {
  return layer_left_;
}
inline uint64_t BroadcastParam::layer_left() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.layer_left)
  return _internal_layer_left();
}
inline void BroadcastParam::_internal_set_layer_left(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  layer_left_ = value;
}
inline void BroadcastParam::set_layer_left(uint64_t value) {
  _internal_set_layer_left(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.layer_left)
}

// optional uint64 layer_right = 6;
inline bool BroadcastParam::_internal_has_layer_right() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BroadcastParam::has_layer_right() const {
  return _internal_has_layer_right();
}
inline void BroadcastParam::clear_layer_right() {
  layer_right_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t BroadcastParam::_internal_layer_right() const {
  return layer_right_;
}
inline uint64_t BroadcastParam::layer_right() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.layer_right)
  return _internal_layer_right();
}
inline void BroadcastParam::_internal_set_layer_right(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  layer_right_ = value;
}
inline void BroadcastParam::set_layer_right(uint64_t value) {
  _internal_set_layer_right(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.layer_right)
}

// optional float overlap = 7;
inline bool BroadcastParam::_internal_has_overlap() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BroadcastParam::has_overlap() const {
  return _internal_has_overlap();
}
inline void BroadcastParam::clear_overlap() {
  overlap_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float BroadcastParam::_internal_overlap() const {
  return overlap_;
}
inline float BroadcastParam::overlap() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.overlap)
  return _internal_overlap();
}
inline void BroadcastParam::_internal_set_overlap(float value) {
  _has_bits_[0] |= 0x00000040u;
  overlap_ = value;
}
inline void BroadcastParam::set_overlap(float value) {
  _internal_set_overlap(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.overlap)
}

// optional uint32 hop_to_layer = 8 [default = 1];
inline bool BroadcastParam::_internal_has_hop_to_layer() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BroadcastParam::has_hop_to_layer() const {
  return _internal_has_hop_to_layer();
}
inline void BroadcastParam::clear_hop_to_layer() {
  hop_to_layer_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t BroadcastParam::_internal_hop_to_layer() const {
  return hop_to_layer_;
}
inline uint32_t BroadcastParam::hop_to_layer() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.hop_to_layer)
  return _internal_hop_to_layer();
}
inline void BroadcastParam::_internal_set_hop_to_layer(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  hop_to_layer_ = value;
}
inline void BroadcastParam::set_hop_to_layer(uint32_t value) {
  _internal_set_hop_to_layer(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.hop_to_layer)
}

// optional bytes header = 9;
inline bool BroadcastParam::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BroadcastParam::has_header() const {
  return _internal_has_header();
}
inline void BroadcastParam::clear_header() {
  header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastParam::header() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastParam::set_header(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 header_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.header)
}
inline std::string* BroadcastParam::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.BroadcastParam.header)
  return _s;
}
inline const std::string& BroadcastParam::_internal_header() const {
  return header_.Get();
}
inline void BroadcastParam::_internal_set_header(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastParam::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  return header_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastParam::release_header() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.BroadcastParam.header)
  if (!_internal_has_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = header_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault()) {
    header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastParam::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_.SetAllocated(header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault()) {
    header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.BroadcastParam.header)
}

// optional bytes body = 10;
inline bool BroadcastParam::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BroadcastParam::has_body() const {
  return _internal_has_body();
}
inline void BroadcastParam::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BroadcastParam::body() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastParam::set_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.body)
}
inline std::string* BroadcastParam::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.BroadcastParam.body)
  return _s;
}
inline const std::string& BroadcastParam::_internal_body() const {
  return body_.Get();
}
inline void BroadcastParam::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastParam::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000002u;
  return body_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastParam::release_body() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.BroadcastParam.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BroadcastParam::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault()) {
    body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.BroadcastParam.body)
}

// optional bool net_crossed = 11;
inline bool BroadcastParam::_internal_has_net_crossed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BroadcastParam::has_net_crossed() const {
  return _internal_has_net_crossed();
}
inline void BroadcastParam::clear_net_crossed() {
  net_crossed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool BroadcastParam::_internal_net_crossed() const {
  return net_crossed_;
}
inline bool BroadcastParam::net_crossed() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.net_crossed)
  return _internal_net_crossed();
}
inline void BroadcastParam::_internal_set_net_crossed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  net_crossed_ = value;
}
inline void BroadcastParam::set_net_crossed(bool value) {
  _internal_set_net_crossed(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.net_crossed)
}

// repeated uint64 bloomfilter = 12;
inline int BroadcastParam::_internal_bloomfilter_size() const {
  return bloomfilter_.size();
}
inline int BroadcastParam::bloomfilter_size() const {
  return _internal_bloomfilter_size();
}
inline void BroadcastParam::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline uint64_t BroadcastParam::_internal_bloomfilter(int index) const {
  return bloomfilter_.Get(index);
}
inline uint64_t BroadcastParam::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.bloomfilter)
  return _internal_bloomfilter(index);
}
inline void BroadcastParam::set_bloomfilter(int index, uint64_t value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.bloomfilter)
}
inline void BroadcastParam::_internal_add_bloomfilter(uint64_t value) {
  bloomfilter_.Add(value);
}
inline void BroadcastParam::add_bloomfilter(uint64_t value) {
  _internal_add_bloomfilter(value);
  // @@protoc_insertion_point(field_add:zjchain.transport.protobuf.BroadcastParam.bloomfilter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BroadcastParam::_internal_bloomfilter() const {
  return bloomfilter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BroadcastParam::bloomfilter() const {
  // @@protoc_insertion_point(field_list:zjchain.transport.protobuf.BroadcastParam.bloomfilter)
  return _internal_bloomfilter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BroadcastParam::_internal_mutable_bloomfilter() {
  return &bloomfilter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BroadcastParam::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.transport.protobuf.BroadcastParam.bloomfilter)
  return _internal_mutable_bloomfilter();
}

// optional float evil_rate = 13 [default = 0];
inline bool BroadcastParam::_internal_has_evil_rate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BroadcastParam::has_evil_rate() const {
  return _internal_has_evil_rate();
}
inline void BroadcastParam::clear_evil_rate() {
  evil_rate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float BroadcastParam::_internal_evil_rate() const {
  return evil_rate_;
}
inline float BroadcastParam::evil_rate() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.evil_rate)
  return _internal_evil_rate();
}
inline void BroadcastParam::_internal_set_evil_rate(float value) {
  _has_bits_[0] |= 0x00000100u;
  evil_rate_ = value;
}
inline void BroadcastParam::set_evil_rate(float value) {
  _internal_set_evil_rate(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.evil_rate)
}

// optional uint32 ign_bloomfilter_hop = 14 [default = 1];
inline bool BroadcastParam::_internal_has_ign_bloomfilter_hop() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BroadcastParam::has_ign_bloomfilter_hop() const {
  return _internal_has_ign_bloomfilter_hop();
}
inline void BroadcastParam::clear_ign_bloomfilter_hop() {
  ign_bloomfilter_hop_ = 1u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t BroadcastParam::_internal_ign_bloomfilter_hop() const {
  return ign_bloomfilter_hop_;
}
inline uint32_t BroadcastParam::ign_bloomfilter_hop() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.BroadcastParam.ign_bloomfilter_hop)
  return _internal_ign_bloomfilter_hop();
}
inline void BroadcastParam::_internal_set_ign_bloomfilter_hop(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  ign_bloomfilter_hop_ = value;
}
inline void BroadcastParam::set_ign_bloomfilter_hop(uint32_t value) {
  _internal_set_ign_bloomfilter_hop(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.BroadcastParam.ign_bloomfilter_hop)
}

// -------------------------------------------------------------------

// Header

// optional int32 src_sharding_id = 1;
inline bool Header::_internal_has_src_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Header::has_src_sharding_id() const {
  return _internal_has_src_sharding_id();
}
inline void Header::clear_src_sharding_id() {
  src_sharding_id_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline int32_t Header::_internal_src_sharding_id() const {
  return src_sharding_id_;
}
inline int32_t Header::src_sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.src_sharding_id)
  return _internal_src_sharding_id();
}
inline void Header::_internal_set_src_sharding_id(int32_t value) {
  _has_bits_[0] |= 0x00800000u;
  src_sharding_id_ = value;
}
inline void Header::set_src_sharding_id(int32_t value) {
  _internal_set_src_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.src_sharding_id)
}

// optional bytes des_dht_key = 2;
inline bool Header::_internal_has_des_dht_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_des_dht_key() const {
  return _internal_has_des_dht_key();
}
inline void Header::clear_des_dht_key() {
  des_dht_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::des_dht_key() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.des_dht_key)
  return _internal_des_dht_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_des_dht_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 des_dht_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.des_dht_key)
}
inline std::string* Header::mutable_des_dht_key() {
  std::string* _s = _internal_mutable_des_dht_key();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.des_dht_key)
  return _s;
}
inline const std::string& Header::_internal_des_dht_key() const {
  return des_dht_key_.Get();
}
inline void Header::_internal_set_des_dht_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  des_dht_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_des_dht_key() {
  _has_bits_[0] |= 0x00000001u;
  return des_dht_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_des_dht_key() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.des_dht_key)
  if (!_internal_has_des_dht_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = des_dht_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (des_dht_key_.IsDefault()) {
    des_dht_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_des_dht_key(std::string* des_dht_key) {
  if (des_dht_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  des_dht_key_.SetAllocated(des_dht_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (des_dht_key_.IsDefault()) {
    des_dht_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.des_dht_key)
}

// optional uint32 hop_count = 3 [default = 0];
inline bool Header::_internal_has_hop_count() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Header::has_hop_count() const {
  return _internal_has_hop_count();
}
inline void Header::clear_hop_count() {
  hop_count_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline uint32_t Header::_internal_hop_count() const {
  return hop_count_;
}
inline uint32_t Header::hop_count() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.hop_count)
  return _internal_hop_count();
}
inline void Header::_internal_set_hop_count(uint32_t value) {
  _has_bits_[0] |= 0x01000000u;
  hop_count_ = value;
}
inline void Header::set_hop_count(uint32_t value) {
  _internal_set_hop_count(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.hop_count)
}

// optional bytes debug = 4;
inline bool Header::_internal_has_debug() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_debug() const {
  return _internal_has_debug();
}
inline void Header::clear_debug() {
  debug_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Header::debug() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.debug)
  return _internal_debug();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_debug(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 debug_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.debug)
}
inline std::string* Header::mutable_debug() {
  std::string* _s = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.debug)
  return _s;
}
inline const std::string& Header::_internal_debug() const {
  return debug_.Get();
}
inline void Header::_internal_set_debug(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  debug_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_debug() {
  _has_bits_[0] |= 0x00000002u;
  return debug_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_debug() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.debug)
  if (!_internal_has_debug()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = debug_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (debug_.IsDefault()) {
    debug_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_debug(std::string* debug) {
  if (debug != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debug_.SetAllocated(debug, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (debug_.IsDefault()) {
    debug_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.debug)
}

// optional uint64 hash64 = 5;
inline bool Header::_internal_has_hash64() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Header::has_hash64() const {
  return _internal_has_hash64();
}
inline void Header::clear_hash64() {
  hash64_ = uint64_t{0u};
  _has_bits_[0] &= ~0x02000000u;
}
inline uint64_t Header::_internal_hash64() const {
  return hash64_;
}
inline uint64_t Header::hash64() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.hash64)
  return _internal_hash64();
}
inline void Header::_internal_set_hash64(uint64_t value) {
  _has_bits_[0] |= 0x02000000u;
  hash64_ = value;
}
inline void Header::set_hash64(uint64_t value) {
  _internal_set_hash64(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.hash64)
}

// optional uint32 type = 6;
inline bool Header::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Header::has_type() const {
  return _internal_has_type();
}
inline void Header::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline uint32_t Header::_internal_type() const {
  return type_;
}
inline uint32_t Header::type() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.type)
  return _internal_type();
}
inline void Header::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x04000000u;
  type_ = value;
}
inline void Header::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.type)
}

// optional .zjchain.transport.protobuf.BroadcastParam broadcast = 7;
inline bool Header::_internal_has_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || broadcast_ != nullptr);
  return value;
}
inline bool Header::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void Header::clear_broadcast() {
  if (broadcast_ != nullptr) broadcast_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zjchain::transport::protobuf::BroadcastParam& Header::_internal_broadcast() const {
  const ::zjchain::transport::protobuf::BroadcastParam* p = broadcast_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::transport::protobuf::BroadcastParam&>(
      ::zjchain::transport::protobuf::_BroadcastParam_default_instance_);
}
inline const ::zjchain::transport::protobuf::BroadcastParam& Header::broadcast() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.broadcast)
  return _internal_broadcast();
}
inline void Header::unsafe_arena_set_allocated_broadcast(
    ::zjchain::transport::protobuf::BroadcastParam* broadcast) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broadcast_);
  }
  broadcast_ = broadcast;
  if (broadcast) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.broadcast)
}
inline ::zjchain::transport::protobuf::BroadcastParam* Header::release_broadcast() {
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::transport::protobuf::BroadcastParam* temp = broadcast_;
  broadcast_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::transport::protobuf::BroadcastParam* Header::unsafe_arena_release_broadcast() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.broadcast)
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::transport::protobuf::BroadcastParam* temp = broadcast_;
  broadcast_ = nullptr;
  return temp;
}
inline ::zjchain::transport::protobuf::BroadcastParam* Header::_internal_mutable_broadcast() {
  _has_bits_[0] |= 0x00000008u;
  if (broadcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::transport::protobuf::BroadcastParam>(GetArenaForAllocation());
    broadcast_ = p;
  }
  return broadcast_;
}
inline ::zjchain::transport::protobuf::BroadcastParam* Header::mutable_broadcast() {
  ::zjchain::transport::protobuf::BroadcastParam* _msg = _internal_mutable_broadcast();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.broadcast)
  return _msg;
}
inline void Header::set_allocated_broadcast(::zjchain::transport::protobuf::BroadcastParam* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete broadcast_;
  }
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(broadcast);
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  broadcast_ = broadcast;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.broadcast)
}

// optional bytes sign = 8;
inline bool Header::_internal_has_sign() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Header::has_sign() const {
  return _internal_has_sign();
}
inline void Header::clear_sign() {
  sign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Header::sign() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_sign(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.sign)
}
inline std::string* Header::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.sign)
  return _s;
}
inline const std::string& Header::_internal_sign() const {
  return sign_.Get();
}
inline void Header::_internal_set_sign(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sign_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_sign() {
  _has_bits_[0] |= 0x00000004u;
  return sign_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_sign() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.sign)
  if (!_internal_has_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = sign_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_.IsDefault()) {
    sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_.IsDefault()) {
    sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.sign)
}

// optional int32 version = 9 [default = 0];
inline bool Header::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Header::has_version() const {
  return _internal_has_version();
}
inline void Header::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline int32_t Header::_internal_version() const {
  return version_;
}
inline int32_t Header::version() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.version)
  return _internal_version();
}
inline void Header::_internal_set_version(int32_t value) {
  _has_bits_[0] |= 0x08000000u;
  version_ = value;
}
inline void Header::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.version)
}

// optional .zjchain.network.protobuf.NetworkMessage network_proto = 10;
inline bool Header::_internal_has_network_proto() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || network_proto_ != nullptr);
  return value;
}
inline bool Header::has_network_proto() const {
  return _internal_has_network_proto();
}
inline const ::zjchain::network::protobuf::NetworkMessage& Header::_internal_network_proto() const {
  const ::zjchain::network::protobuf::NetworkMessage* p = network_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::network::protobuf::NetworkMessage&>(
      ::zjchain::network::protobuf::_NetworkMessage_default_instance_);
}
inline const ::zjchain::network::protobuf::NetworkMessage& Header::network_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.network_proto)
  return _internal_network_proto();
}
inline void Header::unsafe_arena_set_allocated_network_proto(
    ::zjchain::network::protobuf::NetworkMessage* network_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_proto_);
  }
  network_proto_ = network_proto;
  if (network_proto) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.network_proto)
}
inline ::zjchain::network::protobuf::NetworkMessage* Header::release_network_proto() {
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::network::protobuf::NetworkMessage* temp = network_proto_;
  network_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::network::protobuf::NetworkMessage* Header::unsafe_arena_release_network_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.network_proto)
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::network::protobuf::NetworkMessage* temp = network_proto_;
  network_proto_ = nullptr;
  return temp;
}
inline ::zjchain::network::protobuf::NetworkMessage* Header::_internal_mutable_network_proto() {
  _has_bits_[0] |= 0x00000010u;
  if (network_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::network::protobuf::NetworkMessage>(GetArenaForAllocation());
    network_proto_ = p;
  }
  return network_proto_;
}
inline ::zjchain::network::protobuf::NetworkMessage* Header::mutable_network_proto() {
  ::zjchain::network::protobuf::NetworkMessage* _msg = _internal_mutable_network_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.network_proto)
  return _msg;
}
inline void Header::set_allocated_network_proto(::zjchain::network::protobuf::NetworkMessage* network_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_proto_);
  }
  if (network_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_proto));
    if (message_arena != submessage_arena) {
      network_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  network_proto_ = network_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.network_proto)
}

// optional .zjchain.dht.protobuf.DhtMessage dht_proto = 11;
inline bool Header::_internal_has_dht_proto() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || dht_proto_ != nullptr);
  return value;
}
inline bool Header::has_dht_proto() const {
  return _internal_has_dht_proto();
}
inline const ::zjchain::dht::protobuf::DhtMessage& Header::_internal_dht_proto() const {
  const ::zjchain::dht::protobuf::DhtMessage* p = dht_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::dht::protobuf::DhtMessage&>(
      ::zjchain::dht::protobuf::_DhtMessage_default_instance_);
}
inline const ::zjchain::dht::protobuf::DhtMessage& Header::dht_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.dht_proto)
  return _internal_dht_proto();
}
inline void Header::unsafe_arena_set_allocated_dht_proto(
    ::zjchain::dht::protobuf::DhtMessage* dht_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dht_proto_);
  }
  dht_proto_ = dht_proto;
  if (dht_proto) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.dht_proto)
}
inline ::zjchain::dht::protobuf::DhtMessage* Header::release_dht_proto() {
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::dht::protobuf::DhtMessage* temp = dht_proto_;
  dht_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::dht::protobuf::DhtMessage* Header::unsafe_arena_release_dht_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.dht_proto)
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::dht::protobuf::DhtMessage* temp = dht_proto_;
  dht_proto_ = nullptr;
  return temp;
}
inline ::zjchain::dht::protobuf::DhtMessage* Header::_internal_mutable_dht_proto() {
  _has_bits_[0] |= 0x00000020u;
  if (dht_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::dht::protobuf::DhtMessage>(GetArenaForAllocation());
    dht_proto_ = p;
  }
  return dht_proto_;
}
inline ::zjchain::dht::protobuf::DhtMessage* Header::mutable_dht_proto() {
  ::zjchain::dht::protobuf::DhtMessage* _msg = _internal_mutable_dht_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.dht_proto)
  return _msg;
}
inline void Header::set_allocated_dht_proto(::zjchain::dht::protobuf::DhtMessage* dht_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dht_proto_);
  }
  if (dht_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dht_proto));
    if (message_arena != submessage_arena) {
      dht_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dht_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dht_proto_ = dht_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.dht_proto)
}

// optional .zjchain.bls.protobuf.BlsMessage bls_proto = 12;
inline bool Header::_internal_has_bls_proto() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || bls_proto_ != nullptr);
  return value;
}
inline bool Header::has_bls_proto() const {
  return _internal_has_bls_proto();
}
inline const ::zjchain::bls::protobuf::BlsMessage& Header::_internal_bls_proto() const {
  const ::zjchain::bls::protobuf::BlsMessage* p = bls_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::bls::protobuf::BlsMessage&>(
      ::zjchain::bls::protobuf::_BlsMessage_default_instance_);
}
inline const ::zjchain::bls::protobuf::BlsMessage& Header::bls_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.bls_proto)
  return _internal_bls_proto();
}
inline void Header::unsafe_arena_set_allocated_bls_proto(
    ::zjchain::bls::protobuf::BlsMessage* bls_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bls_proto_);
  }
  bls_proto_ = bls_proto;
  if (bls_proto) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.bls_proto)
}
inline ::zjchain::bls::protobuf::BlsMessage* Header::release_bls_proto() {
  _has_bits_[0] &= ~0x00000040u;
  ::zjchain::bls::protobuf::BlsMessage* temp = bls_proto_;
  bls_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::bls::protobuf::BlsMessage* Header::unsafe_arena_release_bls_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.bls_proto)
  _has_bits_[0] &= ~0x00000040u;
  ::zjchain::bls::protobuf::BlsMessage* temp = bls_proto_;
  bls_proto_ = nullptr;
  return temp;
}
inline ::zjchain::bls::protobuf::BlsMessage* Header::_internal_mutable_bls_proto() {
  _has_bits_[0] |= 0x00000040u;
  if (bls_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::bls::protobuf::BlsMessage>(GetArenaForAllocation());
    bls_proto_ = p;
  }
  return bls_proto_;
}
inline ::zjchain::bls::protobuf::BlsMessage* Header::mutable_bls_proto() {
  ::zjchain::bls::protobuf::BlsMessage* _msg = _internal_mutable_bls_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.bls_proto)
  return _msg;
}
inline void Header::set_allocated_bls_proto(::zjchain::bls::protobuf::BlsMessage* bls_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bls_proto_);
  }
  if (bls_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bls_proto));
    if (message_arena != submessage_arena) {
      bls_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bls_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  bls_proto_ = bls_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.bls_proto)
}

// optional .zjchain.pools.protobuf.TxMessage tx_proto = 13;
inline bool Header::_internal_has_tx_proto() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tx_proto_ != nullptr);
  return value;
}
inline bool Header::has_tx_proto() const {
  return _internal_has_tx_proto();
}
inline const ::zjchain::pools::protobuf::TxMessage& Header::_internal_tx_proto() const {
  const ::zjchain::pools::protobuf::TxMessage* p = tx_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::pools::protobuf::TxMessage&>(
      ::zjchain::pools::protobuf::_TxMessage_default_instance_);
}
inline const ::zjchain::pools::protobuf::TxMessage& Header::tx_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.tx_proto)
  return _internal_tx_proto();
}
inline void Header::unsafe_arena_set_allocated_tx_proto(
    ::zjchain::pools::protobuf::TxMessage* tx_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_proto_);
  }
  tx_proto_ = tx_proto;
  if (tx_proto) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.tx_proto)
}
inline ::zjchain::pools::protobuf::TxMessage* Header::release_tx_proto() {
  _has_bits_[0] &= ~0x00000080u;
  ::zjchain::pools::protobuf::TxMessage* temp = tx_proto_;
  tx_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::pools::protobuf::TxMessage* Header::unsafe_arena_release_tx_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.tx_proto)
  _has_bits_[0] &= ~0x00000080u;
  ::zjchain::pools::protobuf::TxMessage* temp = tx_proto_;
  tx_proto_ = nullptr;
  return temp;
}
inline ::zjchain::pools::protobuf::TxMessage* Header::_internal_mutable_tx_proto() {
  _has_bits_[0] |= 0x00000080u;
  if (tx_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::pools::protobuf::TxMessage>(GetArenaForAllocation());
    tx_proto_ = p;
  }
  return tx_proto_;
}
inline ::zjchain::pools::protobuf::TxMessage* Header::mutable_tx_proto() {
  ::zjchain::pools::protobuf::TxMessage* _msg = _internal_mutable_tx_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.tx_proto)
  return _msg;
}
inline void Header::set_allocated_tx_proto(::zjchain::pools::protobuf::TxMessage* tx_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_proto_);
  }
  if (tx_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_proto));
    if (message_arena != submessage_arena) {
      tx_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tx_proto_ = tx_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.tx_proto)
}

// optional .zjchain.contract.protobuf.ContractMessage contract_proto = 14;
inline bool Header::_internal_has_contract_proto() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || contract_proto_ != nullptr);
  return value;
}
inline bool Header::has_contract_proto() const {
  return _internal_has_contract_proto();
}
inline const ::zjchain::contract::protobuf::ContractMessage& Header::_internal_contract_proto() const {
  const ::zjchain::contract::protobuf::ContractMessage* p = contract_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::contract::protobuf::ContractMessage&>(
      ::zjchain::contract::protobuf::_ContractMessage_default_instance_);
}
inline const ::zjchain::contract::protobuf::ContractMessage& Header::contract_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.contract_proto)
  return _internal_contract_proto();
}
inline void Header::unsafe_arena_set_allocated_contract_proto(
    ::zjchain::contract::protobuf::ContractMessage* contract_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_proto_);
  }
  contract_proto_ = contract_proto;
  if (contract_proto) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.contract_proto)
}
inline ::zjchain::contract::protobuf::ContractMessage* Header::release_contract_proto() {
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::contract::protobuf::ContractMessage* temp = contract_proto_;
  contract_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::contract::protobuf::ContractMessage* Header::unsafe_arena_release_contract_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.contract_proto)
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::contract::protobuf::ContractMessage* temp = contract_proto_;
  contract_proto_ = nullptr;
  return temp;
}
inline ::zjchain::contract::protobuf::ContractMessage* Header::_internal_mutable_contract_proto() {
  _has_bits_[0] |= 0x00000100u;
  if (contract_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::contract::protobuf::ContractMessage>(GetArenaForAllocation());
    contract_proto_ = p;
  }
  return contract_proto_;
}
inline ::zjchain::contract::protobuf::ContractMessage* Header::mutable_contract_proto() {
  ::zjchain::contract::protobuf::ContractMessage* _msg = _internal_mutable_contract_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.contract_proto)
  return _msg;
}
inline void Header::set_allocated_contract_proto(::zjchain::contract::protobuf::ContractMessage* contract_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_proto_);
  }
  if (contract_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_proto));
    if (message_arena != submessage_arena) {
      contract_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  contract_proto_ = contract_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.contract_proto)
}

// optional .zjchain.elect.protobuf.ElectMessage elect_proto = 15;
inline bool Header::_internal_has_elect_proto() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || elect_proto_ != nullptr);
  return value;
}
inline bool Header::has_elect_proto() const {
  return _internal_has_elect_proto();
}
inline const ::zjchain::elect::protobuf::ElectMessage& Header::_internal_elect_proto() const {
  const ::zjchain::elect::protobuf::ElectMessage* p = elect_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::elect::protobuf::ElectMessage&>(
      ::zjchain::elect::protobuf::_ElectMessage_default_instance_);
}
inline const ::zjchain::elect::protobuf::ElectMessage& Header::elect_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.elect_proto)
  return _internal_elect_proto();
}
inline void Header::unsafe_arena_set_allocated_elect_proto(
    ::zjchain::elect::protobuf::ElectMessage* elect_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elect_proto_);
  }
  elect_proto_ = elect_proto;
  if (elect_proto) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.elect_proto)
}
inline ::zjchain::elect::protobuf::ElectMessage* Header::release_elect_proto() {
  _has_bits_[0] &= ~0x00000200u;
  ::zjchain::elect::protobuf::ElectMessage* temp = elect_proto_;
  elect_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::elect::protobuf::ElectMessage* Header::unsafe_arena_release_elect_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.elect_proto)
  _has_bits_[0] &= ~0x00000200u;
  ::zjchain::elect::protobuf::ElectMessage* temp = elect_proto_;
  elect_proto_ = nullptr;
  return temp;
}
inline ::zjchain::elect::protobuf::ElectMessage* Header::_internal_mutable_elect_proto() {
  _has_bits_[0] |= 0x00000200u;
  if (elect_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::elect::protobuf::ElectMessage>(GetArenaForAllocation());
    elect_proto_ = p;
  }
  return elect_proto_;
}
inline ::zjchain::elect::protobuf::ElectMessage* Header::mutable_elect_proto() {
  ::zjchain::elect::protobuf::ElectMessage* _msg = _internal_mutable_elect_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.elect_proto)
  return _msg;
}
inline void Header::set_allocated_elect_proto(::zjchain::elect::protobuf::ElectMessage* elect_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(elect_proto_);
  }
  if (elect_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elect_proto));
    if (message_arena != submessage_arena) {
      elect_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elect_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  elect_proto_ = elect_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.elect_proto)
}

// optional .zjchain.zbft.protobuf.ZbftMessage zbft = 16;
inline bool Header::_internal_has_zbft() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || zbft_ != nullptr);
  return value;
}
inline bool Header::has_zbft() const {
  return _internal_has_zbft();
}
inline const ::zjchain::zbft::protobuf::ZbftMessage& Header::_internal_zbft() const {
  const ::zjchain::zbft::protobuf::ZbftMessage* p = zbft_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::zbft::protobuf::ZbftMessage&>(
      ::zjchain::zbft::protobuf::_ZbftMessage_default_instance_);
}
inline const ::zjchain::zbft::protobuf::ZbftMessage& Header::zbft() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.zbft)
  return _internal_zbft();
}
inline void Header::unsafe_arena_set_allocated_zbft(
    ::zjchain::zbft::protobuf::ZbftMessage* zbft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zbft_);
  }
  zbft_ = zbft;
  if (zbft) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.zbft)
}
inline ::zjchain::zbft::protobuf::ZbftMessage* Header::release_zbft() {
  _has_bits_[0] &= ~0x00000400u;
  ::zjchain::zbft::protobuf::ZbftMessage* temp = zbft_;
  zbft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::zbft::protobuf::ZbftMessage* Header::unsafe_arena_release_zbft() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.zbft)
  _has_bits_[0] &= ~0x00000400u;
  ::zjchain::zbft::protobuf::ZbftMessage* temp = zbft_;
  zbft_ = nullptr;
  return temp;
}
inline ::zjchain::zbft::protobuf::ZbftMessage* Header::_internal_mutable_zbft() {
  _has_bits_[0] |= 0x00000400u;
  if (zbft_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::zbft::protobuf::ZbftMessage>(GetArenaForAllocation());
    zbft_ = p;
  }
  return zbft_;
}
inline ::zjchain::zbft::protobuf::ZbftMessage* Header::mutable_zbft() {
  ::zjchain::zbft::protobuf::ZbftMessage* _msg = _internal_mutable_zbft();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.zbft)
  return _msg;
}
inline void Header::set_allocated_zbft(::zjchain::zbft::protobuf::ZbftMessage* zbft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(zbft_);
  }
  if (zbft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zbft));
    if (message_arena != submessage_arena) {
      zbft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zbft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  zbft_ = zbft;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.zbft)
}

// optional .zjchain.block.protobuf.BlockMessage block_proto = 17;
inline bool Header::_internal_has_block_proto() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || block_proto_ != nullptr);
  return value;
}
inline bool Header::has_block_proto() const {
  return _internal_has_block_proto();
}
inline const ::zjchain::block::protobuf::BlockMessage& Header::_internal_block_proto() const {
  const ::zjchain::block::protobuf::BlockMessage* p = block_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::BlockMessage&>(
      ::zjchain::block::protobuf::_BlockMessage_default_instance_);
}
inline const ::zjchain::block::protobuf::BlockMessage& Header::block_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.block_proto)
  return _internal_block_proto();
}
inline void Header::unsafe_arena_set_allocated_block_proto(
    ::zjchain::block::protobuf::BlockMessage* block_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_proto_);
  }
  block_proto_ = block_proto;
  if (block_proto) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.block_proto)
}
inline ::zjchain::block::protobuf::BlockMessage* Header::release_block_proto() {
  _has_bits_[0] &= ~0x00000800u;
  ::zjchain::block::protobuf::BlockMessage* temp = block_proto_;
  block_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::BlockMessage* Header::unsafe_arena_release_block_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.block_proto)
  _has_bits_[0] &= ~0x00000800u;
  ::zjchain::block::protobuf::BlockMessage* temp = block_proto_;
  block_proto_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::BlockMessage* Header::_internal_mutable_block_proto() {
  _has_bits_[0] |= 0x00000800u;
  if (block_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::BlockMessage>(GetArenaForAllocation());
    block_proto_ = p;
  }
  return block_proto_;
}
inline ::zjchain::block::protobuf::BlockMessage* Header::mutable_block_proto() {
  ::zjchain::block::protobuf::BlockMessage* _msg = _internal_mutable_block_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.block_proto)
  return _msg;
}
inline void Header::set_allocated_block_proto(::zjchain::block::protobuf::BlockMessage* block_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_proto_);
  }
  if (block_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_proto));
    if (message_arena != submessage_arena) {
      block_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  block_proto_ = block_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.block_proto)
}

// optional .zjchain.pools.protobuf.ToTxHeights to_tx_heights = 18;
inline bool Header::_internal_has_to_tx_heights() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || to_tx_heights_ != nullptr);
  return value;
}
inline bool Header::has_to_tx_heights() const {
  return _internal_has_to_tx_heights();
}
inline const ::zjchain::pools::protobuf::ToTxHeights& Header::_internal_to_tx_heights() const {
  const ::zjchain::pools::protobuf::ToTxHeights* p = to_tx_heights_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::pools::protobuf::ToTxHeights&>(
      ::zjchain::pools::protobuf::_ToTxHeights_default_instance_);
}
inline const ::zjchain::pools::protobuf::ToTxHeights& Header::to_tx_heights() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.to_tx_heights)
  return _internal_to_tx_heights();
}
inline void Header::unsafe_arena_set_allocated_to_tx_heights(
    ::zjchain::pools::protobuf::ToTxHeights* to_tx_heights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_tx_heights_);
  }
  to_tx_heights_ = to_tx_heights;
  if (to_tx_heights) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.to_tx_heights)
}
inline ::zjchain::pools::protobuf::ToTxHeights* Header::release_to_tx_heights() {
  _has_bits_[0] &= ~0x00001000u;
  ::zjchain::pools::protobuf::ToTxHeights* temp = to_tx_heights_;
  to_tx_heights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::pools::protobuf::ToTxHeights* Header::unsafe_arena_release_to_tx_heights() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.to_tx_heights)
  _has_bits_[0] &= ~0x00001000u;
  ::zjchain::pools::protobuf::ToTxHeights* temp = to_tx_heights_;
  to_tx_heights_ = nullptr;
  return temp;
}
inline ::zjchain::pools::protobuf::ToTxHeights* Header::_internal_mutable_to_tx_heights() {
  _has_bits_[0] |= 0x00001000u;
  if (to_tx_heights_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::pools::protobuf::ToTxHeights>(GetArenaForAllocation());
    to_tx_heights_ = p;
  }
  return to_tx_heights_;
}
inline ::zjchain::pools::protobuf::ToTxHeights* Header::mutable_to_tx_heights() {
  ::zjchain::pools::protobuf::ToTxHeights* _msg = _internal_mutable_to_tx_heights();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.to_tx_heights)
  return _msg;
}
inline void Header::set_allocated_to_tx_heights(::zjchain::pools::protobuf::ToTxHeights* to_tx_heights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_tx_heights_);
  }
  if (to_tx_heights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_tx_heights));
    if (message_arena != submessage_arena) {
      to_tx_heights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_tx_heights, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  to_tx_heights_ = to_tx_heights;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.to_tx_heights)
}

// optional .zjchain.sync.protobuf.SyncInfo sync = 19;
inline bool Header::_internal_has_sync() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || sync_ != nullptr);
  return value;
}
inline bool Header::has_sync() const {
  return _internal_has_sync();
}
inline const ::zjchain::sync::protobuf::SyncInfo& Header::_internal_sync() const {
  const ::zjchain::sync::protobuf::SyncInfo* p = sync_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::sync::protobuf::SyncInfo&>(
      ::zjchain::sync::protobuf::_SyncInfo_default_instance_);
}
inline const ::zjchain::sync::protobuf::SyncInfo& Header::sync() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.sync)
  return _internal_sync();
}
inline void Header::unsafe_arena_set_allocated_sync(
    ::zjchain::sync::protobuf::SyncInfo* sync) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  sync_ = sync;
  if (sync) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.sync)
}
inline ::zjchain::sync::protobuf::SyncInfo* Header::release_sync() {
  _has_bits_[0] &= ~0x00002000u;
  ::zjchain::sync::protobuf::SyncInfo* temp = sync_;
  sync_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::sync::protobuf::SyncInfo* Header::unsafe_arena_release_sync() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.sync)
  _has_bits_[0] &= ~0x00002000u;
  ::zjchain::sync::protobuf::SyncInfo* temp = sync_;
  sync_ = nullptr;
  return temp;
}
inline ::zjchain::sync::protobuf::SyncInfo* Header::_internal_mutable_sync() {
  _has_bits_[0] |= 0x00002000u;
  if (sync_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::sync::protobuf::SyncInfo>(GetArenaForAllocation());
    sync_ = p;
  }
  return sync_;
}
inline ::zjchain::sync::protobuf::SyncInfo* Header::mutable_sync() {
  ::zjchain::sync::protobuf::SyncInfo* _msg = _internal_mutable_sync();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.sync)
  return _msg;
}
inline void Header::set_allocated_sync(::zjchain::sync::protobuf::SyncInfo* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_);
  }
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync));
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  sync_ = sync;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.sync)
}

// optional .zjchain.sync.protobuf.SyncMessage sync_proto = 20;
inline bool Header::_internal_has_sync_proto() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || sync_proto_ != nullptr);
  return value;
}
inline bool Header::has_sync_proto() const {
  return _internal_has_sync_proto();
}
inline const ::zjchain::sync::protobuf::SyncMessage& Header::_internal_sync_proto() const {
  const ::zjchain::sync::protobuf::SyncMessage* p = sync_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::sync::protobuf::SyncMessage&>(
      ::zjchain::sync::protobuf::_SyncMessage_default_instance_);
}
inline const ::zjchain::sync::protobuf::SyncMessage& Header::sync_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.sync_proto)
  return _internal_sync_proto();
}
inline void Header::unsafe_arena_set_allocated_sync_proto(
    ::zjchain::sync::protobuf::SyncMessage* sync_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_proto_);
  }
  sync_proto_ = sync_proto;
  if (sync_proto) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.sync_proto)
}
inline ::zjchain::sync::protobuf::SyncMessage* Header::release_sync_proto() {
  _has_bits_[0] &= ~0x00004000u;
  ::zjchain::sync::protobuf::SyncMessage* temp = sync_proto_;
  sync_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::sync::protobuf::SyncMessage* Header::unsafe_arena_release_sync_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.sync_proto)
  _has_bits_[0] &= ~0x00004000u;
  ::zjchain::sync::protobuf::SyncMessage* temp = sync_proto_;
  sync_proto_ = nullptr;
  return temp;
}
inline ::zjchain::sync::protobuf::SyncMessage* Header::_internal_mutable_sync_proto() {
  _has_bits_[0] |= 0x00004000u;
  if (sync_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::sync::protobuf::SyncMessage>(GetArenaForAllocation());
    sync_proto_ = p;
  }
  return sync_proto_;
}
inline ::zjchain::sync::protobuf::SyncMessage* Header::mutable_sync_proto() {
  ::zjchain::sync::protobuf::SyncMessage* _msg = _internal_mutable_sync_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.sync_proto)
  return _msg;
}
inline void Header::set_allocated_sync_proto(::zjchain::sync::protobuf::SyncMessage* sync_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_proto_);
  }
  if (sync_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_proto));
    if (message_arena != submessage_arena) {
      sync_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  sync_proto_ = sync_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.sync_proto)
}

// optional .zjchain.vss.protobuf.VssMessage vss_proto = 21;
inline bool Header::_internal_has_vss_proto() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || vss_proto_ != nullptr);
  return value;
}
inline bool Header::has_vss_proto() const {
  return _internal_has_vss_proto();
}
inline const ::zjchain::vss::protobuf::VssMessage& Header::_internal_vss_proto() const {
  const ::zjchain::vss::protobuf::VssMessage* p = vss_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::vss::protobuf::VssMessage&>(
      ::zjchain::vss::protobuf::_VssMessage_default_instance_);
}
inline const ::zjchain::vss::protobuf::VssMessage& Header::vss_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.vss_proto)
  return _internal_vss_proto();
}
inline void Header::unsafe_arena_set_allocated_vss_proto(
    ::zjchain::vss::protobuf::VssMessage* vss_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vss_proto_);
  }
  vss_proto_ = vss_proto;
  if (vss_proto) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.vss_proto)
}
inline ::zjchain::vss::protobuf::VssMessage* Header::release_vss_proto() {
  _has_bits_[0] &= ~0x00008000u;
  ::zjchain::vss::protobuf::VssMessage* temp = vss_proto_;
  vss_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::vss::protobuf::VssMessage* Header::unsafe_arena_release_vss_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.vss_proto)
  _has_bits_[0] &= ~0x00008000u;
  ::zjchain::vss::protobuf::VssMessage* temp = vss_proto_;
  vss_proto_ = nullptr;
  return temp;
}
inline ::zjchain::vss::protobuf::VssMessage* Header::_internal_mutable_vss_proto() {
  _has_bits_[0] |= 0x00008000u;
  if (vss_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::vss::protobuf::VssMessage>(GetArenaForAllocation());
    vss_proto_ = p;
  }
  return vss_proto_;
}
inline ::zjchain::vss::protobuf::VssMessage* Header::mutable_vss_proto() {
  ::zjchain::vss::protobuf::VssMessage* _msg = _internal_mutable_vss_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.vss_proto)
  return _msg;
}
inline void Header::set_allocated_vss_proto(::zjchain::vss::protobuf::VssMessage* vss_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vss_proto_);
  }
  if (vss_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vss_proto));
    if (message_arena != submessage_arena) {
      vss_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vss_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  vss_proto_ = vss_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.vss_proto)
}

// optional .zjchain.block.protobuf.CrossShardingTosMessage cross_tos = 22;
inline bool Header::_internal_has_cross_tos() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || cross_tos_ != nullptr);
  return value;
}
inline bool Header::has_cross_tos() const {
  return _internal_has_cross_tos();
}
inline const ::zjchain::block::protobuf::CrossShardingTosMessage& Header::_internal_cross_tos() const {
  const ::zjchain::block::protobuf::CrossShardingTosMessage* p = cross_tos_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::CrossShardingTosMessage&>(
      ::zjchain::block::protobuf::_CrossShardingTosMessage_default_instance_);
}
inline const ::zjchain::block::protobuf::CrossShardingTosMessage& Header::cross_tos() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.cross_tos)
  return _internal_cross_tos();
}
inline void Header::unsafe_arena_set_allocated_cross_tos(
    ::zjchain::block::protobuf::CrossShardingTosMessage* cross_tos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cross_tos_);
  }
  cross_tos_ = cross_tos;
  if (cross_tos) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.cross_tos)
}
inline ::zjchain::block::protobuf::CrossShardingTosMessage* Header::release_cross_tos() {
  _has_bits_[0] &= ~0x00010000u;
  ::zjchain::block::protobuf::CrossShardingTosMessage* temp = cross_tos_;
  cross_tos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::CrossShardingTosMessage* Header::unsafe_arena_release_cross_tos() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.cross_tos)
  _has_bits_[0] &= ~0x00010000u;
  ::zjchain::block::protobuf::CrossShardingTosMessage* temp = cross_tos_;
  cross_tos_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::CrossShardingTosMessage* Header::_internal_mutable_cross_tos() {
  _has_bits_[0] |= 0x00010000u;
  if (cross_tos_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::CrossShardingTosMessage>(GetArenaForAllocation());
    cross_tos_ = p;
  }
  return cross_tos_;
}
inline ::zjchain::block::protobuf::CrossShardingTosMessage* Header::mutable_cross_tos() {
  ::zjchain::block::protobuf::CrossShardingTosMessage* _msg = _internal_mutable_cross_tos();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.cross_tos)
  return _msg;
}
inline void Header::set_allocated_cross_tos(::zjchain::block::protobuf::CrossShardingTosMessage* cross_tos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cross_tos_);
  }
  if (cross_tos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cross_tos));
    if (message_arena != submessage_arena) {
      cross_tos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross_tos, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  cross_tos_ = cross_tos;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.cross_tos)
}

// optional .zjchain.block.protobuf.CrossShardingStatisticMessage cross_statistic = 23;
inline bool Header::_internal_has_cross_statistic() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || cross_statistic_ != nullptr);
  return value;
}
inline bool Header::has_cross_statistic() const {
  return _internal_has_cross_statistic();
}
inline const ::zjchain::block::protobuf::CrossShardingStatisticMessage& Header::_internal_cross_statistic() const {
  const ::zjchain::block::protobuf::CrossShardingStatisticMessage* p = cross_statistic_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::CrossShardingStatisticMessage&>(
      ::zjchain::block::protobuf::_CrossShardingStatisticMessage_default_instance_);
}
inline const ::zjchain::block::protobuf::CrossShardingStatisticMessage& Header::cross_statistic() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.cross_statistic)
  return _internal_cross_statistic();
}
inline void Header::unsafe_arena_set_allocated_cross_statistic(
    ::zjchain::block::protobuf::CrossShardingStatisticMessage* cross_statistic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cross_statistic_);
  }
  cross_statistic_ = cross_statistic;
  if (cross_statistic) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.cross_statistic)
}
inline ::zjchain::block::protobuf::CrossShardingStatisticMessage* Header::release_cross_statistic() {
  _has_bits_[0] &= ~0x00020000u;
  ::zjchain::block::protobuf::CrossShardingStatisticMessage* temp = cross_statistic_;
  cross_statistic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::CrossShardingStatisticMessage* Header::unsafe_arena_release_cross_statistic() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.cross_statistic)
  _has_bits_[0] &= ~0x00020000u;
  ::zjchain::block::protobuf::CrossShardingStatisticMessage* temp = cross_statistic_;
  cross_statistic_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::CrossShardingStatisticMessage* Header::_internal_mutable_cross_statistic() {
  _has_bits_[0] |= 0x00020000u;
  if (cross_statistic_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::CrossShardingStatisticMessage>(GetArenaForAllocation());
    cross_statistic_ = p;
  }
  return cross_statistic_;
}
inline ::zjchain::block::protobuf::CrossShardingStatisticMessage* Header::mutable_cross_statistic() {
  ::zjchain::block::protobuf::CrossShardingStatisticMessage* _msg = _internal_mutable_cross_statistic();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.cross_statistic)
  return _msg;
}
inline void Header::set_allocated_cross_statistic(::zjchain::block::protobuf::CrossShardingStatisticMessage* cross_statistic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cross_statistic_);
  }
  if (cross_statistic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cross_statistic));
    if (message_arena != submessage_arena) {
      cross_statistic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross_statistic, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  cross_statistic_ = cross_statistic;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.cross_statistic)
}

// optional .zjchain.block.protobuf.ElectBlockMessage elect_block = 24;
inline bool Header::_internal_has_elect_block() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || elect_block_ != nullptr);
  return value;
}
inline bool Header::has_elect_block() const {
  return _internal_has_elect_block();
}
inline const ::zjchain::block::protobuf::ElectBlockMessage& Header::_internal_elect_block() const {
  const ::zjchain::block::protobuf::ElectBlockMessage* p = elect_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::ElectBlockMessage&>(
      ::zjchain::block::protobuf::_ElectBlockMessage_default_instance_);
}
inline const ::zjchain::block::protobuf::ElectBlockMessage& Header::elect_block() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.elect_block)
  return _internal_elect_block();
}
inline void Header::unsafe_arena_set_allocated_elect_block(
    ::zjchain::block::protobuf::ElectBlockMessage* elect_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elect_block_);
  }
  elect_block_ = elect_block;
  if (elect_block) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.elect_block)
}
inline ::zjchain::block::protobuf::ElectBlockMessage* Header::release_elect_block() {
  _has_bits_[0] &= ~0x00040000u;
  ::zjchain::block::protobuf::ElectBlockMessage* temp = elect_block_;
  elect_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::ElectBlockMessage* Header::unsafe_arena_release_elect_block() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.elect_block)
  _has_bits_[0] &= ~0x00040000u;
  ::zjchain::block::protobuf::ElectBlockMessage* temp = elect_block_;
  elect_block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::ElectBlockMessage* Header::_internal_mutable_elect_block() {
  _has_bits_[0] |= 0x00040000u;
  if (elect_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::ElectBlockMessage>(GetArenaForAllocation());
    elect_block_ = p;
  }
  return elect_block_;
}
inline ::zjchain::block::protobuf::ElectBlockMessage* Header::mutable_elect_block() {
  ::zjchain::block::protobuf::ElectBlockMessage* _msg = _internal_mutable_elect_block();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.elect_block)
  return _msg;
}
inline void Header::set_allocated_elect_block(::zjchain::block::protobuf::ElectBlockMessage* elect_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(elect_block_);
  }
  if (elect_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elect_block));
    if (message_arena != submessage_arena) {
      elect_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elect_block, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  elect_block_ = elect_block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.elect_block)
}

// optional .zjchain.init.protobuf.InitMessage init_proto = 25;
inline bool Header::_internal_has_init_proto() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || init_proto_ != nullptr);
  return value;
}
inline bool Header::has_init_proto() const {
  return _internal_has_init_proto();
}
inline const ::zjchain::init::protobuf::InitMessage& Header::_internal_init_proto() const {
  const ::zjchain::init::protobuf::InitMessage* p = init_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::init::protobuf::InitMessage&>(
      ::zjchain::init::protobuf::_InitMessage_default_instance_);
}
inline const ::zjchain::init::protobuf::InitMessage& Header::init_proto() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.init_proto)
  return _internal_init_proto();
}
inline void Header::unsafe_arena_set_allocated_init_proto(
    ::zjchain::init::protobuf::InitMessage* init_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(init_proto_);
  }
  init_proto_ = init_proto;
  if (init_proto) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.init_proto)
}
inline ::zjchain::init::protobuf::InitMessage* Header::release_init_proto() {
  _has_bits_[0] &= ~0x00080000u;
  ::zjchain::init::protobuf::InitMessage* temp = init_proto_;
  init_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::init::protobuf::InitMessage* Header::unsafe_arena_release_init_proto() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.init_proto)
  _has_bits_[0] &= ~0x00080000u;
  ::zjchain::init::protobuf::InitMessage* temp = init_proto_;
  init_proto_ = nullptr;
  return temp;
}
inline ::zjchain::init::protobuf::InitMessage* Header::_internal_mutable_init_proto() {
  _has_bits_[0] |= 0x00080000u;
  if (init_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::init::protobuf::InitMessage>(GetArenaForAllocation());
    init_proto_ = p;
  }
  return init_proto_;
}
inline ::zjchain::init::protobuf::InitMessage* Header::mutable_init_proto() {
  ::zjchain::init::protobuf::InitMessage* _msg = _internal_mutable_init_proto();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.init_proto)
  return _msg;
}
inline void Header::set_allocated_init_proto(::zjchain::init::protobuf::InitMessage* init_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(init_proto_);
  }
  if (init_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(init_proto));
    if (message_arena != submessage_arena) {
      init_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  init_proto_ = init_proto;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.init_proto)
}

// optional .zjchain.pools.protobuf.SyncPoolsMaxHeight sync_heights = 26;
inline bool Header::_internal_has_sync_heights() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || sync_heights_ != nullptr);
  return value;
}
inline bool Header::has_sync_heights() const {
  return _internal_has_sync_heights();
}
inline const ::zjchain::pools::protobuf::SyncPoolsMaxHeight& Header::_internal_sync_heights() const {
  const ::zjchain::pools::protobuf::SyncPoolsMaxHeight* p = sync_heights_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::pools::protobuf::SyncPoolsMaxHeight&>(
      ::zjchain::pools::protobuf::_SyncPoolsMaxHeight_default_instance_);
}
inline const ::zjchain::pools::protobuf::SyncPoolsMaxHeight& Header::sync_heights() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.sync_heights)
  return _internal_sync_heights();
}
inline void Header::unsafe_arena_set_allocated_sync_heights(
    ::zjchain::pools::protobuf::SyncPoolsMaxHeight* sync_heights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_heights_);
  }
  sync_heights_ = sync_heights;
  if (sync_heights) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.sync_heights)
}
inline ::zjchain::pools::protobuf::SyncPoolsMaxHeight* Header::release_sync_heights() {
  _has_bits_[0] &= ~0x00100000u;
  ::zjchain::pools::protobuf::SyncPoolsMaxHeight* temp = sync_heights_;
  sync_heights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::pools::protobuf::SyncPoolsMaxHeight* Header::unsafe_arena_release_sync_heights() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.sync_heights)
  _has_bits_[0] &= ~0x00100000u;
  ::zjchain::pools::protobuf::SyncPoolsMaxHeight* temp = sync_heights_;
  sync_heights_ = nullptr;
  return temp;
}
inline ::zjchain::pools::protobuf::SyncPoolsMaxHeight* Header::_internal_mutable_sync_heights() {
  _has_bits_[0] |= 0x00100000u;
  if (sync_heights_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::pools::protobuf::SyncPoolsMaxHeight>(GetArenaForAllocation());
    sync_heights_ = p;
  }
  return sync_heights_;
}
inline ::zjchain::pools::protobuf::SyncPoolsMaxHeight* Header::mutable_sync_heights() {
  ::zjchain::pools::protobuf::SyncPoolsMaxHeight* _msg = _internal_mutable_sync_heights();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.sync_heights)
  return _msg;
}
inline void Header::set_allocated_sync_heights(::zjchain::pools::protobuf::SyncPoolsMaxHeight* sync_heights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_heights_);
  }
  if (sync_heights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_heights));
    if (message_arena != submessage_arena) {
      sync_heights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_heights, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  sync_heights_ = sync_heights;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.sync_heights)
}

// optional .zjchain.block.protobuf.Block block = 27;
inline bool Header::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool Header::has_block() const {
  return _internal_has_block();
}
inline const ::zjchain::block::protobuf::Block& Header::_internal_block() const {
  const ::zjchain::block::protobuf::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::Block&>(
      ::zjchain::block::protobuf::_Block_default_instance_);
}
inline const ::zjchain::block::protobuf::Block& Header::block() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.block)
  return _internal_block();
}
inline void Header::unsafe_arena_set_allocated_block(
    ::zjchain::block::protobuf::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.block)
}
inline ::zjchain::block::protobuf::Block* Header::release_block() {
  _has_bits_[0] &= ~0x00200000u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::Block* Header::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.block)
  _has_bits_[0] &= ~0x00200000u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::Block* Header::_internal_mutable_block() {
  _has_bits_[0] |= 0x00200000u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::zjchain::block::protobuf::Block* Header::mutable_block() {
  ::zjchain::block::protobuf::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.block)
  return _msg;
}
inline void Header::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.block)
}

// repeated .zjchain.pools.protobuf.InvalidBftMessage invalid_bfts = 28;
inline int Header::_internal_invalid_bfts_size() const {
  return invalid_bfts_.size();
}
inline int Header::invalid_bfts_size() const {
  return _internal_invalid_bfts_size();
}
inline ::zjchain::pools::protobuf::InvalidBftMessage* Header::mutable_invalid_bfts(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.invalid_bfts)
  return invalid_bfts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::InvalidBftMessage >*
Header::mutable_invalid_bfts() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.transport.protobuf.Header.invalid_bfts)
  return &invalid_bfts_;
}
inline const ::zjchain::pools::protobuf::InvalidBftMessage& Header::_internal_invalid_bfts(int index) const {
  return invalid_bfts_.Get(index);
}
inline const ::zjchain::pools::protobuf::InvalidBftMessage& Header::invalid_bfts(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.invalid_bfts)
  return _internal_invalid_bfts(index);
}
inline ::zjchain::pools::protobuf::InvalidBftMessage* Header::_internal_add_invalid_bfts() {
  return invalid_bfts_.Add();
}
inline ::zjchain::pools::protobuf::InvalidBftMessage* Header::add_invalid_bfts() {
  ::zjchain::pools::protobuf::InvalidBftMessage* _add = _internal_add_invalid_bfts();
  // @@protoc_insertion_point(field_add:zjchain.transport.protobuf.Header.invalid_bfts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::InvalidBftMessage >&
Header::invalid_bfts() const {
  // @@protoc_insertion_point(field_list:zjchain.transport.protobuf.Header.invalid_bfts)
  return invalid_bfts_;
}

// optional uint32 from_public_port = 29;
inline bool Header::_internal_has_from_public_port() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool Header::has_from_public_port() const {
  return _internal_has_from_public_port();
}
inline void Header::clear_from_public_port() {
  from_public_port_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline uint32_t Header::_internal_from_public_port() const {
  return from_public_port_;
}
inline uint32_t Header::from_public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.from_public_port)
  return _internal_from_public_port();
}
inline void Header::_internal_set_from_public_port(uint32_t value) {
  _has_bits_[0] |= 0x10000000u;
  from_public_port_ = value;
}
inline void Header::set_from_public_port(uint32_t value) {
  _internal_set_from_public_port(value);
  // @@protoc_insertion_point(field_set:zjchain.transport.protobuf.Header.from_public_port)
}

// optional .zjchain.c2c.protobuf.C2cMessage c2c = 30;
inline bool Header::_internal_has_c2c() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || c2c_ != nullptr);
  return value;
}
inline bool Header::has_c2c() const {
  return _internal_has_c2c();
}
inline const ::zjchain::c2c::protobuf::C2cMessage& Header::_internal_c2c() const {
  const ::zjchain::c2c::protobuf::C2cMessage* p = c2c_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::c2c::protobuf::C2cMessage&>(
      ::zjchain::c2c::protobuf::_C2cMessage_default_instance_);
}
inline const ::zjchain::c2c::protobuf::C2cMessage& Header::c2c() const {
  // @@protoc_insertion_point(field_get:zjchain.transport.protobuf.Header.c2c)
  return _internal_c2c();
}
inline void Header::unsafe_arena_set_allocated_c2c(
    ::zjchain::c2c::protobuf::C2cMessage* c2c) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(c2c_);
  }
  c2c_ = c2c;
  if (c2c) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.transport.protobuf.Header.c2c)
}
inline ::zjchain::c2c::protobuf::C2cMessage* Header::release_c2c() {
  _has_bits_[0] &= ~0x00400000u;
  ::zjchain::c2c::protobuf::C2cMessage* temp = c2c_;
  c2c_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::c2c::protobuf::C2cMessage* Header::unsafe_arena_release_c2c() {
  // @@protoc_insertion_point(field_release:zjchain.transport.protobuf.Header.c2c)
  _has_bits_[0] &= ~0x00400000u;
  ::zjchain::c2c::protobuf::C2cMessage* temp = c2c_;
  c2c_ = nullptr;
  return temp;
}
inline ::zjchain::c2c::protobuf::C2cMessage* Header::_internal_mutable_c2c() {
  _has_bits_[0] |= 0x00400000u;
  if (c2c_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::c2c::protobuf::C2cMessage>(GetArenaForAllocation());
    c2c_ = p;
  }
  return c2c_;
}
inline ::zjchain::c2c::protobuf::C2cMessage* Header::mutable_c2c() {
  ::zjchain::c2c::protobuf::C2cMessage* _msg = _internal_mutable_c2c();
  // @@protoc_insertion_point(field_mutable:zjchain.transport.protobuf.Header.c2c)
  return _msg;
}
inline void Header::set_allocated_c2c(::zjchain::c2c::protobuf::C2cMessage* c2c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(c2c_);
  }
  if (c2c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(c2c));
    if (message_arena != submessage_arena) {
      c2c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c2c, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  c2c_ = c2c;
  // @@protoc_insertion_point(field_set_allocated:zjchain.transport.protobuf.Header.c2c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace transport
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2ftransport_2eproto
