// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/transport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/transport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace transport {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* BroadcastParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2ftransport_2eproto() {
  protobuf_AddDesc_protos_2ftransport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/transport.proto");
  GOOGLE_CHECK(file != NULL);
  BroadcastParam_descriptor_ = file->message_type(0);
  static const int BroadcastParam_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, neighbor_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, stop_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, hop_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, layer_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, layer_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, overlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, hop_to_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, net_crossed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, bloomfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, evil_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, ign_bloomfilter_hop_),
  };
  BroadcastParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastParam_descriptor_,
      BroadcastParam::default_instance_,
      BroadcastParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastParam));
  Header_descriptor_ = file->message_type(1);
  static const int Header_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, src_sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, des_dht_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, hop_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, hash64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, network_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, dht_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, bls_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, tx_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, contract_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, elect_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, zbft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, block_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, to_tx_heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sync_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, vss_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, cross_tos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, cross_statistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, elect_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, init_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sync_heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, invalid_bfts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, from_public_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, c2c_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2ftransport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastParam_descriptor_, &BroadcastParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2ftransport_2eproto() {
  delete BroadcastParam::default_instance_;
  delete BroadcastParam_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
}

void protobuf_AddDesc_protos_2ftransport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zjchain::network::protobuf::protobuf_AddDesc_protos_2fnetwork_2eproto();
  ::zjchain::dht::protobuf::protobuf_AddDesc_protos_2fdht_2eproto();
  ::zjchain::block::protobuf::protobuf_AddDesc_protos_2fblock_2eproto();
  ::zjchain::bls::protobuf::protobuf_AddDesc_protos_2fbls_2eproto();
  ::zjchain::pools::protobuf::protobuf_AddDesc_protos_2fpools_2eproto();
  ::zjchain::contract::protobuf::protobuf_AddDesc_protos_2fcontract_2eproto();
  ::zjchain::elect::protobuf::protobuf_AddDesc_protos_2felect_2eproto();
  ::zjchain::zbft::protobuf::protobuf_AddDesc_protos_2fzbft_2eproto();
  ::zjchain::sync::protobuf::protobuf_AddDesc_protos_2fsync_2eproto();
  ::zjchain::vss::protobuf::protobuf_AddDesc_protos_2fvss_2eproto();
  ::zjchain::init::protobuf::protobuf_AddDesc_protos_2finit_2eproto();
  ::zjchain::c2c::protobuf::protobuf_AddDesc_protos_2fc2c_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026protos/transport.proto\022\032zjchain.transp"
    "ort.protobuf\032\024protos/network.proto\032\020prot"
    "os/dht.proto\032\022protos/block.proto\032\020protos"
    "/bls.proto\032\022protos/pools.proto\032\025protos/c"
    "ontract.proto\032\022protos/elect.proto\032\021proto"
    "s/zbft.proto\032\021protos/sync.proto\032\020protos/"
    "vss.proto\032\021protos/init.proto\032\020protos/c2c"
    ".proto\"\265\002\n\016BroadcastParam\022\014\n\004type\030\001 \001(\r\022"
    "\031\n\016neighbor_count\030\002 \001(\r:\0017\022\022\n\nstop_times"
    "\030\003 \001(\r\022\025\n\thop_limit\030\004 \001(\r:\00210\022\022\n\nlayer_l"
    "eft\030\005 \001(\004\022\023\n\013layer_right\030\006 \001(\004\022\017\n\007overla"
    "p\030\007 \001(\002\022\027\n\014hop_to_layer\030\010 \001(\r:\0011\022\016\n\006head"
    "er\030\t \001(\014\022\014\n\004body\030\n \001(\014\022\023\n\013net_crossed\030\013 "
    "\001(\010\022\023\n\013bloomfilter\030\014 \003(\004\022\024\n\tevil_rate\030\r "
    "\001(\002:\0010\022\036\n\023ign_bloomfilter_hop\030\016 \001(\r:\0011\"\204"
    "\013\n\006Header\022\027\n\017src_sharding_id\030\001 \001(\005\022\023\n\013de"
    "s_dht_key\030\002 \001(\014\022\024\n\thop_count\030\003 \001(\r:\0010\022\r\n"
    "\005debug\030\004 \001(\014\022\016\n\006hash64\030\005 \001(\004\022\014\n\004type\030\006 \001"
    "(\r\022=\n\tbroadcast\030\007 \001(\0132*.zjchain.transpor"
    "t.protobuf.BroadcastParam\022\014\n\004sign\030\010 \001(\014\022"
    "\022\n\007version\030\t \001(\005:\0010\022\?\n\rnetwork_proto\030\n \001"
    "(\0132(.zjchain.network.protobuf.NetworkMes"
    "sage\0223\n\tdht_proto\030\013 \001(\0132 .zjchain.dht.pr"
    "otobuf.DhtMessage\0223\n\tbls_proto\030\014 \001(\0132 .z"
    "jchain.bls.protobuf.BlsMessage\0223\n\010tx_pro"
    "to\030\r \001(\0132!.zjchain.pools.protobuf.TxMess"
    "age\022B\n\016contract_proto\030\016 \001(\0132*.zjchain.co"
    "ntract.protobuf.ContractMessage\0229\n\013elect"
    "_proto\030\017 \001(\0132$.zjchain.elect.protobuf.El"
    "ectMessage\0220\n\004zbft\030\020 \001(\0132\".zjchain.zbft."
    "protobuf.ZbftMessage\0229\n\013block_proto\030\021 \001("
    "\0132$.zjchain.block.protobuf.BlockMessage\022"
    ":\n\rto_tx_heights\030\022 \001(\0132#.zjchain.pools.p"
    "rotobuf.ToTxHeights\022-\n\004sync\030\023 \001(\0132\037.zjch"
    "ain.sync.protobuf.SyncInfo\0226\n\nsync_proto"
    "\030\024 \001(\0132\".zjchain.sync.protobuf.SyncMessa"
    "ge\0223\n\tvss_proto\030\025 \001(\0132 .zjchain.vss.prot"
    "obuf.VssMessage\022B\n\tcross_tos\030\026 \001(\0132/.zjc"
    "hain.block.protobuf.CrossShardingTosMess"
    "age\022N\n\017cross_statistic\030\027 \001(\01325.zjchain.b"
    "lock.protobuf.CrossShardingStatisticMess"
    "age\022>\n\013elect_block\030\030 \001(\0132).zjchain.block"
    ".protobuf.ElectBlockMessage\0226\n\ninit_prot"
    "o\030\031 \001(\0132\".zjchain.init.protobuf.InitMess"
    "age\022@\n\014sync_heights\030\032 \001(\0132*.zjchain.pool"
    "s.protobuf.SyncPoolsMaxHeight\022,\n\005block\030\033"
    " \001(\0132\035.zjchain.block.protobuf.Block\022\?\n\014i"
    "nvalid_bfts\030\034 \003(\0132).zjchain.pools.protob"
    "uf.InvalidBftMessage\022\030\n\020from_public_port"
    "\030\035 \001(\r\022-\n\003c2c\030\036 \001(\0132 .zjchain.c2c.protob"
    "uf.C2cMessage", 2013);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/transport.proto", &protobuf_RegisterTypes);
  BroadcastParam::default_instance_ = new BroadcastParam();
  Header::default_instance_ = new Header();
  BroadcastParam::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2ftransport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2ftransport_2eproto {
  StaticDescriptorInitializer_protos_2ftransport_2eproto() {
    protobuf_AddDesc_protos_2ftransport_2eproto();
  }
} static_descriptor_initializer_protos_2ftransport_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BroadcastParam::kTypeFieldNumber;
const int BroadcastParam::kNeighborCountFieldNumber;
const int BroadcastParam::kStopTimesFieldNumber;
const int BroadcastParam::kHopLimitFieldNumber;
const int BroadcastParam::kLayerLeftFieldNumber;
const int BroadcastParam::kLayerRightFieldNumber;
const int BroadcastParam::kOverlapFieldNumber;
const int BroadcastParam::kHopToLayerFieldNumber;
const int BroadcastParam::kHeaderFieldNumber;
const int BroadcastParam::kBodyFieldNumber;
const int BroadcastParam::kNetCrossedFieldNumber;
const int BroadcastParam::kBloomfilterFieldNumber;
const int BroadcastParam::kEvilRateFieldNumber;
const int BroadcastParam::kIgnBloomfilterHopFieldNumber;
#endif  // !_MSC_VER

BroadcastParam::BroadcastParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastParam::InitAsDefaultInstance() {
}

BroadcastParam::BroadcastParam(const BroadcastParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastParam::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  neighbor_count_ = 7u;
  stop_times_ = 0u;
  hop_limit_ = 10u;
  layer_left_ = GOOGLE_ULONGLONG(0);
  layer_right_ = GOOGLE_ULONGLONG(0);
  overlap_ = 0;
  hop_to_layer_ = 1u;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_crossed_ = false;
  evil_rate_ = 0;
  ign_bloomfilter_hop_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastParam::~BroadcastParam() {
  SharedDtor();
}

void BroadcastParam::SharedDtor() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    delete header_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastParam_descriptor_;
}

const BroadcastParam& BroadcastParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2ftransport_2eproto();
  return *default_instance_;
}

BroadcastParam* BroadcastParam::default_instance_ = NULL;

BroadcastParam* BroadcastParam::New() const {
  return new BroadcastParam;
}

void BroadcastParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    neighbor_count_ = 7u;
    stop_times_ = 0u;
    hop_limit_ = 10u;
    layer_left_ = GOOGLE_ULONGLONG(0);
    layer_right_ = GOOGLE_ULONGLONG(0);
    overlap_ = 0;
    hop_to_layer_ = 1u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::kEmptyString) {
        header_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    net_crossed_ = false;
    evil_rate_ = 0;
    ign_bloomfilter_hop_ = 1u;
  }
  bloomfilter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_neighbor_count;
        break;
      }

      // optional uint32 neighbor_count = 2 [default = 7];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_neighbor_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighbor_count_)));
          set_has_neighbor_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop_times;
        break;
      }

      // optional uint32 stop_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_times_)));
          set_has_stop_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hop_limit;
        break;
      }

      // optional uint32 hop_limit = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hop_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_limit_)));
          set_has_hop_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_layer_left;
        break;
      }

      // optional uint64 layer_left = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_left_)));
          set_has_layer_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_layer_right;
        break;
      }

      // optional uint64 layer_right = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_right_)));
          set_has_layer_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_overlap;
        break;
      }

      // optional float overlap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_)));
          set_has_overlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hop_to_layer;
        break;
      }

      // optional uint32 hop_to_layer = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hop_to_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_to_layer_)));
          set_has_hop_to_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_header;
        break;
      }

      // optional bytes header = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_body;
        break;
      }

      // optional bytes body = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_net_crossed;
        break;
      }

      // optional bool net_crossed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_crossed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &net_crossed_)));
          set_has_net_crossed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bloomfilter;
        break;
      }

      // repeated uint64 bloomfilter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bloomfilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 96, input, this->mutable_bloomfilter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bloomfilter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bloomfilter;
        if (input->ExpectTag(109)) goto parse_evil_rate;
        break;
      }

      // optional float evil_rate = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_evil_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &evil_rate_)));
          set_has_evil_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ign_bloomfilter_hop;
        break;
      }

      // optional uint32 ign_bloomfilter_hop = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ign_bloomfilter_hop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ign_bloomfilter_hop_)));
          set_has_ign_bloomfilter_hop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 neighbor_count = 2 [default = 7];
  if (has_neighbor_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->neighbor_count(), output);
  }

  // optional uint32 stop_times = 3;
  if (has_stop_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stop_times(), output);
  }

  // optional uint32 hop_limit = 4 [default = 10];
  if (has_hop_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hop_limit(), output);
  }

  // optional uint64 layer_left = 5;
  if (has_layer_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->layer_left(), output);
  }

  // optional uint64 layer_right = 6;
  if (has_layer_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->layer_right(), output);
  }

  // optional float overlap = 7;
  if (has_overlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->overlap(), output);
  }

  // optional uint32 hop_to_layer = 8 [default = 1];
  if (has_hop_to_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hop_to_layer(), output);
  }

  // optional bytes header = 9;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->header(), output);
  }

  // optional bytes body = 10;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->body(), output);
  }

  // optional bool net_crossed = 11;
  if (has_net_crossed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->net_crossed(), output);
  }

  // repeated uint64 bloomfilter = 12;
  for (int i = 0; i < this->bloomfilter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      12, this->bloomfilter(i), output);
  }

  // optional float evil_rate = 13 [default = 0];
  if (has_evil_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->evil_rate(), output);
  }

  // optional uint32 ign_bloomfilter_hop = 14 [default = 1];
  if (has_ign_bloomfilter_hop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ign_bloomfilter_hop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 neighbor_count = 2 [default = 7];
  if (has_neighbor_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->neighbor_count(), target);
  }

  // optional uint32 stop_times = 3;
  if (has_stop_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stop_times(), target);
  }

  // optional uint32 hop_limit = 4 [default = 10];
  if (has_hop_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hop_limit(), target);
  }

  // optional uint64 layer_left = 5;
  if (has_layer_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->layer_left(), target);
  }

  // optional uint64 layer_right = 6;
  if (has_layer_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->layer_right(), target);
  }

  // optional float overlap = 7;
  if (has_overlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->overlap(), target);
  }

  // optional uint32 hop_to_layer = 8 [default = 1];
  if (has_hop_to_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hop_to_layer(), target);
  }

  // optional bytes header = 9;
  if (has_header()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->header(), target);
  }

  // optional bytes body = 10;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->body(), target);
  }

  // optional bool net_crossed = 11;
  if (has_net_crossed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->net_crossed(), target);
  }

  // repeated uint64 bloomfilter = 12;
  for (int i = 0; i < this->bloomfilter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(12, this->bloomfilter(i), target);
  }

  // optional float evil_rate = 13 [default = 0];
  if (has_evil_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->evil_rate(), target);
  }

  // optional uint32 ign_bloomfilter_hop = 14 [default = 1];
  if (has_ign_bloomfilter_hop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ign_bloomfilter_hop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 neighbor_count = 2 [default = 7];
    if (has_neighbor_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighbor_count());
    }

    // optional uint32 stop_times = 3;
    if (has_stop_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_times());
    }

    // optional uint32 hop_limit = 4 [default = 10];
    if (has_hop_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_limit());
    }

    // optional uint64 layer_left = 5;
    if (has_layer_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer_left());
    }

    // optional uint64 layer_right = 6;
    if (has_layer_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer_right());
    }

    // optional float overlap = 7;
    if (has_overlap()) {
      total_size += 1 + 4;
    }

    // optional uint32 hop_to_layer = 8 [default = 1];
    if (has_hop_to_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_to_layer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes header = 9;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header());
    }

    // optional bytes body = 10;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional bool net_crossed = 11;
    if (has_net_crossed()) {
      total_size += 1 + 1;
    }

    // optional float evil_rate = 13 [default = 0];
    if (has_evil_rate()) {
      total_size += 1 + 4;
    }

    // optional uint32 ign_bloomfilter_hop = 14 [default = 1];
    if (has_ign_bloomfilter_hop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ign_bloomfilter_hop());
    }

  }
  // repeated uint64 bloomfilter = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->bloomfilter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->bloomfilter(i));
    }
    total_size += 1 * this->bloomfilter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastParam::MergeFrom(const BroadcastParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  bloomfilter_.MergeFrom(from.bloomfilter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_neighbor_count()) {
      set_neighbor_count(from.neighbor_count());
    }
    if (from.has_stop_times()) {
      set_stop_times(from.stop_times());
    }
    if (from.has_hop_limit()) {
      set_hop_limit(from.hop_limit());
    }
    if (from.has_layer_left()) {
      set_layer_left(from.layer_left());
    }
    if (from.has_layer_right()) {
      set_layer_right(from.layer_right());
    }
    if (from.has_overlap()) {
      set_overlap(from.overlap());
    }
    if (from.has_hop_to_layer()) {
      set_hop_to_layer(from.hop_to_layer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_net_crossed()) {
      set_net_crossed(from.net_crossed());
    }
    if (from.has_evil_rate()) {
      set_evil_rate(from.evil_rate());
    }
    if (from.has_ign_bloomfilter_hop()) {
      set_ign_bloomfilter_hop(from.ign_bloomfilter_hop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastParam::CopyFrom(const BroadcastParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastParam::IsInitialized() const {

  return true;
}

void BroadcastParam::Swap(BroadcastParam* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(neighbor_count_, other->neighbor_count_);
    std::swap(stop_times_, other->stop_times_);
    std::swap(hop_limit_, other->hop_limit_);
    std::swap(layer_left_, other->layer_left_);
    std::swap(layer_right_, other->layer_right_);
    std::swap(overlap_, other->overlap_);
    std::swap(hop_to_layer_, other->hop_to_layer_);
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(net_crossed_, other->net_crossed_);
    bloomfilter_.Swap(&other->bloomfilter_);
    std::swap(evil_rate_, other->evil_rate_);
    std::swap(ign_bloomfilter_hop_, other->ign_bloomfilter_hop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastParam_descriptor_;
  metadata.reflection = BroadcastParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kSrcShardingIdFieldNumber;
const int Header::kDesDhtKeyFieldNumber;
const int Header::kHopCountFieldNumber;
const int Header::kDebugFieldNumber;
const int Header::kHash64FieldNumber;
const int Header::kTypeFieldNumber;
const int Header::kBroadcastFieldNumber;
const int Header::kSignFieldNumber;
const int Header::kVersionFieldNumber;
const int Header::kNetworkProtoFieldNumber;
const int Header::kDhtProtoFieldNumber;
const int Header::kBlsProtoFieldNumber;
const int Header::kTxProtoFieldNumber;
const int Header::kContractProtoFieldNumber;
const int Header::kElectProtoFieldNumber;
const int Header::kZbftFieldNumber;
const int Header::kBlockProtoFieldNumber;
const int Header::kToTxHeightsFieldNumber;
const int Header::kSyncFieldNumber;
const int Header::kSyncProtoFieldNumber;
const int Header::kVssProtoFieldNumber;
const int Header::kCrossTosFieldNumber;
const int Header::kCrossStatisticFieldNumber;
const int Header::kElectBlockFieldNumber;
const int Header::kInitProtoFieldNumber;
const int Header::kSyncHeightsFieldNumber;
const int Header::kBlockFieldNumber;
const int Header::kInvalidBftsFieldNumber;
const int Header::kFromPublicPortFieldNumber;
const int Header::kC2CFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
  broadcast_ = const_cast< ::zjchain::transport::protobuf::BroadcastParam*>(&::zjchain::transport::protobuf::BroadcastParam::default_instance());
  network_proto_ = const_cast< ::zjchain::network::protobuf::NetworkMessage*>(&::zjchain::network::protobuf::NetworkMessage::default_instance());
  dht_proto_ = const_cast< ::zjchain::dht::protobuf::DhtMessage*>(&::zjchain::dht::protobuf::DhtMessage::default_instance());
  bls_proto_ = const_cast< ::zjchain::bls::protobuf::BlsMessage*>(&::zjchain::bls::protobuf::BlsMessage::default_instance());
  tx_proto_ = const_cast< ::zjchain::pools::protobuf::TxMessage*>(&::zjchain::pools::protobuf::TxMessage::default_instance());
  contract_proto_ = const_cast< ::zjchain::contract::protobuf::ContractMessage*>(&::zjchain::contract::protobuf::ContractMessage::default_instance());
  elect_proto_ = const_cast< ::zjchain::elect::protobuf::ElectMessage*>(&::zjchain::elect::protobuf::ElectMessage::default_instance());
  zbft_ = const_cast< ::zjchain::zbft::protobuf::ZbftMessage*>(&::zjchain::zbft::protobuf::ZbftMessage::default_instance());
  block_proto_ = const_cast< ::zjchain::block::protobuf::BlockMessage*>(&::zjchain::block::protobuf::BlockMessage::default_instance());
  to_tx_heights_ = const_cast< ::zjchain::pools::protobuf::ToTxHeights*>(&::zjchain::pools::protobuf::ToTxHeights::default_instance());
  sync_ = const_cast< ::zjchain::sync::protobuf::SyncInfo*>(&::zjchain::sync::protobuf::SyncInfo::default_instance());
  sync_proto_ = const_cast< ::zjchain::sync::protobuf::SyncMessage*>(&::zjchain::sync::protobuf::SyncMessage::default_instance());
  vss_proto_ = const_cast< ::zjchain::vss::protobuf::VssMessage*>(&::zjchain::vss::protobuf::VssMessage::default_instance());
  cross_tos_ = const_cast< ::zjchain::block::protobuf::CrossShardingTosMessage*>(&::zjchain::block::protobuf::CrossShardingTosMessage::default_instance());
  cross_statistic_ = const_cast< ::zjchain::block::protobuf::CrossShardingStatisticMessage*>(&::zjchain::block::protobuf::CrossShardingStatisticMessage::default_instance());
  elect_block_ = const_cast< ::zjchain::block::protobuf::ElectBlockMessage*>(&::zjchain::block::protobuf::ElectBlockMessage::default_instance());
  init_proto_ = const_cast< ::zjchain::init::protobuf::InitMessage*>(&::zjchain::init::protobuf::InitMessage::default_instance());
  sync_heights_ = const_cast< ::zjchain::pools::protobuf::SyncPoolsMaxHeight*>(&::zjchain::pools::protobuf::SyncPoolsMaxHeight::default_instance());
  block_ = const_cast< ::zjchain::block::protobuf::Block*>(&::zjchain::block::protobuf::Block::default_instance());
  c2c_ = const_cast< ::zjchain::c2c::protobuf::C2cMessage*>(&::zjchain::c2c::protobuf::C2cMessage::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  src_sharding_id_ = 0;
  des_dht_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hop_count_ = 0u;
  debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash64_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  broadcast_ = NULL;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  network_proto_ = NULL;
  dht_proto_ = NULL;
  bls_proto_ = NULL;
  tx_proto_ = NULL;
  contract_proto_ = NULL;
  elect_proto_ = NULL;
  zbft_ = NULL;
  block_proto_ = NULL;
  to_tx_heights_ = NULL;
  sync_ = NULL;
  sync_proto_ = NULL;
  vss_proto_ = NULL;
  cross_tos_ = NULL;
  cross_statistic_ = NULL;
  elect_block_ = NULL;
  init_proto_ = NULL;
  sync_heights_ = NULL;
  block_ = NULL;
  from_public_port_ = 0u;
  c2c_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (des_dht_key_ != &::google::protobuf::internal::kEmptyString) {
    delete des_dht_key_;
  }
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
    delete broadcast_;
    delete network_proto_;
    delete dht_proto_;
    delete bls_proto_;
    delete tx_proto_;
    delete contract_proto_;
    delete elect_proto_;
    delete zbft_;
    delete block_proto_;
    delete to_tx_heights_;
    delete sync_;
    delete sync_proto_;
    delete vss_proto_;
    delete cross_tos_;
    delete cross_statistic_;
    delete elect_block_;
    delete init_proto_;
    delete sync_heights_;
    delete block_;
    delete c2c_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2ftransport_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_sharding_id_ = 0;
    if (has_des_dht_key()) {
      if (des_dht_key_ != &::google::protobuf::internal::kEmptyString) {
        des_dht_key_->clear();
      }
    }
    hop_count_ = 0u;
    if (has_debug()) {
      if (debug_ != &::google::protobuf::internal::kEmptyString) {
        debug_->clear();
      }
    }
    hash64_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    if (has_broadcast()) {
      if (broadcast_ != NULL) broadcast_->::zjchain::transport::protobuf::BroadcastParam::Clear();
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    version_ = 0;
    if (has_network_proto()) {
      if (network_proto_ != NULL) network_proto_->::zjchain::network::protobuf::NetworkMessage::Clear();
    }
    if (has_dht_proto()) {
      if (dht_proto_ != NULL) dht_proto_->::zjchain::dht::protobuf::DhtMessage::Clear();
    }
    if (has_bls_proto()) {
      if (bls_proto_ != NULL) bls_proto_->::zjchain::bls::protobuf::BlsMessage::Clear();
    }
    if (has_tx_proto()) {
      if (tx_proto_ != NULL) tx_proto_->::zjchain::pools::protobuf::TxMessage::Clear();
    }
    if (has_contract_proto()) {
      if (contract_proto_ != NULL) contract_proto_->::zjchain::contract::protobuf::ContractMessage::Clear();
    }
    if (has_elect_proto()) {
      if (elect_proto_ != NULL) elect_proto_->::zjchain::elect::protobuf::ElectMessage::Clear();
    }
    if (has_zbft()) {
      if (zbft_ != NULL) zbft_->::zjchain::zbft::protobuf::ZbftMessage::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_block_proto()) {
      if (block_proto_ != NULL) block_proto_->::zjchain::block::protobuf::BlockMessage::Clear();
    }
    if (has_to_tx_heights()) {
      if (to_tx_heights_ != NULL) to_tx_heights_->::zjchain::pools::protobuf::ToTxHeights::Clear();
    }
    if (has_sync()) {
      if (sync_ != NULL) sync_->::zjchain::sync::protobuf::SyncInfo::Clear();
    }
    if (has_sync_proto()) {
      if (sync_proto_ != NULL) sync_proto_->::zjchain::sync::protobuf::SyncMessage::Clear();
    }
    if (has_vss_proto()) {
      if (vss_proto_ != NULL) vss_proto_->::zjchain::vss::protobuf::VssMessage::Clear();
    }
    if (has_cross_tos()) {
      if (cross_tos_ != NULL) cross_tos_->::zjchain::block::protobuf::CrossShardingTosMessage::Clear();
    }
    if (has_cross_statistic()) {
      if (cross_statistic_ != NULL) cross_statistic_->::zjchain::block::protobuf::CrossShardingStatisticMessage::Clear();
    }
    if (has_elect_block()) {
      if (elect_block_ != NULL) elect_block_->::zjchain::block::protobuf::ElectBlockMessage::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_init_proto()) {
      if (init_proto_ != NULL) init_proto_->::zjchain::init::protobuf::InitMessage::Clear();
    }
    if (has_sync_heights()) {
      if (sync_heights_ != NULL) sync_heights_->::zjchain::pools::protobuf::SyncPoolsMaxHeight::Clear();
    }
    if (has_block()) {
      if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
    }
    from_public_port_ = 0u;
    if (has_c2c()) {
      if (c2c_ != NULL) c2c_->::zjchain::c2c::protobuf::C2cMessage::Clear();
    }
  }
  invalid_bfts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 src_sharding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_sharding_id_)));
          set_has_src_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_des_dht_key;
        break;
      }

      // optional bytes des_dht_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des_dht_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des_dht_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hop_count;
        break;
      }

      // optional uint32 hop_count = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hop_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_count_)));
          set_has_hop_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_debug;
        break;
      }

      // optional bytes debug = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_debug()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hash64;
        break;
      }

      // optional uint64 hash64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash64_)));
          set_has_hash64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_broadcast;
        break;
      }

      // optional .zjchain.transport.protobuf.BroadcastParam broadcast = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sign;
        break;
      }

      // optional bytes sign = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_version;
        break;
      }

      // optional int32 version = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_network_proto;
        break;
      }

      // optional .zjchain.network.protobuf.NetworkMessage network_proto = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dht_proto;
        break;
      }

      // optional .zjchain.dht.protobuf.DhtMessage dht_proto = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dht_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dht_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bls_proto;
        break;
      }

      // optional .zjchain.bls.protobuf.BlsMessage bls_proto = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bls_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bls_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tx_proto;
        break;
      }

      // optional .zjchain.pools.protobuf.TxMessage tx_proto = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tx_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_contract_proto;
        break;
      }

      // optional .zjchain.contract.protobuf.ContractMessage contract_proto = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contract_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_elect_proto;
        break;
      }

      // optional .zjchain.elect.protobuf.ElectMessage elect_proto = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elect_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elect_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_zbft;
        break;
      }

      // optional .zjchain.zbft.protobuf.ZbftMessage zbft = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zbft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zbft()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_block_proto;
        break;
      }

      // optional .zjchain.block.protobuf.BlockMessage block_proto = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_to_tx_heights;
        break;
      }

      // optional .zjchain.pools.protobuf.ToTxHeights to_tx_heights = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_tx_heights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_tx_heights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sync;
        break;
      }

      // optional .zjchain.sync.protobuf.SyncInfo sync = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_sync_proto;
        break;
      }

      // optional .zjchain.sync.protobuf.SyncMessage sync_proto = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_vss_proto;
        break;
      }

      // optional .zjchain.vss.protobuf.VssMessage vss_proto = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vss_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vss_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_cross_tos;
        break;
      }

      // optional .zjchain.block.protobuf.CrossShardingTosMessage cross_tos = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_tos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cross_tos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_cross_statistic;
        break;
      }

      // optional .zjchain.block.protobuf.CrossShardingStatisticMessage cross_statistic = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross_statistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cross_statistic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_elect_block;
        break;
      }

      // optional .zjchain.block.protobuf.ElectBlockMessage elect_block = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elect_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elect_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_init_proto;
        break;
      }

      // optional .zjchain.init.protobuf.InitMessage init_proto = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_sync_heights;
        break;
      }

      // optional .zjchain.pools.protobuf.SyncPoolsMaxHeight sync_heights = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_heights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_heights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_block;
        break;
      }

      // optional .zjchain.block.protobuf.Block block = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_invalid_bfts;
        break;
      }

      // repeated .zjchain.pools.protobuf.InvalidBftMessage invalid_bfts = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invalid_bfts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invalid_bfts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_invalid_bfts;
        if (input->ExpectTag(232)) goto parse_from_public_port;
        break;
      }

      // optional uint32 from_public_port = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_public_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_public_port_)));
          set_has_from_public_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_c2c;
        break;
      }

      // optional .zjchain.c2c.protobuf.C2cMessage c2c = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c2c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c2c()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 src_sharding_id = 1;
  if (has_src_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src_sharding_id(), output);
  }

  // optional bytes des_dht_key = 2;
  if (has_des_dht_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->des_dht_key(), output);
  }

  // optional uint32 hop_count = 3 [default = 0];
  if (has_hop_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hop_count(), output);
  }

  // optional bytes debug = 4;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->debug(), output);
  }

  // optional uint64 hash64 = 5;
  if (has_hash64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hash64(), output);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional .zjchain.transport.protobuf.BroadcastParam broadcast = 7;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->broadcast(), output);
  }

  // optional bytes sign = 8;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->sign(), output);
  }

  // optional int32 version = 9 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->version(), output);
  }

  // optional .zjchain.network.protobuf.NetworkMessage network_proto = 10;
  if (has_network_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->network_proto(), output);
  }

  // optional .zjchain.dht.protobuf.DhtMessage dht_proto = 11;
  if (has_dht_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->dht_proto(), output);
  }

  // optional .zjchain.bls.protobuf.BlsMessage bls_proto = 12;
  if (has_bls_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->bls_proto(), output);
  }

  // optional .zjchain.pools.protobuf.TxMessage tx_proto = 13;
  if (has_tx_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tx_proto(), output);
  }

  // optional .zjchain.contract.protobuf.ContractMessage contract_proto = 14;
  if (has_contract_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->contract_proto(), output);
  }

  // optional .zjchain.elect.protobuf.ElectMessage elect_proto = 15;
  if (has_elect_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->elect_proto(), output);
  }

  // optional .zjchain.zbft.protobuf.ZbftMessage zbft = 16;
  if (has_zbft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->zbft(), output);
  }

  // optional .zjchain.block.protobuf.BlockMessage block_proto = 17;
  if (has_block_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->block_proto(), output);
  }

  // optional .zjchain.pools.protobuf.ToTxHeights to_tx_heights = 18;
  if (has_to_tx_heights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->to_tx_heights(), output);
  }

  // optional .zjchain.sync.protobuf.SyncInfo sync = 19;
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->sync(), output);
  }

  // optional .zjchain.sync.protobuf.SyncMessage sync_proto = 20;
  if (has_sync_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->sync_proto(), output);
  }

  // optional .zjchain.vss.protobuf.VssMessage vss_proto = 21;
  if (has_vss_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->vss_proto(), output);
  }

  // optional .zjchain.block.protobuf.CrossShardingTosMessage cross_tos = 22;
  if (has_cross_tos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->cross_tos(), output);
  }

  // optional .zjchain.block.protobuf.CrossShardingStatisticMessage cross_statistic = 23;
  if (has_cross_statistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->cross_statistic(), output);
  }

  // optional .zjchain.block.protobuf.ElectBlockMessage elect_block = 24;
  if (has_elect_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->elect_block(), output);
  }

  // optional .zjchain.init.protobuf.InitMessage init_proto = 25;
  if (has_init_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->init_proto(), output);
  }

  // optional .zjchain.pools.protobuf.SyncPoolsMaxHeight sync_heights = 26;
  if (has_sync_heights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->sync_heights(), output);
  }

  // optional .zjchain.block.protobuf.Block block = 27;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->block(), output);
  }

  // repeated .zjchain.pools.protobuf.InvalidBftMessage invalid_bfts = 28;
  for (int i = 0; i < this->invalid_bfts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->invalid_bfts(i), output);
  }

  // optional uint32 from_public_port = 29;
  if (has_from_public_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->from_public_port(), output);
  }

  // optional .zjchain.c2c.protobuf.C2cMessage c2c = 30;
  if (has_c2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->c2c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 src_sharding_id = 1;
  if (has_src_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src_sharding_id(), target);
  }

  // optional bytes des_dht_key = 2;
  if (has_des_dht_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->des_dht_key(), target);
  }

  // optional uint32 hop_count = 3 [default = 0];
  if (has_hop_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hop_count(), target);
  }

  // optional bytes debug = 4;
  if (has_debug()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->debug(), target);
  }

  // optional uint64 hash64 = 5;
  if (has_hash64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hash64(), target);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional .zjchain.transport.protobuf.BroadcastParam broadcast = 7;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->broadcast(), target);
  }

  // optional bytes sign = 8;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sign(), target);
  }

  // optional int32 version = 9 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->version(), target);
  }

  // optional .zjchain.network.protobuf.NetworkMessage network_proto = 10;
  if (has_network_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->network_proto(), target);
  }

  // optional .zjchain.dht.protobuf.DhtMessage dht_proto = 11;
  if (has_dht_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->dht_proto(), target);
  }

  // optional .zjchain.bls.protobuf.BlsMessage bls_proto = 12;
  if (has_bls_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->bls_proto(), target);
  }

  // optional .zjchain.pools.protobuf.TxMessage tx_proto = 13;
  if (has_tx_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->tx_proto(), target);
  }

  // optional .zjchain.contract.protobuf.ContractMessage contract_proto = 14;
  if (has_contract_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->contract_proto(), target);
  }

  // optional .zjchain.elect.protobuf.ElectMessage elect_proto = 15;
  if (has_elect_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->elect_proto(), target);
  }

  // optional .zjchain.zbft.protobuf.ZbftMessage zbft = 16;
  if (has_zbft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->zbft(), target);
  }

  // optional .zjchain.block.protobuf.BlockMessage block_proto = 17;
  if (has_block_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->block_proto(), target);
  }

  // optional .zjchain.pools.protobuf.ToTxHeights to_tx_heights = 18;
  if (has_to_tx_heights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->to_tx_heights(), target);
  }

  // optional .zjchain.sync.protobuf.SyncInfo sync = 19;
  if (has_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->sync(), target);
  }

  // optional .zjchain.sync.protobuf.SyncMessage sync_proto = 20;
  if (has_sync_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->sync_proto(), target);
  }

  // optional .zjchain.vss.protobuf.VssMessage vss_proto = 21;
  if (has_vss_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->vss_proto(), target);
  }

  // optional .zjchain.block.protobuf.CrossShardingTosMessage cross_tos = 22;
  if (has_cross_tos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->cross_tos(), target);
  }

  // optional .zjchain.block.protobuf.CrossShardingStatisticMessage cross_statistic = 23;
  if (has_cross_statistic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->cross_statistic(), target);
  }

  // optional .zjchain.block.protobuf.ElectBlockMessage elect_block = 24;
  if (has_elect_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->elect_block(), target);
  }

  // optional .zjchain.init.protobuf.InitMessage init_proto = 25;
  if (has_init_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->init_proto(), target);
  }

  // optional .zjchain.pools.protobuf.SyncPoolsMaxHeight sync_heights = 26;
  if (has_sync_heights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->sync_heights(), target);
  }

  // optional .zjchain.block.protobuf.Block block = 27;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->block(), target);
  }

  // repeated .zjchain.pools.protobuf.InvalidBftMessage invalid_bfts = 28;
  for (int i = 0; i < this->invalid_bfts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->invalid_bfts(i), target);
  }

  // optional uint32 from_public_port = 29;
  if (has_from_public_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->from_public_port(), target);
  }

  // optional .zjchain.c2c.protobuf.C2cMessage c2c = 30;
  if (has_c2c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->c2c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 src_sharding_id = 1;
    if (has_src_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_sharding_id());
    }

    // optional bytes des_dht_key = 2;
    if (has_des_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des_dht_key());
    }

    // optional uint32 hop_count = 3 [default = 0];
    if (has_hop_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_count());
    }

    // optional bytes debug = 4;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->debug());
    }

    // optional uint64 hash64 = 5;
    if (has_hash64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash64());
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .zjchain.transport.protobuf.BroadcastParam broadcast = 7;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcast());
    }

    // optional bytes sign = 8;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 version = 9 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .zjchain.network.protobuf.NetworkMessage network_proto = 10;
    if (has_network_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_proto());
    }

    // optional .zjchain.dht.protobuf.DhtMessage dht_proto = 11;
    if (has_dht_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dht_proto());
    }

    // optional .zjchain.bls.protobuf.BlsMessage bls_proto = 12;
    if (has_bls_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bls_proto());
    }

    // optional .zjchain.pools.protobuf.TxMessage tx_proto = 13;
    if (has_tx_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tx_proto());
    }

    // optional .zjchain.contract.protobuf.ContractMessage contract_proto = 14;
    if (has_contract_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contract_proto());
    }

    // optional .zjchain.elect.protobuf.ElectMessage elect_proto = 15;
    if (has_elect_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elect_proto());
    }

    // optional .zjchain.zbft.protobuf.ZbftMessage zbft = 16;
    if (has_zbft()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zbft());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .zjchain.block.protobuf.BlockMessage block_proto = 17;
    if (has_block_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_proto());
    }

    // optional .zjchain.pools.protobuf.ToTxHeights to_tx_heights = 18;
    if (has_to_tx_heights()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_tx_heights());
    }

    // optional .zjchain.sync.protobuf.SyncInfo sync = 19;
    if (has_sync()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync());
    }

    // optional .zjchain.sync.protobuf.SyncMessage sync_proto = 20;
    if (has_sync_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_proto());
    }

    // optional .zjchain.vss.protobuf.VssMessage vss_proto = 21;
    if (has_vss_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vss_proto());
    }

    // optional .zjchain.block.protobuf.CrossShardingTosMessage cross_tos = 22;
    if (has_cross_tos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cross_tos());
    }

    // optional .zjchain.block.protobuf.CrossShardingStatisticMessage cross_statistic = 23;
    if (has_cross_statistic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cross_statistic());
    }

    // optional .zjchain.block.protobuf.ElectBlockMessage elect_block = 24;
    if (has_elect_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elect_block());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .zjchain.init.protobuf.InitMessage init_proto = 25;
    if (has_init_proto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_proto());
    }

    // optional .zjchain.pools.protobuf.SyncPoolsMaxHeight sync_heights = 26;
    if (has_sync_heights()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_heights());
    }

    // optional .zjchain.block.protobuf.Block block = 27;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

    // optional uint32 from_public_port = 29;
    if (has_from_public_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_public_port());
    }

    // optional .zjchain.c2c.protobuf.C2cMessage c2c = 30;
    if (has_c2c()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c2c());
    }

  }
  // repeated .zjchain.pools.protobuf.InvalidBftMessage invalid_bfts = 28;
  total_size += 2 * this->invalid_bfts_size();
  for (int i = 0; i < this->invalid_bfts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invalid_bfts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  invalid_bfts_.MergeFrom(from.invalid_bfts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_sharding_id()) {
      set_src_sharding_id(from.src_sharding_id());
    }
    if (from.has_des_dht_key()) {
      set_des_dht_key(from.des_dht_key());
    }
    if (from.has_hop_count()) {
      set_hop_count(from.hop_count());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
    if (from.has_hash64()) {
      set_hash64(from.hash64());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_broadcast()) {
      mutable_broadcast()->::zjchain::transport::protobuf::BroadcastParam::MergeFrom(from.broadcast());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_network_proto()) {
      mutable_network_proto()->::zjchain::network::protobuf::NetworkMessage::MergeFrom(from.network_proto());
    }
    if (from.has_dht_proto()) {
      mutable_dht_proto()->::zjchain::dht::protobuf::DhtMessage::MergeFrom(from.dht_proto());
    }
    if (from.has_bls_proto()) {
      mutable_bls_proto()->::zjchain::bls::protobuf::BlsMessage::MergeFrom(from.bls_proto());
    }
    if (from.has_tx_proto()) {
      mutable_tx_proto()->::zjchain::pools::protobuf::TxMessage::MergeFrom(from.tx_proto());
    }
    if (from.has_contract_proto()) {
      mutable_contract_proto()->::zjchain::contract::protobuf::ContractMessage::MergeFrom(from.contract_proto());
    }
    if (from.has_elect_proto()) {
      mutable_elect_proto()->::zjchain::elect::protobuf::ElectMessage::MergeFrom(from.elect_proto());
    }
    if (from.has_zbft()) {
      mutable_zbft()->::zjchain::zbft::protobuf::ZbftMessage::MergeFrom(from.zbft());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_block_proto()) {
      mutable_block_proto()->::zjchain::block::protobuf::BlockMessage::MergeFrom(from.block_proto());
    }
    if (from.has_to_tx_heights()) {
      mutable_to_tx_heights()->::zjchain::pools::protobuf::ToTxHeights::MergeFrom(from.to_tx_heights());
    }
    if (from.has_sync()) {
      mutable_sync()->::zjchain::sync::protobuf::SyncInfo::MergeFrom(from.sync());
    }
    if (from.has_sync_proto()) {
      mutable_sync_proto()->::zjchain::sync::protobuf::SyncMessage::MergeFrom(from.sync_proto());
    }
    if (from.has_vss_proto()) {
      mutable_vss_proto()->::zjchain::vss::protobuf::VssMessage::MergeFrom(from.vss_proto());
    }
    if (from.has_cross_tos()) {
      mutable_cross_tos()->::zjchain::block::protobuf::CrossShardingTosMessage::MergeFrom(from.cross_tos());
    }
    if (from.has_cross_statistic()) {
      mutable_cross_statistic()->::zjchain::block::protobuf::CrossShardingStatisticMessage::MergeFrom(from.cross_statistic());
    }
    if (from.has_elect_block()) {
      mutable_elect_block()->::zjchain::block::protobuf::ElectBlockMessage::MergeFrom(from.elect_block());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_init_proto()) {
      mutable_init_proto()->::zjchain::init::protobuf::InitMessage::MergeFrom(from.init_proto());
    }
    if (from.has_sync_heights()) {
      mutable_sync_heights()->::zjchain::pools::protobuf::SyncPoolsMaxHeight::MergeFrom(from.sync_heights());
    }
    if (from.has_block()) {
      mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
    }
    if (from.has_from_public_port()) {
      set_from_public_port(from.from_public_port());
    }
    if (from.has_c2c()) {
      mutable_c2c()->::zjchain::c2c::protobuf::C2cMessage::MergeFrom(from.c2c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(src_sharding_id_, other->src_sharding_id_);
    std::swap(des_dht_key_, other->des_dht_key_);
    std::swap(hop_count_, other->hop_count_);
    std::swap(debug_, other->debug_);
    std::swap(hash64_, other->hash64_);
    std::swap(type_, other->type_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(sign_, other->sign_);
    std::swap(version_, other->version_);
    std::swap(network_proto_, other->network_proto_);
    std::swap(dht_proto_, other->dht_proto_);
    std::swap(bls_proto_, other->bls_proto_);
    std::swap(tx_proto_, other->tx_proto_);
    std::swap(contract_proto_, other->contract_proto_);
    std::swap(elect_proto_, other->elect_proto_);
    std::swap(zbft_, other->zbft_);
    std::swap(block_proto_, other->block_proto_);
    std::swap(to_tx_heights_, other->to_tx_heights_);
    std::swap(sync_, other->sync_);
    std::swap(sync_proto_, other->sync_proto_);
    std::swap(vss_proto_, other->vss_proto_);
    std::swap(cross_tos_, other->cross_tos_);
    std::swap(cross_statistic_, other->cross_statistic_);
    std::swap(elect_block_, other->elect_block_);
    std::swap(init_proto_, other->init_proto_);
    std::swap(sync_heights_, other->sync_heights_);
    std::swap(block_, other->block_);
    invalid_bfts_.Swap(&other->invalid_bfts_);
    std::swap(from_public_port_, other->from_public_port_);
    std::swap(c2c_, other->c2c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace transport
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
