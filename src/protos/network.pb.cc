// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/network.proto

#include "protos/network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fnetwork_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fnetwork_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DropNodeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fnetwork_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetNetworkNodesRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fnetwork_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fnetwork_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetNetworkNodesResponse;
}  // namespace protobuf_protos_2fnetwork_2eproto
namespace zjchain {
namespace network {
namespace protobuf {
class GetNetworkNodesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNetworkNodesRequest>
      _instance;
} _GetNetworkNodesRequest_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo>
      _instance;
} _NodeInfo_default_instance_;
class GetNetworkNodesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNetworkNodesResponse>
      _instance;
} _GetNetworkNodesResponse_default_instance_;
class DropNodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DropNodeRequest>
      _instance;
} _DropNodeRequest_default_instance_;
class NetworkMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkMessage>
      _instance;
} _NetworkMessage_default_instance_;
}  // namespace protobuf
}  // namespace network
}  // namespace zjchain
namespace protobuf_protos_2fnetwork_2eproto {
static void InitDefaultsGetNetworkNodesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::network::protobuf::_GetNetworkNodesRequest_default_instance_;
    new (ptr) ::zjchain::network::protobuf::GetNetworkNodesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::network::protobuf::GetNetworkNodesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetNetworkNodesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetNetworkNodesRequest}, {}};

static void InitDefaultsNodeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::network::protobuf::_NodeInfo_default_instance_;
    new (ptr) ::zjchain::network::protobuf::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::network::protobuf::NodeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeInfo}, {}};

static void InitDefaultsGetNetworkNodesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::network::protobuf::_GetNetworkNodesResponse_default_instance_;
    new (ptr) ::zjchain::network::protobuf::GetNetworkNodesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::network::protobuf::GetNetworkNodesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNetworkNodesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNetworkNodesResponse}, {
      &protobuf_protos_2fnetwork_2eproto::scc_info_NodeInfo.base,}};

static void InitDefaultsDropNodeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::network::protobuf::_DropNodeRequest_default_instance_;
    new (ptr) ::zjchain::network::protobuf::DropNodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::network::protobuf::DropNodeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DropNodeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDropNodeRequest}, {}};

static void InitDefaultsNetworkMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::network::protobuf::_NetworkMessage_default_instance_;
    new (ptr) ::zjchain::network::protobuf::NetworkMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::network::protobuf::NetworkMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_NetworkMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNetworkMessage}, {
      &protobuf_protos_2fnetwork_2eproto::scc_info_GetNetworkNodesRequest.base,
      &protobuf_protos_2fnetwork_2eproto::scc_info_GetNetworkNodesResponse.base,
      &protobuf_protos_2fnetwork_2eproto::scc_info_DropNodeRequest.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetNetworkNodesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNetworkNodesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DropNodeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkMessage.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::GetNetworkNodesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::GetNetworkNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::GetNetworkNodesRequest, net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::GetNetworkNodesRequest, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NodeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NodeInfo, sharding_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NodeInfo, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NodeInfo, public_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NodeInfo, pubkey_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::GetNetworkNodesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::GetNetworkNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::GetNetworkNodesResponse, nodes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::DropNodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::DropNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::DropNodeRequest, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::DropNodeRequest, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NetworkMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NetworkMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NetworkMessage, get_net_nodes_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NetworkMessage, get_net_nodes_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::network::protobuf::NetworkMessage, drop_node_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zjchain::network::protobuf::GetNetworkNodesRequest)},
  { 9, 18, sizeof(::zjchain::network::protobuf::NodeInfo)},
  { 22, 28, sizeof(::zjchain::network::protobuf::GetNetworkNodesResponse)},
  { 29, 36, sizeof(::zjchain::network::protobuf::DropNodeRequest)},
  { 38, 46, sizeof(::zjchain::network::protobuf::NetworkMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::network::protobuf::_GetNetworkNodesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::network::protobuf::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::network::protobuf::_GetNetworkNodesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::network::protobuf::_DropNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::network::protobuf::_NetworkMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/network.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024protos/network.proto\022\030zjchain.network."
      "protobuf\"7\n\026GetNetworkNodesRequest\022\016\n\006ne"
      "t_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"W\n\010NodeInfo\022\023\n"
      "\013sharding_id\030\001 \001(\005\022\021\n\tpublic_ip\030\002 \001(\014\022\023\n"
      "\013public_port\030\003 \001(\005\022\016\n\006pubkey\030\004 \001(\014\"L\n\027Ge"
      "tNetworkNodesResponse\0221\n\005nodes\030\001 \003(\0132\".z"
      "jchain.network.protobuf.NodeInfo\"+\n\017Drop"
      "NodeRequest\022\n\n\002ip\030\001 \001(\014\022\014\n\004port\030\002 \001(\005\"\351\001"
      "\n\016NetworkMessage\022K\n\021get_net_nodes_req\030\001 "
      "\001(\01320.zjchain.network.protobuf.GetNetwor"
      "kNodesRequest\022L\n\021get_net_nodes_res\030\002 \001(\013"
      "21.zjchain.network.protobuf.GetNetworkNo"
      "desResponse\022<\n\tdrop_node\030\003 \001(\0132).zjchain"
      ".network.protobuf.DropNodeRequest"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/network.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fnetwork_2eproto
namespace zjchain {
namespace network {
namespace protobuf {

// ===================================================================

void GetNetworkNodesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNetworkNodesRequest::kNetIdFieldNumber;
const int GetNetworkNodesRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNetworkNodesRequest::GetNetworkNodesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fnetwork_2eproto::scc_info_GetNetworkNodesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.network.protobuf.GetNetworkNodesRequest)
}
GetNetworkNodesRequest::GetNetworkNodesRequest(const GetNetworkNodesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&net_id_, &from.net_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&net_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:zjchain.network.protobuf.GetNetworkNodesRequest)
}

void GetNetworkNodesRequest::SharedCtor() {
  ::memset(&net_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&net_id_)) + sizeof(count_));
}

GetNetworkNodesRequest::~GetNetworkNodesRequest() {
  // @@protoc_insertion_point(destructor:zjchain.network.protobuf.GetNetworkNodesRequest)
  SharedDtor();
}

void GetNetworkNodesRequest::SharedDtor() {
}

void GetNetworkNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetNetworkNodesRequest::descriptor() {
  ::protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNetworkNodesRequest& GetNetworkNodesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fnetwork_2eproto::scc_info_GetNetworkNodesRequest.base);
  return *internal_default_instance();
}


void GetNetworkNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&net_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&net_id_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetNetworkNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 net_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.network.protobuf.GetNetworkNodesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.network.protobuf.GetNetworkNodesRequest)
  return false;
#undef DO_
}

void GetNetworkNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 net_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->net_id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.network.protobuf.GetNetworkNodesRequest)
}

::google::protobuf::uint8* GetNetworkNodesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 net_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->net_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.network.protobuf.GetNetworkNodesRequest)
  return target;
}

size_t GetNetworkNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 net_id = 1;
    if (has_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkNodesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNetworkNodesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.network.protobuf.GetNetworkNodesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.network.protobuf.GetNetworkNodesRequest)
    MergeFrom(*source);
  }
}

void GetNetworkNodesRequest::MergeFrom(const GetNetworkNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      net_id_ = from.net_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetNetworkNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkNodesRequest::CopyFrom(const GetNetworkNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.network.protobuf.GetNetworkNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkNodesRequest::IsInitialized() const {
  return true;
}

void GetNetworkNodesRequest::Swap(GetNetworkNodesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNetworkNodesRequest::InternalSwap(GetNetworkNodesRequest* other) {
  using std::swap;
  swap(net_id_, other->net_id_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetNetworkNodesRequest::GetMetadata() const {
  protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kShardingIdFieldNumber;
const int NodeInfo::kPublicIpFieldNumber;
const int NodeInfo::kPublicPortFieldNumber;
const int NodeInfo::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fnetwork_2eproto::scc_info_NodeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.network.protobuf.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_ip()) {
    public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  ::memcpy(&sharding_id_, &from.sharding_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_port_) -
    reinterpret_cast<char*>(&sharding_id_)) + sizeof(public_port_));
  // @@protoc_insertion_point(copy_constructor:zjchain.network.protobuf.NodeInfo)
}

void NodeInfo::SharedCtor() {
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sharding_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_port_) -
      reinterpret_cast<char*>(&sharding_id_)) + sizeof(public_port_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:zjchain.network.protobuf.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  ::protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfo& NodeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fnetwork_2eproto::scc_info_NodeInfo.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.network.protobuf.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      public_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&sharding_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_port_) -
        reinterpret_cast<char*>(&sharding_id_)) + sizeof(public_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.network.protobuf.NodeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sharding_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sharding_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sharding_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 public_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_public_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.network.protobuf.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.network.protobuf.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.network.protobuf.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sharding_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sharding_id(), output);
  }

  // optional bytes public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_ip(), output);
  }

  // optional int32 public_port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->public_port(), output);
  }

  // optional bytes pubkey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.network.protobuf.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.network.protobuf.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sharding_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sharding_id(), target);
  }

  // optional bytes public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_ip(), target);
  }

  // optional int32 public_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->public_port(), target);
  }

  // optional bytes pubkey = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pubkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.network.protobuf.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.network.protobuf.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes public_ip = 2;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional bytes pubkey = 4;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional int32 sharding_id = 1;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sharding_id());
    }

    // optional int32 public_port = 3;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->public_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.network.protobuf.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.network.protobuf.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.network.protobuf.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.network.protobuf.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000004u) {
      sharding_id_ = from.sharding_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      public_port_ = from.public_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.network.protobuf.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.network.protobuf.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  public_ip_.Swap(&other->public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sharding_id_, other->sharding_id_);
  swap(public_port_, other->public_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNetworkNodesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNetworkNodesResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNetworkNodesResponse::GetNetworkNodesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fnetwork_2eproto::scc_info_GetNetworkNodesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.network.protobuf.GetNetworkNodesResponse)
}
GetNetworkNodesResponse::GetNetworkNodesResponse(const GetNetworkNodesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zjchain.network.protobuf.GetNetworkNodesResponse)
}

void GetNetworkNodesResponse::SharedCtor() {
}

GetNetworkNodesResponse::~GetNetworkNodesResponse() {
  // @@protoc_insertion_point(destructor:zjchain.network.protobuf.GetNetworkNodesResponse)
  SharedDtor();
}

void GetNetworkNodesResponse::SharedDtor() {
}

void GetNetworkNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetNetworkNodesResponse::descriptor() {
  ::protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNetworkNodesResponse& GetNetworkNodesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fnetwork_2eproto::scc_info_GetNetworkNodesResponse.base);
  return *internal_default_instance();
}


void GetNetworkNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetNetworkNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.network.protobuf.GetNetworkNodesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.network.protobuf.GetNetworkNodesResponse)
  return false;
#undef DO_
}

void GetNetworkNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.network.protobuf.GetNetworkNodesResponse)
}

::google::protobuf::uint8* GetNetworkNodesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.network.protobuf.GetNetworkNodesResponse)
  return target;
}

size_t GetNetworkNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkNodesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNetworkNodesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.network.protobuf.GetNetworkNodesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.network.protobuf.GetNetworkNodesResponse)
    MergeFrom(*source);
  }
}

void GetNetworkNodesResponse::MergeFrom(const GetNetworkNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void GetNetworkNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkNodesResponse::CopyFrom(const GetNetworkNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.network.protobuf.GetNetworkNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkNodesResponse::IsInitialized() const {
  return true;
}

void GetNetworkNodesResponse::Swap(GetNetworkNodesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNetworkNodesResponse::InternalSwap(GetNetworkNodesResponse* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetNetworkNodesResponse::GetMetadata() const {
  protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DropNodeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropNodeRequest::kIpFieldNumber;
const int DropNodeRequest::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropNodeRequest::DropNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fnetwork_2eproto::scc_info_DropNodeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.network.protobuf.DropNodeRequest)
}
DropNodeRequest::DropNodeRequest(const DropNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:zjchain.network.protobuf.DropNodeRequest)
}

void DropNodeRequest::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

DropNodeRequest::~DropNodeRequest() {
  // @@protoc_insertion_point(destructor:zjchain.network.protobuf.DropNodeRequest)
  SharedDtor();
}

void DropNodeRequest::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DropNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DropNodeRequest::descriptor() {
  ::protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropNodeRequest& DropNodeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fnetwork_2eproto::scc_info_DropNodeRequest.base);
  return *internal_default_instance();
}


void DropNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.network.protobuf.DropNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DropNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.network.protobuf.DropNodeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.network.protobuf.DropNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.network.protobuf.DropNodeRequest)
  return false;
#undef DO_
}

void DropNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.network.protobuf.DropNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.network.protobuf.DropNodeRequest)
}

::google::protobuf::uint8* DropNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.network.protobuf.DropNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.network.protobuf.DropNodeRequest)
  return target;
}

size_t DropNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.network.protobuf.DropNodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.network.protobuf.DropNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.network.protobuf.DropNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.network.protobuf.DropNodeRequest)
    MergeFrom(*source);
  }
}

void DropNodeRequest::MergeFrom(const DropNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.network.protobuf.DropNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DropNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.network.protobuf.DropNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropNodeRequest::CopyFrom(const DropNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.network.protobuf.DropNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropNodeRequest::IsInitialized() const {
  return true;
}

void DropNodeRequest::Swap(DropNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropNodeRequest::InternalSwap(DropNodeRequest* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DropNodeRequest::GetMetadata() const {
  protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetworkMessage::InitAsDefaultInstance() {
  ::zjchain::network::protobuf::_NetworkMessage_default_instance_._instance.get_mutable()->get_net_nodes_req_ = const_cast< ::zjchain::network::protobuf::GetNetworkNodesRequest*>(
      ::zjchain::network::protobuf::GetNetworkNodesRequest::internal_default_instance());
  ::zjchain::network::protobuf::_NetworkMessage_default_instance_._instance.get_mutable()->get_net_nodes_res_ = const_cast< ::zjchain::network::protobuf::GetNetworkNodesResponse*>(
      ::zjchain::network::protobuf::GetNetworkNodesResponse::internal_default_instance());
  ::zjchain::network::protobuf::_NetworkMessage_default_instance_._instance.get_mutable()->drop_node_ = const_cast< ::zjchain::network::protobuf::DropNodeRequest*>(
      ::zjchain::network::protobuf::DropNodeRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkMessage::kGetNetNodesReqFieldNumber;
const int NetworkMessage::kGetNetNodesResFieldNumber;
const int NetworkMessage::kDropNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkMessage::NetworkMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fnetwork_2eproto::scc_info_NetworkMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.network.protobuf.NetworkMessage)
}
NetworkMessage::NetworkMessage(const NetworkMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_get_net_nodes_req()) {
    get_net_nodes_req_ = new ::zjchain::network::protobuf::GetNetworkNodesRequest(*from.get_net_nodes_req_);
  } else {
    get_net_nodes_req_ = NULL;
  }
  if (from.has_get_net_nodes_res()) {
    get_net_nodes_res_ = new ::zjchain::network::protobuf::GetNetworkNodesResponse(*from.get_net_nodes_res_);
  } else {
    get_net_nodes_res_ = NULL;
  }
  if (from.has_drop_node()) {
    drop_node_ = new ::zjchain::network::protobuf::DropNodeRequest(*from.drop_node_);
  } else {
    drop_node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.network.protobuf.NetworkMessage)
}

void NetworkMessage::SharedCtor() {
  ::memset(&get_net_nodes_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_node_) -
      reinterpret_cast<char*>(&get_net_nodes_req_)) + sizeof(drop_node_));
}

NetworkMessage::~NetworkMessage() {
  // @@protoc_insertion_point(destructor:zjchain.network.protobuf.NetworkMessage)
  SharedDtor();
}

void NetworkMessage::SharedDtor() {
  if (this != internal_default_instance()) delete get_net_nodes_req_;
  if (this != internal_default_instance()) delete get_net_nodes_res_;
  if (this != internal_default_instance()) delete drop_node_;
}

void NetworkMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkMessage::descriptor() {
  ::protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkMessage& NetworkMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fnetwork_2eproto::scc_info_NetworkMessage.base);
  return *internal_default_instance();
}


void NetworkMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.network.protobuf.NetworkMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(get_net_nodes_req_ != NULL);
      get_net_nodes_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_net_nodes_res_ != NULL);
      get_net_nodes_res_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drop_node_ != NULL);
      drop_node_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.network.protobuf.NetworkMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_net_nodes_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_net_nodes_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.network.protobuf.NetworkMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.network.protobuf.NetworkMessage)
  return false;
#undef DO_
}

void NetworkMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.network.protobuf.NetworkMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_get_net_nodes_req(), output);
  }

  // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_net_nodes_res(), output);
  }

  // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_drop_node(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.network.protobuf.NetworkMessage)
}

::google::protobuf::uint8* NetworkMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.network.protobuf.NetworkMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_get_net_nodes_req(), deterministic, target);
  }

  // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_net_nodes_res(), deterministic, target);
  }

  // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_drop_node(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.network.protobuf.NetworkMessage)
  return target;
}

size_t NetworkMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.network.protobuf.NetworkMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
    if (has_get_net_nodes_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_net_nodes_req_);
    }

    // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
    if (has_get_net_nodes_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_net_nodes_res_);
    }

    // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
    if (has_drop_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *drop_node_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.network.protobuf.NetworkMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.network.protobuf.NetworkMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.network.protobuf.NetworkMessage)
    MergeFrom(*source);
  }
}

void NetworkMessage::MergeFrom(const NetworkMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.network.protobuf.NetworkMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_get_net_nodes_req()->::zjchain::network::protobuf::GetNetworkNodesRequest::MergeFrom(from.get_net_nodes_req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_get_net_nodes_res()->::zjchain::network::protobuf::GetNetworkNodesResponse::MergeFrom(from.get_net_nodes_res());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_drop_node()->::zjchain::network::protobuf::DropNodeRequest::MergeFrom(from.drop_node());
    }
  }
}

void NetworkMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.network.protobuf.NetworkMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkMessage::CopyFrom(const NetworkMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.network.protobuf.NetworkMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkMessage::IsInitialized() const {
  return true;
}

void NetworkMessage::Swap(NetworkMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkMessage::InternalSwap(NetworkMessage* other) {
  using std::swap;
  swap(get_net_nodes_req_, other->get_net_nodes_req_);
  swap(get_net_nodes_res_, other->get_net_nodes_res_);
  swap(drop_node_, other->drop_node_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkMessage::GetMetadata() const {
  protobuf_protos_2fnetwork_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fnetwork_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace network
}  // namespace zjchain
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::network::protobuf::GetNetworkNodesRequest* Arena::CreateMaybeMessage< ::zjchain::network::protobuf::GetNetworkNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::network::protobuf::GetNetworkNodesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::network::protobuf::NodeInfo* Arena::CreateMaybeMessage< ::zjchain::network::protobuf::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::network::protobuf::NodeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::network::protobuf::GetNetworkNodesResponse* Arena::CreateMaybeMessage< ::zjchain::network::protobuf::GetNetworkNodesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::network::protobuf::GetNetworkNodesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::network::protobuf::DropNodeRequest* Arena::CreateMaybeMessage< ::zjchain::network::protobuf::DropNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::network::protobuf::DropNodeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::network::protobuf::NetworkMessage* Arena::CreateMaybeMessage< ::zjchain::network::protobuf::NetworkMessage >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::network::protobuf::NetworkMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
