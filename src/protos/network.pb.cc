// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace network {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* GetNetworkNodesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNetworkNodesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNetworkNodesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNetworkNodesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropNodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropNodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2fnetwork_2eproto() {
  protobuf_AddDesc_protos_2fnetwork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/network.proto");
  GOOGLE_CHECK(file != NULL);
  GetNetworkNodesRequest_descriptor_ = file->message_type(0);
  static const int GetNetworkNodesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetworkNodesRequest, net_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetworkNodesRequest, count_),
  };
  GetNetworkNodesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNetworkNodesRequest_descriptor_,
      GetNetworkNodesRequest::default_instance_,
      GetNetworkNodesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetworkNodesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetworkNodesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNetworkNodesRequest));
  NodeInfo_descriptor_ = file->message_type(1);
  static const int NodeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, public_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, pubkey_),
  };
  NodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_descriptor_,
      NodeInfo::default_instance_,
      NodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo));
  GetNetworkNodesResponse_descriptor_ = file->message_type(2);
  static const int GetNetworkNodesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetworkNodesResponse, nodes_),
  };
  GetNetworkNodesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNetworkNodesResponse_descriptor_,
      GetNetworkNodesResponse::default_instance_,
      GetNetworkNodesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetworkNodesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetworkNodesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNetworkNodesResponse));
  DropNodeRequest_descriptor_ = file->message_type(3);
  static const int DropNodeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropNodeRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropNodeRequest, port_),
  };
  DropNodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropNodeRequest_descriptor_,
      DropNodeRequest::default_instance_,
      DropNodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropNodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropNodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropNodeRequest));
  NetworkMessage_descriptor_ = file->message_type(4);
  static const int NetworkMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkMessage, get_net_nodes_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkMessage, get_net_nodes_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkMessage, drop_node_),
  };
  NetworkMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkMessage_descriptor_,
      NetworkMessage::default_instance_,
      NetworkMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2fnetwork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNetworkNodesRequest_descriptor_, &GetNetworkNodesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_descriptor_, &NodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNetworkNodesResponse_descriptor_, &GetNetworkNodesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropNodeRequest_descriptor_, &DropNodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkMessage_descriptor_, &NetworkMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2fnetwork_2eproto() {
  delete GetNetworkNodesRequest::default_instance_;
  delete GetNetworkNodesRequest_reflection_;
  delete NodeInfo::default_instance_;
  delete NodeInfo_reflection_;
  delete GetNetworkNodesResponse::default_instance_;
  delete GetNetworkNodesResponse_reflection_;
  delete DropNodeRequest::default_instance_;
  delete DropNodeRequest_reflection_;
  delete NetworkMessage::default_instance_;
  delete NetworkMessage_reflection_;
}

void protobuf_AddDesc_protos_2fnetwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024protos/network.proto\022\030zjchain.network."
    "protobuf\"7\n\026GetNetworkNodesRequest\022\016\n\006ne"
    "t_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"W\n\010NodeInfo\022\023\n"
    "\013sharding_id\030\001 \001(\005\022\021\n\tpublic_ip\030\002 \001(\014\022\023\n"
    "\013public_port\030\003 \001(\005\022\016\n\006pubkey\030\004 \001(\014\"L\n\027Ge"
    "tNetworkNodesResponse\0221\n\005nodes\030\001 \003(\0132\".z"
    "jchain.network.protobuf.NodeInfo\"+\n\017Drop"
    "NodeRequest\022\n\n\002ip\030\001 \001(\014\022\014\n\004port\030\002 \001(\005\"\351\001"
    "\n\016NetworkMessage\022K\n\021get_net_nodes_req\030\001 "
    "\001(\01320.zjchain.network.protobuf.GetNetwor"
    "kNodesRequest\022L\n\021get_net_nodes_res\030\002 \001(\013"
    "21.zjchain.network.protobuf.GetNetworkNo"
    "desResponse\022<\n\tdrop_node\030\003 \001(\0132).zjchain"
    ".network.protobuf.DropNodeRequest", 553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/network.proto", &protobuf_RegisterTypes);
  GetNetworkNodesRequest::default_instance_ = new GetNetworkNodesRequest();
  NodeInfo::default_instance_ = new NodeInfo();
  GetNetworkNodesResponse::default_instance_ = new GetNetworkNodesResponse();
  DropNodeRequest::default_instance_ = new DropNodeRequest();
  NetworkMessage::default_instance_ = new NetworkMessage();
  GetNetworkNodesRequest::default_instance_->InitAsDefaultInstance();
  NodeInfo::default_instance_->InitAsDefaultInstance();
  GetNetworkNodesResponse::default_instance_->InitAsDefaultInstance();
  DropNodeRequest::default_instance_->InitAsDefaultInstance();
  NetworkMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2fnetwork_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2fnetwork_2eproto {
  StaticDescriptorInitializer_protos_2fnetwork_2eproto() {
    protobuf_AddDesc_protos_2fnetwork_2eproto();
  }
} static_descriptor_initializer_protos_2fnetwork_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetNetworkNodesRequest::kNetIdFieldNumber;
const int GetNetworkNodesRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetNetworkNodesRequest::GetNetworkNodesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNetworkNodesRequest::InitAsDefaultInstance() {
}

GetNetworkNodesRequest::GetNetworkNodesRequest(const GetNetworkNodesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNetworkNodesRequest::SharedCtor() {
  _cached_size_ = 0;
  net_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNetworkNodesRequest::~GetNetworkNodesRequest() {
  SharedDtor();
}

void GetNetworkNodesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNetworkNodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNetworkNodesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNetworkNodesRequest_descriptor_;
}

const GetNetworkNodesRequest& GetNetworkNodesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fnetwork_2eproto();
  return *default_instance_;
}

GetNetworkNodesRequest* GetNetworkNodesRequest::default_instance_ = NULL;

GetNetworkNodesRequest* GetNetworkNodesRequest::New() const {
  return new GetNetworkNodesRequest;
}

void GetNetworkNodesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    net_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNetworkNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 net_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_id_)));
          set_has_net_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNetworkNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 net_id = 1;
  if (has_net_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->net_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNetworkNodesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 net_id = 1;
  if (has_net_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->net_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNetworkNodesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 net_id = 1;
    if (has_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNetworkNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNetworkNodesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNetworkNodesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNetworkNodesRequest::MergeFrom(const GetNetworkNodesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net_id()) {
      set_net_id(from.net_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNetworkNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkNodesRequest::CopyFrom(const GetNetworkNodesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkNodesRequest::IsInitialized() const {

  return true;
}

void GetNetworkNodesRequest::Swap(GetNetworkNodesRequest* other) {
  if (other != this) {
    std::swap(net_id_, other->net_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNetworkNodesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNetworkNodesRequest_descriptor_;
  metadata.reflection = GetNetworkNodesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeInfo::kShardingIdFieldNumber;
const int NodeInfo::kPublicIpFieldNumber;
const int NodeInfo::kPublicPortFieldNumber;
const int NodeInfo::kPubkeyFieldNumber;
#endif  // !_MSC_VER

NodeInfo::NodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo::InitAsDefaultInstance() {
}

NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo::SharedCtor() {
  _cached_size_ = 0;
  sharding_id_ = 0;
  public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_port_ = 0;
  pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo::~NodeInfo() {
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete public_ip_;
  }
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (this != default_instance_) {
  }
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_descriptor_;
}

const NodeInfo& NodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fnetwork_2eproto();
  return *default_instance_;
}

NodeInfo* NodeInfo::default_instance_ = NULL;

NodeInfo* NodeInfo::New() const {
  return new NodeInfo;
}

void NodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sharding_id_ = 0;
    if (has_public_ip()) {
      if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
        public_ip_->clear();
      }
    }
    public_port_ = 0;
    if (has_pubkey()) {
      if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
        pubkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sharding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sharding_id_)));
          set_has_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_ip;
        break;
      }

      // optional bytes public_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_public_port;
        break;
      }

      // optional int32 public_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_port_)));
          set_has_public_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pubkey;
        break;
      }

      // optional bytes pubkey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sharding_id = 1;
  if (has_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sharding_id(), output);
  }

  // optional bytes public_ip = 2;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->public_ip(), output);
  }

  // optional int32 public_port = 3;
  if (has_public_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->public_port(), output);
  }

  // optional bytes pubkey = 4;
  if (has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->pubkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sharding_id = 1;
  if (has_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sharding_id(), target);
  }

  // optional bytes public_ip = 2;
  if (has_public_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_ip(), target);
  }

  // optional int32 public_port = 3;
  if (has_public_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->public_port(), target);
  }

  // optional bytes pubkey = 4;
  if (has_pubkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pubkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sharding_id = 1;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sharding_id());
    }

    // optional bytes public_ip = 2;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional int32 public_port = 3;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->public_port());
    }

    // optional bytes pubkey = 4;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sharding_id()) {
      set_sharding_id(from.sharding_id());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_public_port()) {
      set_public_port(from.public_port());
    }
    if (from.has_pubkey()) {
      set_pubkey(from.pubkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {

  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other != this) {
    std::swap(sharding_id_, other->sharding_id_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(public_port_, other->public_port_);
    std::swap(pubkey_, other->pubkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_descriptor_;
  metadata.reflection = NodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNetworkNodesResponse::kNodesFieldNumber;
#endif  // !_MSC_VER

GetNetworkNodesResponse::GetNetworkNodesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNetworkNodesResponse::InitAsDefaultInstance() {
}

GetNetworkNodesResponse::GetNetworkNodesResponse(const GetNetworkNodesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNetworkNodesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNetworkNodesResponse::~GetNetworkNodesResponse() {
  SharedDtor();
}

void GetNetworkNodesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNetworkNodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNetworkNodesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNetworkNodesResponse_descriptor_;
}

const GetNetworkNodesResponse& GetNetworkNodesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fnetwork_2eproto();
  return *default_instance_;
}

GetNetworkNodesResponse* GetNetworkNodesResponse::default_instance_ = NULL;

GetNetworkNodesResponse* GetNetworkNodesResponse::New() const {
  return new GetNetworkNodesResponse;
}

void GetNetworkNodesResponse::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNetworkNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNetworkNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNetworkNodesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNetworkNodesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNetworkNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNetworkNodesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNetworkNodesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNetworkNodesResponse::MergeFrom(const GetNetworkNodesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNetworkNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkNodesResponse::CopyFrom(const GetNetworkNodesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkNodesResponse::IsInitialized() const {

  return true;
}

void GetNetworkNodesResponse::Swap(GetNetworkNodesResponse* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNetworkNodesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNetworkNodesResponse_descriptor_;
  metadata.reflection = GetNetworkNodesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropNodeRequest::kIpFieldNumber;
const int DropNodeRequest::kPortFieldNumber;
#endif  // !_MSC_VER

DropNodeRequest::DropNodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropNodeRequest::InitAsDefaultInstance() {
}

DropNodeRequest::DropNodeRequest(const DropNodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropNodeRequest::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropNodeRequest::~DropNodeRequest() {
  SharedDtor();
}

void DropNodeRequest::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void DropNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropNodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropNodeRequest_descriptor_;
}

const DropNodeRequest& DropNodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fnetwork_2eproto();
  return *default_instance_;
}

DropNodeRequest* DropNodeRequest::default_instance_ = NULL;

DropNodeRequest* DropNodeRequest::New() const {
  return new DropNodeRequest;
}

void DropNodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropNodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropNodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropNodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropNodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropNodeRequest::MergeFrom(const DropNodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropNodeRequest::CopyFrom(const DropNodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropNodeRequest::IsInitialized() const {

  return true;
}

void DropNodeRequest::Swap(DropNodeRequest* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropNodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropNodeRequest_descriptor_;
  metadata.reflection = DropNodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkMessage::kGetNetNodesReqFieldNumber;
const int NetworkMessage::kGetNetNodesResFieldNumber;
const int NetworkMessage::kDropNodeFieldNumber;
#endif  // !_MSC_VER

NetworkMessage::NetworkMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkMessage::InitAsDefaultInstance() {
  get_net_nodes_req_ = const_cast< ::zjchain::network::protobuf::GetNetworkNodesRequest*>(&::zjchain::network::protobuf::GetNetworkNodesRequest::default_instance());
  get_net_nodes_res_ = const_cast< ::zjchain::network::protobuf::GetNetworkNodesResponse*>(&::zjchain::network::protobuf::GetNetworkNodesResponse::default_instance());
  drop_node_ = const_cast< ::zjchain::network::protobuf::DropNodeRequest*>(&::zjchain::network::protobuf::DropNodeRequest::default_instance());
}

NetworkMessage::NetworkMessage(const NetworkMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkMessage::SharedCtor() {
  _cached_size_ = 0;
  get_net_nodes_req_ = NULL;
  get_net_nodes_res_ = NULL;
  drop_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkMessage::~NetworkMessage() {
  SharedDtor();
}

void NetworkMessage::SharedDtor() {
  if (this != default_instance_) {
    delete get_net_nodes_req_;
    delete get_net_nodes_res_;
    delete drop_node_;
  }
}

void NetworkMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkMessage_descriptor_;
}

const NetworkMessage& NetworkMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fnetwork_2eproto();
  return *default_instance_;
}

NetworkMessage* NetworkMessage::default_instance_ = NULL;

NetworkMessage* NetworkMessage::New() const {
  return new NetworkMessage;
}

void NetworkMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_get_net_nodes_req()) {
      if (get_net_nodes_req_ != NULL) get_net_nodes_req_->::zjchain::network::protobuf::GetNetworkNodesRequest::Clear();
    }
    if (has_get_net_nodes_res()) {
      if (get_net_nodes_res_ != NULL) get_net_nodes_res_->::zjchain::network::protobuf::GetNetworkNodesResponse::Clear();
    }
    if (has_drop_node()) {
      if (drop_node_ != NULL) drop_node_->::zjchain::network::protobuf::DropNodeRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_net_nodes_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get_net_nodes_res;
        break;
      }

      // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_net_nodes_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_net_nodes_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drop_node;
        break;
      }

      // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  if (has_get_net_nodes_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_net_nodes_req(), output);
  }

  // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  if (has_get_net_nodes_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_net_nodes_res(), output);
  }

  // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
  if (has_drop_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drop_node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  if (has_get_net_nodes_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_net_nodes_req(), target);
  }

  // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  if (has_get_net_nodes_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_net_nodes_res(), target);
  }

  // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
  if (has_drop_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drop_node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
    if (has_get_net_nodes_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_net_nodes_req());
    }

    // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
    if (has_get_net_nodes_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_net_nodes_res());
    }

    // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
    if (has_drop_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop_node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkMessage::MergeFrom(const NetworkMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_net_nodes_req()) {
      mutable_get_net_nodes_req()->::zjchain::network::protobuf::GetNetworkNodesRequest::MergeFrom(from.get_net_nodes_req());
    }
    if (from.has_get_net_nodes_res()) {
      mutable_get_net_nodes_res()->::zjchain::network::protobuf::GetNetworkNodesResponse::MergeFrom(from.get_net_nodes_res());
    }
    if (from.has_drop_node()) {
      mutable_drop_node()->::zjchain::network::protobuf::DropNodeRequest::MergeFrom(from.drop_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkMessage::CopyFrom(const NetworkMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkMessage::IsInitialized() const {

  return true;
}

void NetworkMessage::Swap(NetworkMessage* other) {
  if (other != this) {
    std::swap(get_net_nodes_req_, other->get_net_nodes_req_);
    std::swap(get_net_nodes_res_, other->get_net_nodes_res_);
    std::swap(drop_node_, other->drop_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkMessage_descriptor_;
  metadata.reflection = NetworkMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace network
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
