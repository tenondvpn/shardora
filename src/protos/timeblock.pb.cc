// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/timeblock.proto

#include "protos/timeblock.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zjchain {
namespace timeblock {
namespace protobuf {
PROTOBUF_CONSTEXPR TimeBlock::TimeBlock(
    ::_pbi::ConstantInitialized)
  : height_(uint64_t{0u})
  , timestamp_(uint64_t{0u})
  , vss_random_(uint64_t{0u}){}
struct TimeBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeBlockDefaultTypeInternal() {}
  union {
    TimeBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeBlockDefaultTypeInternal _TimeBlock_default_instance_;
}  // namespace protobuf
}  // namespace timeblock
}  // namespace zjchain
static ::_pb::Metadata file_level_metadata_protos_2ftimeblock_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2ftimeblock_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2ftimeblock_2eproto = nullptr;

const uint32_t TableStruct_protos_2ftimeblock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zjchain::timeblock::protobuf::TimeBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zjchain::timeblock::protobuf::TimeBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zjchain::timeblock::protobuf::TimeBlock, height_),
  PROTOBUF_FIELD_OFFSET(::zjchain::timeblock::protobuf::TimeBlock, timestamp_),
  PROTOBUF_FIELD_OFFSET(::zjchain::timeblock::protobuf::TimeBlock, vss_random_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::zjchain::timeblock::protobuf::TimeBlock)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zjchain::timeblock::protobuf::_TimeBlock_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2ftimeblock_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026protos/timeblock.proto\022\032zjchain.timebl"
  "ock.protobuf\"B\n\tTimeBlock\022\016\n\006height\030\001 \001("
  "\004\022\021\n\ttimestamp\030\002 \001(\004\022\022\n\nvss_random\030\003 \001(\004"
  ;
static ::_pbi::once_flag descriptor_table_protos_2ftimeblock_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2ftimeblock_2eproto = {
    false, false, 120, descriptor_table_protodef_protos_2ftimeblock_2eproto,
    "protos/timeblock.proto",
    &descriptor_table_protos_2ftimeblock_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_protos_2ftimeblock_2eproto::offsets,
    file_level_metadata_protos_2ftimeblock_2eproto, file_level_enum_descriptors_protos_2ftimeblock_2eproto,
    file_level_service_descriptors_protos_2ftimeblock_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2ftimeblock_2eproto_getter() {
  return &descriptor_table_protos_2ftimeblock_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2ftimeblock_2eproto(&descriptor_table_protos_2ftimeblock_2eproto);
namespace zjchain {
namespace timeblock {
namespace protobuf {

// ===================================================================

class TimeBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeBlock>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vss_random(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TimeBlock::TimeBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:zjchain.timeblock.protobuf.TimeBlock)
}
TimeBlock::TimeBlock(const TimeBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&vss_random_) -
    reinterpret_cast<char*>(&height_)) + sizeof(vss_random_));
  // @@protoc_insertion_point(copy_constructor:zjchain.timeblock.protobuf.TimeBlock)
}

inline void TimeBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vss_random_) -
    reinterpret_cast<char*>(&height_)) + sizeof(vss_random_));
}

TimeBlock::~TimeBlock() {
  // @@protoc_insertion_point(destructor:zjchain.timeblock.protobuf.TimeBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.timeblock.protobuf.TimeBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vss_random_) -
        reinterpret_cast<char*>(&height_)) + sizeof(vss_random_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vss_random = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vss_random(&has_bits);
          vss_random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.timeblock.protobuf.TimeBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint64 vss_random = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_vss_random(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.timeblock.protobuf.TimeBlock)
  return target;
}

size_t TimeBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.timeblock.protobuf.TimeBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
    }

    // optional uint64 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 vss_random = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vss_random());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeBlock::GetClassData() const { return &_class_data_; }

void TimeBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeBlock *>(to)->MergeFrom(
      static_cast<const TimeBlock &>(from));
}


void TimeBlock::MergeFrom(const TimeBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.timeblock.protobuf.TimeBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      vss_random_ = from.vss_random_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeBlock::CopyFrom(const TimeBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.timeblock.protobuf.TimeBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBlock::IsInitialized() const {
  return true;
}

void TimeBlock::InternalSwap(TimeBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeBlock, vss_random_)
      + sizeof(TimeBlock::vss_random_)
      - PROTOBUF_FIELD_OFFSET(TimeBlock, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2ftimeblock_2eproto_getter, &descriptor_table_protos_2ftimeblock_2eproto_once,
      file_level_metadata_protos_2ftimeblock_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace timeblock
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zjchain::timeblock::protobuf::TimeBlock*
Arena::CreateMaybeMessage< ::zjchain::timeblock::protobuf::TimeBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zjchain::timeblock::protobuf::TimeBlock >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
