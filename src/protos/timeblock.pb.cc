// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/timeblock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/timeblock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace timeblock {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* TimeBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeBlock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2ftimeblock_2eproto() {
  protobuf_AddDesc_protos_2ftimeblock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/timeblock.proto");
  GOOGLE_CHECK(file != NULL);
  TimeBlock_descriptor_ = file->message_type(0);
  static const int TimeBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBlock, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBlock, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBlock, vss_random_),
  };
  TimeBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeBlock_descriptor_,
      TimeBlock::default_instance_,
      TimeBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeBlock));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2ftimeblock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeBlock_descriptor_, &TimeBlock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2ftimeblock_2eproto() {
  delete TimeBlock::default_instance_;
  delete TimeBlock_reflection_;
}

void protobuf_AddDesc_protos_2ftimeblock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026protos/timeblock.proto\022\032zjchain.timebl"
    "ock.protobuf\"B\n\tTimeBlock\022\016\n\006height\030\001 \001("
    "\004\022\021\n\ttimestamp\030\002 \001(\004\022\022\n\nvss_random\030\003 \001(\004", 120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/timeblock.proto", &protobuf_RegisterTypes);
  TimeBlock::default_instance_ = new TimeBlock();
  TimeBlock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2ftimeblock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2ftimeblock_2eproto {
  StaticDescriptorInitializer_protos_2ftimeblock_2eproto() {
    protobuf_AddDesc_protos_2ftimeblock_2eproto();
  }
} static_descriptor_initializer_protos_2ftimeblock_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TimeBlock::kHeightFieldNumber;
const int TimeBlock::kTimestampFieldNumber;
const int TimeBlock::kVssRandomFieldNumber;
#endif  // !_MSC_VER

TimeBlock::TimeBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeBlock::InitAsDefaultInstance() {
}

TimeBlock::TimeBlock(const TimeBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeBlock::SharedCtor() {
  _cached_size_ = 0;
  height_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_ULONGLONG(0);
  vss_random_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeBlock::~TimeBlock() {
  SharedDtor();
}

void TimeBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeBlock_descriptor_;
}

const TimeBlock& TimeBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2ftimeblock_2eproto();
  return *default_instance_;
}

TimeBlock* TimeBlock::default_instance_ = NULL;

TimeBlock* TimeBlock::New() const {
  return new TimeBlock;
}

void TimeBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = GOOGLE_ULONGLONG(0);
    timestamp_ = GOOGLE_ULONGLONG(0);
    vss_random_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vss_random;
        break;
      }

      // optional uint64 vss_random = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vss_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vss_random_)));
          set_has_vss_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->height(), output);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional uint64 vss_random = 3;
  if (has_vss_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->vss_random(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->height(), target);
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional uint64 vss_random = 3;
  if (has_vss_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->vss_random(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 vss_random = 3;
    if (has_vss_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vss_random());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeBlock::MergeFrom(const TimeBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_vss_random()) {
      set_vss_random(from.vss_random());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBlock::CopyFrom(const TimeBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBlock::IsInitialized() const {

  return true;
}

void TimeBlock::Swap(TimeBlock* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(vss_random_, other->vss_random_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeBlock_descriptor_;
  metadata.reflection = TimeBlock_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace timeblock
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
