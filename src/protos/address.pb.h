// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/address.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2faddress_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2faddress_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protos/bls.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2faddress_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2faddress_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2faddress_2eproto;
namespace zjchain {
namespace address {
namespace protobuf {
class AddressInfo;
struct AddressInfoDefaultTypeInternal;
extern AddressInfoDefaultTypeInternal _AddressInfo_default_instance_;
}  // namespace protobuf
}  // namespace address
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::address::protobuf::AddressInfo* Arena::CreateMaybeMessage<::zjchain::address::protobuf::AddressInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace address {
namespace protobuf {

enum AddressType : int {
  kNormal = 0,
  kContract = 1,
  kRootElect = 2,
  kRootTimer = 3,
  kStatistic = 4,
  kToTxAddress = 5,
  kLocalToTxAddress = 6,
  kElectAddress = 7
};
bool AddressType_IsValid(int value);
constexpr AddressType AddressType_MIN = kNormal;
constexpr AddressType AddressType_MAX = kElectAddress;
constexpr int AddressType_ARRAYSIZE = AddressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor();
template<typename T>
inline const std::string& AddressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddressType_descriptor(), enum_t_value);
}
inline bool AddressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AddressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddressType>(
    AddressType_descriptor(), name, value);
}
// ===================================================================

class AddressInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.address.protobuf.AddressInfo) */ {
 public:
  inline AddressInfo() : AddressInfo(nullptr) {}
  ~AddressInfo() override;
  explicit PROTOBUF_CONSTEXPR AddressInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressInfo(const AddressInfo& from);
  AddressInfo(AddressInfo&& from) noexcept
    : AddressInfo() {
    *this = ::std::move(from);
  }

  inline AddressInfo& operator=(const AddressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressInfo& operator=(AddressInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressInfo* internal_default_instance() {
    return reinterpret_cast<const AddressInfo*>(
               &_AddressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddressInfo& a, AddressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.address.protobuf.AddressInfo";
  }
  protected:
  explicit AddressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kG2SFieldNumber = 10,
    kPubkeyFieldNumber = 1,
    kAddrFieldNumber = 5,
    kBytesCodeFieldNumber = 7,
    kBalanceFieldNumber = 2,
    kShardingIdFieldNumber = 3,
    kPoolIndexFieldNumber = 4,
    kTypeFieldNumber = 6,
    kCreditFieldNumber = 9,
    kLatestHeightFieldNumber = 8,
    kDestructedFieldNumber = 12,
    kElectPosFieldNumber = 11,
  };
  // repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
  int g2s_size() const;
  private:
  int _internal_g2s_size() const;
  public:
  void clear_g2s();
  ::zjchain::bls::protobuf::BlsPublicKey* mutable_g2s(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >*
      mutable_g2s();
  private:
  const ::zjchain::bls::protobuf::BlsPublicKey& _internal_g2s(int index) const;
  ::zjchain::bls::protobuf::BlsPublicKey* _internal_add_g2s();
  public:
  const ::zjchain::bls::protobuf::BlsPublicKey& g2s(int index) const;
  ::zjchain::bls::protobuf::BlsPublicKey* add_g2s();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >&
      g2s() const;

  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_NODISCARD std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // optional bytes addr = 5;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // optional bytes bytes_code = 7;
  bool has_bytes_code() const;
  private:
  bool _internal_has_bytes_code() const;
  public:
  void clear_bytes_code();
  const std::string& bytes_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_code();
  PROTOBUF_NODISCARD std::string* release_bytes_code();
  void set_allocated_bytes_code(std::string* bytes_code);
  private:
  const std::string& _internal_bytes_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_code(const std::string& value);
  std::string* _internal_mutable_bytes_code();
  public:

  // optional uint64 balance = 2;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // optional uint32 sharding_id = 3;
  bool has_sharding_id() const;
  private:
  bool _internal_has_sharding_id() const;
  public:
  void clear_sharding_id();
  uint32_t sharding_id() const;
  void set_sharding_id(uint32_t value);
  private:
  uint32_t _internal_sharding_id() const;
  void _internal_set_sharding_id(uint32_t value);
  public:

  // optional uint32 pool_index = 4;
  bool has_pool_index() const;
  private:
  bool _internal_has_pool_index() const;
  public:
  void clear_pool_index();
  uint32_t pool_index() const;
  void set_pool_index(uint32_t value);
  private:
  uint32_t _internal_pool_index() const;
  void _internal_set_pool_index(uint32_t value);
  public:

  // optional .zjchain.address.protobuf.AddressType type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::zjchain::address::protobuf::AddressType type() const;
  void set_type(::zjchain::address::protobuf::AddressType value);
  private:
  ::zjchain::address::protobuf::AddressType _internal_type() const;
  void _internal_set_type(::zjchain::address::protobuf::AddressType value);
  public:

  // optional int32 credit = 9 [default = 0];
  bool has_credit() const;
  private:
  bool _internal_has_credit() const;
  public:
  void clear_credit();
  int32_t credit() const;
  void set_credit(int32_t value);
  private:
  int32_t _internal_credit() const;
  void _internal_set_credit(int32_t value);
  public:

  // optional uint64 latest_height = 8;
  bool has_latest_height() const;
  private:
  bool _internal_has_latest_height() const;
  public:
  void clear_latest_height();
  uint64_t latest_height() const;
  void set_latest_height(uint64_t value);
  private:
  uint64_t _internal_latest_height() const;
  void _internal_set_latest_height(uint64_t value);
  public:

  // optional bool destructed = 12;
  bool has_destructed() const;
  private:
  bool _internal_has_destructed() const;
  public:
  void clear_destructed();
  bool destructed() const;
  void set_destructed(bool value);
  private:
  bool _internal_destructed() const;
  void _internal_set_destructed(bool value);
  public:

  // optional uint32 elect_pos = 11 [default = 4294967295];
  bool has_elect_pos() const;
  private:
  bool _internal_has_elect_pos() const;
  public:
  void clear_elect_pos();
  uint32_t elect_pos() const;
  void set_elect_pos(uint32_t value);
  private:
  uint32_t _internal_elect_pos() const;
  void _internal_set_elect_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.address.protobuf.AddressInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey > g2s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_code_;
  uint64_t balance_;
  uint32_t sharding_id_;
  uint32_t pool_index_;
  int type_;
  int32_t credit_;
  uint64_t latest_height_;
  bool destructed_;
  uint32_t elect_pos_;
  friend struct ::TableStruct_protos_2faddress_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddressInfo

// optional bytes pubkey = 1;
inline bool AddressInfo::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddressInfo::has_pubkey() const {
  return _internal_has_pubkey();
}
inline void AddressInfo::clear_pubkey() {
  pubkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddressInfo::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.pubkey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressInfo::set_pubkey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pubkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.pubkey)
}
inline std::string* AddressInfo::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.address.protobuf.AddressInfo.pubkey)
  return _s;
}
inline const std::string& AddressInfo::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void AddressInfo::_internal_set_pubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressInfo::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000001u;
  return pubkey_.Mutable(GetArenaForAllocation());
}
inline std::string* AddressInfo::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.address.protobuf.AddressInfo.pubkey)
  if (!_internal_has_pubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = pubkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddressInfo::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pubkey_.SetAllocated(pubkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.address.protobuf.AddressInfo.pubkey)
}

// optional uint64 balance = 2;
inline bool AddressInfo::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AddressInfo::has_balance() const {
  return _internal_has_balance();
}
inline void AddressInfo::clear_balance() {
  balance_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t AddressInfo::_internal_balance() const {
  return balance_;
}
inline uint64_t AddressInfo::balance() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.balance)
  return _internal_balance();
}
inline void AddressInfo::_internal_set_balance(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  balance_ = value;
}
inline void AddressInfo::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.balance)
}

// optional uint32 sharding_id = 3;
inline bool AddressInfo::_internal_has_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AddressInfo::has_sharding_id() const {
  return _internal_has_sharding_id();
}
inline void AddressInfo::clear_sharding_id() {
  sharding_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t AddressInfo::_internal_sharding_id() const {
  return sharding_id_;
}
inline uint32_t AddressInfo::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.sharding_id)
  return _internal_sharding_id();
}
inline void AddressInfo::_internal_set_sharding_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  sharding_id_ = value;
}
inline void AddressInfo::set_sharding_id(uint32_t value) {
  _internal_set_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.sharding_id)
}

// optional uint32 pool_index = 4;
inline bool AddressInfo::_internal_has_pool_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AddressInfo::has_pool_index() const {
  return _internal_has_pool_index();
}
inline void AddressInfo::clear_pool_index() {
  pool_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t AddressInfo::_internal_pool_index() const {
  return pool_index_;
}
inline uint32_t AddressInfo::pool_index() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.pool_index)
  return _internal_pool_index();
}
inline void AddressInfo::_internal_set_pool_index(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  pool_index_ = value;
}
inline void AddressInfo::set_pool_index(uint32_t value) {
  _internal_set_pool_index(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.pool_index)
}

// optional bytes addr = 5;
inline bool AddressInfo::_internal_has_addr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddressInfo::has_addr() const {
  return _internal_has_addr();
}
inline void AddressInfo::clear_addr() {
  addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddressInfo::addr() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressInfo::set_addr(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.addr)
}
inline std::string* AddressInfo::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:zjchain.address.protobuf.AddressInfo.addr)
  return _s;
}
inline const std::string& AddressInfo::_internal_addr() const {
  return addr_.Get();
}
inline void AddressInfo::_internal_set_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  addr_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressInfo::_internal_mutable_addr() {
  _has_bits_[0] |= 0x00000002u;
  return addr_.Mutable(GetArenaForAllocation());
}
inline std::string* AddressInfo::release_addr() {
  // @@protoc_insertion_point(field_release:zjchain.address.protobuf.AddressInfo.addr)
  if (!_internal_has_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = addr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault()) {
    addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddressInfo::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault()) {
    addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.address.protobuf.AddressInfo.addr)
}

// optional .zjchain.address.protobuf.AddressType type = 6;
inline bool AddressInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AddressInfo::has_type() const {
  return _internal_has_type();
}
inline void AddressInfo::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::zjchain::address::protobuf::AddressType AddressInfo::_internal_type() const {
  return static_cast< ::zjchain::address::protobuf::AddressType >(type_);
}
inline ::zjchain::address::protobuf::AddressType AddressInfo::type() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.type)
  return _internal_type();
}
inline void AddressInfo::_internal_set_type(::zjchain::address::protobuf::AddressType value) {
  assert(::zjchain::address::protobuf::AddressType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void AddressInfo::set_type(::zjchain::address::protobuf::AddressType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.type)
}

// optional bytes bytes_code = 7;
inline bool AddressInfo::_internal_has_bytes_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddressInfo::has_bytes_code() const {
  return _internal_has_bytes_code();
}
inline void AddressInfo::clear_bytes_code() {
  bytes_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AddressInfo::bytes_code() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.bytes_code)
  return _internal_bytes_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressInfo::set_bytes_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 bytes_code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.bytes_code)
}
inline std::string* AddressInfo::mutable_bytes_code() {
  std::string* _s = _internal_mutable_bytes_code();
  // @@protoc_insertion_point(field_mutable:zjchain.address.protobuf.AddressInfo.bytes_code)
  return _s;
}
inline const std::string& AddressInfo::_internal_bytes_code() const {
  return bytes_code_.Get();
}
inline void AddressInfo::_internal_set_bytes_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  bytes_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressInfo::_internal_mutable_bytes_code() {
  _has_bits_[0] |= 0x00000004u;
  return bytes_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AddressInfo::release_bytes_code() {
  // @@protoc_insertion_point(field_release:zjchain.address.protobuf.AddressInfo.bytes_code)
  if (!_internal_has_bytes_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = bytes_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_code_.IsDefault()) {
    bytes_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddressInfo::set_allocated_bytes_code(std::string* bytes_code) {
  if (bytes_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bytes_code_.SetAllocated(bytes_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_code_.IsDefault()) {
    bytes_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.address.protobuf.AddressInfo.bytes_code)
}

// optional uint64 latest_height = 8;
inline bool AddressInfo::_internal_has_latest_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AddressInfo::has_latest_height() const {
  return _internal_has_latest_height();
}
inline void AddressInfo::clear_latest_height() {
  latest_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t AddressInfo::_internal_latest_height() const {
  return latest_height_;
}
inline uint64_t AddressInfo::latest_height() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.latest_height)
  return _internal_latest_height();
}
inline void AddressInfo::_internal_set_latest_height(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  latest_height_ = value;
}
inline void AddressInfo::set_latest_height(uint64_t value) {
  _internal_set_latest_height(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.latest_height)
}

// optional int32 credit = 9 [default = 0];
inline bool AddressInfo::_internal_has_credit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AddressInfo::has_credit() const {
  return _internal_has_credit();
}
inline void AddressInfo::clear_credit() {
  credit_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t AddressInfo::_internal_credit() const {
  return credit_;
}
inline int32_t AddressInfo::credit() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.credit)
  return _internal_credit();
}
inline void AddressInfo::_internal_set_credit(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  credit_ = value;
}
inline void AddressInfo::set_credit(int32_t value) {
  _internal_set_credit(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.credit)
}

// repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
inline int AddressInfo::_internal_g2s_size() const {
  return g2s_.size();
}
inline int AddressInfo::g2s_size() const {
  return _internal_g2s_size();
}
inline ::zjchain::bls::protobuf::BlsPublicKey* AddressInfo::mutable_g2s(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.address.protobuf.AddressInfo.g2s)
  return g2s_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >*
AddressInfo::mutable_g2s() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.address.protobuf.AddressInfo.g2s)
  return &g2s_;
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& AddressInfo::_internal_g2s(int index) const {
  return g2s_.Get(index);
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& AddressInfo::g2s(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.g2s)
  return _internal_g2s(index);
}
inline ::zjchain::bls::protobuf::BlsPublicKey* AddressInfo::_internal_add_g2s() {
  return g2s_.Add();
}
inline ::zjchain::bls::protobuf::BlsPublicKey* AddressInfo::add_g2s() {
  ::zjchain::bls::protobuf::BlsPublicKey* _add = _internal_add_g2s();
  // @@protoc_insertion_point(field_add:zjchain.address.protobuf.AddressInfo.g2s)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >&
AddressInfo::g2s() const {
  // @@protoc_insertion_point(field_list:zjchain.address.protobuf.AddressInfo.g2s)
  return g2s_;
}

// optional uint32 elect_pos = 11 [default = 4294967295];
inline bool AddressInfo::_internal_has_elect_pos() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AddressInfo::has_elect_pos() const {
  return _internal_has_elect_pos();
}
inline void AddressInfo::clear_elect_pos() {
  elect_pos_ = 4294967295u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t AddressInfo::_internal_elect_pos() const {
  return elect_pos_;
}
inline uint32_t AddressInfo::elect_pos() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.elect_pos)
  return _internal_elect_pos();
}
inline void AddressInfo::_internal_set_elect_pos(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  elect_pos_ = value;
}
inline void AddressInfo::set_elect_pos(uint32_t value) {
  _internal_set_elect_pos(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.elect_pos)
}

// optional bool destructed = 12;
inline bool AddressInfo::_internal_has_destructed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AddressInfo::has_destructed() const {
  return _internal_has_destructed();
}
inline void AddressInfo::clear_destructed() {
  destructed_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool AddressInfo::_internal_destructed() const {
  return destructed_;
}
inline bool AddressInfo::destructed() const {
  // @@protoc_insertion_point(field_get:zjchain.address.protobuf.AddressInfo.destructed)
  return _internal_destructed();
}
inline void AddressInfo::_internal_set_destructed(bool value) {
  _has_bits_[0] |= 0x00000200u;
  destructed_ = value;
}
inline void AddressInfo::set_destructed(bool value) {
  _internal_set_destructed(value);
  // @@protoc_insertion_point(field_set:zjchain.address.protobuf.AddressInfo.destructed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace address
}  // namespace zjchain

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zjchain::address::protobuf::AddressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zjchain::address::protobuf::AddressType>() {
  return ::zjchain::address::protobuf::AddressType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2faddress_2eproto
