// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/address.proto

#ifndef PROTOBUF_protos_2faddress_2eproto__INCLUDED
#define PROTOBUF_protos_2faddress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protos/bls.pb.h"
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace address {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protos_2faddress_2eproto();
void protobuf_AssignDesc_protos_2faddress_2eproto();
void protobuf_ShutdownFile_protos_2faddress_2eproto();

class AddressInfo;

enum AddressType {
  kNormal = 0,
  kContract = 1,
  kRootElect = 2,
  kRootTimer = 3,
  kStatistic = 4,
  kToTxAddress = 5,
  kLocalToTxAddress = 6,
  kElectAddress = 7
};
bool AddressType_IsValid(int value);
const AddressType AddressType_MIN = kNormal;
const AddressType AddressType_MAX = kElectAddress;
const int AddressType_ARRAYSIZE = AddressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddressType_descriptor();
inline const ::std::string& AddressType_Name(AddressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddressType_descriptor(), value);
}
inline bool AddressType_Parse(
    const ::std::string& name, AddressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddressType>(
    AddressType_descriptor(), name, value);
}
// ===================================================================

class AddressInfo : public ::google::protobuf::Message {
 public:
  AddressInfo();
  virtual ~AddressInfo();

  AddressInfo(const AddressInfo& from);

  inline AddressInfo& operator=(const AddressInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressInfo& default_instance();

  void Swap(AddressInfo* other);

  // implements Message ----------------------------------------------

  AddressInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressInfo& from);
  void MergeFrom(const AddressInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  inline bool has_pubkey() const;
  inline void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  inline const ::std::string& pubkey() const;
  inline void set_pubkey(const ::std::string& value);
  inline void set_pubkey(const char* value);
  inline void set_pubkey(const void* value, size_t size);
  inline ::std::string* mutable_pubkey();
  inline ::std::string* release_pubkey();
  inline void set_allocated_pubkey(::std::string* pubkey);

  // optional uint64 balance = 2;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 2;
  inline ::google::protobuf::uint64 balance() const;
  inline void set_balance(::google::protobuf::uint64 value);

  // optional uint32 sharding_id = 3;
  inline bool has_sharding_id() const;
  inline void clear_sharding_id();
  static const int kShardingIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sharding_id() const;
  inline void set_sharding_id(::google::protobuf::uint32 value);

  // optional uint32 pool_index = 4;
  inline bool has_pool_index() const;
  inline void clear_pool_index();
  static const int kPoolIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 pool_index() const;
  inline void set_pool_index(::google::protobuf::uint32 value);

  // optional bytes addr = 5;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 5;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const void* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // optional .zjchain.address.protobuf.AddressType type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::zjchain::address::protobuf::AddressType type() const;
  inline void set_type(::zjchain::address::protobuf::AddressType value);

  // optional bytes bytes_code = 7;
  inline bool has_bytes_code() const;
  inline void clear_bytes_code();
  static const int kBytesCodeFieldNumber = 7;
  inline const ::std::string& bytes_code() const;
  inline void set_bytes_code(const ::std::string& value);
  inline void set_bytes_code(const char* value);
  inline void set_bytes_code(const void* value, size_t size);
  inline ::std::string* mutable_bytes_code();
  inline ::std::string* release_bytes_code();
  inline void set_allocated_bytes_code(::std::string* bytes_code);

  // optional uint64 latest_height = 8;
  inline bool has_latest_height() const;
  inline void clear_latest_height();
  static const int kLatestHeightFieldNumber = 8;
  inline ::google::protobuf::uint64 latest_height() const;
  inline void set_latest_height(::google::protobuf::uint64 value);

  // optional int32 credit = 9 [default = 0];
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 9;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
  inline int g2s_size() const;
  inline void clear_g2s();
  static const int kG2SFieldNumber = 10;
  inline const ::zjchain::bls::protobuf::BlsPublicKey& g2s(int index) const;
  inline ::zjchain::bls::protobuf::BlsPublicKey* mutable_g2s(int index);
  inline ::zjchain::bls::protobuf::BlsPublicKey* add_g2s();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >&
      g2s() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >*
      mutable_g2s();

  // optional uint32 elect_pos = 11 [default = 4294967295];
  inline bool has_elect_pos() const;
  inline void clear_elect_pos();
  static const int kElectPosFieldNumber = 11;
  inline ::google::protobuf::uint32 elect_pos() const;
  inline void set_elect_pos(::google::protobuf::uint32 value);

  // optional bool destructed = 12;
  inline bool has_destructed() const;
  inline void clear_destructed();
  static const int kDestructedFieldNumber = 12;
  inline bool destructed() const;
  inline void set_destructed(bool value);

  // @@protoc_insertion_point(class_scope:zjchain.address.protobuf.AddressInfo)
 private:
  inline void set_has_pubkey();
  inline void clear_has_pubkey();
  inline void set_has_balance();
  inline void clear_has_balance();
  inline void set_has_sharding_id();
  inline void clear_has_sharding_id();
  inline void set_has_pool_index();
  inline void clear_has_pool_index();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bytes_code();
  inline void clear_has_bytes_code();
  inline void set_has_latest_height();
  inline void clear_has_latest_height();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_elect_pos();
  inline void clear_has_elect_pos();
  inline void set_has_destructed();
  inline void clear_has_destructed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pubkey_;
  ::google::protobuf::uint64 balance_;
  ::google::protobuf::uint32 sharding_id_;
  ::google::protobuf::uint32 pool_index_;
  ::std::string* addr_;
  ::std::string* bytes_code_;
  int type_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::uint64 latest_height_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey > g2s_;
  ::google::protobuf::uint32 elect_pos_;
  bool destructed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2faddress_2eproto();
  friend void protobuf_AssignDesc_protos_2faddress_2eproto();
  friend void protobuf_ShutdownFile_protos_2faddress_2eproto();

  void InitAsDefaultInstance();
  static AddressInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// AddressInfo

// optional bytes pubkey = 1;
inline bool AddressInfo::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressInfo::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddressInfo::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddressInfo::clear_pubkey() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    pubkey_->clear();
  }
  clear_has_pubkey();
}
inline const ::std::string& AddressInfo::pubkey() const {
  return *pubkey_;
}
inline void AddressInfo::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void AddressInfo::set_pubkey(const char* value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void AddressInfo::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddressInfo::mutable_pubkey() {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  return pubkey_;
}
inline ::std::string* AddressInfo::release_pubkey() {
  clear_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pubkey_;
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddressInfo::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (pubkey) {
    set_has_pubkey();
    pubkey_ = pubkey;
  } else {
    clear_has_pubkey();
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 balance = 2;
inline bool AddressInfo::has_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddressInfo::set_has_balance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddressInfo::clear_has_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddressInfo::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 AddressInfo::balance() const {
  return balance_;
}
inline void AddressInfo::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
}

// optional uint32 sharding_id = 3;
inline bool AddressInfo::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddressInfo::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddressInfo::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddressInfo::clear_sharding_id() {
  sharding_id_ = 0u;
  clear_has_sharding_id();
}
inline ::google::protobuf::uint32 AddressInfo::sharding_id() const {
  return sharding_id_;
}
inline void AddressInfo::set_sharding_id(::google::protobuf::uint32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
}

// optional uint32 pool_index = 4;
inline bool AddressInfo::has_pool_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddressInfo::set_has_pool_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddressInfo::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddressInfo::clear_pool_index() {
  pool_index_ = 0u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 AddressInfo::pool_index() const {
  return pool_index_;
}
inline void AddressInfo::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
}

// optional bytes addr = 5;
inline bool AddressInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddressInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddressInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddressInfo::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& AddressInfo::addr() const {
  return *addr_;
}
inline void AddressInfo::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void AddressInfo::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void AddressInfo::set_addr(const void* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddressInfo::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* AddressInfo::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddressInfo::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .zjchain.address.protobuf.AddressType type = 6;
inline bool AddressInfo::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddressInfo::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddressInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddressInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::zjchain::address::protobuf::AddressType AddressInfo::type() const {
  return static_cast< ::zjchain::address::protobuf::AddressType >(type_);
}
inline void AddressInfo::set_type(::zjchain::address::protobuf::AddressType value) {
  assert(::zjchain::address::protobuf::AddressType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes bytes_code = 7;
inline bool AddressInfo::has_bytes_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddressInfo::set_has_bytes_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddressInfo::clear_has_bytes_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddressInfo::clear_bytes_code() {
  if (bytes_code_ != &::google::protobuf::internal::kEmptyString) {
    bytes_code_->clear();
  }
  clear_has_bytes_code();
}
inline const ::std::string& AddressInfo::bytes_code() const {
  return *bytes_code_;
}
inline void AddressInfo::set_bytes_code(const ::std::string& value) {
  set_has_bytes_code();
  if (bytes_code_ == &::google::protobuf::internal::kEmptyString) {
    bytes_code_ = new ::std::string;
  }
  bytes_code_->assign(value);
}
inline void AddressInfo::set_bytes_code(const char* value) {
  set_has_bytes_code();
  if (bytes_code_ == &::google::protobuf::internal::kEmptyString) {
    bytes_code_ = new ::std::string;
  }
  bytes_code_->assign(value);
}
inline void AddressInfo::set_bytes_code(const void* value, size_t size) {
  set_has_bytes_code();
  if (bytes_code_ == &::google::protobuf::internal::kEmptyString) {
    bytes_code_ = new ::std::string;
  }
  bytes_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddressInfo::mutable_bytes_code() {
  set_has_bytes_code();
  if (bytes_code_ == &::google::protobuf::internal::kEmptyString) {
    bytes_code_ = new ::std::string;
  }
  return bytes_code_;
}
inline ::std::string* AddressInfo::release_bytes_code() {
  clear_has_bytes_code();
  if (bytes_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_code_;
    bytes_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddressInfo::set_allocated_bytes_code(::std::string* bytes_code) {
  if (bytes_code_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_code_;
  }
  if (bytes_code) {
    set_has_bytes_code();
    bytes_code_ = bytes_code;
  } else {
    clear_has_bytes_code();
    bytes_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 latest_height = 8;
inline bool AddressInfo::has_latest_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AddressInfo::set_has_latest_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AddressInfo::clear_has_latest_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AddressInfo::clear_latest_height() {
  latest_height_ = GOOGLE_ULONGLONG(0);
  clear_has_latest_height();
}
inline ::google::protobuf::uint64 AddressInfo::latest_height() const {
  return latest_height_;
}
inline void AddressInfo::set_latest_height(::google::protobuf::uint64 value) {
  set_has_latest_height();
  latest_height_ = value;
}

// optional int32 credit = 9 [default = 0];
inline bool AddressInfo::has_credit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AddressInfo::set_has_credit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AddressInfo::clear_has_credit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AddressInfo::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 AddressInfo::credit() const {
  return credit_;
}
inline void AddressInfo::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
}

// repeated .zjchain.bls.protobuf.BlsPublicKey g2s = 10;
inline int AddressInfo::g2s_size() const {
  return g2s_.size();
}
inline void AddressInfo::clear_g2s() {
  g2s_.Clear();
}
inline const ::zjchain::bls::protobuf::BlsPublicKey& AddressInfo::g2s(int index) const {
  return g2s_.Get(index);
}
inline ::zjchain::bls::protobuf::BlsPublicKey* AddressInfo::mutable_g2s(int index) {
  return g2s_.Mutable(index);
}
inline ::zjchain::bls::protobuf::BlsPublicKey* AddressInfo::add_g2s() {
  return g2s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >&
AddressInfo::g2s() const {
  return g2s_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::bls::protobuf::BlsPublicKey >*
AddressInfo::mutable_g2s() {
  return &g2s_;
}

// optional uint32 elect_pos = 11 [default = 4294967295];
inline bool AddressInfo::has_elect_pos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AddressInfo::set_has_elect_pos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AddressInfo::clear_has_elect_pos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AddressInfo::clear_elect_pos() {
  elect_pos_ = 4294967295u;
  clear_has_elect_pos();
}
inline ::google::protobuf::uint32 AddressInfo::elect_pos() const {
  return elect_pos_;
}
inline void AddressInfo::set_elect_pos(::google::protobuf::uint32 value) {
  set_has_elect_pos();
  elect_pos_ = value;
}

// optional bool destructed = 12;
inline bool AddressInfo::has_destructed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AddressInfo::set_has_destructed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AddressInfo::clear_has_destructed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AddressInfo::clear_destructed() {
  destructed_ = false;
  clear_has_destructed();
}
inline bool AddressInfo::destructed() const {
  return destructed_;
}
inline void AddressInfo::set_destructed(bool value) {
  set_has_destructed();
  destructed_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace address
}  // namespace zjchain

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zjchain::address::protobuf::AddressType>() {
  return ::zjchain::address::protobuf::AddressType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protos_2faddress_2eproto__INCLUDED
