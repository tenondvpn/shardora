// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/pools.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protos/pools.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace pools {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* ToTxHeights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToTxHeights_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToTxMessageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToTxMessageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardToTxItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardToTxItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticTxItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticTxItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToTxMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToTxMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolLatestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolLatestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolStatisticItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolStatisticItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinElectNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinElectNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrossShardStatisticItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossShardStatisticItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrossShardStatistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossShardStatistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElectStatistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElectStatistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncPoolsMaxHeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPoolsMaxHeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvalidBftMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvalidBftMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StepType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protos_2fpools_2eproto() {
  protobuf_AddDesc_protos_2fpools_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protos/pools.proto");
  GOOGLE_CHECK(file != NULL);
  ToTxHeights_descriptor_ = file->message_type(0);
  static const int ToTxHeights_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, block_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, tos_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, elelct_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, tx_count_),
  };
  ToTxHeights_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToTxHeights_descriptor_,
      ToTxHeights::default_instance_,
      ToTxHeights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxHeights, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToTxHeights));
  ToTxMessageItem_descriptor_ = file->message_type(1);
  static const int ToTxMessageItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, pool_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, library_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, join_infos_),
  };
  ToTxMessageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToTxMessageItem_descriptor_,
      ToTxMessageItem::default_instance_,
      ToTxMessageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToTxMessageItem));
  ShardToTxItem_descriptor_ = file->message_type(2);
  static const int ShardToTxItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxItem, sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxItem, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxItem, block_height_),
  };
  ShardToTxItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardToTxItem_descriptor_,
      ShardToTxItem::default_instance_,
      ShardToTxItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardToTxItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardToTxItem));
  StatisticTxItem_descriptor_ = file->message_type(3);
  static const int StatisticTxItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxItem, sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxItem, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxItem, block_height_),
  };
  StatisticTxItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticTxItem_descriptor_,
      StatisticTxItem::default_instance_,
      StatisticTxItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticTxItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticTxItem));
  ToTxMessage_descriptor_ = file->message_type(4);
  static const int ToTxMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessage, heights_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessage, tos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessage, to_heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessage, elect_height_),
  };
  ToTxMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToTxMessage_descriptor_,
      ToTxMessage::default_instance_,
      ToTxMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTxMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToTxMessage));
  PoolLatestInfo_descriptor_ = file->message_type(5);
  static const int PoolLatestInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolLatestInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolLatestInfo, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolLatestInfo, synced_height_),
  };
  PoolLatestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolLatestInfo_descriptor_,
      PoolLatestInfo::default_instance_,
      PoolLatestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolLatestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolLatestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolLatestInfo));
  AreaInfo_descriptor_ = file->message_type(6);
  static const int AreaInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, y_),
  };
  AreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreaInfo_descriptor_,
      AreaInfo::default_instance_,
      AreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreaInfo));
  PoolStatisticItem_descriptor_ = file->message_type(7);
  static const int PoolStatisticItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStatisticItem, tx_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStatisticItem, stokes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStatisticItem, elect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStatisticItem, area_point_),
  };
  PoolStatisticItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolStatisticItem_descriptor_,
      PoolStatisticItem::default_instance_,
      PoolStatisticItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStatisticItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStatisticItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolStatisticItem));
  JoinElectNode_descriptor_ = file->message_type(8);
  static const int JoinElectNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectNode, pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectNode, stoke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectNode, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectNode, elect_pos_),
  };
  JoinElectNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinElectNode_descriptor_,
      JoinElectNode::default_instance_,
      JoinElectNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinElectNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinElectNode));
  CrossShardStatisticItem_descriptor_ = file->message_type(9);
  static const int CrossShardStatisticItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatisticItem, src_shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatisticItem, src_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatisticItem, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatisticItem, des_shard_),
  };
  CrossShardStatisticItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossShardStatisticItem_descriptor_,
      CrossShardStatisticItem::default_instance_,
      CrossShardStatisticItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatisticItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatisticItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossShardStatisticItem));
  CrossShardStatistic_descriptor_ = file->message_type(10);
  static const int CrossShardStatistic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatistic, crosses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatistic, elect_height_),
  };
  CrossShardStatistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossShardStatistic_descriptor_,
      CrossShardStatistic::default_instance_,
      CrossShardStatistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossShardStatistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossShardStatistic));
  ElectStatistic_descriptor_ = file->message_type(11);
  static const int ElectStatistic_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, join_elect_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, sharding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, gas_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, lof_leaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, cross_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, elect_height_),
  };
  ElectStatistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElectStatistic_descriptor_,
      ElectStatistic::default_instance_,
      ElectStatistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElectStatistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElectStatistic));
  SyncPoolsMaxHeight_descriptor_ = file->message_type(12);
  static const int SyncPoolsMaxHeight_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoolsMaxHeight, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoolsMaxHeight, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoolsMaxHeight, cross_heights_),
  };
  SyncPoolsMaxHeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPoolsMaxHeight_descriptor_,
      SyncPoolsMaxHeight::default_instance_,
      SyncPoolsMaxHeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoolsMaxHeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPoolsMaxHeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPoolsMaxHeight));
  InvalidBftMessage_descriptor_ = file->message_type(13);
  static const int InvalidBftMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidBftMessage, pool_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidBftMessage, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidBftMessage, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidBftMessage, precommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidBftMessage, height_),
  };
  InvalidBftMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvalidBftMessage_descriptor_,
      InvalidBftMessage::default_instance_,
      InvalidBftMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidBftMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidBftMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvalidBftMessage));
  TxMessage_descriptor_ = file->message_type(14);
  static const int TxMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, gas_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, gas_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, contract_prepayment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, contract_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, contract_input_),
  };
  TxMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxMessage_descriptor_,
      TxMessage::default_instance_,
      TxMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxMessage));
  StepType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protos_2fpools_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToTxHeights_descriptor_, &ToTxHeights::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToTxMessageItem_descriptor_, &ToTxMessageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardToTxItem_descriptor_, &ShardToTxItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticTxItem_descriptor_, &StatisticTxItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToTxMessage_descriptor_, &ToTxMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolLatestInfo_descriptor_, &PoolLatestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreaInfo_descriptor_, &AreaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolStatisticItem_descriptor_, &PoolStatisticItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinElectNode_descriptor_, &JoinElectNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossShardStatisticItem_descriptor_, &CrossShardStatisticItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossShardStatistic_descriptor_, &CrossShardStatistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElectStatistic_descriptor_, &ElectStatistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPoolsMaxHeight_descriptor_, &SyncPoolsMaxHeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvalidBftMessage_descriptor_, &InvalidBftMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxMessage_descriptor_, &TxMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protos_2fpools_2eproto() {
  delete ToTxHeights::default_instance_;
  delete ToTxHeights_reflection_;
  delete ToTxMessageItem::default_instance_;
  delete ToTxMessageItem_reflection_;
  delete ShardToTxItem::default_instance_;
  delete ShardToTxItem_reflection_;
  delete StatisticTxItem::default_instance_;
  delete StatisticTxItem_reflection_;
  delete ToTxMessage::default_instance_;
  delete ToTxMessage_reflection_;
  delete PoolLatestInfo::default_instance_;
  delete PoolLatestInfo_reflection_;
  delete AreaInfo::default_instance_;
  delete AreaInfo_reflection_;
  delete PoolStatisticItem::default_instance_;
  delete PoolStatisticItem_reflection_;
  delete JoinElectNode::default_instance_;
  delete JoinElectNode_reflection_;
  delete CrossShardStatisticItem::default_instance_;
  delete CrossShardStatisticItem_reflection_;
  delete CrossShardStatistic::default_instance_;
  delete CrossShardStatistic_reflection_;
  delete ElectStatistic::default_instance_;
  delete ElectStatistic_reflection_;
  delete SyncPoolsMaxHeight::default_instance_;
  delete SyncPoolsMaxHeight_reflection_;
  delete InvalidBftMessage::default_instance_;
  delete InvalidBftMessage_reflection_;
  delete TxMessage::default_instance_;
  delete TxMessage_reflection_;
}

void protobuf_AddDesc_protos_2fpools_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::zjchain::bls::protobuf::protobuf_AddDesc_protos_2fbls_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022protos/pools.proto\022\026zjchain.pools.prot"
    "obuf\032\020protos/bls.proto\"\227\001\n\013ToTxHeights\022\023"
    "\n\013sharding_id\030\001 \001(\r\022\017\n\007heights\030\002 \003(\004\022\024\n\014"
    "block_height\030\003 \001(\004\022\020\n\010tos_hash\030\004 \001(\014\022\021\n\t"
    "leader_id\030\005 \001(\014\022\025\n\relelct_height\030\006 \001(\004\022\020"
    "\n\010tx_count\030\007 \001(\r\"\265\001\n\017ToTxMessageItem\022\013\n\003"
    "des\030\001 \001(\014\022\016\n\006amount\030\002 \001(\004\022\023\n\013sharding_id"
    "\030\003 \001(\r\022\022\n\npool_index\030\004 \001(\r\022\014\n\004step\030\005 \001(\005"
    "\022\025\n\rlibrary_bytes\030\006 \001(\014\0227\n\njoin_infos\030\007 "
    "\003(\0132#.zjchain.bls.protobuf.JoinElectInfo"
    "\"K\n\rShardToTxItem\022\023\n\013sharding_id\030\001 \001(\r\022\017"
    "\n\007heights\030\002 \003(\004\022\024\n\014block_height\030\003 \001(\004\"M\n"
    "\017StatisticTxItem\022\023\n\013sharding_id\030\001 \001(\r\022\017\n"
    "\007heights\030\002 \003(\004\022\024\n\014block_height\030\003 \001(\004\"\252\001\n"
    "\013ToTxMessage\022\024\n\014heights_hash\030\001 \001(\014\0224\n\003to"
    "s\030\002 \003(\0132\'.zjchain.pools.protobuf.ToTxMes"
    "sageItem\0229\n\nto_heights\030\003 \001(\0132%.zjchain.p"
    "ools.protobuf.ShardToTxItem\022\024\n\014elect_hei"
    "ght\030\004 \001(\004\"E\n\016PoolLatestInfo\022\016\n\006height\030\001 "
    "\001(\004\022\014\n\004hash\030\002 \001(\014\022\025\n\rsynced_height\030\003 \001(\004"
    "\" \n\010AreaInfo\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\201\001\n\021P"
    "oolStatisticItem\022\020\n\010tx_count\030\001 \003(\r\022\016\n\006st"
    "okes\030\002 \003(\004\022\024\n\014elect_height\030\003 \001(\004\0224\n\narea"
    "_point\030\004 \003(\0132 .zjchain.pools.protobuf.Ar"
    "eaInfo\"P\n\rJoinElectNode\022\016\n\006pubkey\030\001 \001(\014\022"
    "\r\n\005stoke\030\002 \001(\004\022\r\n\005shard\030\003 \001(\r\022\021\n\telect_p"
    "os\030\004 \001(\005\"a\n\027CrossShardStatisticItem\022\021\n\ts"
    "rc_shard\030\001 \001(\r\022\020\n\010src_pool\030\002 \001(\r\022\016\n\006heig"
    "ht\030\003 \001(\004\022\021\n\tdes_shard\030\004 \001(\r\"m\n\023CrossShar"
    "dStatistic\022@\n\007crosses\030\001 \003(\0132/.zjchain.po"
    "ols.protobuf.CrossShardStatisticItem\022\024\n\014"
    "elect_height\030\002 \001(\004\"\332\002\n\016ElectStatistic\022=\n"
    "\nstatistics\030\001 \003(\0132).zjchain.pools.protob"
    "uf.PoolStatisticItem\0228\n\007heights\030\002 \001(\0132\'."
    "zjchain.pools.protobuf.StatisticTxItem\022\?"
    "\n\020join_elect_nodes\030\003 \003(\0132%.zjchain.pools"
    ".protobuf.JoinElectNode\022\023\n\013sharding_id\030\004"
    " \001(\r\022\022\n\ngas_amount\030\005 \001(\004\022\023\n\013lof_leaders\030"
    "\006 \003(\r\022:\n\005cross\030\007 \001(\0132+.zjchain.pools.pro"
    "tobuf.CrossShardStatistic\022\024\n\014elect_heigh"
    "t\030\010 \001(\004\"P\n\022SyncPoolsMaxHeight\022\022\n\003req\030\001 \001"
    "(\010:\005false\022\017\n\007heights\030\002 \003(\004\022\025\n\rcross_heig"
    "hts\030\003 \003(\004\"e\n\021InvalidBftMessage\022\022\n\npool_i"
    "ndex\030\001 \001(\r\022\013\n\003gid\030\002 \001(\014\022\014\n\004hash\030\003 \001(\014\022\021\n"
    "\tprecommit\030\004 \001(\010\022\016\n\006height\030\005 \001(\004\"\240\002\n\tTxM"
    "essage\022\017\n\007version\030\001 \001(\r\022\013\n\003gid\030\002 \001(\014\022\016\n\006"
    "pubkey\030\003 \001(\014\022\021\n\tgas_limit\030\004 \001(\004\022\021\n\tgas_p"
    "rice\030\005 \001(\004\022\013\n\003key\030\006 \001(\014\022\r\n\005value\030\007 \001(\014\022\n"
    "\n\002to\030\010 \001(\014\022\016\n\006amount\030\t \001(\004\022;\n\004step\030\n \001(\016"
    "2 .zjchain.pools.protobuf.StepType:\013kNor"
    "malFrom\022\033\n\023contract_prepayment\030\013 \001(\004\022\025\n\r"
    "contract_code\030\014 \001(\014\022\026\n\016contract_input\030\r "
    "\001(\014*\363\002\n\010StepType\022\017\n\013kNormalFrom\020\000\022\r\n\tkNo"
    "rmalTo\020\001\022\034\n\030kConsensusRootElectShard\020\002\022\033"
    "\n\027kConsensusRootTimeBlock\020\003\022!\n\035kConsensu"
    "sCreateGenesisAcount\020\004\022\026\n\022kConsensusLoca"
    "lTos\020\005\022\023\n\017kContractCreate\020\006\022\032\n\026kContract"
    "GasPrepayment\020\007\022\023\n\017kContractExcute\020\010\022\026\n\022"
    "kRootCreateAddress\020\t\022#\n\037kRootCreateAddre"
    "ssCrossSharding\020\013\022\016\n\nkStatistic\020\014\022\016\n\nkJo"
    "inElect\020\r\022\022\n\016kCreateLibrary\020\016\022\n\n\006kCross\020"
    "\017\022\016\n\nkRootCross\020\020", 2457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/pools.proto", &protobuf_RegisterTypes);
  ToTxHeights::default_instance_ = new ToTxHeights();
  ToTxMessageItem::default_instance_ = new ToTxMessageItem();
  ShardToTxItem::default_instance_ = new ShardToTxItem();
  StatisticTxItem::default_instance_ = new StatisticTxItem();
  ToTxMessage::default_instance_ = new ToTxMessage();
  PoolLatestInfo::default_instance_ = new PoolLatestInfo();
  AreaInfo::default_instance_ = new AreaInfo();
  PoolStatisticItem::default_instance_ = new PoolStatisticItem();
  JoinElectNode::default_instance_ = new JoinElectNode();
  CrossShardStatisticItem::default_instance_ = new CrossShardStatisticItem();
  CrossShardStatistic::default_instance_ = new CrossShardStatistic();
  ElectStatistic::default_instance_ = new ElectStatistic();
  SyncPoolsMaxHeight::default_instance_ = new SyncPoolsMaxHeight();
  InvalidBftMessage::default_instance_ = new InvalidBftMessage();
  TxMessage::default_instance_ = new TxMessage();
  ToTxHeights::default_instance_->InitAsDefaultInstance();
  ToTxMessageItem::default_instance_->InitAsDefaultInstance();
  ShardToTxItem::default_instance_->InitAsDefaultInstance();
  StatisticTxItem::default_instance_->InitAsDefaultInstance();
  ToTxMessage::default_instance_->InitAsDefaultInstance();
  PoolLatestInfo::default_instance_->InitAsDefaultInstance();
  AreaInfo::default_instance_->InitAsDefaultInstance();
  PoolStatisticItem::default_instance_->InitAsDefaultInstance();
  JoinElectNode::default_instance_->InitAsDefaultInstance();
  CrossShardStatisticItem::default_instance_->InitAsDefaultInstance();
  CrossShardStatistic::default_instance_->InitAsDefaultInstance();
  ElectStatistic::default_instance_->InitAsDefaultInstance();
  SyncPoolsMaxHeight::default_instance_->InitAsDefaultInstance();
  InvalidBftMessage::default_instance_->InitAsDefaultInstance();
  TxMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protos_2fpools_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protos_2fpools_2eproto {
  StaticDescriptorInitializer_protos_2fpools_2eproto() {
    protobuf_AddDesc_protos_2fpools_2eproto();
  }
} static_descriptor_initializer_protos_2fpools_2eproto_;
const ::google::protobuf::EnumDescriptor* StepType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepType_descriptor_;
}
bool StepType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ToTxHeights::kShardingIdFieldNumber;
const int ToTxHeights::kHeightsFieldNumber;
const int ToTxHeights::kBlockHeightFieldNumber;
const int ToTxHeights::kTosHashFieldNumber;
const int ToTxHeights::kLeaderIdFieldNumber;
const int ToTxHeights::kElelctHeightFieldNumber;
const int ToTxHeights::kTxCountFieldNumber;
#endif  // !_MSC_VER

ToTxHeights::ToTxHeights()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToTxHeights::InitAsDefaultInstance() {
}

ToTxHeights::ToTxHeights(const ToTxHeights& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToTxHeights::SharedCtor() {
  _cached_size_ = 0;
  sharding_id_ = 0u;
  block_height_ = GOOGLE_ULONGLONG(0);
  tos_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elelct_height_ = GOOGLE_ULONGLONG(0);
  tx_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToTxHeights::~ToTxHeights() {
  SharedDtor();
}

void ToTxHeights::SharedDtor() {
  if (tos_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete tos_hash_;
  }
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (this != default_instance_) {
  }
}

void ToTxHeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToTxHeights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToTxHeights_descriptor_;
}

const ToTxHeights& ToTxHeights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

ToTxHeights* ToTxHeights::default_instance_ = NULL;

ToTxHeights* ToTxHeights::New() const {
  return new ToTxHeights;
}

void ToTxHeights::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sharding_id_ = 0u;
    block_height_ = GOOGLE_ULONGLONG(0);
    if (has_tos_hash()) {
      if (tos_hash_ != &::google::protobuf::internal::kEmptyString) {
        tos_hash_->clear();
      }
    }
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
        leader_id_->clear();
      }
    }
    elelct_height_ = GOOGLE_ULONGLONG(0);
    tx_count_ = 0u;
  }
  heights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToTxHeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sharding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharding_id_)));
          set_has_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        break;
      }

      // repeated uint64 heights = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        if (input->ExpectTag(24)) goto parse_block_height;
        break;
      }

      // optional uint64 block_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_height_)));
          set_has_block_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tos_hash;
        break;
      }

      // optional bytes tos_hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tos_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tos_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leader_id;
        break;
      }

      // optional bytes leader_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_elelct_height;
        break;
      }

      // optional uint64 elelct_height = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elelct_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elelct_height_)));
          set_has_elelct_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tx_count;
        break;
      }

      // optional uint32 tx_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_count_)));
          set_has_tx_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToTxHeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sharding_id = 1;
  if (has_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sharding_id(), output);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->heights(i), output);
  }

  // optional uint64 block_height = 3;
  if (has_block_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->block_height(), output);
  }

  // optional bytes tos_hash = 4;
  if (has_tos_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->tos_hash(), output);
  }

  // optional bytes leader_id = 5;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->leader_id(), output);
  }

  // optional uint64 elelct_height = 6;
  if (has_elelct_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->elelct_height(), output);
  }

  // optional uint32 tx_count = 7;
  if (has_tx_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToTxHeights::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sharding_id = 1;
  if (has_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sharding_id(), target);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->heights(i), target);
  }

  // optional uint64 block_height = 3;
  if (has_block_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->block_height(), target);
  }

  // optional bytes tos_hash = 4;
  if (has_tos_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->tos_hash(), target);
  }

  // optional bytes leader_id = 5;
  if (has_leader_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->leader_id(), target);
  }

  // optional uint64 elelct_height = 6;
  if (has_elelct_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->elelct_height(), target);
  }

  // optional uint32 tx_count = 7;
  if (has_tx_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToTxHeights::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sharding_id = 1;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharding_id());
    }

    // optional uint64 block_height = 3;
    if (has_block_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_height());
    }

    // optional bytes tos_hash = 4;
    if (has_tos_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tos_hash());
    }

    // optional bytes leader_id = 5;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_id());
    }

    // optional uint64 elelct_height = 6;
    if (has_elelct_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elelct_height());
    }

    // optional uint32 tx_count = 7;
    if (has_tx_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_count());
    }

  }
  // repeated uint64 heights = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heights(i));
    }
    total_size += 1 * this->heights_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToTxHeights::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToTxHeights* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToTxHeights*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToTxHeights::MergeFrom(const ToTxHeights& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sharding_id()) {
      set_sharding_id(from.sharding_id());
    }
    if (from.has_block_height()) {
      set_block_height(from.block_height());
    }
    if (from.has_tos_hash()) {
      set_tos_hash(from.tos_hash());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_elelct_height()) {
      set_elelct_height(from.elelct_height());
    }
    if (from.has_tx_count()) {
      set_tx_count(from.tx_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToTxHeights::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToTxHeights::CopyFrom(const ToTxHeights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToTxHeights::IsInitialized() const {

  return true;
}

void ToTxHeights::Swap(ToTxHeights* other) {
  if (other != this) {
    std::swap(sharding_id_, other->sharding_id_);
    heights_.Swap(&other->heights_);
    std::swap(block_height_, other->block_height_);
    std::swap(tos_hash_, other->tos_hash_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(elelct_height_, other->elelct_height_);
    std::swap(tx_count_, other->tx_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToTxHeights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToTxHeights_descriptor_;
  metadata.reflection = ToTxHeights_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToTxMessageItem::kDesFieldNumber;
const int ToTxMessageItem::kAmountFieldNumber;
const int ToTxMessageItem::kShardingIdFieldNumber;
const int ToTxMessageItem::kPoolIndexFieldNumber;
const int ToTxMessageItem::kStepFieldNumber;
const int ToTxMessageItem::kLibraryBytesFieldNumber;
const int ToTxMessageItem::kJoinInfosFieldNumber;
#endif  // !_MSC_VER

ToTxMessageItem::ToTxMessageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToTxMessageItem::InitAsDefaultInstance() {
}

ToTxMessageItem::ToTxMessageItem(const ToTxMessageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToTxMessageItem::SharedCtor() {
  _cached_size_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  sharding_id_ = 0u;
  pool_index_ = 0u;
  step_ = 0;
  library_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToTxMessageItem::~ToTxMessageItem() {
  SharedDtor();
}

void ToTxMessageItem::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (library_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete library_bytes_;
  }
  if (this != default_instance_) {
  }
}

void ToTxMessageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToTxMessageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToTxMessageItem_descriptor_;
}

const ToTxMessageItem& ToTxMessageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

ToTxMessageItem* ToTxMessageItem::default_instance_ = NULL;

ToTxMessageItem* ToTxMessageItem::New() const {
  return new ToTxMessageItem;
}

void ToTxMessageItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    sharding_id_ = 0u;
    pool_index_ = 0u;
    step_ = 0;
    if (has_library_bytes()) {
      if (library_bytes_ != &::google::protobuf::internal::kEmptyString) {
        library_bytes_->clear();
      }
    }
  }
  join_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToTxMessageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes des = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sharding_id;
        break;
      }

      // optional uint32 sharding_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharding_id_)));
          set_has_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pool_index;
        break;
      }

      // optional uint32 pool_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
          set_has_pool_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_step;
        break;
      }

      // optional int32 step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_library_bytes;
        break;
      }

      // optional bytes library_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_library_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_library_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_join_infos;
        break;
      }

      // repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_join_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_join_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToTxMessageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes des = 1;
  if (has_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->des(), output);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional uint32 sharding_id = 3;
  if (has_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sharding_id(), output);
  }

  // optional uint32 pool_index = 4;
  if (has_pool_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pool_index(), output);
  }

  // optional int32 step = 5;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->step(), output);
  }

  // optional bytes library_bytes = 6;
  if (has_library_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->library_bytes(), output);
  }

  // repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
  for (int i = 0; i < this->join_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->join_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToTxMessageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes des = 1;
  if (has_des()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->des(), target);
  }

  // optional uint64 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // optional uint32 sharding_id = 3;
  if (has_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sharding_id(), target);
  }

  // optional uint32 pool_index = 4;
  if (has_pool_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pool_index(), target);
  }

  // optional int32 step = 5;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->step(), target);
  }

  // optional bytes library_bytes = 6;
  if (has_library_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->library_bytes(), target);
  }

  // repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
  for (int i = 0; i < this->join_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->join_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToTxMessageItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes des = 1;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 sharding_id = 3;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharding_id());
    }

    // optional uint32 pool_index = 4;
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

    // optional int32 step = 5;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional bytes library_bytes = 6;
    if (has_library_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->library_bytes());
    }

  }
  // repeated .zjchain.bls.protobuf.JoinElectInfo join_infos = 7;
  total_size += 1 * this->join_infos_size();
  for (int i = 0; i < this->join_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->join_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToTxMessageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToTxMessageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToTxMessageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToTxMessageItem::MergeFrom(const ToTxMessageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  join_infos_.MergeFrom(from.join_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_sharding_id()) {
      set_sharding_id(from.sharding_id());
    }
    if (from.has_pool_index()) {
      set_pool_index(from.pool_index());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_library_bytes()) {
      set_library_bytes(from.library_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToTxMessageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToTxMessageItem::CopyFrom(const ToTxMessageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToTxMessageItem::IsInitialized() const {

  return true;
}

void ToTxMessageItem::Swap(ToTxMessageItem* other) {
  if (other != this) {
    std::swap(des_, other->des_);
    std::swap(amount_, other->amount_);
    std::swap(sharding_id_, other->sharding_id_);
    std::swap(pool_index_, other->pool_index_);
    std::swap(step_, other->step_);
    std::swap(library_bytes_, other->library_bytes_);
    join_infos_.Swap(&other->join_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToTxMessageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToTxMessageItem_descriptor_;
  metadata.reflection = ToTxMessageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardToTxItem::kShardingIdFieldNumber;
const int ShardToTxItem::kHeightsFieldNumber;
const int ShardToTxItem::kBlockHeightFieldNumber;
#endif  // !_MSC_VER

ShardToTxItem::ShardToTxItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShardToTxItem::InitAsDefaultInstance() {
}

ShardToTxItem::ShardToTxItem(const ShardToTxItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShardToTxItem::SharedCtor() {
  _cached_size_ = 0;
  sharding_id_ = 0u;
  block_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardToTxItem::~ShardToTxItem() {
  SharedDtor();
}

void ShardToTxItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardToTxItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardToTxItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardToTxItem_descriptor_;
}

const ShardToTxItem& ShardToTxItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

ShardToTxItem* ShardToTxItem::default_instance_ = NULL;

ShardToTxItem* ShardToTxItem::New() const {
  return new ShardToTxItem;
}

void ShardToTxItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sharding_id_ = 0u;
    block_height_ = GOOGLE_ULONGLONG(0);
  }
  heights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardToTxItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sharding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharding_id_)));
          set_has_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        break;
      }

      // repeated uint64 heights = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        if (input->ExpectTag(24)) goto parse_block_height;
        break;
      }

      // optional uint64 block_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_height_)));
          set_has_block_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShardToTxItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sharding_id = 1;
  if (has_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sharding_id(), output);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->heights(i), output);
  }

  // optional uint64 block_height = 3;
  if (has_block_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->block_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShardToTxItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sharding_id = 1;
  if (has_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sharding_id(), target);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->heights(i), target);
  }

  // optional uint64 block_height = 3;
  if (has_block_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->block_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShardToTxItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sharding_id = 1;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharding_id());
    }

    // optional uint64 block_height = 3;
    if (has_block_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_height());
    }

  }
  // repeated uint64 heights = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heights(i));
    }
    total_size += 1 * this->heights_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardToTxItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardToTxItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardToTxItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardToTxItem::MergeFrom(const ShardToTxItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sharding_id()) {
      set_sharding_id(from.sharding_id());
    }
    if (from.has_block_height()) {
      set_block_height(from.block_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardToTxItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardToTxItem::CopyFrom(const ShardToTxItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardToTxItem::IsInitialized() const {

  return true;
}

void ShardToTxItem::Swap(ShardToTxItem* other) {
  if (other != this) {
    std::swap(sharding_id_, other->sharding_id_);
    heights_.Swap(&other->heights_);
    std::swap(block_height_, other->block_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardToTxItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardToTxItem_descriptor_;
  metadata.reflection = ShardToTxItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticTxItem::kShardingIdFieldNumber;
const int StatisticTxItem::kHeightsFieldNumber;
const int StatisticTxItem::kBlockHeightFieldNumber;
#endif  // !_MSC_VER

StatisticTxItem::StatisticTxItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticTxItem::InitAsDefaultInstance() {
}

StatisticTxItem::StatisticTxItem(const StatisticTxItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticTxItem::SharedCtor() {
  _cached_size_ = 0;
  sharding_id_ = 0u;
  block_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticTxItem::~StatisticTxItem() {
  SharedDtor();
}

void StatisticTxItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticTxItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticTxItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticTxItem_descriptor_;
}

const StatisticTxItem& StatisticTxItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

StatisticTxItem* StatisticTxItem::default_instance_ = NULL;

StatisticTxItem* StatisticTxItem::New() const {
  return new StatisticTxItem;
}

void StatisticTxItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sharding_id_ = 0u;
    block_height_ = GOOGLE_ULONGLONG(0);
  }
  heights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticTxItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sharding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharding_id_)));
          set_has_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        break;
      }

      // repeated uint64 heights = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        if (input->ExpectTag(24)) goto parse_block_height;
        break;
      }

      // optional uint64 block_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_height_)));
          set_has_block_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticTxItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sharding_id = 1;
  if (has_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sharding_id(), output);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->heights(i), output);
  }

  // optional uint64 block_height = 3;
  if (has_block_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->block_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticTxItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sharding_id = 1;
  if (has_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sharding_id(), target);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->heights(i), target);
  }

  // optional uint64 block_height = 3;
  if (has_block_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->block_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticTxItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sharding_id = 1;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharding_id());
    }

    // optional uint64 block_height = 3;
    if (has_block_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_height());
    }

  }
  // repeated uint64 heights = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heights(i));
    }
    total_size += 1 * this->heights_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticTxItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticTxItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticTxItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticTxItem::MergeFrom(const StatisticTxItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sharding_id()) {
      set_sharding_id(from.sharding_id());
    }
    if (from.has_block_height()) {
      set_block_height(from.block_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticTxItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticTxItem::CopyFrom(const StatisticTxItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticTxItem::IsInitialized() const {

  return true;
}

void StatisticTxItem::Swap(StatisticTxItem* other) {
  if (other != this) {
    std::swap(sharding_id_, other->sharding_id_);
    heights_.Swap(&other->heights_);
    std::swap(block_height_, other->block_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticTxItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticTxItem_descriptor_;
  metadata.reflection = StatisticTxItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToTxMessage::kHeightsHashFieldNumber;
const int ToTxMessage::kTosFieldNumber;
const int ToTxMessage::kToHeightsFieldNumber;
const int ToTxMessage::kElectHeightFieldNumber;
#endif  // !_MSC_VER

ToTxMessage::ToTxMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToTxMessage::InitAsDefaultInstance() {
  to_heights_ = const_cast< ::zjchain::pools::protobuf::ShardToTxItem*>(&::zjchain::pools::protobuf::ShardToTxItem::default_instance());
}

ToTxMessage::ToTxMessage(const ToTxMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToTxMessage::SharedCtor() {
  _cached_size_ = 0;
  heights_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_heights_ = NULL;
  elect_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToTxMessage::~ToTxMessage() {
  SharedDtor();
}

void ToTxMessage::SharedDtor() {
  if (heights_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete heights_hash_;
  }
  if (this != default_instance_) {
    delete to_heights_;
  }
}

void ToTxMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToTxMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToTxMessage_descriptor_;
}

const ToTxMessage& ToTxMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

ToTxMessage* ToTxMessage::default_instance_ = NULL;

ToTxMessage* ToTxMessage::New() const {
  return new ToTxMessage;
}

void ToTxMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_heights_hash()) {
      if (heights_hash_ != &::google::protobuf::internal::kEmptyString) {
        heights_hash_->clear();
      }
    }
    if (has_to_heights()) {
      if (to_heights_ != NULL) to_heights_->::zjchain::pools::protobuf::ShardToTxItem::Clear();
    }
    elect_height_ = GOOGLE_ULONGLONG(0);
  }
  tos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToTxMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes heights_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_heights_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tos;
        break;
      }

      // repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tos;
        if (input->ExpectTag(26)) goto parse_to_heights;
        break;
      }

      // optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_heights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_heights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToTxMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes heights_hash = 1;
  if (has_heights_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->heights_hash(), output);
  }

  // repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
  for (int i = 0; i < this->tos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tos(i), output);
  }

  // optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
  if (has_to_heights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->to_heights(), output);
  }

  // optional uint64 elect_height = 4;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->elect_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToTxMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes heights_hash = 1;
  if (has_heights_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->heights_hash(), target);
  }

  // repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
  for (int i = 0; i < this->tos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tos(i), target);
  }

  // optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
  if (has_to_heights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->to_heights(), target);
  }

  // optional uint64 elect_height = 4;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->elect_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToTxMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes heights_hash = 1;
    if (has_heights_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->heights_hash());
    }

    // optional .zjchain.pools.protobuf.ShardToTxItem to_heights = 3;
    if (has_to_heights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_heights());
    }

    // optional uint64 elect_height = 4;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

  }
  // repeated .zjchain.pools.protobuf.ToTxMessageItem tos = 2;
  total_size += 1 * this->tos_size();
  for (int i = 0; i < this->tos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToTxMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToTxMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToTxMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToTxMessage::MergeFrom(const ToTxMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  tos_.MergeFrom(from.tos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heights_hash()) {
      set_heights_hash(from.heights_hash());
    }
    if (from.has_to_heights()) {
      mutable_to_heights()->::zjchain::pools::protobuf::ShardToTxItem::MergeFrom(from.to_heights());
    }
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToTxMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToTxMessage::CopyFrom(const ToTxMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToTxMessage::IsInitialized() const {

  return true;
}

void ToTxMessage::Swap(ToTxMessage* other) {
  if (other != this) {
    std::swap(heights_hash_, other->heights_hash_);
    tos_.Swap(&other->tos_);
    std::swap(to_heights_, other->to_heights_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToTxMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToTxMessage_descriptor_;
  metadata.reflection = ToTxMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoolLatestInfo::kHeightFieldNumber;
const int PoolLatestInfo::kHashFieldNumber;
const int PoolLatestInfo::kSyncedHeightFieldNumber;
#endif  // !_MSC_VER

PoolLatestInfo::PoolLatestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoolLatestInfo::InitAsDefaultInstance() {
}

PoolLatestInfo::PoolLatestInfo(const PoolLatestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoolLatestInfo::SharedCtor() {
  _cached_size_ = 0;
  height_ = GOOGLE_ULONGLONG(0);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  synced_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolLatestInfo::~PoolLatestInfo() {
  SharedDtor();
}

void PoolLatestInfo::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void PoolLatestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolLatestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolLatestInfo_descriptor_;
}

const PoolLatestInfo& PoolLatestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

PoolLatestInfo* PoolLatestInfo::default_instance_ = NULL;

PoolLatestInfo* PoolLatestInfo::New() const {
  return new PoolLatestInfo;
}

void PoolLatestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    synced_height_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolLatestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_synced_height;
        break;
      }

      // optional uint64 synced_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synced_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &synced_height_)));
          set_has_synced_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoolLatestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->height(), output);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hash(), output);
  }

  // optional uint64 synced_height = 3;
  if (has_synced_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->synced_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoolLatestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->height(), target);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // optional uint64 synced_height = 3;
  if (has_synced_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->synced_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoolLatestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional bytes hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // optional uint64 synced_height = 3;
    if (has_synced_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->synced_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolLatestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolLatestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolLatestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolLatestInfo::MergeFrom(const PoolLatestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_synced_height()) {
      set_synced_height(from.synced_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolLatestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolLatestInfo::CopyFrom(const PoolLatestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolLatestInfo::IsInitialized() const {

  return true;
}

void PoolLatestInfo::Swap(PoolLatestInfo* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(hash_, other->hash_);
    std::swap(synced_height_, other->synced_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolLatestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolLatestInfo_descriptor_;
  metadata.reflection = PoolLatestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreaInfo::kXFieldNumber;
const int AreaInfo::kYFieldNumber;
#endif  // !_MSC_VER

AreaInfo::AreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AreaInfo::InitAsDefaultInstance() {
}

AreaInfo::AreaInfo(const AreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AreaInfo::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreaInfo::~AreaInfo() {
  SharedDtor();
}

void AreaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaInfo_descriptor_;
}

const AreaInfo& AreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

AreaInfo* AreaInfo::default_instance_ = NULL;

AreaInfo* AreaInfo::New() const {
  return new AreaInfo;
}

void AreaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AreaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreaInfo::MergeFrom(const AreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaInfo::CopyFrom(const AreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaInfo::IsInitialized() const {

  return true;
}

void AreaInfo::Swap(AreaInfo* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreaInfo_descriptor_;
  metadata.reflection = AreaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoolStatisticItem::kTxCountFieldNumber;
const int PoolStatisticItem::kStokesFieldNumber;
const int PoolStatisticItem::kElectHeightFieldNumber;
const int PoolStatisticItem::kAreaPointFieldNumber;
#endif  // !_MSC_VER

PoolStatisticItem::PoolStatisticItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoolStatisticItem::InitAsDefaultInstance() {
}

PoolStatisticItem::PoolStatisticItem(const PoolStatisticItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoolStatisticItem::SharedCtor() {
  _cached_size_ = 0;
  elect_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolStatisticItem::~PoolStatisticItem() {
  SharedDtor();
}

void PoolStatisticItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolStatisticItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolStatisticItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolStatisticItem_descriptor_;
}

const PoolStatisticItem& PoolStatisticItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

PoolStatisticItem* PoolStatisticItem::default_instance_ = NULL;

PoolStatisticItem* PoolStatisticItem::New() const {
  return new PoolStatisticItem;
}

void PoolStatisticItem::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    elect_height_ = GOOGLE_ULONGLONG(0);
  }
  tx_count_.Clear();
  stokes_.Clear();
  area_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolStatisticItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 tx_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_tx_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tx_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_tx_count;
        if (input->ExpectTag(16)) goto parse_stokes;
        break;
      }

      // repeated uint64 stokes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stokes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_stokes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stokes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stokes;
        if (input->ExpectTag(24)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_area_point;
        break;
      }

      // repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_area_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoolStatisticItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 tx_count = 1;
  for (int i = 0; i < this->tx_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->tx_count(i), output);
  }

  // repeated uint64 stokes = 2;
  for (int i = 0; i < this->stokes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->stokes(i), output);
  }

  // optional uint64 elect_height = 3;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->elect_height(), output);
  }

  // repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
  for (int i = 0; i < this->area_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->area_point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoolStatisticItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 tx_count = 1;
  for (int i = 0; i < this->tx_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->tx_count(i), target);
  }

  // repeated uint64 stokes = 2;
  for (int i = 0; i < this->stokes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->stokes(i), target);
  }

  // optional uint64 elect_height = 3;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->elect_height(), target);
  }

  // repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
  for (int i = 0; i < this->area_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->area_point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoolStatisticItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 elect_height = 3;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

  }
  // repeated uint32 tx_count = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->tx_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tx_count(i));
    }
    total_size += 1 * this->tx_count_size() + data_size;
  }

  // repeated uint64 stokes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stokes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stokes(i));
    }
    total_size += 1 * this->stokes_size() + data_size;
  }

  // repeated .zjchain.pools.protobuf.AreaInfo area_point = 4;
  total_size += 1 * this->area_point_size();
  for (int i = 0; i < this->area_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area_point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolStatisticItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolStatisticItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolStatisticItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolStatisticItem::MergeFrom(const PoolStatisticItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  tx_count_.MergeFrom(from.tx_count_);
  stokes_.MergeFrom(from.stokes_);
  area_point_.MergeFrom(from.area_point_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolStatisticItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolStatisticItem::CopyFrom(const PoolStatisticItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolStatisticItem::IsInitialized() const {

  return true;
}

void PoolStatisticItem::Swap(PoolStatisticItem* other) {
  if (other != this) {
    tx_count_.Swap(&other->tx_count_);
    stokes_.Swap(&other->stokes_);
    std::swap(elect_height_, other->elect_height_);
    area_point_.Swap(&other->area_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolStatisticItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolStatisticItem_descriptor_;
  metadata.reflection = PoolStatisticItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinElectNode::kPubkeyFieldNumber;
const int JoinElectNode::kStokeFieldNumber;
const int JoinElectNode::kShardFieldNumber;
const int JoinElectNode::kElectPosFieldNumber;
#endif  // !_MSC_VER

JoinElectNode::JoinElectNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinElectNode::InitAsDefaultInstance() {
}

JoinElectNode::JoinElectNode(const JoinElectNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinElectNode::SharedCtor() {
  _cached_size_ = 0;
  pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stoke_ = GOOGLE_ULONGLONG(0);
  shard_ = 0u;
  elect_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinElectNode::~JoinElectNode() {
  SharedDtor();
}

void JoinElectNode::SharedDtor() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (this != default_instance_) {
  }
}

void JoinElectNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinElectNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinElectNode_descriptor_;
}

const JoinElectNode& JoinElectNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

JoinElectNode* JoinElectNode::default_instance_ = NULL;

JoinElectNode* JoinElectNode::New() const {
  return new JoinElectNode;
}

void JoinElectNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pubkey()) {
      if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
        pubkey_->clear();
      }
    }
    stoke_ = GOOGLE_ULONGLONG(0);
    shard_ = 0u;
    elect_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinElectNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pubkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stoke;
        break;
      }

      // optional uint64 stoke = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stoke_)));
          set_has_stoke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shard;
        break;
      }

      // optional uint32 shard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elect_pos;
        break;
      }

      // optional int32 elect_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elect_pos_)));
          set_has_elect_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinElectNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes pubkey = 1;
  if (has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->pubkey(), output);
  }

  // optional uint64 stoke = 2;
  if (has_stoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stoke(), output);
  }

  // optional uint32 shard = 3;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shard(), output);
  }

  // optional int32 elect_pos = 4;
  if (has_elect_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->elect_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinElectNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes pubkey = 1;
  if (has_pubkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pubkey(), target);
  }

  // optional uint64 stoke = 2;
  if (has_stoke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stoke(), target);
  }

  // optional uint32 shard = 3;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shard(), target);
  }

  // optional int32 elect_pos = 4;
  if (has_elect_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->elect_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinElectNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes pubkey = 1;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional uint64 stoke = 2;
    if (has_stoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stoke());
    }

    // optional uint32 shard = 3;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }

    // optional int32 elect_pos = 4;
    if (has_elect_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elect_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinElectNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinElectNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinElectNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinElectNode::MergeFrom(const JoinElectNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pubkey()) {
      set_pubkey(from.pubkey());
    }
    if (from.has_stoke()) {
      set_stoke(from.stoke());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_elect_pos()) {
      set_elect_pos(from.elect_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinElectNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinElectNode::CopyFrom(const JoinElectNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinElectNode::IsInitialized() const {

  return true;
}

void JoinElectNode::Swap(JoinElectNode* other) {
  if (other != this) {
    std::swap(pubkey_, other->pubkey_);
    std::swap(stoke_, other->stoke_);
    std::swap(shard_, other->shard_);
    std::swap(elect_pos_, other->elect_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinElectNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinElectNode_descriptor_;
  metadata.reflection = JoinElectNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrossShardStatisticItem::kSrcShardFieldNumber;
const int CrossShardStatisticItem::kSrcPoolFieldNumber;
const int CrossShardStatisticItem::kHeightFieldNumber;
const int CrossShardStatisticItem::kDesShardFieldNumber;
#endif  // !_MSC_VER

CrossShardStatisticItem::CrossShardStatisticItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrossShardStatisticItem::InitAsDefaultInstance() {
}

CrossShardStatisticItem::CrossShardStatisticItem(const CrossShardStatisticItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrossShardStatisticItem::SharedCtor() {
  _cached_size_ = 0;
  src_shard_ = 0u;
  src_pool_ = 0u;
  height_ = GOOGLE_ULONGLONG(0);
  des_shard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossShardStatisticItem::~CrossShardStatisticItem() {
  SharedDtor();
}

void CrossShardStatisticItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrossShardStatisticItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossShardStatisticItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossShardStatisticItem_descriptor_;
}

const CrossShardStatisticItem& CrossShardStatisticItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

CrossShardStatisticItem* CrossShardStatisticItem::default_instance_ = NULL;

CrossShardStatisticItem* CrossShardStatisticItem::New() const {
  return new CrossShardStatisticItem;
}

void CrossShardStatisticItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_shard_ = 0u;
    src_pool_ = 0u;
    height_ = GOOGLE_ULONGLONG(0);
    des_shard_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossShardStatisticItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 src_shard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_shard_)));
          set_has_src_shard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_pool;
        break;
      }

      // optional uint32 src_pool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_pool_)));
          set_has_src_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_des_shard;
        break;
      }

      // optional uint32 des_shard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_des_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &des_shard_)));
          set_has_des_shard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrossShardStatisticItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 src_shard = 1;
  if (has_src_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_shard(), output);
  }

  // optional uint32 src_pool = 2;
  if (has_src_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_pool(), output);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // optional uint32 des_shard = 4;
  if (has_des_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->des_shard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrossShardStatisticItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 src_shard = 1;
  if (has_src_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_shard(), target);
  }

  // optional uint32 src_pool = 2;
  if (has_src_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_pool(), target);
  }

  // optional uint64 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // optional uint32 des_shard = 4;
  if (has_des_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->des_shard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrossShardStatisticItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 src_shard = 1;
    if (has_src_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_shard());
    }

    // optional uint32 src_pool = 2;
    if (has_src_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_pool());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional uint32 des_shard = 4;
    if (has_des_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->des_shard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossShardStatisticItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossShardStatisticItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossShardStatisticItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossShardStatisticItem::MergeFrom(const CrossShardStatisticItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_shard()) {
      set_src_shard(from.src_shard());
    }
    if (from.has_src_pool()) {
      set_src_pool(from.src_pool());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_des_shard()) {
      set_des_shard(from.des_shard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossShardStatisticItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossShardStatisticItem::CopyFrom(const CrossShardStatisticItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossShardStatisticItem::IsInitialized() const {

  return true;
}

void CrossShardStatisticItem::Swap(CrossShardStatisticItem* other) {
  if (other != this) {
    std::swap(src_shard_, other->src_shard_);
    std::swap(src_pool_, other->src_pool_);
    std::swap(height_, other->height_);
    std::swap(des_shard_, other->des_shard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossShardStatisticItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossShardStatisticItem_descriptor_;
  metadata.reflection = CrossShardStatisticItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrossShardStatistic::kCrossesFieldNumber;
const int CrossShardStatistic::kElectHeightFieldNumber;
#endif  // !_MSC_VER

CrossShardStatistic::CrossShardStatistic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrossShardStatistic::InitAsDefaultInstance() {
}

CrossShardStatistic::CrossShardStatistic(const CrossShardStatistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrossShardStatistic::SharedCtor() {
  _cached_size_ = 0;
  elect_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossShardStatistic::~CrossShardStatistic() {
  SharedDtor();
}

void CrossShardStatistic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrossShardStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossShardStatistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossShardStatistic_descriptor_;
}

const CrossShardStatistic& CrossShardStatistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

CrossShardStatistic* CrossShardStatistic::default_instance_ = NULL;

CrossShardStatistic* CrossShardStatistic::New() const {
  return new CrossShardStatistic;
}

void CrossShardStatistic::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    elect_height_ = GOOGLE_ULONGLONG(0);
  }
  crosses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossShardStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crosses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crosses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_crosses;
        if (input->ExpectTag(16)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrossShardStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
  for (int i = 0; i < this->crosses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->crosses(i), output);
  }

  // optional uint64 elect_height = 2;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->elect_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrossShardStatistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
  for (int i = 0; i < this->crosses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->crosses(i), target);
  }

  // optional uint64 elect_height = 2;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->elect_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrossShardStatistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 elect_height = 2;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

  }
  // repeated .zjchain.pools.protobuf.CrossShardStatisticItem crosses = 1;
  total_size += 1 * this->crosses_size();
  for (int i = 0; i < this->crosses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crosses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossShardStatistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossShardStatistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossShardStatistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossShardStatistic::MergeFrom(const CrossShardStatistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  crosses_.MergeFrom(from.crosses_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossShardStatistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossShardStatistic::CopyFrom(const CrossShardStatistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossShardStatistic::IsInitialized() const {

  return true;
}

void CrossShardStatistic::Swap(CrossShardStatistic* other) {
  if (other != this) {
    crosses_.Swap(&other->crosses_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossShardStatistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossShardStatistic_descriptor_;
  metadata.reflection = CrossShardStatistic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElectStatistic::kStatisticsFieldNumber;
const int ElectStatistic::kHeightsFieldNumber;
const int ElectStatistic::kJoinElectNodesFieldNumber;
const int ElectStatistic::kShardingIdFieldNumber;
const int ElectStatistic::kGasAmountFieldNumber;
const int ElectStatistic::kLofLeadersFieldNumber;
const int ElectStatistic::kCrossFieldNumber;
const int ElectStatistic::kElectHeightFieldNumber;
#endif  // !_MSC_VER

ElectStatistic::ElectStatistic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElectStatistic::InitAsDefaultInstance() {
  heights_ = const_cast< ::zjchain::pools::protobuf::StatisticTxItem*>(&::zjchain::pools::protobuf::StatisticTxItem::default_instance());
  cross_ = const_cast< ::zjchain::pools::protobuf::CrossShardStatistic*>(&::zjchain::pools::protobuf::CrossShardStatistic::default_instance());
}

ElectStatistic::ElectStatistic(const ElectStatistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElectStatistic::SharedCtor() {
  _cached_size_ = 0;
  heights_ = NULL;
  sharding_id_ = 0u;
  gas_amount_ = GOOGLE_ULONGLONG(0);
  cross_ = NULL;
  elect_height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElectStatistic::~ElectStatistic() {
  SharedDtor();
}

void ElectStatistic::SharedDtor() {
  if (this != default_instance_) {
    delete heights_;
    delete cross_;
  }
}

void ElectStatistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElectStatistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElectStatistic_descriptor_;
}

const ElectStatistic& ElectStatistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

ElectStatistic* ElectStatistic::default_instance_ = NULL;

ElectStatistic* ElectStatistic::New() const {
  return new ElectStatistic;
}

void ElectStatistic::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_heights()) {
      if (heights_ != NULL) heights_->::zjchain::pools::protobuf::StatisticTxItem::Clear();
    }
    sharding_id_ = 0u;
    gas_amount_ = GOOGLE_ULONGLONG(0);
    if (has_cross()) {
      if (cross_ != NULL) cross_->::zjchain::pools::protobuf::CrossShardStatistic::Clear();
    }
    elect_height_ = GOOGLE_ULONGLONG(0);
  }
  statistics_.Clear();
  join_elect_nodes_.Clear();
  lof_leaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElectStatistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_statistics;
        if (input->ExpectTag(18)) goto parse_heights;
        break;
      }

      // optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_join_elect_nodes;
        break;
      }

      // repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_elect_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_join_elect_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_join_elect_nodes;
        if (input->ExpectTag(32)) goto parse_sharding_id;
        break;
      }

      // optional uint32 sharding_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharding_id_)));
          set_has_sharding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gas_amount;
        break;
      }

      // optional uint64 gas_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gas_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_amount_)));
          set_has_gas_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lof_leaders;
        break;
      }

      // repeated uint32 lof_leaders = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lof_leaders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_lof_leaders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lof_leaders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lof_leaders;
        if (input->ExpectTag(58)) goto parse_cross;
        break;
      }

      // optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cross:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cross()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_elect_height;
        break;
      }

      // optional uint64 elect_height = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
          set_has_elect_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElectStatistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
  for (int i = 0; i < this->statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statistics(i), output);
  }

  // optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
  if (has_heights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heights(), output);
  }

  // repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
  for (int i = 0; i < this->join_elect_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->join_elect_nodes(i), output);
  }

  // optional uint32 sharding_id = 4;
  if (has_sharding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sharding_id(), output);
  }

  // optional uint64 gas_amount = 5;
  if (has_gas_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gas_amount(), output);
  }

  // repeated uint32 lof_leaders = 6;
  for (int i = 0; i < this->lof_leaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->lof_leaders(i), output);
  }

  // optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
  if (has_cross()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cross(), output);
  }

  // optional uint64 elect_height = 8;
  if (has_elect_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->elect_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElectStatistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
  for (int i = 0; i < this->statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statistics(i), target);
  }

  // optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
  if (has_heights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heights(), target);
  }

  // repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
  for (int i = 0; i < this->join_elect_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->join_elect_nodes(i), target);
  }

  // optional uint32 sharding_id = 4;
  if (has_sharding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sharding_id(), target);
  }

  // optional uint64 gas_amount = 5;
  if (has_gas_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gas_amount(), target);
  }

  // repeated uint32 lof_leaders = 6;
  for (int i = 0; i < this->lof_leaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->lof_leaders(i), target);
  }

  // optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
  if (has_cross()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cross(), target);
  }

  // optional uint64 elect_height = 8;
  if (has_elect_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->elect_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElectStatistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .zjchain.pools.protobuf.StatisticTxItem heights = 2;
    if (has_heights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heights());
    }

    // optional uint32 sharding_id = 4;
    if (has_sharding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharding_id());
    }

    // optional uint64 gas_amount = 5;
    if (has_gas_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_amount());
    }

    // optional .zjchain.pools.protobuf.CrossShardStatistic cross = 7;
    if (has_cross()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cross());
    }

    // optional uint64 elect_height = 8;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

  }
  // repeated .zjchain.pools.protobuf.PoolStatisticItem statistics = 1;
  total_size += 1 * this->statistics_size();
  for (int i = 0; i < this->statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statistics(i));
  }

  // repeated .zjchain.pools.protobuf.JoinElectNode join_elect_nodes = 3;
  total_size += 1 * this->join_elect_nodes_size();
  for (int i = 0; i < this->join_elect_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->join_elect_nodes(i));
  }

  // repeated uint32 lof_leaders = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->lof_leaders_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->lof_leaders(i));
    }
    total_size += 1 * this->lof_leaders_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElectStatistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElectStatistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElectStatistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElectStatistic::MergeFrom(const ElectStatistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  statistics_.MergeFrom(from.statistics_);
  join_elect_nodes_.MergeFrom(from.join_elect_nodes_);
  lof_leaders_.MergeFrom(from.lof_leaders_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_heights()) {
      mutable_heights()->::zjchain::pools::protobuf::StatisticTxItem::MergeFrom(from.heights());
    }
    if (from.has_sharding_id()) {
      set_sharding_id(from.sharding_id());
    }
    if (from.has_gas_amount()) {
      set_gas_amount(from.gas_amount());
    }
    if (from.has_cross()) {
      mutable_cross()->::zjchain::pools::protobuf::CrossShardStatistic::MergeFrom(from.cross());
    }
    if (from.has_elect_height()) {
      set_elect_height(from.elect_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElectStatistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectStatistic::CopyFrom(const ElectStatistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectStatistic::IsInitialized() const {

  return true;
}

void ElectStatistic::Swap(ElectStatistic* other) {
  if (other != this) {
    statistics_.Swap(&other->statistics_);
    std::swap(heights_, other->heights_);
    join_elect_nodes_.Swap(&other->join_elect_nodes_);
    std::swap(sharding_id_, other->sharding_id_);
    std::swap(gas_amount_, other->gas_amount_);
    lof_leaders_.Swap(&other->lof_leaders_);
    std::swap(cross_, other->cross_);
    std::swap(elect_height_, other->elect_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElectStatistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElectStatistic_descriptor_;
  metadata.reflection = ElectStatistic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncPoolsMaxHeight::kReqFieldNumber;
const int SyncPoolsMaxHeight::kHeightsFieldNumber;
const int SyncPoolsMaxHeight::kCrossHeightsFieldNumber;
#endif  // !_MSC_VER

SyncPoolsMaxHeight::SyncPoolsMaxHeight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncPoolsMaxHeight::InitAsDefaultInstance() {
}

SyncPoolsMaxHeight::SyncPoolsMaxHeight(const SyncPoolsMaxHeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncPoolsMaxHeight::SharedCtor() {
  _cached_size_ = 0;
  req_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPoolsMaxHeight::~SyncPoolsMaxHeight() {
  SharedDtor();
}

void SyncPoolsMaxHeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncPoolsMaxHeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPoolsMaxHeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPoolsMaxHeight_descriptor_;
}

const SyncPoolsMaxHeight& SyncPoolsMaxHeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

SyncPoolsMaxHeight* SyncPoolsMaxHeight::default_instance_ = NULL;

SyncPoolsMaxHeight* SyncPoolsMaxHeight::New() const {
  return new SyncPoolsMaxHeight;
}

void SyncPoolsMaxHeight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_ = false;
  }
  heights_.Clear();
  cross_heights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncPoolsMaxHeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool req = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &req_)));
          set_has_req();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        break;
      }

      // repeated uint64 heights = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heights;
        if (input->ExpectTag(24)) goto parse_cross_heights;
        break;
      }

      // repeated uint64 cross_heights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_cross_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cross_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cross_heights;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncPoolsMaxHeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool req = 1 [default = false];
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->req(), output);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->heights(i), output);
  }

  // repeated uint64 cross_heights = 3;
  for (int i = 0; i < this->cross_heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->cross_heights(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncPoolsMaxHeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool req = 1 [default = false];
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->req(), target);
  }

  // repeated uint64 heights = 2;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->heights(i), target);
  }

  // repeated uint64 cross_heights = 3;
  for (int i = 0; i < this->cross_heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->cross_heights(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncPoolsMaxHeight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool req = 1 [default = false];
    if (has_req()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 heights = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heights(i));
    }
    total_size += 1 * this->heights_size() + data_size;
  }

  // repeated uint64 cross_heights = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cross_heights_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cross_heights(i));
    }
    total_size += 1 * this->cross_heights_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPoolsMaxHeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPoolsMaxHeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPoolsMaxHeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncPoolsMaxHeight::MergeFrom(const SyncPoolsMaxHeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  cross_heights_.MergeFrom(from.cross_heights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      set_req(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncPoolsMaxHeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPoolsMaxHeight::CopyFrom(const SyncPoolsMaxHeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPoolsMaxHeight::IsInitialized() const {

  return true;
}

void SyncPoolsMaxHeight::Swap(SyncPoolsMaxHeight* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    heights_.Swap(&other->heights_);
    cross_heights_.Swap(&other->cross_heights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncPoolsMaxHeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPoolsMaxHeight_descriptor_;
  metadata.reflection = SyncPoolsMaxHeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvalidBftMessage::kPoolIndexFieldNumber;
const int InvalidBftMessage::kGidFieldNumber;
const int InvalidBftMessage::kHashFieldNumber;
const int InvalidBftMessage::kPrecommitFieldNumber;
const int InvalidBftMessage::kHeightFieldNumber;
#endif  // !_MSC_VER

InvalidBftMessage::InvalidBftMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvalidBftMessage::InitAsDefaultInstance() {
}

InvalidBftMessage::InvalidBftMessage(const InvalidBftMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvalidBftMessage::SharedCtor() {
  _cached_size_ = 0;
  pool_index_ = 0u;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precommit_ = false;
  height_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvalidBftMessage::~InvalidBftMessage() {
  SharedDtor();
}

void InvalidBftMessage::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void InvalidBftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvalidBftMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvalidBftMessage_descriptor_;
}

const InvalidBftMessage& InvalidBftMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

InvalidBftMessage* InvalidBftMessage::default_instance_ = NULL;

InvalidBftMessage* InvalidBftMessage::New() const {
  return new InvalidBftMessage;
}

void InvalidBftMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pool_index_ = 0u;
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    precommit_ = false;
    height_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvalidBftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pool_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
          set_has_pool_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // optional bytes gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hash;
        break;
      }

      // optional bytes hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_precommit;
        break;
      }

      // optional bool precommit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &precommit_)));
          set_has_precommit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional uint64 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvalidBftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pool_index = 1;
  if (has_pool_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pool_index(), output);
  }

  // optional bytes gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->gid(), output);
  }

  // optional bytes hash = 3;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hash(), output);
  }

  // optional bool precommit = 4;
  if (has_precommit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->precommit(), output);
  }

  // optional uint64 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvalidBftMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pool_index = 1;
  if (has_pool_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pool_index(), target);
  }

  // optional bytes gid = 2;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->gid(), target);
  }

  // optional bytes hash = 3;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hash(), target);
  }

  // optional bool precommit = 4;
  if (has_precommit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->precommit(), target);
  }

  // optional uint64 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvalidBftMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pool_index = 1;
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

    // optional bytes gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional bytes hash = 3;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // optional bool precommit = 4;
    if (has_precommit()) {
      total_size += 1 + 1;
    }

    // optional uint64 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvalidBftMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvalidBftMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvalidBftMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvalidBftMessage::MergeFrom(const InvalidBftMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool_index()) {
      set_pool_index(from.pool_index());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_precommit()) {
      set_precommit(from.precommit());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvalidBftMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidBftMessage::CopyFrom(const InvalidBftMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidBftMessage::IsInitialized() const {

  return true;
}

void InvalidBftMessage::Swap(InvalidBftMessage* other) {
  if (other != this) {
    std::swap(pool_index_, other->pool_index_);
    std::swap(gid_, other->gid_);
    std::swap(hash_, other->hash_);
    std::swap(precommit_, other->precommit_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvalidBftMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvalidBftMessage_descriptor_;
  metadata.reflection = InvalidBftMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TxMessage::kVersionFieldNumber;
const int TxMessage::kGidFieldNumber;
const int TxMessage::kPubkeyFieldNumber;
const int TxMessage::kGasLimitFieldNumber;
const int TxMessage::kGasPriceFieldNumber;
const int TxMessage::kKeyFieldNumber;
const int TxMessage::kValueFieldNumber;
const int TxMessage::kToFieldNumber;
const int TxMessage::kAmountFieldNumber;
const int TxMessage::kStepFieldNumber;
const int TxMessage::kContractPrepaymentFieldNumber;
const int TxMessage::kContractCodeFieldNumber;
const int TxMessage::kContractInputFieldNumber;
#endif  // !_MSC_VER

TxMessage::TxMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxMessage::InitAsDefaultInstance() {
}

TxMessage::TxMessage(const TxMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxMessage::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gas_limit_ = GOOGLE_ULONGLONG(0);
  gas_price_ = GOOGLE_ULONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  step_ = 0;
  contract_prepayment_ = GOOGLE_ULONGLONG(0);
  contract_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contract_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxMessage::~TxMessage() {
  SharedDtor();
}

void TxMessage::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_code_;
  }
  if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_input_;
  }
  if (this != default_instance_) {
  }
}

void TxMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxMessage_descriptor_;
}

const TxMessage& TxMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protos_2fpools_2eproto();
  return *default_instance_;
}

TxMessage* TxMessage::default_instance_ = NULL;

TxMessage* TxMessage::New() const {
  return new TxMessage;
}

void TxMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_pubkey()) {
      if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
        pubkey_->clear();
      }
    }
    gas_limit_ = GOOGLE_ULONGLONG(0);
    gas_price_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    amount_ = GOOGLE_ULONGLONG(0);
    step_ = 0;
    contract_prepayment_ = GOOGLE_ULONGLONG(0);
    if (has_contract_code()) {
      if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
        contract_code_->clear();
      }
    }
    if (has_contract_input()) {
      if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
        contract_input_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // optional bytes gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pubkey;
        break;
      }

      // optional bytes pubkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gas_limit;
        break;
      }

      // optional uint64 gas_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gas_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_limit_)));
          set_has_gas_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gas_price;
        break;
      }

      // optional uint64 gas_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gas_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_price_)));
          set_has_gas_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }

      // optional bytes key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value;
        break;
      }

      // optional bytes value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_to;
        break;
      }

      // optional bytes to = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_step;
        break;
      }

      // optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zjchain::pools::protobuf::StepType_IsValid(value)) {
            set_step(static_cast< ::zjchain::pools::protobuf::StepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_contract_prepayment;
        break;
      }

      // optional uint64 contract_prepayment = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contract_prepayment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &contract_prepayment_)));
          set_has_contract_prepayment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_contract_code;
        break;
      }

      // optional bytes contract_code = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contract_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_contract_input;
        break;
      }

      // optional bytes contract_input = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contract_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->gid(), output);
  }

  // optional bytes pubkey = 3;
  if (has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->pubkey(), output);
  }

  // optional uint64 gas_limit = 4;
  if (has_gas_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gas_limit(), output);
  }

  // optional uint64 gas_price = 5;
  if (has_gas_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gas_price(), output);
  }

  // optional bytes key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->key(), output);
  }

  // optional bytes value = 7;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->value(), output);
  }

  // optional bytes to = 8;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->to(), output);
  }

  // optional uint64 amount = 9;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->amount(), output);
  }

  // optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->step(), output);
  }

  // optional uint64 contract_prepayment = 11;
  if (has_contract_prepayment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->contract_prepayment(), output);
  }

  // optional bytes contract_code = 12;
  if (has_contract_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->contract_code(), output);
  }

  // optional bytes contract_input = 13;
  if (has_contract_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->contract_input(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bytes gid = 2;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->gid(), target);
  }

  // optional bytes pubkey = 3;
  if (has_pubkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pubkey(), target);
  }

  // optional uint64 gas_limit = 4;
  if (has_gas_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gas_limit(), target);
  }

  // optional uint64 gas_price = 5;
  if (has_gas_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gas_price(), target);
  }

  // optional bytes key = 6;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key(), target);
  }

  // optional bytes value = 7;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->value(), target);
  }

  // optional bytes to = 8;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->to(), target);
  }

  // optional uint64 amount = 9;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->amount(), target);
  }

  // optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->step(), target);
  }

  // optional uint64 contract_prepayment = 11;
  if (has_contract_prepayment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->contract_prepayment(), target);
  }

  // optional bytes contract_code = 12;
  if (has_contract_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->contract_code(), target);
  }

  // optional bytes contract_input = 13;
  if (has_contract_input()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->contract_input(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bytes gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional bytes pubkey = 3;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional uint64 gas_limit = 4;
    if (has_gas_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_limit());
    }

    // optional uint64 gas_price = 5;
    if (has_gas_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_price());
    }

    // optional bytes key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 7;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional bytes to = 8;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 amount = 9;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional .zjchain.pools.protobuf.StepType step = 10 [default = kNormalFrom];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional uint64 contract_prepayment = 11;
    if (has_contract_prepayment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->contract_prepayment());
    }

    // optional bytes contract_code = 12;
    if (has_contract_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contract_code());
    }

    // optional bytes contract_input = 13;
    if (has_contract_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contract_input());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxMessage::MergeFrom(const TxMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_pubkey()) {
      set_pubkey(from.pubkey());
    }
    if (from.has_gas_limit()) {
      set_gas_limit(from.gas_limit());
    }
    if (from.has_gas_price()) {
      set_gas_price(from.gas_price());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_contract_prepayment()) {
      set_contract_prepayment(from.contract_prepayment());
    }
    if (from.has_contract_code()) {
      set_contract_code(from.contract_code());
    }
    if (from.has_contract_input()) {
      set_contract_input(from.contract_input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxMessage::CopyFrom(const TxMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMessage::IsInitialized() const {

  return true;
}

void TxMessage::Swap(TxMessage* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(gid_, other->gid_);
    std::swap(pubkey_, other->pubkey_);
    std::swap(gas_limit_, other->gas_limit_);
    std::swap(gas_price_, other->gas_price_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(to_, other->to_);
    std::swap(amount_, other->amount_);
    std::swap(step_, other->step_);
    std::swap(contract_prepayment_, other->contract_prepayment_);
    std::swap(contract_code_, other->contract_code_);
    std::swap(contract_input_, other->contract_input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxMessage_descriptor_;
  metadata.reflection = TxMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace pools
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)
