// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/pools.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fblock_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fblock_2eproto;
namespace zjchain {
namespace block {
namespace protobuf {
class AccountAttrRequest;
struct AccountAttrRequestDefaultTypeInternal;
extern AccountAttrRequestDefaultTypeInternal _AccountAttrRequest_default_instance_;
class AccountAttrResponse;
struct AccountAttrResponseDefaultTypeInternal;
extern AccountAttrResponseDefaultTypeInternal _AccountAttrResponse_default_instance_;
class AccountHeightRequest;
struct AccountHeightRequestDefaultTypeInternal;
extern AccountHeightRequestDefaultTypeInternal _AccountHeightRequest_default_instance_;
class AccountHeightResponse;
struct AccountHeightResponseDefaultTypeInternal;
extern AccountHeightResponseDefaultTypeInternal _AccountHeightResponse_default_instance_;
class AdRewardRequest;
struct AdRewardRequestDefaultTypeInternal;
extern AdRewardRequestDefaultTypeInternal _AdRewardRequest_default_instance_;
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockMessage;
struct BlockMessageDefaultTypeInternal;
extern BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
class BlockTx;
struct BlockTxDefaultTypeInternal;
extern BlockTxDefaultTypeInternal _BlockTx_default_instance_;
class ConsensusToTxs;
struct ConsensusToTxsDefaultTypeInternal;
extern ConsensusToTxsDefaultTypeInternal _ConsensusToTxs_default_instance_;
class ConsensusToTxsItem;
struct ConsensusToTxsItemDefaultTypeInternal;
extern ConsensusToTxsItemDefaultTypeInternal _ConsensusToTxsItem_default_instance_;
class CrossShardingStatisticMessage;
struct CrossShardingStatisticMessageDefaultTypeInternal;
extern CrossShardingStatisticMessageDefaultTypeInternal _CrossShardingStatisticMessage_default_instance_;
class CrossShardingTosMessage;
struct CrossShardingTosMessageDefaultTypeInternal;
extern CrossShardingTosMessageDefaultTypeInternal _CrossShardingTosMessage_default_instance_;
class ElectBlockMessage;
struct ElectBlockMessageDefaultTypeInternal;
extern ElectBlockMessageDefaultTypeInternal _ElectBlockMessage_default_instance_;
class ElectStatisticInfo;
struct ElectStatisticInfoDefaultTypeInternal;
extern ElectStatisticInfoDefaultTypeInternal _ElectStatisticInfo_default_instance_;
class GetAccountInitInfoRequest;
struct GetAccountInitInfoRequestDefaultTypeInternal;
extern GetAccountInitInfoRequestDefaultTypeInternal _GetAccountInitInfoRequest_default_instance_;
class GetAccountInitInfoResponse;
struct GetAccountInitInfoResponseDefaultTypeInternal;
extern GetAccountInitInfoResponseDefaultTypeInternal _GetAccountInitInfoResponse_default_instance_;
class GetAccountShardReponse;
struct GetAccountShardReponseDefaultTypeInternal;
extern GetAccountShardReponseDefaultTypeInternal _GetAccountShardReponse_default_instance_;
class GetAccountShardRequest;
struct GetAccountShardRequestDefaultTypeInternal;
extern GetAccountShardRequestDefaultTypeInternal _GetAccountShardRequest_default_instance_;
class GetTxBlockRequest;
struct GetTxBlockRequestDefaultTypeInternal;
extern GetTxBlockRequestDefaultTypeInternal _GetTxBlockRequest_default_instance_;
class GetTxBlockResponse;
struct GetTxBlockResponseDefaultTypeInternal;
extern GetTxBlockResponseDefaultTypeInternal _GetTxBlockResponse_default_instance_;
class RefreshPoolHeightRequest;
struct RefreshPoolHeightRequestDefaultTypeInternal;
extern RefreshPoolHeightRequestDefaultTypeInternal _RefreshPoolHeightRequest_default_instance_;
class RefreshPoolHeightResponse;
struct RefreshPoolHeightResponseDefaultTypeInternal;
extern RefreshPoolHeightResponseDefaultTypeInternal _RefreshPoolHeightResponse_default_instance_;
class ShardToTxMessage;
struct ShardToTxMessageDefaultTypeInternal;
extern ShardToTxMessageDefaultTypeInternal _ShardToTxMessage_default_instance_;
class StatisticInfo;
struct StatisticInfoDefaultTypeInternal;
extern StatisticInfoDefaultTypeInternal _StatisticInfo_default_instance_;
class StatisticTxMessage;
struct StatisticTxMessageDefaultTypeInternal;
extern StatisticTxMessageDefaultTypeInternal _StatisticTxMessage_default_instance_;
class StorageItem;
struct StorageItemDefaultTypeInternal;
extern StorageItemDefaultTypeInternal _StorageItem_default_instance_;
class TransferItem;
struct TransferItemDefaultTypeInternal;
extern TransferItemDefaultTypeInternal _TransferItem_default_instance_;
class TxLog;
struct TxLogDefaultTypeInternal;
extern TxLogDefaultTypeInternal _TxLog_default_instance_;
class UpdateVpnActiveRequest;
struct UpdateVpnActiveRequestDefaultTypeInternal;
extern UpdateVpnActiveRequestDefaultTypeInternal _UpdateVpnActiveRequest_default_instance_;
class UpdateVpnCountRequest;
struct UpdateVpnCountRequestDefaultTypeInternal;
extern UpdateVpnCountRequestDefaultTypeInternal _UpdateVpnCountRequest_default_instance_;
class UpdateVpnCountResponse;
struct UpdateVpnCountResponseDefaultTypeInternal;
extern UpdateVpnCountResponseDefaultTypeInternal _UpdateVpnCountResponse_default_instance_;
class VpnCountItem;
struct VpnCountItemDefaultTypeInternal;
extern VpnCountItemDefaultTypeInternal _VpnCountItem_default_instance_;
}  // namespace protobuf
}  // namespace block
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::block::protobuf::AccountAttrRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::AccountAttrRequest>(Arena*);
template<> ::zjchain::block::protobuf::AccountAttrResponse* Arena::CreateMaybeMessage<::zjchain::block::protobuf::AccountAttrResponse>(Arena*);
template<> ::zjchain::block::protobuf::AccountHeightRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::AccountHeightRequest>(Arena*);
template<> ::zjchain::block::protobuf::AccountHeightResponse* Arena::CreateMaybeMessage<::zjchain::block::protobuf::AccountHeightResponse>(Arena*);
template<> ::zjchain::block::protobuf::AdRewardRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::AdRewardRequest>(Arena*);
template<> ::zjchain::block::protobuf::Block* Arena::CreateMaybeMessage<::zjchain::block::protobuf::Block>(Arena*);
template<> ::zjchain::block::protobuf::BlockMessage* Arena::CreateMaybeMessage<::zjchain::block::protobuf::BlockMessage>(Arena*);
template<> ::zjchain::block::protobuf::BlockTx* Arena::CreateMaybeMessage<::zjchain::block::protobuf::BlockTx>(Arena*);
template<> ::zjchain::block::protobuf::ConsensusToTxs* Arena::CreateMaybeMessage<::zjchain::block::protobuf::ConsensusToTxs>(Arena*);
template<> ::zjchain::block::protobuf::ConsensusToTxsItem* Arena::CreateMaybeMessage<::zjchain::block::protobuf::ConsensusToTxsItem>(Arena*);
template<> ::zjchain::block::protobuf::CrossShardingStatisticMessage* Arena::CreateMaybeMessage<::zjchain::block::protobuf::CrossShardingStatisticMessage>(Arena*);
template<> ::zjchain::block::protobuf::CrossShardingTosMessage* Arena::CreateMaybeMessage<::zjchain::block::protobuf::CrossShardingTosMessage>(Arena*);
template<> ::zjchain::block::protobuf::ElectBlockMessage* Arena::CreateMaybeMessage<::zjchain::block::protobuf::ElectBlockMessage>(Arena*);
template<> ::zjchain::block::protobuf::ElectStatisticInfo* Arena::CreateMaybeMessage<::zjchain::block::protobuf::ElectStatisticInfo>(Arena*);
template<> ::zjchain::block::protobuf::GetAccountInitInfoRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::GetAccountInitInfoRequest>(Arena*);
template<> ::zjchain::block::protobuf::GetAccountInitInfoResponse* Arena::CreateMaybeMessage<::zjchain::block::protobuf::GetAccountInitInfoResponse>(Arena*);
template<> ::zjchain::block::protobuf::GetAccountShardReponse* Arena::CreateMaybeMessage<::zjchain::block::protobuf::GetAccountShardReponse>(Arena*);
template<> ::zjchain::block::protobuf::GetAccountShardRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::GetAccountShardRequest>(Arena*);
template<> ::zjchain::block::protobuf::GetTxBlockRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::GetTxBlockRequest>(Arena*);
template<> ::zjchain::block::protobuf::GetTxBlockResponse* Arena::CreateMaybeMessage<::zjchain::block::protobuf::GetTxBlockResponse>(Arena*);
template<> ::zjchain::block::protobuf::RefreshPoolHeightRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::RefreshPoolHeightRequest>(Arena*);
template<> ::zjchain::block::protobuf::RefreshPoolHeightResponse* Arena::CreateMaybeMessage<::zjchain::block::protobuf::RefreshPoolHeightResponse>(Arena*);
template<> ::zjchain::block::protobuf::ShardToTxMessage* Arena::CreateMaybeMessage<::zjchain::block::protobuf::ShardToTxMessage>(Arena*);
template<> ::zjchain::block::protobuf::StatisticInfo* Arena::CreateMaybeMessage<::zjchain::block::protobuf::StatisticInfo>(Arena*);
template<> ::zjchain::block::protobuf::StatisticTxMessage* Arena::CreateMaybeMessage<::zjchain::block::protobuf::StatisticTxMessage>(Arena*);
template<> ::zjchain::block::protobuf::StorageItem* Arena::CreateMaybeMessage<::zjchain::block::protobuf::StorageItem>(Arena*);
template<> ::zjchain::block::protobuf::TransferItem* Arena::CreateMaybeMessage<::zjchain::block::protobuf::TransferItem>(Arena*);
template<> ::zjchain::block::protobuf::TxLog* Arena::CreateMaybeMessage<::zjchain::block::protobuf::TxLog>(Arena*);
template<> ::zjchain::block::protobuf::UpdateVpnActiveRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::UpdateVpnActiveRequest>(Arena*);
template<> ::zjchain::block::protobuf::UpdateVpnCountRequest* Arena::CreateMaybeMessage<::zjchain::block::protobuf::UpdateVpnCountRequest>(Arena*);
template<> ::zjchain::block::protobuf::UpdateVpnCountResponse* Arena::CreateMaybeMessage<::zjchain::block::protobuf::UpdateVpnCountResponse>(Arena*);
template<> ::zjchain::block::protobuf::VpnCountItem* Arena::CreateMaybeMessage<::zjchain::block::protobuf::VpnCountItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace block {
namespace protobuf {

// ===================================================================

class StorageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.StorageItem) */ {
 public:
  inline StorageItem() : StorageItem(nullptr) {}
  ~StorageItem() override;
  explicit PROTOBUF_CONSTEXPR StorageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageItem(const StorageItem& from);
  StorageItem(StorageItem&& from) noexcept
    : StorageItem() {
    *this = ::std::move(from);
  }

  inline StorageItem& operator=(const StorageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageItem& operator=(StorageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageItem* internal_default_instance() {
    return reinterpret_cast<const StorageItem*>(
               &_StorageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StorageItem& a, StorageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StorageItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.StorageItem";
  }
  protected:
  explicit StorageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValHashFieldNumber = 2,
    kValSizeFieldNumber = 3,
  };
  // optional bytes key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes val_hash = 2;
  bool has_val_hash() const;
  private:
  bool _internal_has_val_hash() const;
  public:
  void clear_val_hash();
  const std::string& val_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val_hash();
  PROTOBUF_NODISCARD std::string* release_val_hash();
  void set_allocated_val_hash(std::string* val_hash);
  private:
  const std::string& _internal_val_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val_hash(const std::string& value);
  std::string* _internal_mutable_val_hash();
  public:

  // optional uint32 val_size = 3 [default = 0];
  bool has_val_size() const;
  private:
  bool _internal_has_val_size() const;
  public:
  void clear_val_size();
  uint32_t val_size() const;
  void set_val_size(uint32_t value);
  private:
  uint32_t _internal_val_size() const;
  void _internal_set_val_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.StorageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_hash_;
  uint32_t val_size_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class TransferItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.TransferItem) */ {
 public:
  inline TransferItem() : TransferItem(nullptr) {}
  ~TransferItem() override;
  explicit PROTOBUF_CONSTEXPR TransferItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferItem(const TransferItem& from);
  TransferItem(TransferItem&& from) noexcept
    : TransferItem() {
    *this = ::std::move(from);
  }

  inline TransferItem& operator=(const TransferItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferItem& operator=(TransferItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferItem* internal_default_instance() {
    return reinterpret_cast<const TransferItem*>(
               &_TransferItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransferItem& a, TransferItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.TransferItem";
  }
  protected:
  explicit TransferItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // optional bytes from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // optional bytes to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // optional uint64 amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.TransferItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  uint64_t amount_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class TxLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.TxLog) */ {
 public:
  inline TxLog() : TxLog(nullptr) {}
  ~TxLog() override;
  explicit PROTOBUF_CONSTEXPR TxLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxLog(const TxLog& from);
  TxLog(TxLog&& from) noexcept
    : TxLog() {
    *this = ::std::move(from);
  }

  inline TxLog& operator=(const TxLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxLog& operator=(TxLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxLog* internal_default_instance() {
    return reinterpret_cast<const TxLog*>(
               &_TxLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TxLog& a, TxLog& b) {
    a.Swap(&b);
  }
  inline void Swap(TxLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TxLog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.TxLog";
  }
  protected:
  explicit TxLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // repeated bytes topics = 2;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const void* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.TxLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.BlockTx) */ {
 public:
  inline BlockTx() : BlockTx(nullptr) {}
  ~BlockTx() override;
  explicit PROTOBUF_CONSTEXPR BlockTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockTx(const BlockTx& from);
  BlockTx(BlockTx&& from) noexcept
    : BlockTx() {
    *this = ::std::move(from);
  }

  inline BlockTx& operator=(const BlockTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockTx& operator=(BlockTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockTx* internal_default_instance() {
    return reinterpret_cast<const BlockTx*>(
               &_BlockTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlockTx& a, BlockTx& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockTx& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.BlockTx";
  }
  protected:
  explicit BlockTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoragesFieldNumber = 11,
    kContractTxsFieldNumber = 12,
    kEventsFieldNumber = 16,
    kGidFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kContractCodeFieldNumber = 14,
    kContractInputFieldNumber = 15,
    kAmountFieldNumber = 4,
    kGasLimitFieldNumber = 5,
    kGasUsedFieldNumber = 6,
    kGasPriceFieldNumber = 7,
    kBalanceFieldNumber = 8,
    kStepFieldNumber = 9,
    kStatusFieldNumber = 10,
    kContractPrepaymentFieldNumber = 13,
  };
  // repeated .zjchain.block.protobuf.StorageItem storages = 11;
  int storages_size() const;
  private:
  int _internal_storages_size() const;
  public:
  void clear_storages();
  ::zjchain::block::protobuf::StorageItem* mutable_storages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >*
      mutable_storages();
  private:
  const ::zjchain::block::protobuf::StorageItem& _internal_storages(int index) const;
  ::zjchain::block::protobuf::StorageItem* _internal_add_storages();
  public:
  const ::zjchain::block::protobuf::StorageItem& storages(int index) const;
  ::zjchain::block::protobuf::StorageItem* add_storages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >&
      storages() const;

  // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
  int contract_txs_size() const;
  private:
  int _internal_contract_txs_size() const;
  public:
  void clear_contract_txs();
  ::zjchain::block::protobuf::TransferItem* mutable_contract_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >*
      mutable_contract_txs();
  private:
  const ::zjchain::block::protobuf::TransferItem& _internal_contract_txs(int index) const;
  ::zjchain::block::protobuf::TransferItem* _internal_add_contract_txs();
  public:
  const ::zjchain::block::protobuf::TransferItem& contract_txs(int index) const;
  ::zjchain::block::protobuf::TransferItem* add_contract_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >&
      contract_txs() const;

  // repeated .zjchain.block.protobuf.TxLog events = 16;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::zjchain::block::protobuf::TxLog* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >*
      mutable_events();
  private:
  const ::zjchain::block::protobuf::TxLog& _internal_events(int index) const;
  ::zjchain::block::protobuf::TxLog* _internal_add_events();
  public:
  const ::zjchain::block::protobuf::TxLog& events(int index) const;
  ::zjchain::block::protobuf::TxLog* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >&
      events() const;

  // optional bytes gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_NODISCARD std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // optional bytes from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // optional bytes to = 3;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // optional bytes contract_code = 14;
  bool has_contract_code() const;
  private:
  bool _internal_has_contract_code() const;
  public:
  void clear_contract_code();
  const std::string& contract_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_code();
  PROTOBUF_NODISCARD std::string* release_contract_code();
  void set_allocated_contract_code(std::string* contract_code);
  private:
  const std::string& _internal_contract_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_code(const std::string& value);
  std::string* _internal_mutable_contract_code();
  public:

  // optional bytes contract_input = 15;
  bool has_contract_input() const;
  private:
  bool _internal_has_contract_input() const;
  public:
  void clear_contract_input();
  const std::string& contract_input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_input();
  PROTOBUF_NODISCARD std::string* release_contract_input();
  void set_allocated_contract_input(std::string* contract_input);
  private:
  const std::string& _internal_contract_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_input(const std::string& value);
  std::string* _internal_mutable_contract_input();
  public:

  // optional uint64 amount = 4;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // optional uint64 gas_limit = 5;
  bool has_gas_limit() const;
  private:
  bool _internal_has_gas_limit() const;
  public:
  void clear_gas_limit();
  uint64_t gas_limit() const;
  void set_gas_limit(uint64_t value);
  private:
  uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(uint64_t value);
  public:

  // optional uint64 gas_used = 6;
  bool has_gas_used() const;
  private:
  bool _internal_has_gas_used() const;
  public:
  void clear_gas_used();
  uint64_t gas_used() const;
  void set_gas_used(uint64_t value);
  private:
  uint64_t _internal_gas_used() const;
  void _internal_set_gas_used(uint64_t value);
  public:

  // optional uint64 gas_price = 7;
  bool has_gas_price() const;
  private:
  bool _internal_has_gas_price() const;
  public:
  void clear_gas_price();
  uint64_t gas_price() const;
  void set_gas_price(uint64_t value);
  private:
  uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(uint64_t value);
  public:

  // optional uint64 balance = 8;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // optional .zjchain.pools.protobuf.StepType step = 9;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  ::zjchain::pools::protobuf::StepType step() const;
  void set_step(::zjchain::pools::protobuf::StepType value);
  private:
  ::zjchain::pools::protobuf::StepType _internal_step() const;
  void _internal_set_step(::zjchain::pools::protobuf::StepType value);
  public:

  // optional uint32 status = 10;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // optional uint64 contract_prepayment = 13;
  bool has_contract_prepayment() const;
  private:
  bool _internal_has_contract_prepayment() const;
  public:
  void clear_contract_prepayment();
  uint64_t contract_prepayment() const;
  void set_contract_prepayment(uint64_t value);
  private:
  uint64_t _internal_contract_prepayment() const;
  void _internal_set_contract_prepayment(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.BlockTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem > storages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem > contract_txs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TxLog > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_input_;
  uint64_t amount_;
  uint64_t gas_limit_;
  uint64_t gas_used_;
  uint64_t gas_price_;
  uint64_t balance_;
  int step_;
  uint32_t status_;
  uint64_t contract_prepayment_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxListFieldNumber = 10,
    kChangeLeaderInvalidHashsFieldNumber = 15,
    kPrehashFieldNumber = 3,
    kHashFieldNumber = 4,
    kBlsAggSignXFieldNumber = 12,
    kBlsAggSignYFieldNumber = 13,
    kNetworkIdFieldNumber = 1,
    kPoolIndexFieldNumber = 2,
    kHeightFieldNumber = 6,
    kConsistencyRandomFieldNumber = 7,
    kElectblockHeightFieldNumber = 8,
    kTimeblockHeightFieldNumber = 9,
    kVersionFieldNumber = 5,
    kIsCommitedBlockFieldNumber = 16,
    kTimestampFieldNumber = 11,
    kLeaderIndexFieldNumber = 14,
  };
  // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
  int tx_list_size() const;
  private:
  int _internal_tx_list_size() const;
  public:
  void clear_tx_list();
  ::zjchain::block::protobuf::BlockTx* mutable_tx_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >*
      mutable_tx_list();
  private:
  const ::zjchain::block::protobuf::BlockTx& _internal_tx_list(int index) const;
  ::zjchain::block::protobuf::BlockTx* _internal_add_tx_list();
  public:
  const ::zjchain::block::protobuf::BlockTx& tx_list(int index) const;
  ::zjchain::block::protobuf::BlockTx* add_tx_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >&
      tx_list() const;

  // repeated bytes change_leader_invalid_hashs = 15;
  int change_leader_invalid_hashs_size() const;
  private:
  int _internal_change_leader_invalid_hashs_size() const;
  public:
  void clear_change_leader_invalid_hashs();
  const std::string& change_leader_invalid_hashs(int index) const;
  std::string* mutable_change_leader_invalid_hashs(int index);
  void set_change_leader_invalid_hashs(int index, const std::string& value);
  void set_change_leader_invalid_hashs(int index, std::string&& value);
  void set_change_leader_invalid_hashs(int index, const char* value);
  void set_change_leader_invalid_hashs(int index, const void* value, size_t size);
  std::string* add_change_leader_invalid_hashs();
  void add_change_leader_invalid_hashs(const std::string& value);
  void add_change_leader_invalid_hashs(std::string&& value);
  void add_change_leader_invalid_hashs(const char* value);
  void add_change_leader_invalid_hashs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& change_leader_invalid_hashs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_change_leader_invalid_hashs();
  private:
  const std::string& _internal_change_leader_invalid_hashs(int index) const;
  std::string* _internal_add_change_leader_invalid_hashs();
  public:

  // optional bytes prehash = 3;
  bool has_prehash() const;
  private:
  bool _internal_has_prehash() const;
  public:
  void clear_prehash();
  const std::string& prehash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prehash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prehash();
  PROTOBUF_NODISCARD std::string* release_prehash();
  void set_allocated_prehash(std::string* prehash);
  private:
  const std::string& _internal_prehash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prehash(const std::string& value);
  std::string* _internal_mutable_prehash();
  public:

  // optional bytes hash = 4;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional bytes bls_agg_sign_x = 12;
  bool has_bls_agg_sign_x() const;
  private:
  bool _internal_has_bls_agg_sign_x() const;
  public:
  void clear_bls_agg_sign_x();
  const std::string& bls_agg_sign_x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_agg_sign_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_agg_sign_x();
  PROTOBUF_NODISCARD std::string* release_bls_agg_sign_x();
  void set_allocated_bls_agg_sign_x(std::string* bls_agg_sign_x);
  private:
  const std::string& _internal_bls_agg_sign_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_agg_sign_x(const std::string& value);
  std::string* _internal_mutable_bls_agg_sign_x();
  public:

  // optional bytes bls_agg_sign_y = 13;
  bool has_bls_agg_sign_y() const;
  private:
  bool _internal_has_bls_agg_sign_y() const;
  public:
  void clear_bls_agg_sign_y();
  const std::string& bls_agg_sign_y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bls_agg_sign_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bls_agg_sign_y();
  PROTOBUF_NODISCARD std::string* release_bls_agg_sign_y();
  void set_allocated_bls_agg_sign_y(std::string* bls_agg_sign_y);
  private:
  const std::string& _internal_bls_agg_sign_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bls_agg_sign_y(const std::string& value);
  std::string* _internal_mutable_bls_agg_sign_y();
  public:

  // optional uint32 network_id = 1;
  bool has_network_id() const;
  private:
  bool _internal_has_network_id() const;
  public:
  void clear_network_id();
  uint32_t network_id() const;
  void set_network_id(uint32_t value);
  private:
  uint32_t _internal_network_id() const;
  void _internal_set_network_id(uint32_t value);
  public:

  // optional uint32 pool_index = 2;
  bool has_pool_index() const;
  private:
  bool _internal_has_pool_index() const;
  public:
  void clear_pool_index();
  uint32_t pool_index() const;
  void set_pool_index(uint32_t value);
  private:
  uint32_t _internal_pool_index() const;
  void _internal_set_pool_index(uint32_t value);
  public:

  // optional uint64 height = 6;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // optional uint64 consistency_random = 7;
  bool has_consistency_random() const;
  private:
  bool _internal_has_consistency_random() const;
  public:
  void clear_consistency_random();
  uint64_t consistency_random() const;
  void set_consistency_random(uint64_t value);
  private:
  uint64_t _internal_consistency_random() const;
  void _internal_set_consistency_random(uint64_t value);
  public:

  // optional uint64 electblock_height = 8;
  bool has_electblock_height() const;
  private:
  bool _internal_has_electblock_height() const;
  public:
  void clear_electblock_height();
  uint64_t electblock_height() const;
  void set_electblock_height(uint64_t value);
  private:
  uint64_t _internal_electblock_height() const;
  void _internal_set_electblock_height(uint64_t value);
  public:

  // optional uint64 timeblock_height = 9;
  bool has_timeblock_height() const;
  private:
  bool _internal_has_timeblock_height() const;
  public:
  void clear_timeblock_height();
  uint64_t timeblock_height() const;
  void set_timeblock_height(uint64_t value);
  private:
  uint64_t _internal_timeblock_height() const;
  void _internal_set_timeblock_height(uint64_t value);
  public:

  // optional uint32 version = 5;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional bool is_commited_block = 16 [default = false];
  bool has_is_commited_block() const;
  private:
  bool _internal_has_is_commited_block() const;
  public:
  void clear_is_commited_block();
  bool is_commited_block() const;
  void set_is_commited_block(bool value);
  private:
  bool _internal_is_commited_block() const;
  void _internal_set_is_commited_block(bool value);
  public:

  // optional uint64 timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint64 leader_index = 14;
  bool has_leader_index() const;
  private:
  bool _internal_has_leader_index() const;
  public:
  void clear_leader_index();
  uint64_t leader_index() const;
  void set_leader_index(uint64_t value);
  private:
  uint64_t _internal_leader_index() const;
  void _internal_set_leader_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx > tx_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> change_leader_invalid_hashs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prehash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_agg_sign_x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bls_agg_sign_y_;
  uint32_t network_id_;
  uint32_t pool_index_;
  uint64_t height_;
  uint64_t consistency_random_;
  uint64_t electblock_height_;
  uint64_t timeblock_height_;
  uint32_t version_;
  bool is_commited_block_;
  uint64_t timestamp_;
  uint64_t leader_index_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class ConsensusToTxsItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.ConsensusToTxsItem) */ {
 public:
  inline ConsensusToTxsItem() : ConsensusToTxsItem(nullptr) {}
  ~ConsensusToTxsItem() override;
  explicit PROTOBUF_CONSTEXPR ConsensusToTxsItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusToTxsItem(const ConsensusToTxsItem& from);
  ConsensusToTxsItem(ConsensusToTxsItem&& from) noexcept
    : ConsensusToTxsItem() {
    *this = ::std::move(from);
  }

  inline ConsensusToTxsItem& operator=(const ConsensusToTxsItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusToTxsItem& operator=(ConsensusToTxsItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusToTxsItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusToTxsItem* internal_default_instance() {
    return reinterpret_cast<const ConsensusToTxsItem*>(
               &_ConsensusToTxsItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConsensusToTxsItem& a, ConsensusToTxsItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusToTxsItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusToTxsItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusToTxsItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusToTxsItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusToTxsItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConsensusToTxsItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusToTxsItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.ConsensusToTxsItem";
  }
  protected:
  explicit ConsensusToTxsItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kBalanceFieldNumber = 2,
  };
  // optional bytes to = 1;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // optional uint64 balance = 2;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ConsensusToTxsItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  uint64_t balance_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class ConsensusToTxs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.ConsensusToTxs) */ {
 public:
  inline ConsensusToTxs() : ConsensusToTxs(nullptr) {}
  ~ConsensusToTxs() override;
  explicit PROTOBUF_CONSTEXPR ConsensusToTxs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusToTxs(const ConsensusToTxs& from);
  ConsensusToTxs(ConsensusToTxs&& from) noexcept
    : ConsensusToTxs() {
    *this = ::std::move(from);
  }

  inline ConsensusToTxs& operator=(const ConsensusToTxs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusToTxs& operator=(ConsensusToTxs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusToTxs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusToTxs* internal_default_instance() {
    return reinterpret_cast<const ConsensusToTxs*>(
               &_ConsensusToTxs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConsensusToTxs& a, ConsensusToTxs& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusToTxs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusToTxs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusToTxs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusToTxs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusToTxs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConsensusToTxs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusToTxs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.ConsensusToTxs";
  }
  protected:
  explicit ConsensusToTxs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTosFieldNumber = 1,
  };
  // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
  int tos_size() const;
  private:
  int _internal_tos_size() const;
  public:
  void clear_tos();
  ::zjchain::block::protobuf::ConsensusToTxsItem* mutable_tos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >*
      mutable_tos();
  private:
  const ::zjchain::block::protobuf::ConsensusToTxsItem& _internal_tos(int index) const;
  ::zjchain::block::protobuf::ConsensusToTxsItem* _internal_add_tos();
  public:
  const ::zjchain::block::protobuf::ConsensusToTxsItem& tos(int index) const;
  ::zjchain::block::protobuf::ConsensusToTxsItem* add_tos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >&
      tos() const;

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ConsensusToTxs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem > tos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class GetTxBlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.GetTxBlockRequest) */ {
 public:
  inline GetTxBlockRequest() : GetTxBlockRequest(nullptr) {}
  ~GetTxBlockRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTxBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxBlockRequest(const GetTxBlockRequest& from);
  GetTxBlockRequest(GetTxBlockRequest&& from) noexcept
    : GetTxBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetTxBlockRequest& operator=(const GetTxBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxBlockRequest& operator=(GetTxBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockRequest*>(
               &_GetTxBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetTxBlockRequest& a, GetTxBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxBlockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxBlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTxBlockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTxBlockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.GetTxBlockRequest";
  }
  protected:
  explicit GetTxBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxGidFieldNumber = 1,
    kBlockHashFieldNumber = 2,
    kAccountAddressFieldNumber = 5,
    kHeightFieldNumber = 4,
    kFromFieldNumber = 3,
  };
  // optional bytes tx_gid = 1;
  bool has_tx_gid() const;
  private:
  bool _internal_has_tx_gid() const;
  public:
  void clear_tx_gid();
  const std::string& tx_gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx_gid();
  PROTOBUF_NODISCARD std::string* release_tx_gid();
  void set_allocated_tx_gid(std::string* tx_gid);
  private:
  const std::string& _internal_tx_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_gid(const std::string& value);
  std::string* _internal_mutable_tx_gid();
  public:

  // optional bytes block_hash = 2;
  bool has_block_hash() const;
  private:
  bool _internal_has_block_hash() const;
  public:
  void clear_block_hash();
  const std::string& block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_hash();
  PROTOBUF_NODISCARD std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // optional bytes account_address = 5;
  bool has_account_address() const;
  private:
  bool _internal_has_account_address() const;
  public:
  void clear_account_address();
  const std::string& account_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_address();
  PROTOBUF_NODISCARD std::string* release_account_address();
  void set_allocated_account_address(std::string* account_address);
  private:
  const std::string& _internal_account_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_address(const std::string& value);
  std::string* _internal_mutable_account_address();
  public:

  // optional uint64 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // optional bool from = 3;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  bool from() const;
  void set_from(bool value);
  private:
  bool _internal_from() const;
  void _internal_set_from(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetTxBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_gid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_address_;
  uint64_t height_;
  bool from_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class GetTxBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.GetTxBlockResponse) */ {
 public:
  inline GetTxBlockResponse() : GetTxBlockResponse(nullptr) {}
  ~GetTxBlockResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTxBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxBlockResponse(const GetTxBlockResponse& from);
  GetTxBlockResponse(GetTxBlockResponse&& from) noexcept
    : GetTxBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetTxBlockResponse& operator=(const GetTxBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxBlockResponse& operator=(GetTxBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockResponse*>(
               &_GetTxBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetTxBlockResponse& a, GetTxBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxBlockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxBlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTxBlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTxBlockResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.GetTxBlockResponse";
  }
  protected:
  explicit GetTxBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // optional bytes block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const std::string& block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block();
  PROTOBUF_NODISCARD std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetTxBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class AccountHeightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.AccountHeightRequest) */ {
 public:
  inline AccountHeightRequest() : AccountHeightRequest(nullptr) {}
  ~AccountHeightRequest() override;
  explicit PROTOBUF_CONSTEXPR AccountHeightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountHeightRequest(const AccountHeightRequest& from);
  AccountHeightRequest(AccountHeightRequest&& from) noexcept
    : AccountHeightRequest() {
    *this = ::std::move(from);
  }

  inline AccountHeightRequest& operator=(const AccountHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountHeightRequest& operator=(AccountHeightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountHeightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountHeightRequest* internal_default_instance() {
    return reinterpret_cast<const AccountHeightRequest*>(
               &_AccountHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AccountHeightRequest& a, AccountHeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountHeightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountHeightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountHeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountHeightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountHeightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountHeightRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountHeightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.AccountHeightRequest";
  }
  protected:
  explicit AccountHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountAddrFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // optional bytes account_addr = 1;
  bool has_account_addr() const;
  private:
  bool _internal_has_account_addr() const;
  public:
  void clear_account_addr();
  const std::string& account_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_addr();
  PROTOBUF_NODISCARD std::string* release_account_addr();
  void set_allocated_account_addr(std::string* account_addr);
  private:
  const std::string& _internal_account_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_addr(const std::string& value);
  std::string* _internal_mutable_account_addr();
  public:

  // optional int64 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int64_t index() const;
  void set_index(int64_t value);
  private:
  int64_t _internal_index() const;
  void _internal_set_index(int64_t value);
  public:

  // optional int32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountHeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_addr_;
  int64_t index_;
  int32_t count_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class AccountHeightResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.AccountHeightResponse) */ {
 public:
  inline AccountHeightResponse() : AccountHeightResponse(nullptr) {}
  ~AccountHeightResponse() override;
  explicit PROTOBUF_CONSTEXPR AccountHeightResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountHeightResponse(const AccountHeightResponse& from);
  AccountHeightResponse(AccountHeightResponse&& from) noexcept
    : AccountHeightResponse() {
    *this = ::std::move(from);
  }

  inline AccountHeightResponse& operator=(const AccountHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountHeightResponse& operator=(AccountHeightResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountHeightResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountHeightResponse* internal_default_instance() {
    return reinterpret_cast<const AccountHeightResponse*>(
               &_AccountHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AccountHeightResponse& a, AccountHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountHeightResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountHeightResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountHeightResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountHeightResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountHeightResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountHeightResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.AccountHeightResponse";
  }
  protected:
  explicit AccountHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 1,
    kAccountAddrFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated uint64 heights = 1;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // optional bytes account_addr = 2;
  bool has_account_addr() const;
  private:
  bool _internal_has_account_addr() const;
  public:
  void clear_account_addr();
  const std::string& account_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_addr();
  PROTOBUF_NODISCARD std::string* release_account_addr();
  void set_allocated_account_addr(std::string* account_addr);
  private:
  const std::string& _internal_account_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_addr(const std::string& value);
  std::string* _internal_mutable_account_addr();
  public:

  // optional bytes type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class AccountAttrRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.AccountAttrRequest) */ {
 public:
  inline AccountAttrRequest() : AccountAttrRequest(nullptr) {}
  ~AccountAttrRequest() override;
  explicit PROTOBUF_CONSTEXPR AccountAttrRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountAttrRequest(const AccountAttrRequest& from);
  AccountAttrRequest(AccountAttrRequest&& from) noexcept
    : AccountAttrRequest() {
    *this = ::std::move(from);
  }

  inline AccountAttrRequest& operator=(const AccountAttrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountAttrRequest& operator=(AccountAttrRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountAttrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountAttrRequest* internal_default_instance() {
    return reinterpret_cast<const AccountAttrRequest*>(
               &_AccountAttrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AccountAttrRequest& a, AccountAttrRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountAttrRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountAttrRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountAttrRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountAttrRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountAttrRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountAttrRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountAttrRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.AccountAttrRequest";
  }
  protected:
  explicit AccountAttrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kAttrKeyFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // optional bytes account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // optional bytes attr_key = 2;
  bool has_attr_key() const;
  private:
  bool _internal_has_attr_key() const;
  public:
  void clear_attr_key();
  const std::string& attr_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attr_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attr_key();
  PROTOBUF_NODISCARD std::string* release_attr_key();
  void set_allocated_attr_key(std::string* attr_key);
  private:
  const std::string& _internal_attr_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attr_key(const std::string& value);
  std::string* _internal_mutable_attr_key();
  public:

  // optional uint64 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountAttrRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_key_;
  uint64_t height_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class AccountAttrResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.AccountAttrResponse) */ {
 public:
  inline AccountAttrResponse() : AccountAttrResponse(nullptr) {}
  ~AccountAttrResponse() override;
  explicit PROTOBUF_CONSTEXPR AccountAttrResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountAttrResponse(const AccountAttrResponse& from);
  AccountAttrResponse(AccountAttrResponse&& from) noexcept
    : AccountAttrResponse() {
    *this = ::std::move(from);
  }

  inline AccountAttrResponse& operator=(const AccountAttrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountAttrResponse& operator=(AccountAttrResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountAttrResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountAttrResponse* internal_default_instance() {
    return reinterpret_cast<const AccountAttrResponse*>(
               &_AccountAttrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AccountAttrResponse& a, AccountAttrResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountAttrResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountAttrResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountAttrResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountAttrResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountAttrResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountAttrResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountAttrResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.AccountAttrResponse";
  }
  protected:
  explicit AccountAttrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kAttrKeyFieldNumber = 2,
    kBlockFieldNumber = 4,
    kHeightFieldNumber = 3,
  };
  // optional bytes account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // optional bytes attr_key = 2;
  bool has_attr_key() const;
  private:
  bool _internal_has_attr_key() const;
  public:
  void clear_attr_key();
  const std::string& attr_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attr_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attr_key();
  PROTOBUF_NODISCARD std::string* release_attr_key();
  void set_allocated_attr_key(std::string* attr_key);
  private:
  const std::string& _internal_attr_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attr_key(const std::string& value);
  std::string* _internal_mutable_attr_key();
  public:

  // optional bytes block = 4;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const std::string& block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block();
  PROTOBUF_NODISCARD std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // optional uint64 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountAttrResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  uint64_t height_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class UpdateVpnCountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.UpdateVpnCountRequest) */ {
 public:
  inline UpdateVpnCountRequest() : UpdateVpnCountRequest(nullptr) {}
  ~UpdateVpnCountRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateVpnCountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVpnCountRequest(const UpdateVpnCountRequest& from);
  UpdateVpnCountRequest(UpdateVpnCountRequest&& from) noexcept
    : UpdateVpnCountRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVpnCountRequest& operator=(const UpdateVpnCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVpnCountRequest& operator=(UpdateVpnCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVpnCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVpnCountRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVpnCountRequest*>(
               &_UpdateVpnCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateVpnCountRequest& a, UpdateVpnCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVpnCountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVpnCountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVpnCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVpnCountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVpnCountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVpnCountRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVpnCountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.UpdateVpnCountRequest";
  }
  protected:
  explicit UpdateVpnCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kOldIpFieldNumber = 3,
    kUidFieldNumber = 4,
    kAccountHashFieldNumber = 1,
    kJustSetFieldNumber = 5,
  };
  // optional bytes ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional bytes old_ip = 3;
  bool has_old_ip() const;
  private:
  bool _internal_has_old_ip() const;
  public:
  void clear_old_ip();
  const std::string& old_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_ip();
  PROTOBUF_NODISCARD std::string* release_old_ip();
  void set_allocated_old_ip(std::string* old_ip);
  private:
  const std::string& _internal_old_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_ip(const std::string& value);
  std::string* _internal_mutable_old_ip();
  public:

  // optional bytes uid = 4;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // optional uint64 account_hash = 1;
  bool has_account_hash() const;
  private:
  bool _internal_has_account_hash() const;
  public:
  void clear_account_hash();
  uint64_t account_hash() const;
  void set_account_hash(uint64_t value);
  private:
  uint64_t _internal_account_hash() const;
  void _internal_set_account_hash(uint64_t value);
  public:

  // optional bool just_set = 5;
  bool has_just_set() const;
  private:
  bool _internal_has_just_set() const;
  public:
  void clear_just_set();
  bool just_set() const;
  void set_just_set(bool value);
  private:
  bool _internal_just_set() const;
  void _internal_set_just_set(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.UpdateVpnCountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  uint64_t account_hash_;
  bool just_set_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class VpnCountItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.VpnCountItem) */ {
 public:
  inline VpnCountItem() : VpnCountItem(nullptr) {}
  ~VpnCountItem() override;
  explicit PROTOBUF_CONSTEXPR VpnCountItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VpnCountItem(const VpnCountItem& from);
  VpnCountItem(VpnCountItem&& from) noexcept
    : VpnCountItem() {
    *this = ::std::move(from);
  }

  inline VpnCountItem& operator=(const VpnCountItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline VpnCountItem& operator=(VpnCountItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VpnCountItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const VpnCountItem* internal_default_instance() {
    return reinterpret_cast<const VpnCountItem*>(
               &_VpnCountItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VpnCountItem& a, VpnCountItem& b) {
    a.Swap(&b);
  }
  inline void Swap(VpnCountItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VpnCountItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VpnCountItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VpnCountItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VpnCountItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VpnCountItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VpnCountItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.VpnCountItem";
  }
  protected:
  explicit VpnCountItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional bytes ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.VpnCountItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  uint32_t count_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class UpdateVpnCountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.UpdateVpnCountResponse) */ {
 public:
  inline UpdateVpnCountResponse() : UpdateVpnCountResponse(nullptr) {}
  ~UpdateVpnCountResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateVpnCountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVpnCountResponse(const UpdateVpnCountResponse& from);
  UpdateVpnCountResponse(UpdateVpnCountResponse&& from) noexcept
    : UpdateVpnCountResponse() {
    *this = ::std::move(from);
  }

  inline UpdateVpnCountResponse& operator=(const UpdateVpnCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVpnCountResponse& operator=(UpdateVpnCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVpnCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVpnCountResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateVpnCountResponse*>(
               &_UpdateVpnCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateVpnCountResponse& a, UpdateVpnCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVpnCountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVpnCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVpnCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVpnCountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVpnCountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVpnCountResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVpnCountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.UpdateVpnCountResponse";
  }
  protected:
  explicit UpdateVpnCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVpnNodesFieldNumber = 1,
  };
  // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
  int vpn_nodes_size() const;
  private:
  int _internal_vpn_nodes_size() const;
  public:
  void clear_vpn_nodes();
  ::zjchain::block::protobuf::VpnCountItem* mutable_vpn_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >*
      mutable_vpn_nodes();
  private:
  const ::zjchain::block::protobuf::VpnCountItem& _internal_vpn_nodes(int index) const;
  ::zjchain::block::protobuf::VpnCountItem* _internal_add_vpn_nodes();
  public:
  const ::zjchain::block::protobuf::VpnCountItem& vpn_nodes(int index) const;
  ::zjchain::block::protobuf::VpnCountItem* add_vpn_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >&
      vpn_nodes() const;

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.UpdateVpnCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem > vpn_nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class GetAccountInitInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.GetAccountInitInfoRequest) */ {
 public:
  inline GetAccountInitInfoRequest() : GetAccountInitInfoRequest(nullptr) {}
  ~GetAccountInitInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAccountInitInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccountInitInfoRequest(const GetAccountInitInfoRequest& from);
  GetAccountInitInfoRequest(GetAccountInitInfoRequest&& from) noexcept
    : GetAccountInitInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountInitInfoRequest& operator=(const GetAccountInitInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountInitInfoRequest& operator=(GetAccountInitInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccountInitInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccountInitInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountInitInfoRequest*>(
               &_GetAccountInitInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetAccountInitInfoRequest& a, GetAccountInitInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountInitInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccountInitInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccountInitInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccountInitInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccountInitInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAccountInitInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountInitInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.GetAccountInitInfoRequest";
  }
  protected:
  explicit GetAccountInitInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHeightFieldNumber = 3,
    kNetIdFieldNumber = 4,
    kIndexFieldNumber = 5,
    kCountFieldNumber = 2,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional uint64 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // optional uint64 net_id = 4;
  bool has_net_id() const;
  private:
  bool _internal_has_net_id() const;
  public:
  void clear_net_id();
  uint64_t net_id() const;
  void set_net_id(uint64_t value);
  private:
  uint64_t _internal_net_id() const;
  void _internal_set_net_id(uint64_t value);
  public:

  // optional uint64 index = 5;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountInitInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint64_t height_;
  uint64_t net_id_;
  uint64_t index_;
  uint32_t count_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class GetAccountInitInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.GetAccountInitInfoResponse) */ {
 public:
  inline GetAccountInitInfoResponse() : GetAccountInitInfoResponse(nullptr) {}
  ~GetAccountInitInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAccountInitInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccountInitInfoResponse(const GetAccountInitInfoResponse& from);
  GetAccountInitInfoResponse(GetAccountInitInfoResponse&& from) noexcept
    : GetAccountInitInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountInitInfoResponse& operator=(const GetAccountInitInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountInitInfoResponse& operator=(GetAccountInitInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccountInitInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccountInitInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountInitInfoResponse*>(
               &_GetAccountInitInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetAccountInitInfoResponse& a, GetAccountInitInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountInitInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccountInitInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccountInitInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccountInitInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccountInitInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAccountInitInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountInitInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.GetAccountInitInfoResponse";
  }
  protected:
  explicit GetAccountInitInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockListFieldNumber = 2,
    kIdFieldNumber = 3,
    kBalanceFieldNumber = 1,
    kMaxIndexFieldNumber = 4,
  };
  // repeated .zjchain.block.protobuf.Block block_list = 2;
  int block_list_size() const;
  private:
  int _internal_block_list_size() const;
  public:
  void clear_block_list();
  ::zjchain::block::protobuf::Block* mutable_block_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::Block >*
      mutable_block_list();
  private:
  const ::zjchain::block::protobuf::Block& _internal_block_list(int index) const;
  ::zjchain::block::protobuf::Block* _internal_add_block_list();
  public:
  const ::zjchain::block::protobuf::Block& block_list(int index) const;
  ::zjchain::block::protobuf::Block* add_block_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::Block >&
      block_list() const;

  // optional bytes id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional uint64 balance = 1;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // optional uint64 max_index = 4;
  bool has_max_index() const;
  private:
  bool _internal_has_max_index() const;
  public:
  void clear_max_index();
  uint64_t max_index() const;
  void set_max_index(uint64_t value);
  private:
  uint64_t _internal_max_index() const;
  void _internal_set_max_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountInitInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::Block > block_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint64_t balance_;
  uint64_t max_index_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class UpdateVpnActiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.UpdateVpnActiveRequest) */ {
 public:
  inline UpdateVpnActiveRequest() : UpdateVpnActiveRequest(nullptr) {}
  ~UpdateVpnActiveRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateVpnActiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVpnActiveRequest(const UpdateVpnActiveRequest& from);
  UpdateVpnActiveRequest(UpdateVpnActiveRequest&& from) noexcept
    : UpdateVpnActiveRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVpnActiveRequest& operator=(const UpdateVpnActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVpnActiveRequest& operator=(UpdateVpnActiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVpnActiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVpnActiveRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVpnActiveRequest*>(
               &_UpdateVpnActiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateVpnActiveRequest& a, UpdateVpnActiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVpnActiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVpnActiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVpnActiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVpnActiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVpnActiveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVpnActiveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVpnActiveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.UpdateVpnActiveRequest";
  }
  protected:
  explicit UpdateVpnActiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.UpdateVpnActiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class AdRewardRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.AdRewardRequest) */ {
 public:
  inline AdRewardRequest() : AdRewardRequest(nullptr) {}
  ~AdRewardRequest() override;
  explicit PROTOBUF_CONSTEXPR AdRewardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdRewardRequest(const AdRewardRequest& from);
  AdRewardRequest(AdRewardRequest&& from) noexcept
    : AdRewardRequest() {
    *this = ::std::move(from);
  }

  inline AdRewardRequest& operator=(const AdRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdRewardRequest& operator=(AdRewardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdRewardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdRewardRequest* internal_default_instance() {
    return reinterpret_cast<const AdRewardRequest*>(
               &_AdRewardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AdRewardRequest& a, AdRewardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdRewardRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdRewardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdRewardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdRewardRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdRewardRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AdRewardRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdRewardRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.AdRewardRequest";
  }
  protected:
  explicit AdRewardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRewardKeyFieldNumber = 2,
    kGidFieldNumber = 3,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes reward_key = 2;
  bool has_reward_key() const;
  private:
  bool _internal_has_reward_key() const;
  public:
  void clear_reward_key();
  const std::string& reward_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_key();
  PROTOBUF_NODISCARD std::string* release_reward_key();
  void set_allocated_reward_key(std::string* reward_key);
  private:
  const std::string& _internal_reward_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_key(const std::string& value);
  std::string* _internal_mutable_reward_key();
  public:

  // optional bytes gid = 3;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  const std::string& gid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gid();
  PROTOBUF_NODISCARD std::string* release_gid();
  void set_allocated_gid(std::string* gid);
  private:
  const std::string& _internal_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gid(const std::string& value);
  std::string* _internal_mutable_gid();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AdRewardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gid_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class ElectStatisticInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.ElectStatisticInfo) */ {
 public:
  inline ElectStatisticInfo() : ElectStatisticInfo(nullptr) {}
  ~ElectStatisticInfo() override;
  explicit PROTOBUF_CONSTEXPR ElectStatisticInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElectStatisticInfo(const ElectStatisticInfo& from);
  ElectStatisticInfo(ElectStatisticInfo&& from) noexcept
    : ElectStatisticInfo() {
    *this = ::std::move(from);
  }

  inline ElectStatisticInfo& operator=(const ElectStatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectStatisticInfo& operator=(ElectStatisticInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElectStatisticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElectStatisticInfo* internal_default_instance() {
    return reinterpret_cast<const ElectStatisticInfo*>(
               &_ElectStatisticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ElectStatisticInfo& a, ElectStatisticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectStatisticInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectStatisticInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElectStatisticInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElectStatisticInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElectStatisticInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ElectStatisticInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectStatisticInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.ElectStatisticInfo";
  }
  protected:
  explicit ElectStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccTxCountFieldNumber = 2,
    kLofLeadersFieldNumber = 3,
    kElectHeightFieldNumber = 1,
  };
  // repeated uint32 succ_tx_count = 2;
  int succ_tx_count_size() const;
  private:
  int _internal_succ_tx_count_size() const;
  public:
  void clear_succ_tx_count();
  private:
  uint32_t _internal_succ_tx_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_succ_tx_count() const;
  void _internal_add_succ_tx_count(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_succ_tx_count();
  public:
  uint32_t succ_tx_count(int index) const;
  void set_succ_tx_count(int index, uint32_t value);
  void add_succ_tx_count(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      succ_tx_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_succ_tx_count();

  // repeated uint32 lof_leaders = 3;
  int lof_leaders_size() const;
  private:
  int _internal_lof_leaders_size() const;
  public:
  void clear_lof_leaders();
  private:
  uint32_t _internal_lof_leaders(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_lof_leaders() const;
  void _internal_add_lof_leaders(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_lof_leaders();
  public:
  uint32_t lof_leaders(int index) const;
  void set_lof_leaders(int index, uint32_t value);
  void add_lof_leaders(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      lof_leaders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_lof_leaders();

  // optional uint64 elect_height = 1;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ElectStatisticInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > succ_tx_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > lof_leaders_;
  uint64_t elect_height_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class StatisticInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.StatisticInfo) */ {
 public:
  inline StatisticInfo() : StatisticInfo(nullptr) {}
  ~StatisticInfo() override;
  explicit PROTOBUF_CONSTEXPR StatisticInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticInfo(const StatisticInfo& from);
  StatisticInfo(StatisticInfo&& from) noexcept
    : StatisticInfo() {
    *this = ::std::move(from);
  }

  inline StatisticInfo& operator=(const StatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticInfo& operator=(StatisticInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatisticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticInfo* internal_default_instance() {
    return reinterpret_cast<const StatisticInfo*>(
               &_StatisticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StatisticInfo& a, StatisticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatisticInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatisticInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatisticInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatisticInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.StatisticInfo";
  }
  protected:
  explicit StatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElectStatisticFieldNumber = 3,
    kTimeblockHeightFieldNumber = 1,
    kAllTxCountFieldNumber = 2,
  };
  // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  int elect_statistic_size() const;
  private:
  int _internal_elect_statistic_size() const;
  public:
  void clear_elect_statistic();
  ::zjchain::block::protobuf::ElectStatisticInfo* mutable_elect_statistic(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >*
      mutable_elect_statistic();
  private:
  const ::zjchain::block::protobuf::ElectStatisticInfo& _internal_elect_statistic(int index) const;
  ::zjchain::block::protobuf::ElectStatisticInfo* _internal_add_elect_statistic();
  public:
  const ::zjchain::block::protobuf::ElectStatisticInfo& elect_statistic(int index) const;
  ::zjchain::block::protobuf::ElectStatisticInfo* add_elect_statistic();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >&
      elect_statistic() const;

  // optional uint64 timeblock_height = 1;
  bool has_timeblock_height() const;
  private:
  bool _internal_has_timeblock_height() const;
  public:
  void clear_timeblock_height();
  uint64_t timeblock_height() const;
  void set_timeblock_height(uint64_t value);
  private:
  uint64_t _internal_timeblock_height() const;
  void _internal_set_timeblock_height(uint64_t value);
  public:

  // optional uint32 all_tx_count = 2;
  bool has_all_tx_count() const;
  private:
  bool _internal_has_all_tx_count() const;
  public:
  void clear_all_tx_count();
  uint32_t all_tx_count() const;
  void set_all_tx_count(uint32_t value);
  private:
  uint32_t _internal_all_tx_count() const;
  void _internal_set_all_tx_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.StatisticInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo > elect_statistic_;
  uint64_t timeblock_height_;
  uint32_t all_tx_count_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class RefreshPoolHeightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.RefreshPoolHeightRequest) */ {
 public:
  inline RefreshPoolHeightRequest() : RefreshPoolHeightRequest(nullptr) {}
  ~RefreshPoolHeightRequest() override;
  explicit PROTOBUF_CONSTEXPR RefreshPoolHeightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefreshPoolHeightRequest(const RefreshPoolHeightRequest& from);
  RefreshPoolHeightRequest(RefreshPoolHeightRequest&& from) noexcept
    : RefreshPoolHeightRequest() {
    *this = ::std::move(from);
  }

  inline RefreshPoolHeightRequest& operator=(const RefreshPoolHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshPoolHeightRequest& operator=(RefreshPoolHeightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefreshPoolHeightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefreshPoolHeightRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshPoolHeightRequest*>(
               &_RefreshPoolHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RefreshPoolHeightRequest& a, RefreshPoolHeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshPoolHeightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshPoolHeightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RefreshPoolHeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RefreshPoolHeightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RefreshPoolHeightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RefreshPoolHeightRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshPoolHeightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.RefreshPoolHeightRequest";
  }
  protected:
  explicit RefreshPoolHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 1,
  };
  // repeated uint64 heights = 1;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.RefreshPoolHeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class RefreshPoolHeightResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.RefreshPoolHeightResponse) */ {
 public:
  inline RefreshPoolHeightResponse() : RefreshPoolHeightResponse(nullptr) {}
  ~RefreshPoolHeightResponse() override;
  explicit PROTOBUF_CONSTEXPR RefreshPoolHeightResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefreshPoolHeightResponse(const RefreshPoolHeightResponse& from);
  RefreshPoolHeightResponse(RefreshPoolHeightResponse&& from) noexcept
    : RefreshPoolHeightResponse() {
    *this = ::std::move(from);
  }

  inline RefreshPoolHeightResponse& operator=(const RefreshPoolHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshPoolHeightResponse& operator=(RefreshPoolHeightResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefreshPoolHeightResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefreshPoolHeightResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshPoolHeightResponse*>(
               &_RefreshPoolHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(RefreshPoolHeightResponse& a, RefreshPoolHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshPoolHeightResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshPoolHeightResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RefreshPoolHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RefreshPoolHeightResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RefreshPoolHeightResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RefreshPoolHeightResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshPoolHeightResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.RefreshPoolHeightResponse";
  }
  protected:
  explicit RefreshPoolHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 1,
  };
  // repeated uint64 heights = 1;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  uint64_t _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_heights() const;
  void _internal_add_heights(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_heights();
  public:
  uint64_t heights(int index) const;
  void set_heights(int index, uint64_t value);
  void add_heights(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_heights();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.RefreshPoolHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > heights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class GetAccountShardRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.GetAccountShardRequest) */ {
 public:
  inline GetAccountShardRequest() : GetAccountShardRequest(nullptr) {}
  ~GetAccountShardRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAccountShardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccountShardRequest(const GetAccountShardRequest& from);
  GetAccountShardRequest(GetAccountShardRequest&& from) noexcept
    : GetAccountShardRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountShardRequest& operator=(const GetAccountShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountShardRequest& operator=(GetAccountShardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccountShardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccountShardRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountShardRequest*>(
               &_GetAccountShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetAccountShardRequest& a, GetAccountShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountShardRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccountShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccountShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccountShardRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccountShardRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAccountShardRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountShardRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.GetAccountShardRequest";
  }
  protected:
  explicit GetAccountShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class GetAccountShardReponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.GetAccountShardReponse) */ {
 public:
  inline GetAccountShardReponse() : GetAccountShardReponse(nullptr) {}
  ~GetAccountShardReponse() override;
  explicit PROTOBUF_CONSTEXPR GetAccountShardReponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccountShardReponse(const GetAccountShardReponse& from);
  GetAccountShardReponse(GetAccountShardReponse&& from) noexcept
    : GetAccountShardReponse() {
    *this = ::std::move(from);
  }

  inline GetAccountShardReponse& operator=(const GetAccountShardReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountShardReponse& operator=(GetAccountShardReponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccountShardReponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccountShardReponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountShardReponse*>(
               &_GetAccountShardReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetAccountShardReponse& a, GetAccountShardReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountShardReponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccountShardReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccountShardReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccountShardReponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccountShardReponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAccountShardReponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountShardReponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.GetAccountShardReponse";
  }
  protected:
  explicit GetAccountShardReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kShardIdFieldNumber = 2,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional uint32 shard_id = 2;
  bool has_shard_id() const;
  private:
  bool _internal_has_shard_id() const;
  public:
  void clear_shard_id();
  uint32_t shard_id() const;
  void set_shard_id(uint32_t value);
  private:
  uint32_t _internal_shard_id() const;
  void _internal_set_shard_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountShardReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint32_t shard_id_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class CrossShardingTosMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.CrossShardingTosMessage) */ {
 public:
  inline CrossShardingTosMessage() : CrossShardingTosMessage(nullptr) {}
  ~CrossShardingTosMessage() override;
  explicit PROTOBUF_CONSTEXPR CrossShardingTosMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrossShardingTosMessage(const CrossShardingTosMessage& from);
  CrossShardingTosMessage(CrossShardingTosMessage&& from) noexcept
    : CrossShardingTosMessage() {
    *this = ::std::move(from);
  }

  inline CrossShardingTosMessage& operator=(const CrossShardingTosMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossShardingTosMessage& operator=(CrossShardingTosMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossShardingTosMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossShardingTosMessage* internal_default_instance() {
    return reinterpret_cast<const CrossShardingTosMessage*>(
               &_CrossShardingTosMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CrossShardingTosMessage& a, CrossShardingTosMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossShardingTosMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossShardingTosMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossShardingTosMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrossShardingTosMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrossShardingTosMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CrossShardingTosMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossShardingTosMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.CrossShardingTosMessage";
  }
  protected:
  explicit CrossShardingTosMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // optional .zjchain.block.protobuf.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::zjchain::block::protobuf::Block& block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::Block* release_block();
  ::zjchain::block::protobuf::Block* mutable_block();
  void set_allocated_block(::zjchain::block::protobuf::Block* block);
  private:
  const ::zjchain::block::protobuf::Block& _internal_block() const;
  ::zjchain::block::protobuf::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::zjchain::block::protobuf::Block* block);
  ::zjchain::block::protobuf::Block* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.CrossShardingTosMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::block::protobuf::Block* block_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class CrossShardingStatisticMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.CrossShardingStatisticMessage) */ {
 public:
  inline CrossShardingStatisticMessage() : CrossShardingStatisticMessage(nullptr) {}
  ~CrossShardingStatisticMessage() override;
  explicit PROTOBUF_CONSTEXPR CrossShardingStatisticMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrossShardingStatisticMessage(const CrossShardingStatisticMessage& from);
  CrossShardingStatisticMessage(CrossShardingStatisticMessage&& from) noexcept
    : CrossShardingStatisticMessage() {
    *this = ::std::move(from);
  }

  inline CrossShardingStatisticMessage& operator=(const CrossShardingStatisticMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossShardingStatisticMessage& operator=(CrossShardingStatisticMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossShardingStatisticMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossShardingStatisticMessage* internal_default_instance() {
    return reinterpret_cast<const CrossShardingStatisticMessage*>(
               &_CrossShardingStatisticMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CrossShardingStatisticMessage& a, CrossShardingStatisticMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossShardingStatisticMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossShardingStatisticMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossShardingStatisticMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrossShardingStatisticMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrossShardingStatisticMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CrossShardingStatisticMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossShardingStatisticMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.CrossShardingStatisticMessage";
  }
  protected:
  explicit CrossShardingStatisticMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // optional .zjchain.block.protobuf.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::zjchain::block::protobuf::Block& block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::Block* release_block();
  ::zjchain::block::protobuf::Block* mutable_block();
  void set_allocated_block(::zjchain::block::protobuf::Block* block);
  private:
  const ::zjchain::block::protobuf::Block& _internal_block() const;
  ::zjchain::block::protobuf::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::zjchain::block::protobuf::Block* block);
  ::zjchain::block::protobuf::Block* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.CrossShardingStatisticMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::block::protobuf::Block* block_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class ElectBlockMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.ElectBlockMessage) */ {
 public:
  inline ElectBlockMessage() : ElectBlockMessage(nullptr) {}
  ~ElectBlockMessage() override;
  explicit PROTOBUF_CONSTEXPR ElectBlockMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ElectBlockMessage(const ElectBlockMessage& from);
  ElectBlockMessage(ElectBlockMessage&& from) noexcept
    : ElectBlockMessage() {
    *this = ::std::move(from);
  }

  inline ElectBlockMessage& operator=(const ElectBlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectBlockMessage& operator=(ElectBlockMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElectBlockMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElectBlockMessage* internal_default_instance() {
    return reinterpret_cast<const ElectBlockMessage*>(
               &_ElectBlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ElectBlockMessage& a, ElectBlockMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectBlockMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectBlockMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElectBlockMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElectBlockMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ElectBlockMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ElectBlockMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectBlockMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.ElectBlockMessage";
  }
  protected:
  explicit ElectBlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // optional .zjchain.block.protobuf.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::zjchain::block::protobuf::Block& block() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::Block* release_block();
  ::zjchain::block::protobuf::Block* mutable_block();
  void set_allocated_block(::zjchain::block::protobuf::Block* block);
  private:
  const ::zjchain::block::protobuf::Block& _internal_block() const;
  ::zjchain::block::protobuf::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::zjchain::block::protobuf::Block* block);
  ::zjchain::block::protobuf::Block* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ElectBlockMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::block::protobuf::Block* block_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class ShardToTxMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.ShardToTxMessage) */ {
 public:
  inline ShardToTxMessage() : ShardToTxMessage(nullptr) {}
  ~ShardToTxMessage() override;
  explicit PROTOBUF_CONSTEXPR ShardToTxMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardToTxMessage(const ShardToTxMessage& from);
  ShardToTxMessage(ShardToTxMessage&& from) noexcept
    : ShardToTxMessage() {
    *this = ::std::move(from);
  }

  inline ShardToTxMessage& operator=(const ShardToTxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardToTxMessage& operator=(ShardToTxMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardToTxMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardToTxMessage* internal_default_instance() {
    return reinterpret_cast<const ShardToTxMessage*>(
               &_ShardToTxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ShardToTxMessage& a, ShardToTxMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardToTxMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardToTxMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardToTxMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardToTxMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardToTxMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShardToTxMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardToTxMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.ShardToTxMessage";
  }
  protected:
  explicit ShardToTxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToTxsFieldNumber = 1,
    kElectHeightFieldNumber = 3,
    kLeaderIdxFieldNumber = 2,
    kLeaderToIdxFieldNumber = 4,
  };
  // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
  int to_txs_size() const;
  private:
  int _internal_to_txs_size() const;
  public:
  void clear_to_txs();
  ::zjchain::pools::protobuf::ShardToTxItem* mutable_to_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >*
      mutable_to_txs();
  private:
  const ::zjchain::pools::protobuf::ShardToTxItem& _internal_to_txs(int index) const;
  ::zjchain::pools::protobuf::ShardToTxItem* _internal_add_to_txs();
  public:
  const ::zjchain::pools::protobuf::ShardToTxItem& to_txs(int index) const;
  ::zjchain::pools::protobuf::ShardToTxItem* add_to_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >&
      to_txs() const;

  // optional uint64 elect_height = 3;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // optional uint32 leader_idx = 2;
  bool has_leader_idx() const;
  private:
  bool _internal_has_leader_idx() const;
  public:
  void clear_leader_idx();
  uint32_t leader_idx() const;
  void set_leader_idx(uint32_t value);
  private:
  uint32_t _internal_leader_idx() const;
  void _internal_set_leader_idx(uint32_t value);
  public:

  // optional int32 leader_to_idx = 4;
  bool has_leader_to_idx() const;
  private:
  bool _internal_has_leader_to_idx() const;
  public:
  void clear_leader_to_idx();
  int32_t leader_to_idx() const;
  void set_leader_to_idx(int32_t value);
  private:
  int32_t _internal_leader_to_idx() const;
  void _internal_set_leader_to_idx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ShardToTxMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem > to_txs_;
  uint64_t elect_height_;
  uint32_t leader_idx_;
  int32_t leader_to_idx_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class StatisticTxMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.StatisticTxMessage) */ {
 public:
  inline StatisticTxMessage() : StatisticTxMessage(nullptr) {}
  ~StatisticTxMessage() override;
  explicit PROTOBUF_CONSTEXPR StatisticTxMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticTxMessage(const StatisticTxMessage& from);
  StatisticTxMessage(StatisticTxMessage&& from) noexcept
    : StatisticTxMessage() {
    *this = ::std::move(from);
  }

  inline StatisticTxMessage& operator=(const StatisticTxMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticTxMessage& operator=(StatisticTxMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatisticTxMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticTxMessage* internal_default_instance() {
    return reinterpret_cast<const StatisticTxMessage*>(
               &_StatisticTxMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(StatisticTxMessage& a, StatisticTxMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticTxMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticTxMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatisticTxMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatisticTxMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatisticTxMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatisticTxMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticTxMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.StatisticTxMessage";
  }
  protected:
  explicit StatisticTxMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticFieldNumber = 1,
    kElectHeightFieldNumber = 3,
    kLeaderIdxFieldNumber = 2,
    kLeaderToIdxFieldNumber = 4,
  };
  // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
  bool has_statistic() const;
  private:
  bool _internal_has_statistic() const;
  public:
  void clear_statistic();
  const ::zjchain::pools::protobuf::StatisticTxItem& statistic() const;
  PROTOBUF_NODISCARD ::zjchain::pools::protobuf::StatisticTxItem* release_statistic();
  ::zjchain::pools::protobuf::StatisticTxItem* mutable_statistic();
  void set_allocated_statistic(::zjchain::pools::protobuf::StatisticTxItem* statistic);
  private:
  const ::zjchain::pools::protobuf::StatisticTxItem& _internal_statistic() const;
  ::zjchain::pools::protobuf::StatisticTxItem* _internal_mutable_statistic();
  public:
  void unsafe_arena_set_allocated_statistic(
      ::zjchain::pools::protobuf::StatisticTxItem* statistic);
  ::zjchain::pools::protobuf::StatisticTxItem* unsafe_arena_release_statistic();

  // optional uint64 elect_height = 3;
  bool has_elect_height() const;
  private:
  bool _internal_has_elect_height() const;
  public:
  void clear_elect_height();
  uint64_t elect_height() const;
  void set_elect_height(uint64_t value);
  private:
  uint64_t _internal_elect_height() const;
  void _internal_set_elect_height(uint64_t value);
  public:

  // optional uint32 leader_idx = 2;
  bool has_leader_idx() const;
  private:
  bool _internal_has_leader_idx() const;
  public:
  void clear_leader_idx();
  uint32_t leader_idx() const;
  void set_leader_idx(uint32_t value);
  private:
  uint32_t _internal_leader_idx() const;
  void _internal_set_leader_idx(uint32_t value);
  public:

  // optional int32 leader_to_idx = 4;
  bool has_leader_to_idx() const;
  private:
  bool _internal_has_leader_to_idx() const;
  public:
  void clear_leader_to_idx();
  int32_t leader_to_idx() const;
  void set_leader_to_idx(int32_t value);
  private:
  int32_t _internal_leader_to_idx() const;
  void _internal_set_leader_to_idx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.StatisticTxMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::pools::protobuf::StatisticTxItem* statistic_;
  uint64_t elect_height_;
  uint32_t leader_idx_;
  int32_t leader_to_idx_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// -------------------------------------------------------------------

class BlockMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.block.protobuf.BlockMessage) */ {
 public:
  inline BlockMessage() : BlockMessage(nullptr) {}
  ~BlockMessage() override;
  explicit PROTOBUF_CONSTEXPR BlockMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMessage(const BlockMessage& from);
  BlockMessage(BlockMessage&& from) noexcept
    : BlockMessage() {
    *this = ::std::move(from);
  }

  inline BlockMessage& operator=(const BlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMessage& operator=(BlockMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMessage* internal_default_instance() {
    return reinterpret_cast<const BlockMessage*>(
               &_BlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BlockMessage& a, BlockMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.block.protobuf.BlockMessage";
  }
  protected:
  explicit BlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockReqFieldNumber = 1,
    kBlockResFieldNumber = 2,
    kHeightReqFieldNumber = 3,
    kHeightResFieldNumber = 4,
    kAccAttrReqFieldNumber = 5,
    kAccAttrResFieldNumber = 6,
    kUpVpnReqFieldNumber = 7,
    kUpVpnResFieldNumber = 8,
    kAccountInitReqFieldNumber = 9,
    kAccountInitResFieldNumber = 10,
    kVpnActiveReqFieldNumber = 11,
    kAdRewardReqFieldNumber = 12,
    kRefHeightsReqFieldNumber = 13,
    kRefHeightsResFieldNumber = 14,
    kAccShardReqFieldNumber = 15,
    kAccShardResFieldNumber = 16,
    kShardToFieldNumber = 17,
    kStatisticTxFieldNumber = 18,
  };
  // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
  bool has_block_req() const;
  private:
  bool _internal_has_block_req() const;
  public:
  void clear_block_req();
  const ::zjchain::block::protobuf::GetTxBlockRequest& block_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::GetTxBlockRequest* release_block_req();
  ::zjchain::block::protobuf::GetTxBlockRequest* mutable_block_req();
  void set_allocated_block_req(::zjchain::block::protobuf::GetTxBlockRequest* block_req);
  private:
  const ::zjchain::block::protobuf::GetTxBlockRequest& _internal_block_req() const;
  ::zjchain::block::protobuf::GetTxBlockRequest* _internal_mutable_block_req();
  public:
  void unsafe_arena_set_allocated_block_req(
      ::zjchain::block::protobuf::GetTxBlockRequest* block_req);
  ::zjchain::block::protobuf::GetTxBlockRequest* unsafe_arena_release_block_req();

  // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
  bool has_block_res() const;
  private:
  bool _internal_has_block_res() const;
  public:
  void clear_block_res();
  const ::zjchain::block::protobuf::GetTxBlockResponse& block_res() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::GetTxBlockResponse* release_block_res();
  ::zjchain::block::protobuf::GetTxBlockResponse* mutable_block_res();
  void set_allocated_block_res(::zjchain::block::protobuf::GetTxBlockResponse* block_res);
  private:
  const ::zjchain::block::protobuf::GetTxBlockResponse& _internal_block_res() const;
  ::zjchain::block::protobuf::GetTxBlockResponse* _internal_mutable_block_res();
  public:
  void unsafe_arena_set_allocated_block_res(
      ::zjchain::block::protobuf::GetTxBlockResponse* block_res);
  ::zjchain::block::protobuf::GetTxBlockResponse* unsafe_arena_release_block_res();

  // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
  bool has_height_req() const;
  private:
  bool _internal_has_height_req() const;
  public:
  void clear_height_req();
  const ::zjchain::block::protobuf::AccountHeightRequest& height_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::AccountHeightRequest* release_height_req();
  ::zjchain::block::protobuf::AccountHeightRequest* mutable_height_req();
  void set_allocated_height_req(::zjchain::block::protobuf::AccountHeightRequest* height_req);
  private:
  const ::zjchain::block::protobuf::AccountHeightRequest& _internal_height_req() const;
  ::zjchain::block::protobuf::AccountHeightRequest* _internal_mutable_height_req();
  public:
  void unsafe_arena_set_allocated_height_req(
      ::zjchain::block::protobuf::AccountHeightRequest* height_req);
  ::zjchain::block::protobuf::AccountHeightRequest* unsafe_arena_release_height_req();

  // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
  bool has_height_res() const;
  private:
  bool _internal_has_height_res() const;
  public:
  void clear_height_res();
  const ::zjchain::block::protobuf::AccountHeightResponse& height_res() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::AccountHeightResponse* release_height_res();
  ::zjchain::block::protobuf::AccountHeightResponse* mutable_height_res();
  void set_allocated_height_res(::zjchain::block::protobuf::AccountHeightResponse* height_res);
  private:
  const ::zjchain::block::protobuf::AccountHeightResponse& _internal_height_res() const;
  ::zjchain::block::protobuf::AccountHeightResponse* _internal_mutable_height_res();
  public:
  void unsafe_arena_set_allocated_height_res(
      ::zjchain::block::protobuf::AccountHeightResponse* height_res);
  ::zjchain::block::protobuf::AccountHeightResponse* unsafe_arena_release_height_res();

  // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  bool has_acc_attr_req() const;
  private:
  bool _internal_has_acc_attr_req() const;
  public:
  void clear_acc_attr_req();
  const ::zjchain::block::protobuf::AccountAttrRequest& acc_attr_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::AccountAttrRequest* release_acc_attr_req();
  ::zjchain::block::protobuf::AccountAttrRequest* mutable_acc_attr_req();
  void set_allocated_acc_attr_req(::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req);
  private:
  const ::zjchain::block::protobuf::AccountAttrRequest& _internal_acc_attr_req() const;
  ::zjchain::block::protobuf::AccountAttrRequest* _internal_mutable_acc_attr_req();
  public:
  void unsafe_arena_set_allocated_acc_attr_req(
      ::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req);
  ::zjchain::block::protobuf::AccountAttrRequest* unsafe_arena_release_acc_attr_req();

  // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  bool has_acc_attr_res() const;
  private:
  bool _internal_has_acc_attr_res() const;
  public:
  void clear_acc_attr_res();
  const ::zjchain::block::protobuf::AccountAttrResponse& acc_attr_res() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::AccountAttrResponse* release_acc_attr_res();
  ::zjchain::block::protobuf::AccountAttrResponse* mutable_acc_attr_res();
  void set_allocated_acc_attr_res(::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res);
  private:
  const ::zjchain::block::protobuf::AccountAttrResponse& _internal_acc_attr_res() const;
  ::zjchain::block::protobuf::AccountAttrResponse* _internal_mutable_acc_attr_res();
  public:
  void unsafe_arena_set_allocated_acc_attr_res(
      ::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res);
  ::zjchain::block::protobuf::AccountAttrResponse* unsafe_arena_release_acc_attr_res();

  // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  bool has_up_vpn_req() const;
  private:
  bool _internal_has_up_vpn_req() const;
  public:
  void clear_up_vpn_req();
  const ::zjchain::block::protobuf::UpdateVpnCountRequest& up_vpn_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::UpdateVpnCountRequest* release_up_vpn_req();
  ::zjchain::block::protobuf::UpdateVpnCountRequest* mutable_up_vpn_req();
  void set_allocated_up_vpn_req(::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req);
  private:
  const ::zjchain::block::protobuf::UpdateVpnCountRequest& _internal_up_vpn_req() const;
  ::zjchain::block::protobuf::UpdateVpnCountRequest* _internal_mutable_up_vpn_req();
  public:
  void unsafe_arena_set_allocated_up_vpn_req(
      ::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req);
  ::zjchain::block::protobuf::UpdateVpnCountRequest* unsafe_arena_release_up_vpn_req();

  // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  bool has_up_vpn_res() const;
  private:
  bool _internal_has_up_vpn_res() const;
  public:
  void clear_up_vpn_res();
  const ::zjchain::block::protobuf::UpdateVpnCountResponse& up_vpn_res() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::UpdateVpnCountResponse* release_up_vpn_res();
  ::zjchain::block::protobuf::UpdateVpnCountResponse* mutable_up_vpn_res();
  void set_allocated_up_vpn_res(::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res);
  private:
  const ::zjchain::block::protobuf::UpdateVpnCountResponse& _internal_up_vpn_res() const;
  ::zjchain::block::protobuf::UpdateVpnCountResponse* _internal_mutable_up_vpn_res();
  public:
  void unsafe_arena_set_allocated_up_vpn_res(
      ::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res);
  ::zjchain::block::protobuf::UpdateVpnCountResponse* unsafe_arena_release_up_vpn_res();

  // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  bool has_account_init_req() const;
  private:
  bool _internal_has_account_init_req() const;
  public:
  void clear_account_init_req();
  const ::zjchain::block::protobuf::GetAccountInitInfoRequest& account_init_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::GetAccountInitInfoRequest* release_account_init_req();
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* mutable_account_init_req();
  void set_allocated_account_init_req(::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req);
  private:
  const ::zjchain::block::protobuf::GetAccountInitInfoRequest& _internal_account_init_req() const;
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* _internal_mutable_account_init_req();
  public:
  void unsafe_arena_set_allocated_account_init_req(
      ::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req);
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* unsafe_arena_release_account_init_req();

  // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  bool has_account_init_res() const;
  private:
  bool _internal_has_account_init_res() const;
  public:
  void clear_account_init_res();
  const ::zjchain::block::protobuf::GetAccountInitInfoResponse& account_init_res() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::GetAccountInitInfoResponse* release_account_init_res();
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* mutable_account_init_res();
  void set_allocated_account_init_res(::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res);
  private:
  const ::zjchain::block::protobuf::GetAccountInitInfoResponse& _internal_account_init_res() const;
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* _internal_mutable_account_init_res();
  public:
  void unsafe_arena_set_allocated_account_init_res(
      ::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res);
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* unsafe_arena_release_account_init_res();

  // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  bool has_vpn_active_req() const;
  private:
  bool _internal_has_vpn_active_req() const;
  public:
  void clear_vpn_active_req();
  const ::zjchain::block::protobuf::UpdateVpnActiveRequest& vpn_active_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::UpdateVpnActiveRequest* release_vpn_active_req();
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* mutable_vpn_active_req();
  void set_allocated_vpn_active_req(::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req);
  private:
  const ::zjchain::block::protobuf::UpdateVpnActiveRequest& _internal_vpn_active_req() const;
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* _internal_mutable_vpn_active_req();
  public:
  void unsafe_arena_set_allocated_vpn_active_req(
      ::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req);
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* unsafe_arena_release_vpn_active_req();

  // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
  bool has_ad_reward_req() const;
  private:
  bool _internal_has_ad_reward_req() const;
  public:
  void clear_ad_reward_req();
  const ::zjchain::block::protobuf::AdRewardRequest& ad_reward_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::AdRewardRequest* release_ad_reward_req();
  ::zjchain::block::protobuf::AdRewardRequest* mutable_ad_reward_req();
  void set_allocated_ad_reward_req(::zjchain::block::protobuf::AdRewardRequest* ad_reward_req);
  private:
  const ::zjchain::block::protobuf::AdRewardRequest& _internal_ad_reward_req() const;
  ::zjchain::block::protobuf::AdRewardRequest* _internal_mutable_ad_reward_req();
  public:
  void unsafe_arena_set_allocated_ad_reward_req(
      ::zjchain::block::protobuf::AdRewardRequest* ad_reward_req);
  ::zjchain::block::protobuf::AdRewardRequest* unsafe_arena_release_ad_reward_req();

  // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
  bool has_ref_heights_req() const;
  private:
  bool _internal_has_ref_heights_req() const;
  public:
  void clear_ref_heights_req();
  const ::zjchain::block::protobuf::RefreshPoolHeightRequest& ref_heights_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::RefreshPoolHeightRequest* release_ref_heights_req();
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* mutable_ref_heights_req();
  void set_allocated_ref_heights_req(::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req);
  private:
  const ::zjchain::block::protobuf::RefreshPoolHeightRequest& _internal_ref_heights_req() const;
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* _internal_mutable_ref_heights_req();
  public:
  void unsafe_arena_set_allocated_ref_heights_req(
      ::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req);
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* unsafe_arena_release_ref_heights_req();

  // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
  bool has_ref_heights_res() const;
  private:
  bool _internal_has_ref_heights_res() const;
  public:
  void clear_ref_heights_res();
  const ::zjchain::block::protobuf::RefreshPoolHeightResponse& ref_heights_res() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::RefreshPoolHeightResponse* release_ref_heights_res();
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* mutable_ref_heights_res();
  void set_allocated_ref_heights_res(::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res);
  private:
  const ::zjchain::block::protobuf::RefreshPoolHeightResponse& _internal_ref_heights_res() const;
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* _internal_mutable_ref_heights_res();
  public:
  void unsafe_arena_set_allocated_ref_heights_res(
      ::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res);
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* unsafe_arena_release_ref_heights_res();

  // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
  bool has_acc_shard_req() const;
  private:
  bool _internal_has_acc_shard_req() const;
  public:
  void clear_acc_shard_req();
  const ::zjchain::block::protobuf::GetAccountShardRequest& acc_shard_req() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::GetAccountShardRequest* release_acc_shard_req();
  ::zjchain::block::protobuf::GetAccountShardRequest* mutable_acc_shard_req();
  void set_allocated_acc_shard_req(::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req);
  private:
  const ::zjchain::block::protobuf::GetAccountShardRequest& _internal_acc_shard_req() const;
  ::zjchain::block::protobuf::GetAccountShardRequest* _internal_mutable_acc_shard_req();
  public:
  void unsafe_arena_set_allocated_acc_shard_req(
      ::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req);
  ::zjchain::block::protobuf::GetAccountShardRequest* unsafe_arena_release_acc_shard_req();

  // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
  bool has_acc_shard_res() const;
  private:
  bool _internal_has_acc_shard_res() const;
  public:
  void clear_acc_shard_res();
  const ::zjchain::block::protobuf::GetAccountShardReponse& acc_shard_res() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::GetAccountShardReponse* release_acc_shard_res();
  ::zjchain::block::protobuf::GetAccountShardReponse* mutable_acc_shard_res();
  void set_allocated_acc_shard_res(::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res);
  private:
  const ::zjchain::block::protobuf::GetAccountShardReponse& _internal_acc_shard_res() const;
  ::zjchain::block::protobuf::GetAccountShardReponse* _internal_mutable_acc_shard_res();
  public:
  void unsafe_arena_set_allocated_acc_shard_res(
      ::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res);
  ::zjchain::block::protobuf::GetAccountShardReponse* unsafe_arena_release_acc_shard_res();

  // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
  bool has_shard_to() const;
  private:
  bool _internal_has_shard_to() const;
  public:
  void clear_shard_to();
  const ::zjchain::block::protobuf::ShardToTxMessage& shard_to() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::ShardToTxMessage* release_shard_to();
  ::zjchain::block::protobuf::ShardToTxMessage* mutable_shard_to();
  void set_allocated_shard_to(::zjchain::block::protobuf::ShardToTxMessage* shard_to);
  private:
  const ::zjchain::block::protobuf::ShardToTxMessage& _internal_shard_to() const;
  ::zjchain::block::protobuf::ShardToTxMessage* _internal_mutable_shard_to();
  public:
  void unsafe_arena_set_allocated_shard_to(
      ::zjchain::block::protobuf::ShardToTxMessage* shard_to);
  ::zjchain::block::protobuf::ShardToTxMessage* unsafe_arena_release_shard_to();

  // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
  bool has_statistic_tx() const;
  private:
  bool _internal_has_statistic_tx() const;
  public:
  void clear_statistic_tx();
  const ::zjchain::block::protobuf::StatisticTxMessage& statistic_tx() const;
  PROTOBUF_NODISCARD ::zjchain::block::protobuf::StatisticTxMessage* release_statistic_tx();
  ::zjchain::block::protobuf::StatisticTxMessage* mutable_statistic_tx();
  void set_allocated_statistic_tx(::zjchain::block::protobuf::StatisticTxMessage* statistic_tx);
  private:
  const ::zjchain::block::protobuf::StatisticTxMessage& _internal_statistic_tx() const;
  ::zjchain::block::protobuf::StatisticTxMessage* _internal_mutable_statistic_tx();
  public:
  void unsafe_arena_set_allocated_statistic_tx(
      ::zjchain::block::protobuf::StatisticTxMessage* statistic_tx);
  ::zjchain::block::protobuf::StatisticTxMessage* unsafe_arena_release_statistic_tx();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.BlockMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::block::protobuf::GetTxBlockRequest* block_req_;
  ::zjchain::block::protobuf::GetTxBlockResponse* block_res_;
  ::zjchain::block::protobuf::AccountHeightRequest* height_req_;
  ::zjchain::block::protobuf::AccountHeightResponse* height_res_;
  ::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req_;
  ::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res_;
  ::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req_;
  ::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res_;
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req_;
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res_;
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req_;
  ::zjchain::block::protobuf::AdRewardRequest* ad_reward_req_;
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req_;
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res_;
  ::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req_;
  ::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res_;
  ::zjchain::block::protobuf::ShardToTxMessage* shard_to_;
  ::zjchain::block::protobuf::StatisticTxMessage* statistic_tx_;
  friend struct ::TableStruct_protos_2fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageItem

// optional bytes key = 1;
inline bool StorageItem::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorageItem::has_key() const {
  return _internal_has_key();
}
inline void StorageItem::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StorageItem::key() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StorageItem.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageItem::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StorageItem.key)
}
inline std::string* StorageItem::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.StorageItem.key)
  return _s;
}
inline const std::string& StorageItem::_internal_key() const {
  return key_.Get();
}
inline void StorageItem::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageItem::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageItem::release_key() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.StorageItem.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StorageItem::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.StorageItem.key)
}

// optional bytes val_hash = 2;
inline bool StorageItem::_internal_has_val_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StorageItem::has_val_hash() const {
  return _internal_has_val_hash();
}
inline void StorageItem::clear_val_hash() {
  val_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StorageItem::val_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StorageItem.val_hash)
  return _internal_val_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageItem::set_val_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 val_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StorageItem.val_hash)
}
inline std::string* StorageItem::mutable_val_hash() {
  std::string* _s = _internal_mutable_val_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.StorageItem.val_hash)
  return _s;
}
inline const std::string& StorageItem::_internal_val_hash() const {
  return val_hash_.Get();
}
inline void StorageItem::_internal_set_val_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  val_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageItem::_internal_mutable_val_hash() {
  _has_bits_[0] |= 0x00000002u;
  return val_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageItem::release_val_hash() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.StorageItem.val_hash)
  if (!_internal_has_val_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = val_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (val_hash_.IsDefault()) {
    val_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StorageItem::set_allocated_val_hash(std::string* val_hash) {
  if (val_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  val_hash_.SetAllocated(val_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (val_hash_.IsDefault()) {
    val_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.StorageItem.val_hash)
}

// optional uint32 val_size = 3 [default = 0];
inline bool StorageItem::_internal_has_val_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StorageItem::has_val_size() const {
  return _internal_has_val_size();
}
inline void StorageItem::clear_val_size() {
  val_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t StorageItem::_internal_val_size() const {
  return val_size_;
}
inline uint32_t StorageItem::val_size() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StorageItem.val_size)
  return _internal_val_size();
}
inline void StorageItem::_internal_set_val_size(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  val_size_ = value;
}
inline void StorageItem::set_val_size(uint32_t value) {
  _internal_set_val_size(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StorageItem.val_size)
}

// -------------------------------------------------------------------

// TransferItem

// optional bytes from = 1;
inline bool TransferItem::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransferItem::has_from() const {
  return _internal_has_from();
}
inline void TransferItem::clear_from() {
  from_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransferItem::from() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.TransferItem.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferItem::set_from(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 from_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.TransferItem.from)
}
inline std::string* TransferItem::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.TransferItem.from)
  return _s;
}
inline const std::string& TransferItem::_internal_from() const {
  return from_.Get();
}
inline void TransferItem::_internal_set_from(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferItem::_internal_mutable_from() {
  _has_bits_[0] |= 0x00000001u;
  return from_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferItem::release_from() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.TransferItem.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = from_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault()) {
    from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransferItem::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault()) {
    from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.TransferItem.from)
}

// optional bytes to = 2;
inline bool TransferItem::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransferItem::has_to() const {
  return _internal_has_to();
}
inline void TransferItem::clear_to() {
  to_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransferItem::to() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.TransferItem.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferItem::set_to(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 to_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.TransferItem.to)
}
inline std::string* TransferItem::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.TransferItem.to)
  return _s;
}
inline const std::string& TransferItem::_internal_to() const {
  return to_.Get();
}
inline void TransferItem::_internal_set_to(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferItem::_internal_mutable_to() {
  _has_bits_[0] |= 0x00000002u;
  return to_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferItem::release_to() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.TransferItem.to)
  if (!_internal_has_to()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = to_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransferItem::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.TransferItem.to)
}

// optional uint64 amount = 3;
inline bool TransferItem::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransferItem::has_amount() const {
  return _internal_has_amount();
}
inline void TransferItem::clear_amount() {
  amount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t TransferItem::_internal_amount() const {
  return amount_;
}
inline uint64_t TransferItem::amount() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.TransferItem.amount)
  return _internal_amount();
}
inline void TransferItem::_internal_set_amount(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
}
inline void TransferItem::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.TransferItem.amount)
}

// -------------------------------------------------------------------

// TxLog

// optional bytes data = 1;
inline bool TxLog::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TxLog::has_data() const {
  return _internal_has_data();
}
inline void TxLog::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TxLog::data() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.TxLog.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxLog::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.TxLog.data)
}
inline std::string* TxLog::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.TxLog.data)
  return _s;
}
inline const std::string& TxLog::_internal_data() const {
  return data_.Get();
}
inline void TxLog::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* TxLog::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* TxLog::release_data() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.TxLog.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TxLog::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.TxLog.data)
}

// repeated bytes topics = 2;
inline int TxLog::_internal_topics_size() const {
  return topics_.size();
}
inline int TxLog::topics_size() const {
  return _internal_topics_size();
}
inline void TxLog::clear_topics() {
  topics_.Clear();
}
inline std::string* TxLog::add_topics() {
  std::string* _s = _internal_add_topics();
  // @@protoc_insertion_point(field_add_mutable:zjchain.block.protobuf.TxLog.topics)
  return _s;
}
inline const std::string& TxLog::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const std::string& TxLog::topics(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.TxLog.topics)
  return _internal_topics(index);
}
inline std::string* TxLog::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.TxLog.topics)
  return topics_.Mutable(index);
}
inline void TxLog::set_topics(int index, const std::string& value) {
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.TxLog.topics)
}
inline void TxLog::set_topics(int index, std::string&& value) {
  topics_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.TxLog.topics)
}
inline void TxLog::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zjchain.block.protobuf.TxLog.topics)
}
inline void TxLog::set_topics(int index, const void* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zjchain.block.protobuf.TxLog.topics)
}
inline std::string* TxLog::_internal_add_topics() {
  return topics_.Add();
}
inline void TxLog::add_topics(const std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.TxLog.topics)
}
inline void TxLog::add_topics(std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.TxLog.topics)
}
inline void TxLog::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zjchain.block.protobuf.TxLog.topics)
}
inline void TxLog::add_topics(const void* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zjchain.block.protobuf.TxLog.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxLog::topics() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.TxLog.topics)
  return topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxLog::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.TxLog.topics)
  return &topics_;
}

// -------------------------------------------------------------------

// BlockTx

// optional bytes gid = 1;
inline bool BlockTx::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlockTx::has_gid() const {
  return _internal_has_gid();
}
inline void BlockTx::clear_gid() {
  gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlockTx::gid() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockTx::set_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.gid)
}
inline std::string* BlockTx::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.gid)
  return _s;
}
inline const std::string& BlockTx::_internal_gid() const {
  return gid_.Get();
}
inline void BlockTx::_internal_set_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gid_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockTx::_internal_mutable_gid() {
  _has_bits_[0] |= 0x00000001u;
  return gid_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockTx::release_gid() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockTx.gid)
  if (!_internal_has_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlockTx::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gid_.SetAllocated(gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockTx.gid)
}

// optional bytes from = 2;
inline bool BlockTx::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlockTx::has_from() const {
  return _internal_has_from();
}
inline void BlockTx::clear_from() {
  from_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlockTx::from() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockTx::set_from(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 from_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.from)
}
inline std::string* BlockTx::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.from)
  return _s;
}
inline const std::string& BlockTx::_internal_from() const {
  return from_.Get();
}
inline void BlockTx::_internal_set_from(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  from_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockTx::_internal_mutable_from() {
  _has_bits_[0] |= 0x00000002u;
  return from_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockTx::release_from() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockTx.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = from_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault()) {
    from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlockTx::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault()) {
    from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockTx.from)
}

// optional bytes to = 3;
inline bool BlockTx::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlockTx::has_to() const {
  return _internal_has_to();
}
inline void BlockTx::clear_to() {
  to_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BlockTx::to() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockTx::set_to(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 to_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.to)
}
inline std::string* BlockTx::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.to)
  return _s;
}
inline const std::string& BlockTx::_internal_to() const {
  return to_.Get();
}
inline void BlockTx::_internal_set_to(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  to_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockTx::_internal_mutable_to() {
  _has_bits_[0] |= 0x00000004u;
  return to_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockTx::release_to() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockTx.to)
  if (!_internal_has_to()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = to_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlockTx::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockTx.to)
}

// optional uint64 amount = 4;
inline bool BlockTx::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BlockTx::has_amount() const {
  return _internal_has_amount();
}
inline void BlockTx::clear_amount() {
  amount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t BlockTx::_internal_amount() const {
  return amount_;
}
inline uint64_t BlockTx::amount() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.amount)
  return _internal_amount();
}
inline void BlockTx::_internal_set_amount(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  amount_ = value;
}
inline void BlockTx::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.amount)
}

// optional uint64 gas_limit = 5;
inline bool BlockTx::_internal_has_gas_limit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BlockTx::has_gas_limit() const {
  return _internal_has_gas_limit();
}
inline void BlockTx::clear_gas_limit() {
  gas_limit_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t BlockTx::_internal_gas_limit() const {
  return gas_limit_;
}
inline uint64_t BlockTx::gas_limit() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.gas_limit)
  return _internal_gas_limit();
}
inline void BlockTx::_internal_set_gas_limit(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  gas_limit_ = value;
}
inline void BlockTx::set_gas_limit(uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.gas_limit)
}

// optional uint64 gas_used = 6;
inline bool BlockTx::_internal_has_gas_used() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BlockTx::has_gas_used() const {
  return _internal_has_gas_used();
}
inline void BlockTx::clear_gas_used() {
  gas_used_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t BlockTx::_internal_gas_used() const {
  return gas_used_;
}
inline uint64_t BlockTx::gas_used() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.gas_used)
  return _internal_gas_used();
}
inline void BlockTx::_internal_set_gas_used(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  gas_used_ = value;
}
inline void BlockTx::set_gas_used(uint64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.gas_used)
}

// optional uint64 gas_price = 7;
inline bool BlockTx::_internal_has_gas_price() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BlockTx::has_gas_price() const {
  return _internal_has_gas_price();
}
inline void BlockTx::clear_gas_price() {
  gas_price_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t BlockTx::_internal_gas_price() const {
  return gas_price_;
}
inline uint64_t BlockTx::gas_price() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.gas_price)
  return _internal_gas_price();
}
inline void BlockTx::_internal_set_gas_price(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  gas_price_ = value;
}
inline void BlockTx::set_gas_price(uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.gas_price)
}

// optional uint64 balance = 8;
inline bool BlockTx::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BlockTx::has_balance() const {
  return _internal_has_balance();
}
inline void BlockTx::clear_balance() {
  balance_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t BlockTx::_internal_balance() const {
  return balance_;
}
inline uint64_t BlockTx::balance() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.balance)
  return _internal_balance();
}
inline void BlockTx::_internal_set_balance(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  balance_ = value;
}
inline void BlockTx::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.balance)
}

// optional .zjchain.pools.protobuf.StepType step = 9;
inline bool BlockTx::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BlockTx::has_step() const {
  return _internal_has_step();
}
inline void BlockTx::clear_step() {
  step_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::zjchain::pools::protobuf::StepType BlockTx::_internal_step() const {
  return static_cast< ::zjchain::pools::protobuf::StepType >(step_);
}
inline ::zjchain::pools::protobuf::StepType BlockTx::step() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.step)
  return _internal_step();
}
inline void BlockTx::_internal_set_step(::zjchain::pools::protobuf::StepType value) {
  assert(::zjchain::pools::protobuf::StepType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  step_ = value;
}
inline void BlockTx::set_step(::zjchain::pools::protobuf::StepType value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.step)
}

// optional uint32 status = 10;
inline bool BlockTx::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BlockTx::has_status() const {
  return _internal_has_status();
}
inline void BlockTx::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t BlockTx::_internal_status() const {
  return status_;
}
inline uint32_t BlockTx::status() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.status)
  return _internal_status();
}
inline void BlockTx::_internal_set_status(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  status_ = value;
}
inline void BlockTx::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.status)
}

// repeated .zjchain.block.protobuf.StorageItem storages = 11;
inline int BlockTx::_internal_storages_size() const {
  return storages_.size();
}
inline int BlockTx::storages_size() const {
  return _internal_storages_size();
}
inline void BlockTx::clear_storages() {
  storages_.Clear();
}
inline ::zjchain::block::protobuf::StorageItem* BlockTx::mutable_storages(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.storages)
  return storages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >*
BlockTx::mutable_storages() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.BlockTx.storages)
  return &storages_;
}
inline const ::zjchain::block::protobuf::StorageItem& BlockTx::_internal_storages(int index) const {
  return storages_.Get(index);
}
inline const ::zjchain::block::protobuf::StorageItem& BlockTx::storages(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.storages)
  return _internal_storages(index);
}
inline ::zjchain::block::protobuf::StorageItem* BlockTx::_internal_add_storages() {
  return storages_.Add();
}
inline ::zjchain::block::protobuf::StorageItem* BlockTx::add_storages() {
  ::zjchain::block::protobuf::StorageItem* _add = _internal_add_storages();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.BlockTx.storages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >&
BlockTx::storages() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.BlockTx.storages)
  return storages_;
}

// repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
inline int BlockTx::_internal_contract_txs_size() const {
  return contract_txs_.size();
}
inline int BlockTx::contract_txs_size() const {
  return _internal_contract_txs_size();
}
inline void BlockTx::clear_contract_txs() {
  contract_txs_.Clear();
}
inline ::zjchain::block::protobuf::TransferItem* BlockTx::mutable_contract_txs(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.contract_txs)
  return contract_txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >*
BlockTx::mutable_contract_txs() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.BlockTx.contract_txs)
  return &contract_txs_;
}
inline const ::zjchain::block::protobuf::TransferItem& BlockTx::_internal_contract_txs(int index) const {
  return contract_txs_.Get(index);
}
inline const ::zjchain::block::protobuf::TransferItem& BlockTx::contract_txs(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.contract_txs)
  return _internal_contract_txs(index);
}
inline ::zjchain::block::protobuf::TransferItem* BlockTx::_internal_add_contract_txs() {
  return contract_txs_.Add();
}
inline ::zjchain::block::protobuf::TransferItem* BlockTx::add_contract_txs() {
  ::zjchain::block::protobuf::TransferItem* _add = _internal_add_contract_txs();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.BlockTx.contract_txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >&
BlockTx::contract_txs() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.BlockTx.contract_txs)
  return contract_txs_;
}

// optional uint64 contract_prepayment = 13;
inline bool BlockTx::_internal_has_contract_prepayment() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BlockTx::has_contract_prepayment() const {
  return _internal_has_contract_prepayment();
}
inline void BlockTx::clear_contract_prepayment() {
  contract_prepayment_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t BlockTx::_internal_contract_prepayment() const {
  return contract_prepayment_;
}
inline uint64_t BlockTx::contract_prepayment() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.contract_prepayment)
  return _internal_contract_prepayment();
}
inline void BlockTx::_internal_set_contract_prepayment(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  contract_prepayment_ = value;
}
inline void BlockTx::set_contract_prepayment(uint64_t value) {
  _internal_set_contract_prepayment(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.contract_prepayment)
}

// optional bytes contract_code = 14;
inline bool BlockTx::_internal_has_contract_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BlockTx::has_contract_code() const {
  return _internal_has_contract_code();
}
inline void BlockTx::clear_contract_code() {
  contract_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BlockTx::contract_code() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.contract_code)
  return _internal_contract_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockTx::set_contract_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 contract_code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.contract_code)
}
inline std::string* BlockTx::mutable_contract_code() {
  std::string* _s = _internal_mutable_contract_code();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.contract_code)
  return _s;
}
inline const std::string& BlockTx::_internal_contract_code() const {
  return contract_code_.Get();
}
inline void BlockTx::_internal_set_contract_code(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  contract_code_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockTx::_internal_mutable_contract_code() {
  _has_bits_[0] |= 0x00000008u;
  return contract_code_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockTx::release_contract_code() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockTx.contract_code)
  if (!_internal_has_contract_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = contract_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_code_.IsDefault()) {
    contract_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlockTx::set_allocated_contract_code(std::string* contract_code) {
  if (contract_code != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  contract_code_.SetAllocated(contract_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_code_.IsDefault()) {
    contract_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockTx.contract_code)
}

// optional bytes contract_input = 15;
inline bool BlockTx::_internal_has_contract_input() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BlockTx::has_contract_input() const {
  return _internal_has_contract_input();
}
inline void BlockTx::clear_contract_input() {
  contract_input_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BlockTx::contract_input() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.contract_input)
  return _internal_contract_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockTx::set_contract_input(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 contract_input_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.BlockTx.contract_input)
}
inline std::string* BlockTx::mutable_contract_input() {
  std::string* _s = _internal_mutable_contract_input();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.contract_input)
  return _s;
}
inline const std::string& BlockTx::_internal_contract_input() const {
  return contract_input_.Get();
}
inline void BlockTx::_internal_set_contract_input(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  contract_input_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockTx::_internal_mutable_contract_input() {
  _has_bits_[0] |= 0x00000010u;
  return contract_input_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockTx::release_contract_input() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockTx.contract_input)
  if (!_internal_has_contract_input()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = contract_input_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_input_.IsDefault()) {
    contract_input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlockTx::set_allocated_contract_input(std::string* contract_input) {
  if (contract_input != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contract_input_.SetAllocated(contract_input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contract_input_.IsDefault()) {
    contract_input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockTx.contract_input)
}

// repeated .zjchain.block.protobuf.TxLog events = 16;
inline int BlockTx::_internal_events_size() const {
  return events_.size();
}
inline int BlockTx::events_size() const {
  return _internal_events_size();
}
inline void BlockTx::clear_events() {
  events_.Clear();
}
inline ::zjchain::block::protobuf::TxLog* BlockTx::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockTx.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >*
BlockTx::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.BlockTx.events)
  return &events_;
}
inline const ::zjchain::block::protobuf::TxLog& BlockTx::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::zjchain::block::protobuf::TxLog& BlockTx::events(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockTx.events)
  return _internal_events(index);
}
inline ::zjchain::block::protobuf::TxLog* BlockTx::_internal_add_events() {
  return events_.Add();
}
inline ::zjchain::block::protobuf::TxLog* BlockTx::add_events() {
  ::zjchain::block::protobuf::TxLog* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.BlockTx.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >&
BlockTx::events() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.BlockTx.events)
  return events_;
}

// -------------------------------------------------------------------

// Block

// optional uint32 network_id = 1;
inline bool Block::_internal_has_network_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Block::has_network_id() const {
  return _internal_has_network_id();
}
inline void Block::clear_network_id() {
  network_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Block::_internal_network_id() const {
  return network_id_;
}
inline uint32_t Block::network_id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.network_id)
  return _internal_network_id();
}
inline void Block::_internal_set_network_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  network_id_ = value;
}
inline void Block::set_network_id(uint32_t value) {
  _internal_set_network_id(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.network_id)
}

// optional uint32 pool_index = 2;
inline bool Block::_internal_has_pool_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Block::has_pool_index() const {
  return _internal_has_pool_index();
}
inline void Block::clear_pool_index() {
  pool_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t Block::_internal_pool_index() const {
  return pool_index_;
}
inline uint32_t Block::pool_index() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.pool_index)
  return _internal_pool_index();
}
inline void Block::_internal_set_pool_index(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  pool_index_ = value;
}
inline void Block::set_pool_index(uint32_t value) {
  _internal_set_pool_index(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.pool_index)
}

// optional bytes prehash = 3;
inline bool Block::_internal_has_prehash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Block::has_prehash() const {
  return _internal_has_prehash();
}
inline void Block::clear_prehash() {
  prehash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Block::prehash() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.prehash)
  return _internal_prehash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_prehash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 prehash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.prehash)
}
inline std::string* Block::mutable_prehash() {
  std::string* _s = _internal_mutable_prehash();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.Block.prehash)
  return _s;
}
inline const std::string& Block::_internal_prehash() const {
  return prehash_.Get();
}
inline void Block::_internal_set_prehash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prehash_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_prehash() {
  _has_bits_[0] |= 0x00000001u;
  return prehash_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_prehash() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.Block.prehash)
  if (!_internal_has_prehash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = prehash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prehash_.IsDefault()) {
    prehash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Block::set_allocated_prehash(std::string* prehash) {
  if (prehash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prehash_.SetAllocated(prehash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prehash_.IsDefault()) {
    prehash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.Block.prehash)
}

// optional bytes hash = 4;
inline bool Block::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Block::has_hash() const {
  return _internal_has_hash();
}
inline void Block::clear_hash() {
  hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Block::hash() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.hash)
}
inline std::string* Block::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.Block.hash)
  return _s;
}
inline const std::string& Block::_internal_hash() const {
  return hash_.Get();
}
inline void Block::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  return hash_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_hash() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.Block.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Block::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.Block.hash)
}

// optional uint32 version = 5;
inline bool Block::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Block::has_version() const {
  return _internal_has_version();
}
inline void Block::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t Block::_internal_version() const {
  return version_;
}
inline uint32_t Block::version() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.version)
  return _internal_version();
}
inline void Block::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  version_ = value;
}
inline void Block::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.version)
}

// optional uint64 height = 6;
inline bool Block::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Block::has_height() const {
  return _internal_has_height();
}
inline void Block::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Block::_internal_height() const {
  return height_;
}
inline uint64_t Block::height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.height)
  return _internal_height();
}
inline void Block::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  height_ = value;
}
inline void Block::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.height)
}

// optional uint64 consistency_random = 7;
inline bool Block::_internal_has_consistency_random() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Block::has_consistency_random() const {
  return _internal_has_consistency_random();
}
inline void Block::clear_consistency_random() {
  consistency_random_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t Block::_internal_consistency_random() const {
  return consistency_random_;
}
inline uint64_t Block::consistency_random() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.consistency_random)
  return _internal_consistency_random();
}
inline void Block::_internal_set_consistency_random(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  consistency_random_ = value;
}
inline void Block::set_consistency_random(uint64_t value) {
  _internal_set_consistency_random(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.consistency_random)
}

// optional uint64 electblock_height = 8;
inline bool Block::_internal_has_electblock_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Block::has_electblock_height() const {
  return _internal_has_electblock_height();
}
inline void Block::clear_electblock_height() {
  electblock_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t Block::_internal_electblock_height() const {
  return electblock_height_;
}
inline uint64_t Block::electblock_height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.electblock_height)
  return _internal_electblock_height();
}
inline void Block::_internal_set_electblock_height(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  electblock_height_ = value;
}
inline void Block::set_electblock_height(uint64_t value) {
  _internal_set_electblock_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.electblock_height)
}

// optional uint64 timeblock_height = 9;
inline bool Block::_internal_has_timeblock_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Block::has_timeblock_height() const {
  return _internal_has_timeblock_height();
}
inline void Block::clear_timeblock_height() {
  timeblock_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t Block::_internal_timeblock_height() const {
  return timeblock_height_;
}
inline uint64_t Block::timeblock_height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.timeblock_height)
  return _internal_timeblock_height();
}
inline void Block::_internal_set_timeblock_height(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  timeblock_height_ = value;
}
inline void Block::set_timeblock_height(uint64_t value) {
  _internal_set_timeblock_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.timeblock_height)
}

// repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
inline int Block::_internal_tx_list_size() const {
  return tx_list_.size();
}
inline int Block::tx_list_size() const {
  return _internal_tx_list_size();
}
inline void Block::clear_tx_list() {
  tx_list_.Clear();
}
inline ::zjchain::block::protobuf::BlockTx* Block::mutable_tx_list(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.Block.tx_list)
  return tx_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >*
Block::mutable_tx_list() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.Block.tx_list)
  return &tx_list_;
}
inline const ::zjchain::block::protobuf::BlockTx& Block::_internal_tx_list(int index) const {
  return tx_list_.Get(index);
}
inline const ::zjchain::block::protobuf::BlockTx& Block::tx_list(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.tx_list)
  return _internal_tx_list(index);
}
inline ::zjchain::block::protobuf::BlockTx* Block::_internal_add_tx_list() {
  return tx_list_.Add();
}
inline ::zjchain::block::protobuf::BlockTx* Block::add_tx_list() {
  ::zjchain::block::protobuf::BlockTx* _add = _internal_add_tx_list();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.Block.tx_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >&
Block::tx_list() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.Block.tx_list)
  return tx_list_;
}

// optional uint64 timestamp = 11;
inline bool Block::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Block::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Block::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t Block::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t Block::timestamp() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.timestamp)
  return _internal_timestamp();
}
inline void Block::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  timestamp_ = value;
}
inline void Block::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.timestamp)
}

// optional bytes bls_agg_sign_x = 12;
inline bool Block::_internal_has_bls_agg_sign_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Block::has_bls_agg_sign_x() const {
  return _internal_has_bls_agg_sign_x();
}
inline void Block::clear_bls_agg_sign_x() {
  bls_agg_sign_x_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Block::bls_agg_sign_x() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.bls_agg_sign_x)
  return _internal_bls_agg_sign_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_bls_agg_sign_x(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 bls_agg_sign_x_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.bls_agg_sign_x)
}
inline std::string* Block::mutable_bls_agg_sign_x() {
  std::string* _s = _internal_mutable_bls_agg_sign_x();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.Block.bls_agg_sign_x)
  return _s;
}
inline const std::string& Block::_internal_bls_agg_sign_x() const {
  return bls_agg_sign_x_.Get();
}
inline void Block::_internal_set_bls_agg_sign_x(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  bls_agg_sign_x_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_bls_agg_sign_x() {
  _has_bits_[0] |= 0x00000004u;
  return bls_agg_sign_x_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_bls_agg_sign_x() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.Block.bls_agg_sign_x)
  if (!_internal_has_bls_agg_sign_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = bls_agg_sign_x_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_agg_sign_x_.IsDefault()) {
    bls_agg_sign_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Block::set_allocated_bls_agg_sign_x(std::string* bls_agg_sign_x) {
  if (bls_agg_sign_x != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bls_agg_sign_x_.SetAllocated(bls_agg_sign_x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_agg_sign_x_.IsDefault()) {
    bls_agg_sign_x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.Block.bls_agg_sign_x)
}

// optional bytes bls_agg_sign_y = 13;
inline bool Block::_internal_has_bls_agg_sign_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Block::has_bls_agg_sign_y() const {
  return _internal_has_bls_agg_sign_y();
}
inline void Block::clear_bls_agg_sign_y() {
  bls_agg_sign_y_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Block::bls_agg_sign_y() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.bls_agg_sign_y)
  return _internal_bls_agg_sign_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_bls_agg_sign_y(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 bls_agg_sign_y_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.bls_agg_sign_y)
}
inline std::string* Block::mutable_bls_agg_sign_y() {
  std::string* _s = _internal_mutable_bls_agg_sign_y();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.Block.bls_agg_sign_y)
  return _s;
}
inline const std::string& Block::_internal_bls_agg_sign_y() const {
  return bls_agg_sign_y_.Get();
}
inline void Block::_internal_set_bls_agg_sign_y(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  bls_agg_sign_y_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_bls_agg_sign_y() {
  _has_bits_[0] |= 0x00000008u;
  return bls_agg_sign_y_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_bls_agg_sign_y() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.Block.bls_agg_sign_y)
  if (!_internal_has_bls_agg_sign_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = bls_agg_sign_y_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_agg_sign_y_.IsDefault()) {
    bls_agg_sign_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Block::set_allocated_bls_agg_sign_y(std::string* bls_agg_sign_y) {
  if (bls_agg_sign_y != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bls_agg_sign_y_.SetAllocated(bls_agg_sign_y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bls_agg_sign_y_.IsDefault()) {
    bls_agg_sign_y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.Block.bls_agg_sign_y)
}

// optional uint64 leader_index = 14;
inline bool Block::_internal_has_leader_index() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Block::has_leader_index() const {
  return _internal_has_leader_index();
}
inline void Block::clear_leader_index() {
  leader_index_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00002000u;
}
inline uint64_t Block::_internal_leader_index() const {
  return leader_index_;
}
inline uint64_t Block::leader_index() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.leader_index)
  return _internal_leader_index();
}
inline void Block::_internal_set_leader_index(uint64_t value) {
  _has_bits_[0] |= 0x00002000u;
  leader_index_ = value;
}
inline void Block::set_leader_index(uint64_t value) {
  _internal_set_leader_index(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.leader_index)
}

// repeated bytes change_leader_invalid_hashs = 15;
inline int Block::_internal_change_leader_invalid_hashs_size() const {
  return change_leader_invalid_hashs_.size();
}
inline int Block::change_leader_invalid_hashs_size() const {
  return _internal_change_leader_invalid_hashs_size();
}
inline void Block::clear_change_leader_invalid_hashs() {
  change_leader_invalid_hashs_.Clear();
}
inline std::string* Block::add_change_leader_invalid_hashs() {
  std::string* _s = _internal_add_change_leader_invalid_hashs();
  // @@protoc_insertion_point(field_add_mutable:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
  return _s;
}
inline const std::string& Block::_internal_change_leader_invalid_hashs(int index) const {
  return change_leader_invalid_hashs_.Get(index);
}
inline const std::string& Block::change_leader_invalid_hashs(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
  return _internal_change_leader_invalid_hashs(index);
}
inline std::string* Block::mutable_change_leader_invalid_hashs(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
  return change_leader_invalid_hashs_.Mutable(index);
}
inline void Block::set_change_leader_invalid_hashs(int index, const std::string& value) {
  change_leader_invalid_hashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline void Block::set_change_leader_invalid_hashs(int index, std::string&& value) {
  change_leader_invalid_hashs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline void Block::set_change_leader_invalid_hashs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  change_leader_invalid_hashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline void Block::set_change_leader_invalid_hashs(int index, const void* value, size_t size) {
  change_leader_invalid_hashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline std::string* Block::_internal_add_change_leader_invalid_hashs() {
  return change_leader_invalid_hashs_.Add();
}
inline void Block::add_change_leader_invalid_hashs(const std::string& value) {
  change_leader_invalid_hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline void Block::add_change_leader_invalid_hashs(std::string&& value) {
  change_leader_invalid_hashs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline void Block::add_change_leader_invalid_hashs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  change_leader_invalid_hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline void Block::add_change_leader_invalid_hashs(const void* value, size_t size) {
  change_leader_invalid_hashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Block::change_leader_invalid_hashs() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
  return change_leader_invalid_hashs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Block::mutable_change_leader_invalid_hashs() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.Block.change_leader_invalid_hashs)
  return &change_leader_invalid_hashs_;
}

// optional bool is_commited_block = 16 [default = false];
inline bool Block::_internal_has_is_commited_block() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Block::has_is_commited_block() const {
  return _internal_has_is_commited_block();
}
inline void Block::clear_is_commited_block() {
  is_commited_block_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Block::_internal_is_commited_block() const {
  return is_commited_block_;
}
inline bool Block::is_commited_block() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.Block.is_commited_block)
  return _internal_is_commited_block();
}
inline void Block::_internal_set_is_commited_block(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_commited_block_ = value;
}
inline void Block::set_is_commited_block(bool value) {
  _internal_set_is_commited_block(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.Block.is_commited_block)
}

// -------------------------------------------------------------------

// ConsensusToTxsItem

// optional bytes to = 1;
inline bool ConsensusToTxsItem::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConsensusToTxsItem::has_to() const {
  return _internal_has_to();
}
inline void ConsensusToTxsItem::clear_to() {
  to_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConsensusToTxsItem::to() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ConsensusToTxsItem.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusToTxsItem::set_to(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 to_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ConsensusToTxsItem.to)
}
inline std::string* ConsensusToTxsItem::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.ConsensusToTxsItem.to)
  return _s;
}
inline const std::string& ConsensusToTxsItem::_internal_to() const {
  return to_.Get();
}
inline void ConsensusToTxsItem::_internal_set_to(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  to_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsensusToTxsItem::_internal_mutable_to() {
  _has_bits_[0] |= 0x00000001u;
  return to_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsensusToTxsItem::release_to() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.ConsensusToTxsItem.to)
  if (!_internal_has_to()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = to_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConsensusToTxsItem::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_.IsDefault()) {
    to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.ConsensusToTxsItem.to)
}

// optional uint64 balance = 2;
inline bool ConsensusToTxsItem::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConsensusToTxsItem::has_balance() const {
  return _internal_has_balance();
}
inline void ConsensusToTxsItem::clear_balance() {
  balance_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ConsensusToTxsItem::_internal_balance() const {
  return balance_;
}
inline uint64_t ConsensusToTxsItem::balance() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ConsensusToTxsItem.balance)
  return _internal_balance();
}
inline void ConsensusToTxsItem::_internal_set_balance(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  balance_ = value;
}
inline void ConsensusToTxsItem::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ConsensusToTxsItem.balance)
}

// -------------------------------------------------------------------

// ConsensusToTxs

// repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
inline int ConsensusToTxs::_internal_tos_size() const {
  return tos_.size();
}
inline int ConsensusToTxs::tos_size() const {
  return _internal_tos_size();
}
inline void ConsensusToTxs::clear_tos() {
  tos_.Clear();
}
inline ::zjchain::block::protobuf::ConsensusToTxsItem* ConsensusToTxs::mutable_tos(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.ConsensusToTxs.tos)
  return tos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >*
ConsensusToTxs::mutable_tos() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.ConsensusToTxs.tos)
  return &tos_;
}
inline const ::zjchain::block::protobuf::ConsensusToTxsItem& ConsensusToTxs::_internal_tos(int index) const {
  return tos_.Get(index);
}
inline const ::zjchain::block::protobuf::ConsensusToTxsItem& ConsensusToTxs::tos(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ConsensusToTxs.tos)
  return _internal_tos(index);
}
inline ::zjchain::block::protobuf::ConsensusToTxsItem* ConsensusToTxs::_internal_add_tos() {
  return tos_.Add();
}
inline ::zjchain::block::protobuf::ConsensusToTxsItem* ConsensusToTxs::add_tos() {
  ::zjchain::block::protobuf::ConsensusToTxsItem* _add = _internal_add_tos();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.ConsensusToTxs.tos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >&
ConsensusToTxs::tos() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.ConsensusToTxs.tos)
  return tos_;
}

// -------------------------------------------------------------------

// GetTxBlockRequest

// optional bytes tx_gid = 1;
inline bool GetTxBlockRequest::_internal_has_tx_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetTxBlockRequest::has_tx_gid() const {
  return _internal_has_tx_gid();
}
inline void GetTxBlockRequest::clear_tx_gid() {
  tx_gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetTxBlockRequest::tx_gid() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetTxBlockRequest.tx_gid)
  return _internal_tx_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTxBlockRequest::set_tx_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tx_gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetTxBlockRequest.tx_gid)
}
inline std::string* GetTxBlockRequest::mutable_tx_gid() {
  std::string* _s = _internal_mutable_tx_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetTxBlockRequest.tx_gid)
  return _s;
}
inline const std::string& GetTxBlockRequest::_internal_tx_gid() const {
  return tx_gid_.Get();
}
inline void GetTxBlockRequest::_internal_set_tx_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tx_gid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTxBlockRequest::_internal_mutable_tx_gid() {
  _has_bits_[0] |= 0x00000001u;
  return tx_gid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTxBlockRequest::release_tx_gid() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetTxBlockRequest.tx_gid)
  if (!_internal_has_tx_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tx_gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tx_gid_.IsDefault()) {
    tx_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetTxBlockRequest::set_allocated_tx_gid(std::string* tx_gid) {
  if (tx_gid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tx_gid_.SetAllocated(tx_gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tx_gid_.IsDefault()) {
    tx_gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetTxBlockRequest.tx_gid)
}

// optional bytes block_hash = 2;
inline bool GetTxBlockRequest::_internal_has_block_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetTxBlockRequest::has_block_hash() const {
  return _internal_has_block_hash();
}
inline void GetTxBlockRequest::clear_block_hash() {
  block_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetTxBlockRequest::block_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetTxBlockRequest.block_hash)
  return _internal_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTxBlockRequest::set_block_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 block_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetTxBlockRequest.block_hash)
}
inline std::string* GetTxBlockRequest::mutable_block_hash() {
  std::string* _s = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetTxBlockRequest.block_hash)
  return _s;
}
inline const std::string& GetTxBlockRequest::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void GetTxBlockRequest::_internal_set_block_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  block_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTxBlockRequest::_internal_mutable_block_hash() {
  _has_bits_[0] |= 0x00000002u;
  return block_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTxBlockRequest::release_block_hash() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetTxBlockRequest.block_hash)
  if (!_internal_has_block_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = block_hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_hash_.IsDefault()) {
    block_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetTxBlockRequest::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_hash_.SetAllocated(block_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_hash_.IsDefault()) {
    block_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetTxBlockRequest.block_hash)
}

// optional bool from = 3;
inline bool GetTxBlockRequest::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetTxBlockRequest::has_from() const {
  return _internal_has_from();
}
inline void GetTxBlockRequest::clear_from() {
  from_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GetTxBlockRequest::_internal_from() const {
  return from_;
}
inline bool GetTxBlockRequest::from() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetTxBlockRequest.from)
  return _internal_from();
}
inline void GetTxBlockRequest::_internal_set_from(bool value) {
  _has_bits_[0] |= 0x00000010u;
  from_ = value;
}
inline void GetTxBlockRequest::set_from(bool value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetTxBlockRequest.from)
}

// optional uint64 height = 4;
inline bool GetTxBlockRequest::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetTxBlockRequest::has_height() const {
  return _internal_has_height();
}
inline void GetTxBlockRequest::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t GetTxBlockRequest::_internal_height() const {
  return height_;
}
inline uint64_t GetTxBlockRequest::height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetTxBlockRequest.height)
  return _internal_height();
}
inline void GetTxBlockRequest::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void GetTxBlockRequest::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetTxBlockRequest.height)
}

// optional bytes account_address = 5;
inline bool GetTxBlockRequest::_internal_has_account_address() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetTxBlockRequest::has_account_address() const {
  return _internal_has_account_address();
}
inline void GetTxBlockRequest::clear_account_address() {
  account_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetTxBlockRequest::account_address() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetTxBlockRequest.account_address)
  return _internal_account_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTxBlockRequest::set_account_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 account_address_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetTxBlockRequest.account_address)
}
inline std::string* GetTxBlockRequest::mutable_account_address() {
  std::string* _s = _internal_mutable_account_address();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetTxBlockRequest.account_address)
  return _s;
}
inline const std::string& GetTxBlockRequest::_internal_account_address() const {
  return account_address_.Get();
}
inline void GetTxBlockRequest::_internal_set_account_address(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  account_address_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTxBlockRequest::_internal_mutable_account_address() {
  _has_bits_[0] |= 0x00000004u;
  return account_address_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTxBlockRequest::release_account_address() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetTxBlockRequest.account_address)
  if (!_internal_has_account_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = account_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_address_.IsDefault()) {
    account_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetTxBlockRequest::set_allocated_account_address(std::string* account_address) {
  if (account_address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  account_address_.SetAllocated(account_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_address_.IsDefault()) {
    account_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetTxBlockRequest.account_address)
}

// -------------------------------------------------------------------

// GetTxBlockResponse

// optional bytes block = 1;
inline bool GetTxBlockResponse::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetTxBlockResponse::has_block() const {
  return _internal_has_block();
}
inline void GetTxBlockResponse::clear_block() {
  block_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetTxBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetTxBlockResponse.block)
  return _internal_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTxBlockResponse::set_block(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 block_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetTxBlockResponse.block)
}
inline std::string* GetTxBlockResponse::mutable_block() {
  std::string* _s = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetTxBlockResponse.block)
  return _s;
}
inline const std::string& GetTxBlockResponse::_internal_block() const {
  return block_.Get();
}
inline void GetTxBlockResponse::_internal_set_block(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  block_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTxBlockResponse::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  return block_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTxBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetTxBlockResponse.block)
  if (!_internal_has_block()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = block_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_.IsDefault()) {
    block_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetTxBlockResponse::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_.SetAllocated(block, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_.IsDefault()) {
    block_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetTxBlockResponse.block)
}

// -------------------------------------------------------------------

// AccountHeightRequest

// optional bytes account_addr = 1;
inline bool AccountHeightRequest::_internal_has_account_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountHeightRequest::has_account_addr() const {
  return _internal_has_account_addr();
}
inline void AccountHeightRequest::clear_account_addr() {
  account_addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountHeightRequest::account_addr() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountHeightRequest.account_addr)
  return _internal_account_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountHeightRequest::set_account_addr(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountHeightRequest.account_addr)
}
inline std::string* AccountHeightRequest::mutable_account_addr() {
  std::string* _s = _internal_mutable_account_addr();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountHeightRequest.account_addr)
  return _s;
}
inline const std::string& AccountHeightRequest::_internal_account_addr() const {
  return account_addr_.Get();
}
inline void AccountHeightRequest::_internal_set_account_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountHeightRequest::_internal_mutable_account_addr() {
  _has_bits_[0] |= 0x00000001u;
  return account_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountHeightRequest::release_account_addr() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountHeightRequest.account_addr)
  if (!_internal_has_account_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_addr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_addr_.IsDefault()) {
    account_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountHeightRequest::set_allocated_account_addr(std::string* account_addr) {
  if (account_addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_addr_.SetAllocated(account_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_addr_.IsDefault()) {
    account_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountHeightRequest.account_addr)
}

// optional int64 index = 2;
inline bool AccountHeightRequest::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountHeightRequest::has_index() const {
  return _internal_has_index();
}
inline void AccountHeightRequest::clear_index() {
  index_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AccountHeightRequest::_internal_index() const {
  return index_;
}
inline int64_t AccountHeightRequest::index() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountHeightRequest.index)
  return _internal_index();
}
inline void AccountHeightRequest::_internal_set_index(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void AccountHeightRequest::set_index(int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountHeightRequest.index)
}

// optional int32 count = 3;
inline bool AccountHeightRequest::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountHeightRequest::has_count() const {
  return _internal_has_count();
}
inline void AccountHeightRequest::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AccountHeightRequest::_internal_count() const {
  return count_;
}
inline int32_t AccountHeightRequest::count() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountHeightRequest.count)
  return _internal_count();
}
inline void AccountHeightRequest::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void AccountHeightRequest::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountHeightRequest.count)
}

// -------------------------------------------------------------------

// AccountHeightResponse

// repeated uint64 heights = 1;
inline int AccountHeightResponse::_internal_heights_size() const {
  return heights_.size();
}
inline int AccountHeightResponse::heights_size() const {
  return _internal_heights_size();
}
inline void AccountHeightResponse::clear_heights() {
  heights_.Clear();
}
inline uint64_t AccountHeightResponse::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline uint64_t AccountHeightResponse::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountHeightResponse.heights)
  return _internal_heights(index);
}
inline void AccountHeightResponse::set_heights(int index, uint64_t value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountHeightResponse.heights)
}
inline void AccountHeightResponse::_internal_add_heights(uint64_t value) {
  heights_.Add(value);
}
inline void AccountHeightResponse::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.AccountHeightResponse.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
AccountHeightResponse::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
AccountHeightResponse::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.AccountHeightResponse.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
AccountHeightResponse::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
AccountHeightResponse::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.AccountHeightResponse.heights)
  return _internal_mutable_heights();
}

// optional bytes account_addr = 2;
inline bool AccountHeightResponse::_internal_has_account_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountHeightResponse::has_account_addr() const {
  return _internal_has_account_addr();
}
inline void AccountHeightResponse::clear_account_addr() {
  account_addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountHeightResponse::account_addr() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountHeightResponse.account_addr)
  return _internal_account_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountHeightResponse::set_account_addr(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountHeightResponse.account_addr)
}
inline std::string* AccountHeightResponse::mutable_account_addr() {
  std::string* _s = _internal_mutable_account_addr();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountHeightResponse.account_addr)
  return _s;
}
inline const std::string& AccountHeightResponse::_internal_account_addr() const {
  return account_addr_.Get();
}
inline void AccountHeightResponse::_internal_set_account_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountHeightResponse::_internal_mutable_account_addr() {
  _has_bits_[0] |= 0x00000001u;
  return account_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountHeightResponse::release_account_addr() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountHeightResponse.account_addr)
  if (!_internal_has_account_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_addr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_addr_.IsDefault()) {
    account_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountHeightResponse::set_allocated_account_addr(std::string* account_addr) {
  if (account_addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_addr_.SetAllocated(account_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_addr_.IsDefault()) {
    account_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountHeightResponse.account_addr)
}

// optional bytes type = 3;
inline bool AccountHeightResponse::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountHeightResponse::has_type() const {
  return _internal_has_type();
}
inline void AccountHeightResponse::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountHeightResponse::type() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountHeightResponse.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountHeightResponse::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 type_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountHeightResponse.type)
}
inline std::string* AccountHeightResponse::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountHeightResponse.type)
  return _s;
}
inline const std::string& AccountHeightResponse::_internal_type() const {
  return type_.Get();
}
inline void AccountHeightResponse::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountHeightResponse::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountHeightResponse::release_type() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountHeightResponse.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountHeightResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountHeightResponse.type)
}

// -------------------------------------------------------------------

// AccountAttrRequest

// optional bytes account = 1;
inline bool AccountAttrRequest::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountAttrRequest::has_account() const {
  return _internal_has_account();
}
inline void AccountAttrRequest::clear_account() {
  account_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountAttrRequest::account() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountAttrRequest.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountAttrRequest::set_account(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountAttrRequest.account)
}
inline std::string* AccountAttrRequest::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountAttrRequest.account)
  return _s;
}
inline const std::string& AccountAttrRequest::_internal_account() const {
  return account_.Get();
}
inline void AccountAttrRequest::_internal_set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountAttrRequest::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountAttrRequest::release_account() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountAttrRequest.account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountAttrRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountAttrRequest.account)
}

// optional bytes attr_key = 2;
inline bool AccountAttrRequest::_internal_has_attr_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountAttrRequest::has_attr_key() const {
  return _internal_has_attr_key();
}
inline void AccountAttrRequest::clear_attr_key() {
  attr_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountAttrRequest::attr_key() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountAttrRequest.attr_key)
  return _internal_attr_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountAttrRequest::set_attr_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 attr_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountAttrRequest.attr_key)
}
inline std::string* AccountAttrRequest::mutable_attr_key() {
  std::string* _s = _internal_mutable_attr_key();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountAttrRequest.attr_key)
  return _s;
}
inline const std::string& AccountAttrRequest::_internal_attr_key() const {
  return attr_key_.Get();
}
inline void AccountAttrRequest::_internal_set_attr_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  attr_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountAttrRequest::_internal_mutable_attr_key() {
  _has_bits_[0] |= 0x00000002u;
  return attr_key_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountAttrRequest::release_attr_key() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountAttrRequest.attr_key)
  if (!_internal_has_attr_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = attr_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountAttrRequest::set_allocated_attr_key(std::string* attr_key) {
  if (attr_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attr_key_.SetAllocated(attr_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountAttrRequest.attr_key)
}

// optional uint64 height = 3;
inline bool AccountAttrRequest::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountAttrRequest::has_height() const {
  return _internal_has_height();
}
inline void AccountAttrRequest::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t AccountAttrRequest::_internal_height() const {
  return height_;
}
inline uint64_t AccountAttrRequest::height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountAttrRequest.height)
  return _internal_height();
}
inline void AccountAttrRequest::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void AccountAttrRequest::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountAttrRequest.height)
}

// -------------------------------------------------------------------

// AccountAttrResponse

// optional bytes account = 1;
inline bool AccountAttrResponse::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountAttrResponse::has_account() const {
  return _internal_has_account();
}
inline void AccountAttrResponse::clear_account() {
  account_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountAttrResponse::account() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountAttrResponse.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountAttrResponse::set_account(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountAttrResponse.account)
}
inline std::string* AccountAttrResponse::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountAttrResponse.account)
  return _s;
}
inline const std::string& AccountAttrResponse::_internal_account() const {
  return account_.Get();
}
inline void AccountAttrResponse::_internal_set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountAttrResponse::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountAttrResponse::release_account() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountAttrResponse.account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountAttrResponse::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountAttrResponse.account)
}

// optional bytes attr_key = 2;
inline bool AccountAttrResponse::_internal_has_attr_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountAttrResponse::has_attr_key() const {
  return _internal_has_attr_key();
}
inline void AccountAttrResponse::clear_attr_key() {
  attr_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountAttrResponse::attr_key() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountAttrResponse.attr_key)
  return _internal_attr_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountAttrResponse::set_attr_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 attr_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountAttrResponse.attr_key)
}
inline std::string* AccountAttrResponse::mutable_attr_key() {
  std::string* _s = _internal_mutable_attr_key();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountAttrResponse.attr_key)
  return _s;
}
inline const std::string& AccountAttrResponse::_internal_attr_key() const {
  return attr_key_.Get();
}
inline void AccountAttrResponse::_internal_set_attr_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  attr_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountAttrResponse::_internal_mutable_attr_key() {
  _has_bits_[0] |= 0x00000002u;
  return attr_key_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountAttrResponse::release_attr_key() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountAttrResponse.attr_key)
  if (!_internal_has_attr_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = attr_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountAttrResponse::set_allocated_attr_key(std::string* attr_key) {
  if (attr_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attr_key_.SetAllocated(attr_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountAttrResponse.attr_key)
}

// optional uint64 height = 3;
inline bool AccountAttrResponse::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountAttrResponse::has_height() const {
  return _internal_has_height();
}
inline void AccountAttrResponse::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t AccountAttrResponse::_internal_height() const {
  return height_;
}
inline uint64_t AccountAttrResponse::height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountAttrResponse.height)
  return _internal_height();
}
inline void AccountAttrResponse::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void AccountAttrResponse::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountAttrResponse.height)
}

// optional bytes block = 4;
inline bool AccountAttrResponse::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountAttrResponse::has_block() const {
  return _internal_has_block();
}
inline void AccountAttrResponse::clear_block() {
  block_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AccountAttrResponse::block() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AccountAttrResponse.block)
  return _internal_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountAttrResponse::set_block(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 block_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AccountAttrResponse.block)
}
inline std::string* AccountAttrResponse::mutable_block() {
  std::string* _s = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AccountAttrResponse.block)
  return _s;
}
inline const std::string& AccountAttrResponse::_internal_block() const {
  return block_.Get();
}
inline void AccountAttrResponse::_internal_set_block(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  block_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountAttrResponse::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000004u;
  return block_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountAttrResponse::release_block() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AccountAttrResponse.block)
  if (!_internal_has_block()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = block_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_.IsDefault()) {
    block_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountAttrResponse::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  block_.SetAllocated(block, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (block_.IsDefault()) {
    block_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AccountAttrResponse.block)
}

// -------------------------------------------------------------------

// UpdateVpnCountRequest

// optional uint64 account_hash = 1;
inline bool UpdateVpnCountRequest::_internal_has_account_hash() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UpdateVpnCountRequest::has_account_hash() const {
  return _internal_has_account_hash();
}
inline void UpdateVpnCountRequest::clear_account_hash() {
  account_hash_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t UpdateVpnCountRequest::_internal_account_hash() const {
  return account_hash_;
}
inline uint64_t UpdateVpnCountRequest::account_hash() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnCountRequest.account_hash)
  return _internal_account_hash();
}
inline void UpdateVpnCountRequest::_internal_set_account_hash(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  account_hash_ = value;
}
inline void UpdateVpnCountRequest::set_account_hash(uint64_t value) {
  _internal_set_account_hash(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.UpdateVpnCountRequest.account_hash)
}

// optional bytes ip = 2;
inline bool UpdateVpnCountRequest::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateVpnCountRequest::has_ip() const {
  return _internal_has_ip();
}
inline void UpdateVpnCountRequest::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateVpnCountRequest::ip() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnCountRequest.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateVpnCountRequest::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.UpdateVpnCountRequest.ip)
}
inline std::string* UpdateVpnCountRequest::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.UpdateVpnCountRequest.ip)
  return _s;
}
inline const std::string& UpdateVpnCountRequest::_internal_ip() const {
  return ip_.Get();
}
inline void UpdateVpnCountRequest::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateVpnCountRequest::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateVpnCountRequest::release_ip() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.UpdateVpnCountRequest.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateVpnCountRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.UpdateVpnCountRequest.ip)
}

// optional bytes old_ip = 3;
inline bool UpdateVpnCountRequest::_internal_has_old_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdateVpnCountRequest::has_old_ip() const {
  return _internal_has_old_ip();
}
inline void UpdateVpnCountRequest::clear_old_ip() {
  old_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdateVpnCountRequest::old_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnCountRequest.old_ip)
  return _internal_old_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateVpnCountRequest::set_old_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 old_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.UpdateVpnCountRequest.old_ip)
}
inline std::string* UpdateVpnCountRequest::mutable_old_ip() {
  std::string* _s = _internal_mutable_old_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.UpdateVpnCountRequest.old_ip)
  return _s;
}
inline const std::string& UpdateVpnCountRequest::_internal_old_ip() const {
  return old_ip_.Get();
}
inline void UpdateVpnCountRequest::_internal_set_old_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  old_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateVpnCountRequest::_internal_mutable_old_ip() {
  _has_bits_[0] |= 0x00000002u;
  return old_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateVpnCountRequest::release_old_ip() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.UpdateVpnCountRequest.old_ip)
  if (!_internal_has_old_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = old_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (old_ip_.IsDefault()) {
    old_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateVpnCountRequest::set_allocated_old_ip(std::string* old_ip) {
  if (old_ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_ip_.SetAllocated(old_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (old_ip_.IsDefault()) {
    old_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.UpdateVpnCountRequest.old_ip)
}

// optional bytes uid = 4;
inline bool UpdateVpnCountRequest::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdateVpnCountRequest::has_uid() const {
  return _internal_has_uid();
}
inline void UpdateVpnCountRequest::clear_uid() {
  uid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UpdateVpnCountRequest::uid() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnCountRequest.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateVpnCountRequest::set_uid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 uid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.UpdateVpnCountRequest.uid)
}
inline std::string* UpdateVpnCountRequest::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.UpdateVpnCountRequest.uid)
  return _s;
}
inline const std::string& UpdateVpnCountRequest::_internal_uid() const {
  return uid_.Get();
}
inline void UpdateVpnCountRequest::_internal_set_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  uid_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateVpnCountRequest::_internal_mutable_uid() {
  _has_bits_[0] |= 0x00000004u;
  return uid_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateVpnCountRequest::release_uid() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.UpdateVpnCountRequest.uid)
  if (!_internal_has_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = uid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uid_.IsDefault()) {
    uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateVpnCountRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uid_.IsDefault()) {
    uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.UpdateVpnCountRequest.uid)
}

// optional bool just_set = 5;
inline bool UpdateVpnCountRequest::_internal_has_just_set() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UpdateVpnCountRequest::has_just_set() const {
  return _internal_has_just_set();
}
inline void UpdateVpnCountRequest::clear_just_set() {
  just_set_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool UpdateVpnCountRequest::_internal_just_set() const {
  return just_set_;
}
inline bool UpdateVpnCountRequest::just_set() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnCountRequest.just_set)
  return _internal_just_set();
}
inline void UpdateVpnCountRequest::_internal_set_just_set(bool value) {
  _has_bits_[0] |= 0x00000010u;
  just_set_ = value;
}
inline void UpdateVpnCountRequest::set_just_set(bool value) {
  _internal_set_just_set(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.UpdateVpnCountRequest.just_set)
}

// -------------------------------------------------------------------

// VpnCountItem

// optional bytes ip = 1;
inline bool VpnCountItem::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VpnCountItem::has_ip() const {
  return _internal_has_ip();
}
inline void VpnCountItem::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VpnCountItem::ip() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.VpnCountItem.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VpnCountItem::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.VpnCountItem.ip)
}
inline std::string* VpnCountItem::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.VpnCountItem.ip)
  return _s;
}
inline const std::string& VpnCountItem::_internal_ip() const {
  return ip_.Get();
}
inline void VpnCountItem::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* VpnCountItem::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* VpnCountItem::release_ip() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.VpnCountItem.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VpnCountItem::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.VpnCountItem.ip)
}

// optional uint32 count = 2;
inline bool VpnCountItem::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VpnCountItem::has_count() const {
  return _internal_has_count();
}
inline void VpnCountItem::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t VpnCountItem::_internal_count() const {
  return count_;
}
inline uint32_t VpnCountItem::count() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.VpnCountItem.count)
  return _internal_count();
}
inline void VpnCountItem::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void VpnCountItem::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.VpnCountItem.count)
}

// -------------------------------------------------------------------

// UpdateVpnCountResponse

// repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
inline int UpdateVpnCountResponse::_internal_vpn_nodes_size() const {
  return vpn_nodes_.size();
}
inline int UpdateVpnCountResponse::vpn_nodes_size() const {
  return _internal_vpn_nodes_size();
}
inline void UpdateVpnCountResponse::clear_vpn_nodes() {
  vpn_nodes_.Clear();
}
inline ::zjchain::block::protobuf::VpnCountItem* UpdateVpnCountResponse::mutable_vpn_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return vpn_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >*
UpdateVpnCountResponse::mutable_vpn_nodes() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return &vpn_nodes_;
}
inline const ::zjchain::block::protobuf::VpnCountItem& UpdateVpnCountResponse::_internal_vpn_nodes(int index) const {
  return vpn_nodes_.Get(index);
}
inline const ::zjchain::block::protobuf::VpnCountItem& UpdateVpnCountResponse::vpn_nodes(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return _internal_vpn_nodes(index);
}
inline ::zjchain::block::protobuf::VpnCountItem* UpdateVpnCountResponse::_internal_add_vpn_nodes() {
  return vpn_nodes_.Add();
}
inline ::zjchain::block::protobuf::VpnCountItem* UpdateVpnCountResponse::add_vpn_nodes() {
  ::zjchain::block::protobuf::VpnCountItem* _add = _internal_add_vpn_nodes();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >&
UpdateVpnCountResponse::vpn_nodes() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return vpn_nodes_;
}

// -------------------------------------------------------------------

// GetAccountInitInfoRequest

// optional bytes id = 1;
inline bool GetAccountInitInfoRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAccountInitInfoRequest::has_id() const {
  return _internal_has_id();
}
inline void GetAccountInitInfoRequest::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAccountInitInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountInitInfoRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoRequest.id)
}
inline std::string* GetAccountInitInfoRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetAccountInitInfoRequest.id)
  return _s;
}
inline const std::string& GetAccountInitInfoRequest::_internal_id() const {
  return id_.Get();
}
inline void GetAccountInitInfoRequest::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountInitInfoRequest::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountInitInfoRequest::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetAccountInitInfoRequest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAccountInitInfoRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetAccountInitInfoRequest.id)
}

// optional uint32 count = 2;
inline bool GetAccountInitInfoRequest::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetAccountInitInfoRequest::has_count() const {
  return _internal_has_count();
}
inline void GetAccountInitInfoRequest::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t GetAccountInitInfoRequest::_internal_count() const {
  return count_;
}
inline uint32_t GetAccountInitInfoRequest::count() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoRequest.count)
  return _internal_count();
}
inline void GetAccountInitInfoRequest::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  count_ = value;
}
inline void GetAccountInitInfoRequest::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoRequest.count)
}

// optional uint64 height = 3;
inline bool GetAccountInitInfoRequest::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAccountInitInfoRequest::has_height() const {
  return _internal_has_height();
}
inline void GetAccountInitInfoRequest::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t GetAccountInitInfoRequest::_internal_height() const {
  return height_;
}
inline uint64_t GetAccountInitInfoRequest::height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoRequest.height)
  return _internal_height();
}
inline void GetAccountInitInfoRequest::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void GetAccountInitInfoRequest::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoRequest.height)
}

// optional uint64 net_id = 4;
inline bool GetAccountInitInfoRequest::_internal_has_net_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAccountInitInfoRequest::has_net_id() const {
  return _internal_has_net_id();
}
inline void GetAccountInitInfoRequest::clear_net_id() {
  net_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t GetAccountInitInfoRequest::_internal_net_id() const {
  return net_id_;
}
inline uint64_t GetAccountInitInfoRequest::net_id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoRequest.net_id)
  return _internal_net_id();
}
inline void GetAccountInitInfoRequest::_internal_set_net_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  net_id_ = value;
}
inline void GetAccountInitInfoRequest::set_net_id(uint64_t value) {
  _internal_set_net_id(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoRequest.net_id)
}

// optional uint64 index = 5;
inline bool GetAccountInitInfoRequest::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetAccountInitInfoRequest::has_index() const {
  return _internal_has_index();
}
inline void GetAccountInitInfoRequest::clear_index() {
  index_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t GetAccountInitInfoRequest::_internal_index() const {
  return index_;
}
inline uint64_t GetAccountInitInfoRequest::index() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoRequest.index)
  return _internal_index();
}
inline void GetAccountInitInfoRequest::_internal_set_index(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
}
inline void GetAccountInitInfoRequest::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoRequest.index)
}

// -------------------------------------------------------------------

// GetAccountInitInfoResponse

// optional uint64 balance = 1;
inline bool GetAccountInitInfoResponse::_internal_has_balance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAccountInitInfoResponse::has_balance() const {
  return _internal_has_balance();
}
inline void GetAccountInitInfoResponse::clear_balance() {
  balance_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t GetAccountInitInfoResponse::_internal_balance() const {
  return balance_;
}
inline uint64_t GetAccountInitInfoResponse::balance() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoResponse.balance)
  return _internal_balance();
}
inline void GetAccountInitInfoResponse::_internal_set_balance(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  balance_ = value;
}
inline void GetAccountInitInfoResponse::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoResponse.balance)
}

// repeated .zjchain.block.protobuf.Block block_list = 2;
inline int GetAccountInitInfoResponse::_internal_block_list_size() const {
  return block_list_.size();
}
inline int GetAccountInitInfoResponse::block_list_size() const {
  return _internal_block_list_size();
}
inline void GetAccountInitInfoResponse::clear_block_list() {
  block_list_.Clear();
}
inline ::zjchain::block::protobuf::Block* GetAccountInitInfoResponse::mutable_block_list(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetAccountInitInfoResponse.block_list)
  return block_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::Block >*
GetAccountInitInfoResponse::mutable_block_list() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.GetAccountInitInfoResponse.block_list)
  return &block_list_;
}
inline const ::zjchain::block::protobuf::Block& GetAccountInitInfoResponse::_internal_block_list(int index) const {
  return block_list_.Get(index);
}
inline const ::zjchain::block::protobuf::Block& GetAccountInitInfoResponse::block_list(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoResponse.block_list)
  return _internal_block_list(index);
}
inline ::zjchain::block::protobuf::Block* GetAccountInitInfoResponse::_internal_add_block_list() {
  return block_list_.Add();
}
inline ::zjchain::block::protobuf::Block* GetAccountInitInfoResponse::add_block_list() {
  ::zjchain::block::protobuf::Block* _add = _internal_add_block_list();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.GetAccountInitInfoResponse.block_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::Block >&
GetAccountInitInfoResponse::block_list() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.GetAccountInitInfoResponse.block_list)
  return block_list_;
}

// optional bytes id = 3;
inline bool GetAccountInitInfoResponse::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAccountInitInfoResponse::has_id() const {
  return _internal_has_id();
}
inline void GetAccountInitInfoResponse::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAccountInitInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountInitInfoResponse::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoResponse.id)
}
inline std::string* GetAccountInitInfoResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetAccountInitInfoResponse.id)
  return _s;
}
inline const std::string& GetAccountInitInfoResponse::_internal_id() const {
  return id_.Get();
}
inline void GetAccountInitInfoResponse::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountInitInfoResponse::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountInitInfoResponse::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetAccountInitInfoResponse.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAccountInitInfoResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetAccountInitInfoResponse.id)
}

// optional uint64 max_index = 4;
inline bool GetAccountInitInfoResponse::_internal_has_max_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAccountInitInfoResponse::has_max_index() const {
  return _internal_has_max_index();
}
inline void GetAccountInitInfoResponse::clear_max_index() {
  max_index_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t GetAccountInitInfoResponse::_internal_max_index() const {
  return max_index_;
}
inline uint64_t GetAccountInitInfoResponse::max_index() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountInitInfoResponse.max_index)
  return _internal_max_index();
}
inline void GetAccountInitInfoResponse::_internal_set_max_index(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  max_index_ = value;
}
inline void GetAccountInitInfoResponse::set_max_index(uint64_t value) {
  _internal_set_max_index(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountInitInfoResponse.max_index)
}

// -------------------------------------------------------------------

// UpdateVpnActiveRequest

// optional bytes id = 1;
inline bool UpdateVpnActiveRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateVpnActiveRequest::has_id() const {
  return _internal_has_id();
}
inline void UpdateVpnActiveRequest::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateVpnActiveRequest::id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnActiveRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateVpnActiveRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.UpdateVpnActiveRequest.id)
}
inline std::string* UpdateVpnActiveRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.UpdateVpnActiveRequest.id)
  return _s;
}
inline const std::string& UpdateVpnActiveRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateVpnActiveRequest::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateVpnActiveRequest::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateVpnActiveRequest::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.UpdateVpnActiveRequest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateVpnActiveRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.UpdateVpnActiveRequest.id)
}

// optional bytes ip = 2;
inline bool UpdateVpnActiveRequest::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdateVpnActiveRequest::has_ip() const {
  return _internal_has_ip();
}
inline void UpdateVpnActiveRequest::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdateVpnActiveRequest::ip() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.UpdateVpnActiveRequest.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateVpnActiveRequest::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.UpdateVpnActiveRequest.ip)
}
inline std::string* UpdateVpnActiveRequest::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.UpdateVpnActiveRequest.ip)
  return _s;
}
inline const std::string& UpdateVpnActiveRequest::_internal_ip() const {
  return ip_.Get();
}
inline void UpdateVpnActiveRequest::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateVpnActiveRequest::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateVpnActiveRequest::release_ip() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.UpdateVpnActiveRequest.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateVpnActiveRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.UpdateVpnActiveRequest.ip)
}

// -------------------------------------------------------------------

// AdRewardRequest

// optional bytes id = 1;
inline bool AdRewardRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdRewardRequest::has_id() const {
  return _internal_has_id();
}
inline void AdRewardRequest::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdRewardRequest::id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AdRewardRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdRewardRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AdRewardRequest.id)
}
inline std::string* AdRewardRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AdRewardRequest.id)
  return _s;
}
inline const std::string& AdRewardRequest::_internal_id() const {
  return id_.Get();
}
inline void AdRewardRequest::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* AdRewardRequest::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* AdRewardRequest::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AdRewardRequest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdRewardRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AdRewardRequest.id)
}

// optional bytes reward_key = 2;
inline bool AdRewardRequest::_internal_has_reward_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdRewardRequest::has_reward_key() const {
  return _internal_has_reward_key();
}
inline void AdRewardRequest::clear_reward_key() {
  reward_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AdRewardRequest::reward_key() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AdRewardRequest.reward_key)
  return _internal_reward_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdRewardRequest::set_reward_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 reward_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AdRewardRequest.reward_key)
}
inline std::string* AdRewardRequest::mutable_reward_key() {
  std::string* _s = _internal_mutable_reward_key();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AdRewardRequest.reward_key)
  return _s;
}
inline const std::string& AdRewardRequest::_internal_reward_key() const {
  return reward_key_.Get();
}
inline void AdRewardRequest::_internal_set_reward_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reward_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AdRewardRequest::_internal_mutable_reward_key() {
  _has_bits_[0] |= 0x00000002u;
  return reward_key_.Mutable(GetArenaForAllocation());
}
inline std::string* AdRewardRequest::release_reward_key() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AdRewardRequest.reward_key)
  if (!_internal_has_reward_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = reward_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reward_key_.IsDefault()) {
    reward_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdRewardRequest::set_allocated_reward_key(std::string* reward_key) {
  if (reward_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reward_key_.SetAllocated(reward_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reward_key_.IsDefault()) {
    reward_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AdRewardRequest.reward_key)
}

// optional bytes gid = 3;
inline bool AdRewardRequest::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdRewardRequest::has_gid() const {
  return _internal_has_gid();
}
inline void AdRewardRequest::clear_gid() {
  gid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AdRewardRequest::gid() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.AdRewardRequest.gid)
  return _internal_gid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdRewardRequest::set_gid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 gid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.AdRewardRequest.gid)
}
inline std::string* AdRewardRequest::mutable_gid() {
  std::string* _s = _internal_mutable_gid();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.AdRewardRequest.gid)
  return _s;
}
inline const std::string& AdRewardRequest::_internal_gid() const {
  return gid_.Get();
}
inline void AdRewardRequest::_internal_set_gid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gid_.Set(value, GetArenaForAllocation());
}
inline std::string* AdRewardRequest::_internal_mutable_gid() {
  _has_bits_[0] |= 0x00000004u;
  return gid_.Mutable(GetArenaForAllocation());
}
inline std::string* AdRewardRequest::release_gid() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.AdRewardRequest.gid)
  if (!_internal_has_gid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = gid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdRewardRequest::set_allocated_gid(std::string* gid) {
  if (gid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gid_.SetAllocated(gid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gid_.IsDefault()) {
    gid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.AdRewardRequest.gid)
}

// -------------------------------------------------------------------

// ElectStatisticInfo

// optional uint64 elect_height = 1;
inline bool ElectStatisticInfo::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ElectStatisticInfo::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void ElectStatisticInfo::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ElectStatisticInfo::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t ElectStatisticInfo::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ElectStatisticInfo.elect_height)
  return _internal_elect_height();
}
inline void ElectStatisticInfo::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  elect_height_ = value;
}
inline void ElectStatisticInfo::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ElectStatisticInfo.elect_height)
}

// repeated uint32 succ_tx_count = 2;
inline int ElectStatisticInfo::_internal_succ_tx_count_size() const {
  return succ_tx_count_.size();
}
inline int ElectStatisticInfo::succ_tx_count_size() const {
  return _internal_succ_tx_count_size();
}
inline void ElectStatisticInfo::clear_succ_tx_count() {
  succ_tx_count_.Clear();
}
inline uint32_t ElectStatisticInfo::_internal_succ_tx_count(int index) const {
  return succ_tx_count_.Get(index);
}
inline uint32_t ElectStatisticInfo::succ_tx_count(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ElectStatisticInfo.succ_tx_count)
  return _internal_succ_tx_count(index);
}
inline void ElectStatisticInfo::set_succ_tx_count(int index, uint32_t value) {
  succ_tx_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ElectStatisticInfo.succ_tx_count)
}
inline void ElectStatisticInfo::_internal_add_succ_tx_count(uint32_t value) {
  succ_tx_count_.Add(value);
}
inline void ElectStatisticInfo::add_succ_tx_count(uint32_t value) {
  _internal_add_succ_tx_count(value);
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.ElectStatisticInfo.succ_tx_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ElectStatisticInfo::_internal_succ_tx_count() const {
  return succ_tx_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ElectStatisticInfo::succ_tx_count() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.ElectStatisticInfo.succ_tx_count)
  return _internal_succ_tx_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ElectStatisticInfo::_internal_mutable_succ_tx_count() {
  return &succ_tx_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ElectStatisticInfo::mutable_succ_tx_count() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.ElectStatisticInfo.succ_tx_count)
  return _internal_mutable_succ_tx_count();
}

// repeated uint32 lof_leaders = 3;
inline int ElectStatisticInfo::_internal_lof_leaders_size() const {
  return lof_leaders_.size();
}
inline int ElectStatisticInfo::lof_leaders_size() const {
  return _internal_lof_leaders_size();
}
inline void ElectStatisticInfo::clear_lof_leaders() {
  lof_leaders_.Clear();
}
inline uint32_t ElectStatisticInfo::_internal_lof_leaders(int index) const {
  return lof_leaders_.Get(index);
}
inline uint32_t ElectStatisticInfo::lof_leaders(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ElectStatisticInfo.lof_leaders)
  return _internal_lof_leaders(index);
}
inline void ElectStatisticInfo::set_lof_leaders(int index, uint32_t value) {
  lof_leaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ElectStatisticInfo.lof_leaders)
}
inline void ElectStatisticInfo::_internal_add_lof_leaders(uint32_t value) {
  lof_leaders_.Add(value);
}
inline void ElectStatisticInfo::add_lof_leaders(uint32_t value) {
  _internal_add_lof_leaders(value);
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.ElectStatisticInfo.lof_leaders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ElectStatisticInfo::_internal_lof_leaders() const {
  return lof_leaders_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ElectStatisticInfo::lof_leaders() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.ElectStatisticInfo.lof_leaders)
  return _internal_lof_leaders();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ElectStatisticInfo::_internal_mutable_lof_leaders() {
  return &lof_leaders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ElectStatisticInfo::mutable_lof_leaders() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.ElectStatisticInfo.lof_leaders)
  return _internal_mutable_lof_leaders();
}

// -------------------------------------------------------------------

// StatisticInfo

// optional uint64 timeblock_height = 1;
inline bool StatisticInfo::_internal_has_timeblock_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatisticInfo::has_timeblock_height() const {
  return _internal_has_timeblock_height();
}
inline void StatisticInfo::clear_timeblock_height() {
  timeblock_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t StatisticInfo::_internal_timeblock_height() const {
  return timeblock_height_;
}
inline uint64_t StatisticInfo::timeblock_height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StatisticInfo.timeblock_height)
  return _internal_timeblock_height();
}
inline void StatisticInfo::_internal_set_timeblock_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  timeblock_height_ = value;
}
inline void StatisticInfo::set_timeblock_height(uint64_t value) {
  _internal_set_timeblock_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StatisticInfo.timeblock_height)
}

// optional uint32 all_tx_count = 2;
inline bool StatisticInfo::_internal_has_all_tx_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatisticInfo::has_all_tx_count() const {
  return _internal_has_all_tx_count();
}
inline void StatisticInfo::clear_all_tx_count() {
  all_tx_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t StatisticInfo::_internal_all_tx_count() const {
  return all_tx_count_;
}
inline uint32_t StatisticInfo::all_tx_count() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StatisticInfo.all_tx_count)
  return _internal_all_tx_count();
}
inline void StatisticInfo::_internal_set_all_tx_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  all_tx_count_ = value;
}
inline void StatisticInfo::set_all_tx_count(uint32_t value) {
  _internal_set_all_tx_count(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StatisticInfo.all_tx_count)
}

// repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
inline int StatisticInfo::_internal_elect_statistic_size() const {
  return elect_statistic_.size();
}
inline int StatisticInfo::elect_statistic_size() const {
  return _internal_elect_statistic_size();
}
inline void StatisticInfo::clear_elect_statistic() {
  elect_statistic_.Clear();
}
inline ::zjchain::block::protobuf::ElectStatisticInfo* StatisticInfo::mutable_elect_statistic(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.StatisticInfo.elect_statistic)
  return elect_statistic_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >*
StatisticInfo::mutable_elect_statistic() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.StatisticInfo.elect_statistic)
  return &elect_statistic_;
}
inline const ::zjchain::block::protobuf::ElectStatisticInfo& StatisticInfo::_internal_elect_statistic(int index) const {
  return elect_statistic_.Get(index);
}
inline const ::zjchain::block::protobuf::ElectStatisticInfo& StatisticInfo::elect_statistic(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StatisticInfo.elect_statistic)
  return _internal_elect_statistic(index);
}
inline ::zjchain::block::protobuf::ElectStatisticInfo* StatisticInfo::_internal_add_elect_statistic() {
  return elect_statistic_.Add();
}
inline ::zjchain::block::protobuf::ElectStatisticInfo* StatisticInfo::add_elect_statistic() {
  ::zjchain::block::protobuf::ElectStatisticInfo* _add = _internal_add_elect_statistic();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.StatisticInfo.elect_statistic)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >&
StatisticInfo::elect_statistic() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.StatisticInfo.elect_statistic)
  return elect_statistic_;
}

// -------------------------------------------------------------------

// RefreshPoolHeightRequest

// repeated uint64 heights = 1;
inline int RefreshPoolHeightRequest::_internal_heights_size() const {
  return heights_.size();
}
inline int RefreshPoolHeightRequest::heights_size() const {
  return _internal_heights_size();
}
inline void RefreshPoolHeightRequest::clear_heights() {
  heights_.Clear();
}
inline uint64_t RefreshPoolHeightRequest::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline uint64_t RefreshPoolHeightRequest::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.RefreshPoolHeightRequest.heights)
  return _internal_heights(index);
}
inline void RefreshPoolHeightRequest::set_heights(int index, uint64_t value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.RefreshPoolHeightRequest.heights)
}
inline void RefreshPoolHeightRequest::_internal_add_heights(uint64_t value) {
  heights_.Add(value);
}
inline void RefreshPoolHeightRequest::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.RefreshPoolHeightRequest.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RefreshPoolHeightRequest::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RefreshPoolHeightRequest::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.RefreshPoolHeightRequest.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RefreshPoolHeightRequest::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RefreshPoolHeightRequest::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.RefreshPoolHeightRequest.heights)
  return _internal_mutable_heights();
}

// -------------------------------------------------------------------

// RefreshPoolHeightResponse

// repeated uint64 heights = 1;
inline int RefreshPoolHeightResponse::_internal_heights_size() const {
  return heights_.size();
}
inline int RefreshPoolHeightResponse::heights_size() const {
  return _internal_heights_size();
}
inline void RefreshPoolHeightResponse::clear_heights() {
  heights_.Clear();
}
inline uint64_t RefreshPoolHeightResponse::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline uint64_t RefreshPoolHeightResponse::heights(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.RefreshPoolHeightResponse.heights)
  return _internal_heights(index);
}
inline void RefreshPoolHeightResponse::set_heights(int index, uint64_t value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.RefreshPoolHeightResponse.heights)
}
inline void RefreshPoolHeightResponse::_internal_add_heights(uint64_t value) {
  heights_.Add(value);
}
inline void RefreshPoolHeightResponse::add_heights(uint64_t value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.RefreshPoolHeightResponse.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RefreshPoolHeightResponse::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RefreshPoolHeightResponse::heights() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.RefreshPoolHeightResponse.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RefreshPoolHeightResponse::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RefreshPoolHeightResponse::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.RefreshPoolHeightResponse.heights)
  return _internal_mutable_heights();
}

// -------------------------------------------------------------------

// GetAccountShardRequest

// optional bytes id = 1;
inline bool GetAccountShardRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAccountShardRequest::has_id() const {
  return _internal_has_id();
}
inline void GetAccountShardRequest::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAccountShardRequest::id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountShardRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountShardRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountShardRequest.id)
}
inline std::string* GetAccountShardRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetAccountShardRequest.id)
  return _s;
}
inline const std::string& GetAccountShardRequest::_internal_id() const {
  return id_.Get();
}
inline void GetAccountShardRequest::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountShardRequest::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountShardRequest::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetAccountShardRequest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAccountShardRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetAccountShardRequest.id)
}

// -------------------------------------------------------------------

// GetAccountShardReponse

// optional bytes id = 1;
inline bool GetAccountShardReponse::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAccountShardReponse::has_id() const {
  return _internal_has_id();
}
inline void GetAccountShardReponse::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAccountShardReponse::id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountShardReponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountShardReponse::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountShardReponse.id)
}
inline std::string* GetAccountShardReponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.GetAccountShardReponse.id)
  return _s;
}
inline const std::string& GetAccountShardReponse::_internal_id() const {
  return id_.Get();
}
inline void GetAccountShardReponse::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountShardReponse::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountShardReponse::release_id() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.GetAccountShardReponse.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAccountShardReponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.GetAccountShardReponse.id)
}

// optional uint32 shard_id = 2;
inline bool GetAccountShardReponse::_internal_has_shard_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAccountShardReponse::has_shard_id() const {
  return _internal_has_shard_id();
}
inline void GetAccountShardReponse::clear_shard_id() {
  shard_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GetAccountShardReponse::_internal_shard_id() const {
  return shard_id_;
}
inline uint32_t GetAccountShardReponse::shard_id() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.GetAccountShardReponse.shard_id)
  return _internal_shard_id();
}
inline void GetAccountShardReponse::_internal_set_shard_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  shard_id_ = value;
}
inline void GetAccountShardReponse::set_shard_id(uint32_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.GetAccountShardReponse.shard_id)
}

// -------------------------------------------------------------------

// CrossShardingTosMessage

// optional .zjchain.block.protobuf.Block block = 1;
inline bool CrossShardingTosMessage::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool CrossShardingTosMessage::has_block() const {
  return _internal_has_block();
}
inline void CrossShardingTosMessage::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::block::protobuf::Block& CrossShardingTosMessage::_internal_block() const {
  const ::zjchain::block::protobuf::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::Block&>(
      ::zjchain::block::protobuf::_Block_default_instance_);
}
inline const ::zjchain::block::protobuf::Block& CrossShardingTosMessage::block() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.CrossShardingTosMessage.block)
  return _internal_block();
}
inline void CrossShardingTosMessage::unsafe_arena_set_allocated_block(
    ::zjchain::block::protobuf::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.CrossShardingTosMessage.block)
}
inline ::zjchain::block::protobuf::Block* CrossShardingTosMessage::release_block() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::Block* CrossShardingTosMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.CrossShardingTosMessage.block)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::Block* CrossShardingTosMessage::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::zjchain::block::protobuf::Block* CrossShardingTosMessage::mutable_block() {
  ::zjchain::block::protobuf::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.CrossShardingTosMessage.block)
  return _msg;
}
inline void CrossShardingTosMessage::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.CrossShardingTosMessage.block)
}

// -------------------------------------------------------------------

// CrossShardingStatisticMessage

// optional .zjchain.block.protobuf.Block block = 1;
inline bool CrossShardingStatisticMessage::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool CrossShardingStatisticMessage::has_block() const {
  return _internal_has_block();
}
inline void CrossShardingStatisticMessage::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::block::protobuf::Block& CrossShardingStatisticMessage::_internal_block() const {
  const ::zjchain::block::protobuf::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::Block&>(
      ::zjchain::block::protobuf::_Block_default_instance_);
}
inline const ::zjchain::block::protobuf::Block& CrossShardingStatisticMessage::block() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.CrossShardingStatisticMessage.block)
  return _internal_block();
}
inline void CrossShardingStatisticMessage::unsafe_arena_set_allocated_block(
    ::zjchain::block::protobuf::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.CrossShardingStatisticMessage.block)
}
inline ::zjchain::block::protobuf::Block* CrossShardingStatisticMessage::release_block() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::Block* CrossShardingStatisticMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.CrossShardingStatisticMessage.block)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::Block* CrossShardingStatisticMessage::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::zjchain::block::protobuf::Block* CrossShardingStatisticMessage::mutable_block() {
  ::zjchain::block::protobuf::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.CrossShardingStatisticMessage.block)
  return _msg;
}
inline void CrossShardingStatisticMessage::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.CrossShardingStatisticMessage.block)
}

// -------------------------------------------------------------------

// ElectBlockMessage

// optional .zjchain.block.protobuf.Block block = 1;
inline bool ElectBlockMessage::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_ != nullptr);
  return value;
}
inline bool ElectBlockMessage::has_block() const {
  return _internal_has_block();
}
inline void ElectBlockMessage::clear_block() {
  if (block_ != nullptr) block_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::block::protobuf::Block& ElectBlockMessage::_internal_block() const {
  const ::zjchain::block::protobuf::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::Block&>(
      ::zjchain::block::protobuf::_Block_default_instance_);
}
inline const ::zjchain::block::protobuf::Block& ElectBlockMessage::block() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ElectBlockMessage.block)
  return _internal_block();
}
inline void ElectBlockMessage::unsafe_arena_set_allocated_block(
    ::zjchain::block::protobuf::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.ElectBlockMessage.block)
}
inline ::zjchain::block::protobuf::Block* ElectBlockMessage::release_block() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::Block* ElectBlockMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.ElectBlockMessage.block)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::Block* ElectBlockMessage::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000001u;
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::zjchain::block::protobuf::Block* ElectBlockMessage::mutable_block() {
  ::zjchain::block::protobuf::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.ElectBlockMessage.block)
  return _msg;
}
inline void ElectBlockMessage::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.ElectBlockMessage.block)
}

// -------------------------------------------------------------------

// ShardToTxMessage

// repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
inline int ShardToTxMessage::_internal_to_txs_size() const {
  return to_txs_.size();
}
inline int ShardToTxMessage::to_txs_size() const {
  return _internal_to_txs_size();
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ShardToTxMessage::mutable_to_txs(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.ShardToTxMessage.to_txs)
  return to_txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >*
ShardToTxMessage::mutable_to_txs() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.block.protobuf.ShardToTxMessage.to_txs)
  return &to_txs_;
}
inline const ::zjchain::pools::protobuf::ShardToTxItem& ShardToTxMessage::_internal_to_txs(int index) const {
  return to_txs_.Get(index);
}
inline const ::zjchain::pools::protobuf::ShardToTxItem& ShardToTxMessage::to_txs(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ShardToTxMessage.to_txs)
  return _internal_to_txs(index);
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ShardToTxMessage::_internal_add_to_txs() {
  return to_txs_.Add();
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ShardToTxMessage::add_to_txs() {
  ::zjchain::pools::protobuf::ShardToTxItem* _add = _internal_add_to_txs();
  // @@protoc_insertion_point(field_add:zjchain.block.protobuf.ShardToTxMessage.to_txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >&
ShardToTxMessage::to_txs() const {
  // @@protoc_insertion_point(field_list:zjchain.block.protobuf.ShardToTxMessage.to_txs)
  return to_txs_;
}

// optional uint32 leader_idx = 2;
inline bool ShardToTxMessage::_internal_has_leader_idx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShardToTxMessage::has_leader_idx() const {
  return _internal_has_leader_idx();
}
inline void ShardToTxMessage::clear_leader_idx() {
  leader_idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ShardToTxMessage::_internal_leader_idx() const {
  return leader_idx_;
}
inline uint32_t ShardToTxMessage::leader_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ShardToTxMessage.leader_idx)
  return _internal_leader_idx();
}
inline void ShardToTxMessage::_internal_set_leader_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  leader_idx_ = value;
}
inline void ShardToTxMessage::set_leader_idx(uint32_t value) {
  _internal_set_leader_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ShardToTxMessage.leader_idx)
}

// optional uint64 elect_height = 3;
inline bool ShardToTxMessage::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShardToTxMessage::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void ShardToTxMessage::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ShardToTxMessage::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t ShardToTxMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ShardToTxMessage.elect_height)
  return _internal_elect_height();
}
inline void ShardToTxMessage::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  elect_height_ = value;
}
inline void ShardToTxMessage::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ShardToTxMessage.elect_height)
}

// optional int32 leader_to_idx = 4;
inline bool ShardToTxMessage::_internal_has_leader_to_idx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShardToTxMessage::has_leader_to_idx() const {
  return _internal_has_leader_to_idx();
}
inline void ShardToTxMessage::clear_leader_to_idx() {
  leader_to_idx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ShardToTxMessage::_internal_leader_to_idx() const {
  return leader_to_idx_;
}
inline int32_t ShardToTxMessage::leader_to_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.ShardToTxMessage.leader_to_idx)
  return _internal_leader_to_idx();
}
inline void ShardToTxMessage::_internal_set_leader_to_idx(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  leader_to_idx_ = value;
}
inline void ShardToTxMessage::set_leader_to_idx(int32_t value) {
  _internal_set_leader_to_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.ShardToTxMessage.leader_to_idx)
}

// -------------------------------------------------------------------

// StatisticTxMessage

// optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
inline bool StatisticTxMessage::_internal_has_statistic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || statistic_ != nullptr);
  return value;
}
inline bool StatisticTxMessage::has_statistic() const {
  return _internal_has_statistic();
}
inline const ::zjchain::pools::protobuf::StatisticTxItem& StatisticTxMessage::_internal_statistic() const {
  const ::zjchain::pools::protobuf::StatisticTxItem* p = statistic_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::pools::protobuf::StatisticTxItem&>(
      ::zjchain::pools::protobuf::_StatisticTxItem_default_instance_);
}
inline const ::zjchain::pools::protobuf::StatisticTxItem& StatisticTxMessage::statistic() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StatisticTxMessage.statistic)
  return _internal_statistic();
}
inline void StatisticTxMessage::unsafe_arena_set_allocated_statistic(
    ::zjchain::pools::protobuf::StatisticTxItem* statistic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistic_);
  }
  statistic_ = statistic;
  if (statistic) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.StatisticTxMessage.statistic)
}
inline ::zjchain::pools::protobuf::StatisticTxItem* StatisticTxMessage::release_statistic() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::pools::protobuf::StatisticTxItem* temp = statistic_;
  statistic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* StatisticTxMessage::unsafe_arena_release_statistic() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.StatisticTxMessage.statistic)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::pools::protobuf::StatisticTxItem* temp = statistic_;
  statistic_ = nullptr;
  return temp;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* StatisticTxMessage::_internal_mutable_statistic() {
  _has_bits_[0] |= 0x00000001u;
  if (statistic_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::pools::protobuf::StatisticTxItem>(GetArenaForAllocation());
    statistic_ = p;
  }
  return statistic_;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* StatisticTxMessage::mutable_statistic() {
  ::zjchain::pools::protobuf::StatisticTxItem* _msg = _internal_mutable_statistic();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.StatisticTxMessage.statistic)
  return _msg;
}
inline void StatisticTxMessage::set_allocated_statistic(::zjchain::pools::protobuf::StatisticTxItem* statistic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistic_);
  }
  if (statistic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistic));
    if (message_arena != submessage_arena) {
      statistic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  statistic_ = statistic;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.StatisticTxMessage.statistic)
}

// optional uint32 leader_idx = 2;
inline bool StatisticTxMessage::_internal_has_leader_idx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatisticTxMessage::has_leader_idx() const {
  return _internal_has_leader_idx();
}
inline void StatisticTxMessage::clear_leader_idx() {
  leader_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t StatisticTxMessage::_internal_leader_idx() const {
  return leader_idx_;
}
inline uint32_t StatisticTxMessage::leader_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StatisticTxMessage.leader_idx)
  return _internal_leader_idx();
}
inline void StatisticTxMessage::_internal_set_leader_idx(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  leader_idx_ = value;
}
inline void StatisticTxMessage::set_leader_idx(uint32_t value) {
  _internal_set_leader_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StatisticTxMessage.leader_idx)
}

// optional uint64 elect_height = 3;
inline bool StatisticTxMessage::_internal_has_elect_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatisticTxMessage::has_elect_height() const {
  return _internal_has_elect_height();
}
inline void StatisticTxMessage::clear_elect_height() {
  elect_height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t StatisticTxMessage::_internal_elect_height() const {
  return elect_height_;
}
inline uint64_t StatisticTxMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StatisticTxMessage.elect_height)
  return _internal_elect_height();
}
inline void StatisticTxMessage::_internal_set_elect_height(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  elect_height_ = value;
}
inline void StatisticTxMessage::set_elect_height(uint64_t value) {
  _internal_set_elect_height(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StatisticTxMessage.elect_height)
}

// optional int32 leader_to_idx = 4;
inline bool StatisticTxMessage::_internal_has_leader_to_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StatisticTxMessage::has_leader_to_idx() const {
  return _internal_has_leader_to_idx();
}
inline void StatisticTxMessage::clear_leader_to_idx() {
  leader_to_idx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t StatisticTxMessage::_internal_leader_to_idx() const {
  return leader_to_idx_;
}
inline int32_t StatisticTxMessage::leader_to_idx() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.StatisticTxMessage.leader_to_idx)
  return _internal_leader_to_idx();
}
inline void StatisticTxMessage::_internal_set_leader_to_idx(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  leader_to_idx_ = value;
}
inline void StatisticTxMessage::set_leader_to_idx(int32_t value) {
  _internal_set_leader_to_idx(value);
  // @@protoc_insertion_point(field_set:zjchain.block.protobuf.StatisticTxMessage.leader_to_idx)
}

// -------------------------------------------------------------------

// BlockMessage

// optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
inline bool BlockMessage::_internal_has_block_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_block_req() const {
  return _internal_has_block_req();
}
inline void BlockMessage::clear_block_req() {
  if (block_req_ != nullptr) block_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::block::protobuf::GetTxBlockRequest& BlockMessage::_internal_block_req() const {
  const ::zjchain::block::protobuf::GetTxBlockRequest* p = block_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::GetTxBlockRequest&>(
      ::zjchain::block::protobuf::_GetTxBlockRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::GetTxBlockRequest& BlockMessage::block_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.block_req)
  return _internal_block_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_block_req(
    ::zjchain::block::protobuf::GetTxBlockRequest* block_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_req_);
  }
  block_req_ = block_req;
  if (block_req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.block_req)
}
inline ::zjchain::block::protobuf::GetTxBlockRequest* BlockMessage::release_block_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::GetTxBlockRequest* temp = block_req_;
  block_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::GetTxBlockRequest* BlockMessage::unsafe_arena_release_block_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.block_req)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::block::protobuf::GetTxBlockRequest* temp = block_req_;
  block_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::GetTxBlockRequest* BlockMessage::_internal_mutable_block_req() {
  _has_bits_[0] |= 0x00000001u;
  if (block_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::GetTxBlockRequest>(GetArenaForAllocation());
    block_req_ = p;
  }
  return block_req_;
}
inline ::zjchain::block::protobuf::GetTxBlockRequest* BlockMessage::mutable_block_req() {
  ::zjchain::block::protobuf::GetTxBlockRequest* _msg = _internal_mutable_block_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.block_req)
  return _msg;
}
inline void BlockMessage::set_allocated_block_req(::zjchain::block::protobuf::GetTxBlockRequest* block_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_req_;
  }
  if (block_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_req);
    if (message_arena != submessage_arena) {
      block_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_req_ = block_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.block_req)
}

// optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
inline bool BlockMessage::_internal_has_block_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || block_res_ != nullptr);
  return value;
}
inline bool BlockMessage::has_block_res() const {
  return _internal_has_block_res();
}
inline void BlockMessage::clear_block_res() {
  if (block_res_ != nullptr) block_res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::block::protobuf::GetTxBlockResponse& BlockMessage::_internal_block_res() const {
  const ::zjchain::block::protobuf::GetTxBlockResponse* p = block_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::GetTxBlockResponse&>(
      ::zjchain::block::protobuf::_GetTxBlockResponse_default_instance_);
}
inline const ::zjchain::block::protobuf::GetTxBlockResponse& BlockMessage::block_res() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.block_res)
  return _internal_block_res();
}
inline void BlockMessage::unsafe_arena_set_allocated_block_res(
    ::zjchain::block::protobuf::GetTxBlockResponse* block_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_res_);
  }
  block_res_ = block_res;
  if (block_res) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.block_res)
}
inline ::zjchain::block::protobuf::GetTxBlockResponse* BlockMessage::release_block_res() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::block::protobuf::GetTxBlockResponse* temp = block_res_;
  block_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::GetTxBlockResponse* BlockMessage::unsafe_arena_release_block_res() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.block_res)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::block::protobuf::GetTxBlockResponse* temp = block_res_;
  block_res_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::GetTxBlockResponse* BlockMessage::_internal_mutable_block_res() {
  _has_bits_[0] |= 0x00000002u;
  if (block_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::GetTxBlockResponse>(GetArenaForAllocation());
    block_res_ = p;
  }
  return block_res_;
}
inline ::zjchain::block::protobuf::GetTxBlockResponse* BlockMessage::mutable_block_res() {
  ::zjchain::block::protobuf::GetTxBlockResponse* _msg = _internal_mutable_block_res();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.block_res)
  return _msg;
}
inline void BlockMessage::set_allocated_block_res(::zjchain::block::protobuf::GetTxBlockResponse* block_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_res_;
  }
  if (block_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_res);
    if (message_arena != submessage_arena) {
      block_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_res_ = block_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.block_res)
}

// optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
inline bool BlockMessage::_internal_has_height_req() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || height_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_height_req() const {
  return _internal_has_height_req();
}
inline void BlockMessage::clear_height_req() {
  if (height_req_ != nullptr) height_req_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zjchain::block::protobuf::AccountHeightRequest& BlockMessage::_internal_height_req() const {
  const ::zjchain::block::protobuf::AccountHeightRequest* p = height_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::AccountHeightRequest&>(
      ::zjchain::block::protobuf::_AccountHeightRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::AccountHeightRequest& BlockMessage::height_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.height_req)
  return _internal_height_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_height_req(
    ::zjchain::block::protobuf::AccountHeightRequest* height_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_req_);
  }
  height_req_ = height_req;
  if (height_req) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.height_req)
}
inline ::zjchain::block::protobuf::AccountHeightRequest* BlockMessage::release_height_req() {
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::block::protobuf::AccountHeightRequest* temp = height_req_;
  height_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::AccountHeightRequest* BlockMessage::unsafe_arena_release_height_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.height_req)
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::block::protobuf::AccountHeightRequest* temp = height_req_;
  height_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::AccountHeightRequest* BlockMessage::_internal_mutable_height_req() {
  _has_bits_[0] |= 0x00000004u;
  if (height_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::AccountHeightRequest>(GetArenaForAllocation());
    height_req_ = p;
  }
  return height_req_;
}
inline ::zjchain::block::protobuf::AccountHeightRequest* BlockMessage::mutable_height_req() {
  ::zjchain::block::protobuf::AccountHeightRequest* _msg = _internal_mutable_height_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.height_req)
  return _msg;
}
inline void BlockMessage::set_allocated_height_req(::zjchain::block::protobuf::AccountHeightRequest* height_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete height_req_;
  }
  if (height_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(height_req);
    if (message_arena != submessage_arena) {
      height_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  height_req_ = height_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.height_req)
}

// optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
inline bool BlockMessage::_internal_has_height_res() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || height_res_ != nullptr);
  return value;
}
inline bool BlockMessage::has_height_res() const {
  return _internal_has_height_res();
}
inline void BlockMessage::clear_height_res() {
  if (height_res_ != nullptr) height_res_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zjchain::block::protobuf::AccountHeightResponse& BlockMessage::_internal_height_res() const {
  const ::zjchain::block::protobuf::AccountHeightResponse* p = height_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::AccountHeightResponse&>(
      ::zjchain::block::protobuf::_AccountHeightResponse_default_instance_);
}
inline const ::zjchain::block::protobuf::AccountHeightResponse& BlockMessage::height_res() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.height_res)
  return _internal_height_res();
}
inline void BlockMessage::unsafe_arena_set_allocated_height_res(
    ::zjchain::block::protobuf::AccountHeightResponse* height_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_res_);
  }
  height_res_ = height_res;
  if (height_res) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.height_res)
}
inline ::zjchain::block::protobuf::AccountHeightResponse* BlockMessage::release_height_res() {
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::block::protobuf::AccountHeightResponse* temp = height_res_;
  height_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::AccountHeightResponse* BlockMessage::unsafe_arena_release_height_res() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.height_res)
  _has_bits_[0] &= ~0x00000008u;
  ::zjchain::block::protobuf::AccountHeightResponse* temp = height_res_;
  height_res_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::AccountHeightResponse* BlockMessage::_internal_mutable_height_res() {
  _has_bits_[0] |= 0x00000008u;
  if (height_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::AccountHeightResponse>(GetArenaForAllocation());
    height_res_ = p;
  }
  return height_res_;
}
inline ::zjchain::block::protobuf::AccountHeightResponse* BlockMessage::mutable_height_res() {
  ::zjchain::block::protobuf::AccountHeightResponse* _msg = _internal_mutable_height_res();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.height_res)
  return _msg;
}
inline void BlockMessage::set_allocated_height_res(::zjchain::block::protobuf::AccountHeightResponse* height_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete height_res_;
  }
  if (height_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(height_res);
    if (message_arena != submessage_arena) {
      height_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  height_res_ = height_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.height_res)
}

// optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
inline bool BlockMessage::_internal_has_acc_attr_req() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || acc_attr_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_acc_attr_req() const {
  return _internal_has_acc_attr_req();
}
inline void BlockMessage::clear_acc_attr_req() {
  if (acc_attr_req_ != nullptr) acc_attr_req_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::zjchain::block::protobuf::AccountAttrRequest& BlockMessage::_internal_acc_attr_req() const {
  const ::zjchain::block::protobuf::AccountAttrRequest* p = acc_attr_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::AccountAttrRequest&>(
      ::zjchain::block::protobuf::_AccountAttrRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::AccountAttrRequest& BlockMessage::acc_attr_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.acc_attr_req)
  return _internal_acc_attr_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_acc_attr_req(
    ::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_attr_req_);
  }
  acc_attr_req_ = acc_attr_req;
  if (acc_attr_req) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.acc_attr_req)
}
inline ::zjchain::block::protobuf::AccountAttrRequest* BlockMessage::release_acc_attr_req() {
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::block::protobuf::AccountAttrRequest* temp = acc_attr_req_;
  acc_attr_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::AccountAttrRequest* BlockMessage::unsafe_arena_release_acc_attr_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.acc_attr_req)
  _has_bits_[0] &= ~0x00000010u;
  ::zjchain::block::protobuf::AccountAttrRequest* temp = acc_attr_req_;
  acc_attr_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::AccountAttrRequest* BlockMessage::_internal_mutable_acc_attr_req() {
  _has_bits_[0] |= 0x00000010u;
  if (acc_attr_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::AccountAttrRequest>(GetArenaForAllocation());
    acc_attr_req_ = p;
  }
  return acc_attr_req_;
}
inline ::zjchain::block::protobuf::AccountAttrRequest* BlockMessage::mutable_acc_attr_req() {
  ::zjchain::block::protobuf::AccountAttrRequest* _msg = _internal_mutable_acc_attr_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.acc_attr_req)
  return _msg;
}
inline void BlockMessage::set_allocated_acc_attr_req(::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acc_attr_req_;
  }
  if (acc_attr_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acc_attr_req);
    if (message_arena != submessage_arena) {
      acc_attr_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_attr_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  acc_attr_req_ = acc_attr_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.acc_attr_req)
}

// optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
inline bool BlockMessage::_internal_has_acc_attr_res() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || acc_attr_res_ != nullptr);
  return value;
}
inline bool BlockMessage::has_acc_attr_res() const {
  return _internal_has_acc_attr_res();
}
inline void BlockMessage::clear_acc_attr_res() {
  if (acc_attr_res_ != nullptr) acc_attr_res_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::zjchain::block::protobuf::AccountAttrResponse& BlockMessage::_internal_acc_attr_res() const {
  const ::zjchain::block::protobuf::AccountAttrResponse* p = acc_attr_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::AccountAttrResponse&>(
      ::zjchain::block::protobuf::_AccountAttrResponse_default_instance_);
}
inline const ::zjchain::block::protobuf::AccountAttrResponse& BlockMessage::acc_attr_res() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.acc_attr_res)
  return _internal_acc_attr_res();
}
inline void BlockMessage::unsafe_arena_set_allocated_acc_attr_res(
    ::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_attr_res_);
  }
  acc_attr_res_ = acc_attr_res;
  if (acc_attr_res) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.acc_attr_res)
}
inline ::zjchain::block::protobuf::AccountAttrResponse* BlockMessage::release_acc_attr_res() {
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::block::protobuf::AccountAttrResponse* temp = acc_attr_res_;
  acc_attr_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::AccountAttrResponse* BlockMessage::unsafe_arena_release_acc_attr_res() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.acc_attr_res)
  _has_bits_[0] &= ~0x00000020u;
  ::zjchain::block::protobuf::AccountAttrResponse* temp = acc_attr_res_;
  acc_attr_res_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::AccountAttrResponse* BlockMessage::_internal_mutable_acc_attr_res() {
  _has_bits_[0] |= 0x00000020u;
  if (acc_attr_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::AccountAttrResponse>(GetArenaForAllocation());
    acc_attr_res_ = p;
  }
  return acc_attr_res_;
}
inline ::zjchain::block::protobuf::AccountAttrResponse* BlockMessage::mutable_acc_attr_res() {
  ::zjchain::block::protobuf::AccountAttrResponse* _msg = _internal_mutable_acc_attr_res();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.acc_attr_res)
  return _msg;
}
inline void BlockMessage::set_allocated_acc_attr_res(::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acc_attr_res_;
  }
  if (acc_attr_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acc_attr_res);
    if (message_arena != submessage_arena) {
      acc_attr_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_attr_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  acc_attr_res_ = acc_attr_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.acc_attr_res)
}

// optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
inline bool BlockMessage::_internal_has_up_vpn_req() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || up_vpn_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_up_vpn_req() const {
  return _internal_has_up_vpn_req();
}
inline void BlockMessage::clear_up_vpn_req() {
  if (up_vpn_req_ != nullptr) up_vpn_req_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::zjchain::block::protobuf::UpdateVpnCountRequest& BlockMessage::_internal_up_vpn_req() const {
  const ::zjchain::block::protobuf::UpdateVpnCountRequest* p = up_vpn_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::UpdateVpnCountRequest&>(
      ::zjchain::block::protobuf::_UpdateVpnCountRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::UpdateVpnCountRequest& BlockMessage::up_vpn_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.up_vpn_req)
  return _internal_up_vpn_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_up_vpn_req(
    ::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(up_vpn_req_);
  }
  up_vpn_req_ = up_vpn_req;
  if (up_vpn_req) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.up_vpn_req)
}
inline ::zjchain::block::protobuf::UpdateVpnCountRequest* BlockMessage::release_up_vpn_req() {
  _has_bits_[0] &= ~0x00000040u;
  ::zjchain::block::protobuf::UpdateVpnCountRequest* temp = up_vpn_req_;
  up_vpn_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::UpdateVpnCountRequest* BlockMessage::unsafe_arena_release_up_vpn_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.up_vpn_req)
  _has_bits_[0] &= ~0x00000040u;
  ::zjchain::block::protobuf::UpdateVpnCountRequest* temp = up_vpn_req_;
  up_vpn_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::UpdateVpnCountRequest* BlockMessage::_internal_mutable_up_vpn_req() {
  _has_bits_[0] |= 0x00000040u;
  if (up_vpn_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::UpdateVpnCountRequest>(GetArenaForAllocation());
    up_vpn_req_ = p;
  }
  return up_vpn_req_;
}
inline ::zjchain::block::protobuf::UpdateVpnCountRequest* BlockMessage::mutable_up_vpn_req() {
  ::zjchain::block::protobuf::UpdateVpnCountRequest* _msg = _internal_mutable_up_vpn_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.up_vpn_req)
  return _msg;
}
inline void BlockMessage::set_allocated_up_vpn_req(::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete up_vpn_req_;
  }
  if (up_vpn_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(up_vpn_req);
    if (message_arena != submessage_arena) {
      up_vpn_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, up_vpn_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  up_vpn_req_ = up_vpn_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.up_vpn_req)
}

// optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
inline bool BlockMessage::_internal_has_up_vpn_res() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || up_vpn_res_ != nullptr);
  return value;
}
inline bool BlockMessage::has_up_vpn_res() const {
  return _internal_has_up_vpn_res();
}
inline void BlockMessage::clear_up_vpn_res() {
  if (up_vpn_res_ != nullptr) up_vpn_res_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::zjchain::block::protobuf::UpdateVpnCountResponse& BlockMessage::_internal_up_vpn_res() const {
  const ::zjchain::block::protobuf::UpdateVpnCountResponse* p = up_vpn_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::UpdateVpnCountResponse&>(
      ::zjchain::block::protobuf::_UpdateVpnCountResponse_default_instance_);
}
inline const ::zjchain::block::protobuf::UpdateVpnCountResponse& BlockMessage::up_vpn_res() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.up_vpn_res)
  return _internal_up_vpn_res();
}
inline void BlockMessage::unsafe_arena_set_allocated_up_vpn_res(
    ::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(up_vpn_res_);
  }
  up_vpn_res_ = up_vpn_res;
  if (up_vpn_res) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.up_vpn_res)
}
inline ::zjchain::block::protobuf::UpdateVpnCountResponse* BlockMessage::release_up_vpn_res() {
  _has_bits_[0] &= ~0x00000080u;
  ::zjchain::block::protobuf::UpdateVpnCountResponse* temp = up_vpn_res_;
  up_vpn_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::UpdateVpnCountResponse* BlockMessage::unsafe_arena_release_up_vpn_res() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.up_vpn_res)
  _has_bits_[0] &= ~0x00000080u;
  ::zjchain::block::protobuf::UpdateVpnCountResponse* temp = up_vpn_res_;
  up_vpn_res_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::UpdateVpnCountResponse* BlockMessage::_internal_mutable_up_vpn_res() {
  _has_bits_[0] |= 0x00000080u;
  if (up_vpn_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::UpdateVpnCountResponse>(GetArenaForAllocation());
    up_vpn_res_ = p;
  }
  return up_vpn_res_;
}
inline ::zjchain::block::protobuf::UpdateVpnCountResponse* BlockMessage::mutable_up_vpn_res() {
  ::zjchain::block::protobuf::UpdateVpnCountResponse* _msg = _internal_mutable_up_vpn_res();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.up_vpn_res)
  return _msg;
}
inline void BlockMessage::set_allocated_up_vpn_res(::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete up_vpn_res_;
  }
  if (up_vpn_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(up_vpn_res);
    if (message_arena != submessage_arena) {
      up_vpn_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, up_vpn_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  up_vpn_res_ = up_vpn_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.up_vpn_res)
}

// optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
inline bool BlockMessage::_internal_has_account_init_req() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || account_init_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_account_init_req() const {
  return _internal_has_account_init_req();
}
inline void BlockMessage::clear_account_init_req() {
  if (account_init_req_ != nullptr) account_init_req_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::zjchain::block::protobuf::GetAccountInitInfoRequest& BlockMessage::_internal_account_init_req() const {
  const ::zjchain::block::protobuf::GetAccountInitInfoRequest* p = account_init_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::GetAccountInitInfoRequest&>(
      ::zjchain::block::protobuf::_GetAccountInitInfoRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::GetAccountInitInfoRequest& BlockMessage::account_init_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.account_init_req)
  return _internal_account_init_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_account_init_req(
    ::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_init_req_);
  }
  account_init_req_ = account_init_req;
  if (account_init_req) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.account_init_req)
}
inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* BlockMessage::release_account_init_req() {
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* temp = account_init_req_;
  account_init_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* BlockMessage::unsafe_arena_release_account_init_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.account_init_req)
  _has_bits_[0] &= ~0x00000100u;
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* temp = account_init_req_;
  account_init_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* BlockMessage::_internal_mutable_account_init_req() {
  _has_bits_[0] |= 0x00000100u;
  if (account_init_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::GetAccountInitInfoRequest>(GetArenaForAllocation());
    account_init_req_ = p;
  }
  return account_init_req_;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* BlockMessage::mutable_account_init_req() {
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* _msg = _internal_mutable_account_init_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.account_init_req)
  return _msg;
}
inline void BlockMessage::set_allocated_account_init_req(::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete account_init_req_;
  }
  if (account_init_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(account_init_req);
    if (message_arena != submessage_arena) {
      account_init_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_init_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  account_init_req_ = account_init_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.account_init_req)
}

// optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
inline bool BlockMessage::_internal_has_account_init_res() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || account_init_res_ != nullptr);
  return value;
}
inline bool BlockMessage::has_account_init_res() const {
  return _internal_has_account_init_res();
}
inline void BlockMessage::clear_account_init_res() {
  if (account_init_res_ != nullptr) account_init_res_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::zjchain::block::protobuf::GetAccountInitInfoResponse& BlockMessage::_internal_account_init_res() const {
  const ::zjchain::block::protobuf::GetAccountInitInfoResponse* p = account_init_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::GetAccountInitInfoResponse&>(
      ::zjchain::block::protobuf::_GetAccountInitInfoResponse_default_instance_);
}
inline const ::zjchain::block::protobuf::GetAccountInitInfoResponse& BlockMessage::account_init_res() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.account_init_res)
  return _internal_account_init_res();
}
inline void BlockMessage::unsafe_arena_set_allocated_account_init_res(
    ::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_init_res_);
  }
  account_init_res_ = account_init_res;
  if (account_init_res) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.account_init_res)
}
inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* BlockMessage::release_account_init_res() {
  _has_bits_[0] &= ~0x00000200u;
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* temp = account_init_res_;
  account_init_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* BlockMessage::unsafe_arena_release_account_init_res() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.account_init_res)
  _has_bits_[0] &= ~0x00000200u;
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* temp = account_init_res_;
  account_init_res_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* BlockMessage::_internal_mutable_account_init_res() {
  _has_bits_[0] |= 0x00000200u;
  if (account_init_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::GetAccountInitInfoResponse>(GetArenaForAllocation());
    account_init_res_ = p;
  }
  return account_init_res_;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* BlockMessage::mutable_account_init_res() {
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* _msg = _internal_mutable_account_init_res();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.account_init_res)
  return _msg;
}
inline void BlockMessage::set_allocated_account_init_res(::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete account_init_res_;
  }
  if (account_init_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(account_init_res);
    if (message_arena != submessage_arena) {
      account_init_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_init_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  account_init_res_ = account_init_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.account_init_res)
}

// optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
inline bool BlockMessage::_internal_has_vpn_active_req() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || vpn_active_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_vpn_active_req() const {
  return _internal_has_vpn_active_req();
}
inline void BlockMessage::clear_vpn_active_req() {
  if (vpn_active_req_ != nullptr) vpn_active_req_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::zjchain::block::protobuf::UpdateVpnActiveRequest& BlockMessage::_internal_vpn_active_req() const {
  const ::zjchain::block::protobuf::UpdateVpnActiveRequest* p = vpn_active_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::UpdateVpnActiveRequest&>(
      ::zjchain::block::protobuf::_UpdateVpnActiveRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::UpdateVpnActiveRequest& BlockMessage::vpn_active_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.vpn_active_req)
  return _internal_vpn_active_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_vpn_active_req(
    ::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpn_active_req_);
  }
  vpn_active_req_ = vpn_active_req;
  if (vpn_active_req) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.vpn_active_req)
}
inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* BlockMessage::release_vpn_active_req() {
  _has_bits_[0] &= ~0x00000400u;
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* temp = vpn_active_req_;
  vpn_active_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* BlockMessage::unsafe_arena_release_vpn_active_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.vpn_active_req)
  _has_bits_[0] &= ~0x00000400u;
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* temp = vpn_active_req_;
  vpn_active_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* BlockMessage::_internal_mutable_vpn_active_req() {
  _has_bits_[0] |= 0x00000400u;
  if (vpn_active_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::UpdateVpnActiveRequest>(GetArenaForAllocation());
    vpn_active_req_ = p;
  }
  return vpn_active_req_;
}
inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* BlockMessage::mutable_vpn_active_req() {
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* _msg = _internal_mutable_vpn_active_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.vpn_active_req)
  return _msg;
}
inline void BlockMessage::set_allocated_vpn_active_req(::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vpn_active_req_;
  }
  if (vpn_active_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vpn_active_req);
    if (message_arena != submessage_arena) {
      vpn_active_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpn_active_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  vpn_active_req_ = vpn_active_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.vpn_active_req)
}

// optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
inline bool BlockMessage::_internal_has_ad_reward_req() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || ad_reward_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_ad_reward_req() const {
  return _internal_has_ad_reward_req();
}
inline void BlockMessage::clear_ad_reward_req() {
  if (ad_reward_req_ != nullptr) ad_reward_req_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::zjchain::block::protobuf::AdRewardRequest& BlockMessage::_internal_ad_reward_req() const {
  const ::zjchain::block::protobuf::AdRewardRequest* p = ad_reward_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::AdRewardRequest&>(
      ::zjchain::block::protobuf::_AdRewardRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::AdRewardRequest& BlockMessage::ad_reward_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.ad_reward_req)
  return _internal_ad_reward_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_ad_reward_req(
    ::zjchain::block::protobuf::AdRewardRequest* ad_reward_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ad_reward_req_);
  }
  ad_reward_req_ = ad_reward_req;
  if (ad_reward_req) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.ad_reward_req)
}
inline ::zjchain::block::protobuf::AdRewardRequest* BlockMessage::release_ad_reward_req() {
  _has_bits_[0] &= ~0x00000800u;
  ::zjchain::block::protobuf::AdRewardRequest* temp = ad_reward_req_;
  ad_reward_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::AdRewardRequest* BlockMessage::unsafe_arena_release_ad_reward_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.ad_reward_req)
  _has_bits_[0] &= ~0x00000800u;
  ::zjchain::block::protobuf::AdRewardRequest* temp = ad_reward_req_;
  ad_reward_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::AdRewardRequest* BlockMessage::_internal_mutable_ad_reward_req() {
  _has_bits_[0] |= 0x00000800u;
  if (ad_reward_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::AdRewardRequest>(GetArenaForAllocation());
    ad_reward_req_ = p;
  }
  return ad_reward_req_;
}
inline ::zjchain::block::protobuf::AdRewardRequest* BlockMessage::mutable_ad_reward_req() {
  ::zjchain::block::protobuf::AdRewardRequest* _msg = _internal_mutable_ad_reward_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.ad_reward_req)
  return _msg;
}
inline void BlockMessage::set_allocated_ad_reward_req(::zjchain::block::protobuf::AdRewardRequest* ad_reward_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ad_reward_req_;
  }
  if (ad_reward_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ad_reward_req);
    if (message_arena != submessage_arena) {
      ad_reward_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ad_reward_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  ad_reward_req_ = ad_reward_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.ad_reward_req)
}

// optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
inline bool BlockMessage::_internal_has_ref_heights_req() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || ref_heights_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_ref_heights_req() const {
  return _internal_has_ref_heights_req();
}
inline void BlockMessage::clear_ref_heights_req() {
  if (ref_heights_req_ != nullptr) ref_heights_req_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::zjchain::block::protobuf::RefreshPoolHeightRequest& BlockMessage::_internal_ref_heights_req() const {
  const ::zjchain::block::protobuf::RefreshPoolHeightRequest* p = ref_heights_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::RefreshPoolHeightRequest&>(
      ::zjchain::block::protobuf::_RefreshPoolHeightRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::RefreshPoolHeightRequest& BlockMessage::ref_heights_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.ref_heights_req)
  return _internal_ref_heights_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_ref_heights_req(
    ::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_heights_req_);
  }
  ref_heights_req_ = ref_heights_req;
  if (ref_heights_req) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.ref_heights_req)
}
inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* BlockMessage::release_ref_heights_req() {
  _has_bits_[0] &= ~0x00001000u;
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* temp = ref_heights_req_;
  ref_heights_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* BlockMessage::unsafe_arena_release_ref_heights_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.ref_heights_req)
  _has_bits_[0] &= ~0x00001000u;
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* temp = ref_heights_req_;
  ref_heights_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* BlockMessage::_internal_mutable_ref_heights_req() {
  _has_bits_[0] |= 0x00001000u;
  if (ref_heights_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::RefreshPoolHeightRequest>(GetArenaForAllocation());
    ref_heights_req_ = p;
  }
  return ref_heights_req_;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* BlockMessage::mutable_ref_heights_req() {
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* _msg = _internal_mutable_ref_heights_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.ref_heights_req)
  return _msg;
}
inline void BlockMessage::set_allocated_ref_heights_req(::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_heights_req_;
  }
  if (ref_heights_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ref_heights_req);
    if (message_arena != submessage_arena) {
      ref_heights_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_heights_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  ref_heights_req_ = ref_heights_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.ref_heights_req)
}

// optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
inline bool BlockMessage::_internal_has_ref_heights_res() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || ref_heights_res_ != nullptr);
  return value;
}
inline bool BlockMessage::has_ref_heights_res() const {
  return _internal_has_ref_heights_res();
}
inline void BlockMessage::clear_ref_heights_res() {
  if (ref_heights_res_ != nullptr) ref_heights_res_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::zjchain::block::protobuf::RefreshPoolHeightResponse& BlockMessage::_internal_ref_heights_res() const {
  const ::zjchain::block::protobuf::RefreshPoolHeightResponse* p = ref_heights_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::RefreshPoolHeightResponse&>(
      ::zjchain::block::protobuf::_RefreshPoolHeightResponse_default_instance_);
}
inline const ::zjchain::block::protobuf::RefreshPoolHeightResponse& BlockMessage::ref_heights_res() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.ref_heights_res)
  return _internal_ref_heights_res();
}
inline void BlockMessage::unsafe_arena_set_allocated_ref_heights_res(
    ::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_heights_res_);
  }
  ref_heights_res_ = ref_heights_res;
  if (ref_heights_res) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.ref_heights_res)
}
inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* BlockMessage::release_ref_heights_res() {
  _has_bits_[0] &= ~0x00002000u;
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* temp = ref_heights_res_;
  ref_heights_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* BlockMessage::unsafe_arena_release_ref_heights_res() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.ref_heights_res)
  _has_bits_[0] &= ~0x00002000u;
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* temp = ref_heights_res_;
  ref_heights_res_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* BlockMessage::_internal_mutable_ref_heights_res() {
  _has_bits_[0] |= 0x00002000u;
  if (ref_heights_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::RefreshPoolHeightResponse>(GetArenaForAllocation());
    ref_heights_res_ = p;
  }
  return ref_heights_res_;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* BlockMessage::mutable_ref_heights_res() {
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* _msg = _internal_mutable_ref_heights_res();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.ref_heights_res)
  return _msg;
}
inline void BlockMessage::set_allocated_ref_heights_res(::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_heights_res_;
  }
  if (ref_heights_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ref_heights_res);
    if (message_arena != submessage_arena) {
      ref_heights_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_heights_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  ref_heights_res_ = ref_heights_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.ref_heights_res)
}

// optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
inline bool BlockMessage::_internal_has_acc_shard_req() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || acc_shard_req_ != nullptr);
  return value;
}
inline bool BlockMessage::has_acc_shard_req() const {
  return _internal_has_acc_shard_req();
}
inline void BlockMessage::clear_acc_shard_req() {
  if (acc_shard_req_ != nullptr) acc_shard_req_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::zjchain::block::protobuf::GetAccountShardRequest& BlockMessage::_internal_acc_shard_req() const {
  const ::zjchain::block::protobuf::GetAccountShardRequest* p = acc_shard_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::GetAccountShardRequest&>(
      ::zjchain::block::protobuf::_GetAccountShardRequest_default_instance_);
}
inline const ::zjchain::block::protobuf::GetAccountShardRequest& BlockMessage::acc_shard_req() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.acc_shard_req)
  return _internal_acc_shard_req();
}
inline void BlockMessage::unsafe_arena_set_allocated_acc_shard_req(
    ::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_shard_req_);
  }
  acc_shard_req_ = acc_shard_req;
  if (acc_shard_req) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.acc_shard_req)
}
inline ::zjchain::block::protobuf::GetAccountShardRequest* BlockMessage::release_acc_shard_req() {
  _has_bits_[0] &= ~0x00004000u;
  ::zjchain::block::protobuf::GetAccountShardRequest* temp = acc_shard_req_;
  acc_shard_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountShardRequest* BlockMessage::unsafe_arena_release_acc_shard_req() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.acc_shard_req)
  _has_bits_[0] &= ~0x00004000u;
  ::zjchain::block::protobuf::GetAccountShardRequest* temp = acc_shard_req_;
  acc_shard_req_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountShardRequest* BlockMessage::_internal_mutable_acc_shard_req() {
  _has_bits_[0] |= 0x00004000u;
  if (acc_shard_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::GetAccountShardRequest>(GetArenaForAllocation());
    acc_shard_req_ = p;
  }
  return acc_shard_req_;
}
inline ::zjchain::block::protobuf::GetAccountShardRequest* BlockMessage::mutable_acc_shard_req() {
  ::zjchain::block::protobuf::GetAccountShardRequest* _msg = _internal_mutable_acc_shard_req();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.acc_shard_req)
  return _msg;
}
inline void BlockMessage::set_allocated_acc_shard_req(::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acc_shard_req_;
  }
  if (acc_shard_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acc_shard_req);
    if (message_arena != submessage_arena) {
      acc_shard_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_shard_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  acc_shard_req_ = acc_shard_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.acc_shard_req)
}

// optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
inline bool BlockMessage::_internal_has_acc_shard_res() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || acc_shard_res_ != nullptr);
  return value;
}
inline bool BlockMessage::has_acc_shard_res() const {
  return _internal_has_acc_shard_res();
}
inline void BlockMessage::clear_acc_shard_res() {
  if (acc_shard_res_ != nullptr) acc_shard_res_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::zjchain::block::protobuf::GetAccountShardReponse& BlockMessage::_internal_acc_shard_res() const {
  const ::zjchain::block::protobuf::GetAccountShardReponse* p = acc_shard_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::GetAccountShardReponse&>(
      ::zjchain::block::protobuf::_GetAccountShardReponse_default_instance_);
}
inline const ::zjchain::block::protobuf::GetAccountShardReponse& BlockMessage::acc_shard_res() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.acc_shard_res)
  return _internal_acc_shard_res();
}
inline void BlockMessage::unsafe_arena_set_allocated_acc_shard_res(
    ::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_shard_res_);
  }
  acc_shard_res_ = acc_shard_res;
  if (acc_shard_res) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.acc_shard_res)
}
inline ::zjchain::block::protobuf::GetAccountShardReponse* BlockMessage::release_acc_shard_res() {
  _has_bits_[0] &= ~0x00008000u;
  ::zjchain::block::protobuf::GetAccountShardReponse* temp = acc_shard_res_;
  acc_shard_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountShardReponse* BlockMessage::unsafe_arena_release_acc_shard_res() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.acc_shard_res)
  _has_bits_[0] &= ~0x00008000u;
  ::zjchain::block::protobuf::GetAccountShardReponse* temp = acc_shard_res_;
  acc_shard_res_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::GetAccountShardReponse* BlockMessage::_internal_mutable_acc_shard_res() {
  _has_bits_[0] |= 0x00008000u;
  if (acc_shard_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::GetAccountShardReponse>(GetArenaForAllocation());
    acc_shard_res_ = p;
  }
  return acc_shard_res_;
}
inline ::zjchain::block::protobuf::GetAccountShardReponse* BlockMessage::mutable_acc_shard_res() {
  ::zjchain::block::protobuf::GetAccountShardReponse* _msg = _internal_mutable_acc_shard_res();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.acc_shard_res)
  return _msg;
}
inline void BlockMessage::set_allocated_acc_shard_res(::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acc_shard_res_;
  }
  if (acc_shard_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acc_shard_res);
    if (message_arena != submessage_arena) {
      acc_shard_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_shard_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  acc_shard_res_ = acc_shard_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.acc_shard_res)
}

// optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
inline bool BlockMessage::_internal_has_shard_to() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || shard_to_ != nullptr);
  return value;
}
inline bool BlockMessage::has_shard_to() const {
  return _internal_has_shard_to();
}
inline void BlockMessage::clear_shard_to() {
  if (shard_to_ != nullptr) shard_to_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::zjchain::block::protobuf::ShardToTxMessage& BlockMessage::_internal_shard_to() const {
  const ::zjchain::block::protobuf::ShardToTxMessage* p = shard_to_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::ShardToTxMessage&>(
      ::zjchain::block::protobuf::_ShardToTxMessage_default_instance_);
}
inline const ::zjchain::block::protobuf::ShardToTxMessage& BlockMessage::shard_to() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.shard_to)
  return _internal_shard_to();
}
inline void BlockMessage::unsafe_arena_set_allocated_shard_to(
    ::zjchain::block::protobuf::ShardToTxMessage* shard_to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shard_to_);
  }
  shard_to_ = shard_to;
  if (shard_to) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.shard_to)
}
inline ::zjchain::block::protobuf::ShardToTxMessage* BlockMessage::release_shard_to() {
  _has_bits_[0] &= ~0x00010000u;
  ::zjchain::block::protobuf::ShardToTxMessage* temp = shard_to_;
  shard_to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::ShardToTxMessage* BlockMessage::unsafe_arena_release_shard_to() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.shard_to)
  _has_bits_[0] &= ~0x00010000u;
  ::zjchain::block::protobuf::ShardToTxMessage* temp = shard_to_;
  shard_to_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::ShardToTxMessage* BlockMessage::_internal_mutable_shard_to() {
  _has_bits_[0] |= 0x00010000u;
  if (shard_to_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::ShardToTxMessage>(GetArenaForAllocation());
    shard_to_ = p;
  }
  return shard_to_;
}
inline ::zjchain::block::protobuf::ShardToTxMessage* BlockMessage::mutable_shard_to() {
  ::zjchain::block::protobuf::ShardToTxMessage* _msg = _internal_mutable_shard_to();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.shard_to)
  return _msg;
}
inline void BlockMessage::set_allocated_shard_to(::zjchain::block::protobuf::ShardToTxMessage* shard_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shard_to_;
  }
  if (shard_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shard_to);
    if (message_arena != submessage_arena) {
      shard_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shard_to, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  shard_to_ = shard_to;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.shard_to)
}

// optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
inline bool BlockMessage::_internal_has_statistic_tx() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || statistic_tx_ != nullptr);
  return value;
}
inline bool BlockMessage::has_statistic_tx() const {
  return _internal_has_statistic_tx();
}
inline void BlockMessage::clear_statistic_tx() {
  if (statistic_tx_ != nullptr) statistic_tx_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::zjchain::block::protobuf::StatisticTxMessage& BlockMessage::_internal_statistic_tx() const {
  const ::zjchain::block::protobuf::StatisticTxMessage* p = statistic_tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::block::protobuf::StatisticTxMessage&>(
      ::zjchain::block::protobuf::_StatisticTxMessage_default_instance_);
}
inline const ::zjchain::block::protobuf::StatisticTxMessage& BlockMessage::statistic_tx() const {
  // @@protoc_insertion_point(field_get:zjchain.block.protobuf.BlockMessage.statistic_tx)
  return _internal_statistic_tx();
}
inline void BlockMessage::unsafe_arena_set_allocated_statistic_tx(
    ::zjchain::block::protobuf::StatisticTxMessage* statistic_tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistic_tx_);
  }
  statistic_tx_ = statistic_tx;
  if (statistic_tx) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.block.protobuf.BlockMessage.statistic_tx)
}
inline ::zjchain::block::protobuf::StatisticTxMessage* BlockMessage::release_statistic_tx() {
  _has_bits_[0] &= ~0x00020000u;
  ::zjchain::block::protobuf::StatisticTxMessage* temp = statistic_tx_;
  statistic_tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::block::protobuf::StatisticTxMessage* BlockMessage::unsafe_arena_release_statistic_tx() {
  // @@protoc_insertion_point(field_release:zjchain.block.protobuf.BlockMessage.statistic_tx)
  _has_bits_[0] &= ~0x00020000u;
  ::zjchain::block::protobuf::StatisticTxMessage* temp = statistic_tx_;
  statistic_tx_ = nullptr;
  return temp;
}
inline ::zjchain::block::protobuf::StatisticTxMessage* BlockMessage::_internal_mutable_statistic_tx() {
  _has_bits_[0] |= 0x00020000u;
  if (statistic_tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::block::protobuf::StatisticTxMessage>(GetArenaForAllocation());
    statistic_tx_ = p;
  }
  return statistic_tx_;
}
inline ::zjchain::block::protobuf::StatisticTxMessage* BlockMessage::mutable_statistic_tx() {
  ::zjchain::block::protobuf::StatisticTxMessage* _msg = _internal_mutable_statistic_tx();
  // @@protoc_insertion_point(field_mutable:zjchain.block.protobuf.BlockMessage.statistic_tx)
  return _msg;
}
inline void BlockMessage::set_allocated_statistic_tx(::zjchain::block::protobuf::StatisticTxMessage* statistic_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete statistic_tx_;
  }
  if (statistic_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statistic_tx);
    if (message_arena != submessage_arena) {
      statistic_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistic_tx, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  statistic_tx_ = statistic_tx;
  // @@protoc_insertion_point(field_set_allocated:zjchain.block.protobuf.BlockMessage.statistic_tx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace block
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fblock_2eproto
