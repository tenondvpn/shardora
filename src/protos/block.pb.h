// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/block.proto

#ifndef PROTOBUF_protos_2fblock_2eproto__INCLUDED
#define PROTOBUF_protos_2fblock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protos/pools.pb.h"
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace block {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protos_2fblock_2eproto();
void protobuf_AssignDesc_protos_2fblock_2eproto();
void protobuf_ShutdownFile_protos_2fblock_2eproto();

class StorageItem;
class TransferItem;
class TxLog;
class BlockTx;
class Block;
class ConsensusToTxsItem;
class ConsensusToTxs;
class GetTxBlockRequest;
class GetTxBlockResponse;
class AccountHeightRequest;
class AccountHeightResponse;
class AccountAttrRequest;
class AccountAttrResponse;
class UpdateVpnCountRequest;
class VpnCountItem;
class UpdateVpnCountResponse;
class GetAccountInitInfoRequest;
class GetAccountInitInfoResponse;
class UpdateVpnActiveRequest;
class AdRewardRequest;
class ElectStatisticInfo;
class StatisticInfo;
class RefreshPoolHeightRequest;
class RefreshPoolHeightResponse;
class GetAccountShardRequest;
class GetAccountShardReponse;
class CrossShardingTosMessage;
class CrossShardingStatisticMessage;
class ElectBlockMessage;
class ShardToTxMessage;
class StatisticTxMessage;
class BlockMessage;

// ===================================================================

class StorageItem : public ::google::protobuf::Message {
 public:
  StorageItem();
  virtual ~StorageItem();

  StorageItem(const StorageItem& from);

  inline StorageItem& operator=(const StorageItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageItem& default_instance();

  void Swap(StorageItem* other);

  // implements Message ----------------------------------------------

  StorageItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageItem& from);
  void MergeFrom(const StorageItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes val_hash = 2;
  inline bool has_val_hash() const;
  inline void clear_val_hash();
  static const int kValHashFieldNumber = 2;
  inline const ::std::string& val_hash() const;
  inline void set_val_hash(const ::std::string& value);
  inline void set_val_hash(const char* value);
  inline void set_val_hash(const void* value, size_t size);
  inline ::std::string* mutable_val_hash();
  inline ::std::string* release_val_hash();
  inline void set_allocated_val_hash(::std::string* val_hash);

  // optional uint32 val_size = 3 [default = 0];
  inline bool has_val_size() const;
  inline void clear_val_size();
  static const int kValSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 val_size() const;
  inline void set_val_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.StorageItem)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val_hash();
  inline void clear_has_val_hash();
  inline void set_has_val_size();
  inline void clear_has_val_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* val_hash_;
  ::google::protobuf::uint32 val_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static StorageItem* default_instance_;
};
// -------------------------------------------------------------------

class TransferItem : public ::google::protobuf::Message {
 public:
  TransferItem();
  virtual ~TransferItem();

  TransferItem(const TransferItem& from);

  inline TransferItem& operator=(const TransferItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferItem& default_instance();

  void Swap(TransferItem* other);

  // implements Message ----------------------------------------------

  TransferItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferItem& from);
  void MergeFrom(const TransferItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // optional bytes to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional uint64 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.TransferItem)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::std::string* to_;
  ::google::protobuf::uint64 amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static TransferItem* default_instance_;
};
// -------------------------------------------------------------------

class TxLog : public ::google::protobuf::Message {
 public:
  TxLog();
  virtual ~TxLog();

  TxLog(const TxLog& from);

  inline TxLog& operator=(const TxLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxLog& default_instance();

  void Swap(TxLog* other);

  // implements Message ----------------------------------------------

  TxLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxLog& from);
  void MergeFrom(const TxLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated bytes topics = 2;
  inline int topics_size() const;
  inline void clear_topics();
  static const int kTopicsFieldNumber = 2;
  inline const ::std::string& topics(int index) const;
  inline ::std::string* mutable_topics(int index);
  inline void set_topics(int index, const ::std::string& value);
  inline void set_topics(int index, const char* value);
  inline void set_topics(int index, const void* value, size_t size);
  inline ::std::string* add_topics();
  inline void add_topics(const ::std::string& value);
  inline void add_topics(const char* value);
  inline void add_topics(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.TxLog)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static TxLog* default_instance_;
};
// -------------------------------------------------------------------

class BlockTx : public ::google::protobuf::Message {
 public:
  BlockTx();
  virtual ~BlockTx();

  BlockTx(const BlockTx& from);

  inline BlockTx& operator=(const BlockTx& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockTx& default_instance();

  void Swap(BlockTx* other);

  // implements Message ----------------------------------------------

  BlockTx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockTx& from);
  void MergeFrom(const BlockTx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // optional bytes from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // optional bytes to = 3;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 3;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional uint64 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional uint64 gas_limit = 5;
  inline bool has_gas_limit() const;
  inline void clear_gas_limit();
  static const int kGasLimitFieldNumber = 5;
  inline ::google::protobuf::uint64 gas_limit() const;
  inline void set_gas_limit(::google::protobuf::uint64 value);

  // optional uint64 gas_used = 6;
  inline bool has_gas_used() const;
  inline void clear_gas_used();
  static const int kGasUsedFieldNumber = 6;
  inline ::google::protobuf::uint64 gas_used() const;
  inline void set_gas_used(::google::protobuf::uint64 value);

  // optional uint64 gas_price = 7;
  inline bool has_gas_price() const;
  inline void clear_gas_price();
  static const int kGasPriceFieldNumber = 7;
  inline ::google::protobuf::uint64 gas_price() const;
  inline void set_gas_price(::google::protobuf::uint64 value);

  // optional uint64 balance = 8;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 8;
  inline ::google::protobuf::uint64 balance() const;
  inline void set_balance(::google::protobuf::uint64 value);

  // optional .zjchain.pools.protobuf.StepType step = 9;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 9;
  inline ::zjchain::pools::protobuf::StepType step() const;
  inline void set_step(::zjchain::pools::protobuf::StepType value);

  // optional uint32 status = 10;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // repeated .zjchain.block.protobuf.StorageItem storages = 11;
  inline int storages_size() const;
  inline void clear_storages();
  static const int kStoragesFieldNumber = 11;
  inline const ::zjchain::block::protobuf::StorageItem& storages(int index) const;
  inline ::zjchain::block::protobuf::StorageItem* mutable_storages(int index);
  inline ::zjchain::block::protobuf::StorageItem* add_storages();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >&
      storages() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >*
      mutable_storages();

  // repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
  inline int contract_txs_size() const;
  inline void clear_contract_txs();
  static const int kContractTxsFieldNumber = 12;
  inline const ::zjchain::block::protobuf::TransferItem& contract_txs(int index) const;
  inline ::zjchain::block::protobuf::TransferItem* mutable_contract_txs(int index);
  inline ::zjchain::block::protobuf::TransferItem* add_contract_txs();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >&
      contract_txs() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >*
      mutable_contract_txs();

  // optional uint64 contract_prepayment = 13;
  inline bool has_contract_prepayment() const;
  inline void clear_contract_prepayment();
  static const int kContractPrepaymentFieldNumber = 13;
  inline ::google::protobuf::uint64 contract_prepayment() const;
  inline void set_contract_prepayment(::google::protobuf::uint64 value);

  // optional bytes contract_code = 14;
  inline bool has_contract_code() const;
  inline void clear_contract_code();
  static const int kContractCodeFieldNumber = 14;
  inline const ::std::string& contract_code() const;
  inline void set_contract_code(const ::std::string& value);
  inline void set_contract_code(const char* value);
  inline void set_contract_code(const void* value, size_t size);
  inline ::std::string* mutable_contract_code();
  inline ::std::string* release_contract_code();
  inline void set_allocated_contract_code(::std::string* contract_code);

  // optional bytes contract_input = 15;
  inline bool has_contract_input() const;
  inline void clear_contract_input();
  static const int kContractInputFieldNumber = 15;
  inline const ::std::string& contract_input() const;
  inline void set_contract_input(const ::std::string& value);
  inline void set_contract_input(const char* value);
  inline void set_contract_input(const void* value, size_t size);
  inline ::std::string* mutable_contract_input();
  inline ::std::string* release_contract_input();
  inline void set_allocated_contract_input(::std::string* contract_input);

  // repeated .zjchain.block.protobuf.TxLog events = 16;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 16;
  inline const ::zjchain::block::protobuf::TxLog& events(int index) const;
  inline ::zjchain::block::protobuf::TxLog* mutable_events(int index);
  inline ::zjchain::block::protobuf::TxLog* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >*
      mutable_events();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.BlockTx)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_gas_limit();
  inline void clear_has_gas_limit();
  inline void set_has_gas_used();
  inline void clear_has_gas_used();
  inline void set_has_gas_price();
  inline void clear_has_gas_price();
  inline void set_has_balance();
  inline void clear_has_balance();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_contract_prepayment();
  inline void clear_has_contract_prepayment();
  inline void set_has_contract_code();
  inline void clear_has_contract_code();
  inline void set_has_contract_input();
  inline void clear_has_contract_input();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gid_;
  ::std::string* from_;
  ::std::string* to_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 gas_limit_;
  ::google::protobuf::uint64 gas_used_;
  ::google::protobuf::uint64 gas_price_;
  ::google::protobuf::uint64 balance_;
  int step_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem > storages_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem > contract_txs_;
  ::google::protobuf::uint64 contract_prepayment_;
  ::std::string* contract_code_;
  ::std::string* contract_input_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TxLog > events_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static BlockTx* default_instance_;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  void Swap(Block* other);

  // implements Message ----------------------------------------------

  Block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 network_id = 1;
  inline bool has_network_id() const;
  inline void clear_network_id();
  static const int kNetworkIdFieldNumber = 1;
  inline ::google::protobuf::uint32 network_id() const;
  inline void set_network_id(::google::protobuf::uint32 value);

  // optional uint32 pool_index = 2;
  inline bool has_pool_index() const;
  inline void clear_pool_index();
  static const int kPoolIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 pool_index() const;
  inline void set_pool_index(::google::protobuf::uint32 value);

  // optional bytes prehash = 3;
  inline bool has_prehash() const;
  inline void clear_prehash();
  static const int kPrehashFieldNumber = 3;
  inline const ::std::string& prehash() const;
  inline void set_prehash(const ::std::string& value);
  inline void set_prehash(const char* value);
  inline void set_prehash(const void* value, size_t size);
  inline ::std::string* mutable_prehash();
  inline ::std::string* release_prehash();
  inline void set_allocated_prehash(::std::string* prehash);

  // optional bytes hash = 4;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 4;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const void* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // optional uint32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint64 height = 6;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 6;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // optional uint64 consistency_random = 7;
  inline bool has_consistency_random() const;
  inline void clear_consistency_random();
  static const int kConsistencyRandomFieldNumber = 7;
  inline ::google::protobuf::uint64 consistency_random() const;
  inline void set_consistency_random(::google::protobuf::uint64 value);

  // optional uint64 electblock_height = 8;
  inline bool has_electblock_height() const;
  inline void clear_electblock_height();
  static const int kElectblockHeightFieldNumber = 8;
  inline ::google::protobuf::uint64 electblock_height() const;
  inline void set_electblock_height(::google::protobuf::uint64 value);

  // optional uint64 timeblock_height = 9;
  inline bool has_timeblock_height() const;
  inline void clear_timeblock_height();
  static const int kTimeblockHeightFieldNumber = 9;
  inline ::google::protobuf::uint64 timeblock_height() const;
  inline void set_timeblock_height(::google::protobuf::uint64 value);

  // repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
  inline int tx_list_size() const;
  inline void clear_tx_list();
  static const int kTxListFieldNumber = 10;
  inline const ::zjchain::block::protobuf::BlockTx& tx_list(int index) const;
  inline ::zjchain::block::protobuf::BlockTx* mutable_tx_list(int index);
  inline ::zjchain::block::protobuf::BlockTx* add_tx_list();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >&
      tx_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >*
      mutable_tx_list();

  // optional uint64 timestamp = 11;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional bytes bls_agg_sign_x = 12;
  inline bool has_bls_agg_sign_x() const;
  inline void clear_bls_agg_sign_x();
  static const int kBlsAggSignXFieldNumber = 12;
  inline const ::std::string& bls_agg_sign_x() const;
  inline void set_bls_agg_sign_x(const ::std::string& value);
  inline void set_bls_agg_sign_x(const char* value);
  inline void set_bls_agg_sign_x(const void* value, size_t size);
  inline ::std::string* mutable_bls_agg_sign_x();
  inline ::std::string* release_bls_agg_sign_x();
  inline void set_allocated_bls_agg_sign_x(::std::string* bls_agg_sign_x);

  // optional bytes bls_agg_sign_y = 13;
  inline bool has_bls_agg_sign_y() const;
  inline void clear_bls_agg_sign_y();
  static const int kBlsAggSignYFieldNumber = 13;
  inline const ::std::string& bls_agg_sign_y() const;
  inline void set_bls_agg_sign_y(const ::std::string& value);
  inline void set_bls_agg_sign_y(const char* value);
  inline void set_bls_agg_sign_y(const void* value, size_t size);
  inline ::std::string* mutable_bls_agg_sign_y();
  inline ::std::string* release_bls_agg_sign_y();
  inline void set_allocated_bls_agg_sign_y(::std::string* bls_agg_sign_y);

  // optional uint64 leader_index = 14;
  inline bool has_leader_index() const;
  inline void clear_leader_index();
  static const int kLeaderIndexFieldNumber = 14;
  inline ::google::protobuf::uint64 leader_index() const;
  inline void set_leader_index(::google::protobuf::uint64 value);

  // repeated bytes change_leader_invalid_hashs = 15;
  inline int change_leader_invalid_hashs_size() const;
  inline void clear_change_leader_invalid_hashs();
  static const int kChangeLeaderInvalidHashsFieldNumber = 15;
  inline const ::std::string& change_leader_invalid_hashs(int index) const;
  inline ::std::string* mutable_change_leader_invalid_hashs(int index);
  inline void set_change_leader_invalid_hashs(int index, const ::std::string& value);
  inline void set_change_leader_invalid_hashs(int index, const char* value);
  inline void set_change_leader_invalid_hashs(int index, const void* value, size_t size);
  inline ::std::string* add_change_leader_invalid_hashs();
  inline void add_change_leader_invalid_hashs(const ::std::string& value);
  inline void add_change_leader_invalid_hashs(const char* value);
  inline void add_change_leader_invalid_hashs(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& change_leader_invalid_hashs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_change_leader_invalid_hashs();

  // optional bool is_commited_block = 16 [default = false];
  inline bool has_is_commited_block() const;
  inline void clear_is_commited_block();
  static const int kIsCommitedBlockFieldNumber = 16;
  inline bool is_commited_block() const;
  inline void set_is_commited_block(bool value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.Block)
 private:
  inline void set_has_network_id();
  inline void clear_has_network_id();
  inline void set_has_pool_index();
  inline void clear_has_pool_index();
  inline void set_has_prehash();
  inline void clear_has_prehash();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_consistency_random();
  inline void clear_has_consistency_random();
  inline void set_has_electblock_height();
  inline void clear_has_electblock_height();
  inline void set_has_timeblock_height();
  inline void clear_has_timeblock_height();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_bls_agg_sign_x();
  inline void clear_has_bls_agg_sign_x();
  inline void set_has_bls_agg_sign_y();
  inline void clear_has_bls_agg_sign_y();
  inline void set_has_leader_index();
  inline void clear_has_leader_index();
  inline void set_has_is_commited_block();
  inline void clear_has_is_commited_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 network_id_;
  ::google::protobuf::uint32 pool_index_;
  ::std::string* prehash_;
  ::std::string* hash_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 consistency_random_;
  ::google::protobuf::uint64 electblock_height_;
  ::google::protobuf::uint64 timeblock_height_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx > tx_list_;
  ::google::protobuf::uint32 version_;
  bool is_commited_block_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* bls_agg_sign_x_;
  ::std::string* bls_agg_sign_y_;
  ::google::protobuf::uint64 leader_index_;
  ::google::protobuf::RepeatedPtrField< ::std::string> change_leader_invalid_hashs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusToTxsItem : public ::google::protobuf::Message {
 public:
  ConsensusToTxsItem();
  virtual ~ConsensusToTxsItem();

  ConsensusToTxsItem(const ConsensusToTxsItem& from);

  inline ConsensusToTxsItem& operator=(const ConsensusToTxsItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusToTxsItem& default_instance();

  void Swap(ConsensusToTxsItem* other);

  // implements Message ----------------------------------------------

  ConsensusToTxsItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusToTxsItem& from);
  void MergeFrom(const ConsensusToTxsItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes to = 1;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 1;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional uint64 balance = 2;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 2;
  inline ::google::protobuf::uint64 balance() const;
  inline void set_balance(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ConsensusToTxsItem)
 private:
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_balance();
  inline void clear_has_balance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* to_;
  ::google::protobuf::uint64 balance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static ConsensusToTxsItem* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusToTxs : public ::google::protobuf::Message {
 public:
  ConsensusToTxs();
  virtual ~ConsensusToTxs();

  ConsensusToTxs(const ConsensusToTxs& from);

  inline ConsensusToTxs& operator=(const ConsensusToTxs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusToTxs& default_instance();

  void Swap(ConsensusToTxs* other);

  // implements Message ----------------------------------------------

  ConsensusToTxs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusToTxs& from);
  void MergeFrom(const ConsensusToTxs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
  inline int tos_size() const;
  inline void clear_tos();
  static const int kTosFieldNumber = 1;
  inline const ::zjchain::block::protobuf::ConsensusToTxsItem& tos(int index) const;
  inline ::zjchain::block::protobuf::ConsensusToTxsItem* mutable_tos(int index);
  inline ::zjchain::block::protobuf::ConsensusToTxsItem* add_tos();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >&
      tos() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >*
      mutable_tos();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ConsensusToTxs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem > tos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static ConsensusToTxs* default_instance_;
};
// -------------------------------------------------------------------

class GetTxBlockRequest : public ::google::protobuf::Message {
 public:
  GetTxBlockRequest();
  virtual ~GetTxBlockRequest();

  GetTxBlockRequest(const GetTxBlockRequest& from);

  inline GetTxBlockRequest& operator=(const GetTxBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockRequest& default_instance();

  void Swap(GetTxBlockRequest* other);

  // implements Message ----------------------------------------------

  GetTxBlockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTxBlockRequest& from);
  void MergeFrom(const GetTxBlockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tx_gid = 1;
  inline bool has_tx_gid() const;
  inline void clear_tx_gid();
  static const int kTxGidFieldNumber = 1;
  inline const ::std::string& tx_gid() const;
  inline void set_tx_gid(const ::std::string& value);
  inline void set_tx_gid(const char* value);
  inline void set_tx_gid(const void* value, size_t size);
  inline ::std::string* mutable_tx_gid();
  inline ::std::string* release_tx_gid();
  inline void set_allocated_tx_gid(::std::string* tx_gid);

  // optional bytes block_hash = 2;
  inline bool has_block_hash() const;
  inline void clear_block_hash();
  static const int kBlockHashFieldNumber = 2;
  inline const ::std::string& block_hash() const;
  inline void set_block_hash(const ::std::string& value);
  inline void set_block_hash(const char* value);
  inline void set_block_hash(const void* value, size_t size);
  inline ::std::string* mutable_block_hash();
  inline ::std::string* release_block_hash();
  inline void set_allocated_block_hash(::std::string* block_hash);

  // optional bool from = 3;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 3;
  inline bool from() const;
  inline void set_from(bool value);

  // optional uint64 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // optional bytes account_address = 5;
  inline bool has_account_address() const;
  inline void clear_account_address();
  static const int kAccountAddressFieldNumber = 5;
  inline const ::std::string& account_address() const;
  inline void set_account_address(const ::std::string& value);
  inline void set_account_address(const char* value);
  inline void set_account_address(const void* value, size_t size);
  inline ::std::string* mutable_account_address();
  inline ::std::string* release_account_address();
  inline void set_allocated_account_address(::std::string* account_address);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetTxBlockRequest)
 private:
  inline void set_has_tx_gid();
  inline void clear_has_tx_gid();
  inline void set_has_block_hash();
  inline void clear_has_block_hash();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_account_address();
  inline void clear_has_account_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tx_gid_;
  ::std::string* block_hash_;
  ::google::protobuf::uint64 height_;
  ::std::string* account_address_;
  bool from_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static GetTxBlockRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetTxBlockResponse : public ::google::protobuf::Message {
 public:
  GetTxBlockResponse();
  virtual ~GetTxBlockResponse();

  GetTxBlockResponse(const GetTxBlockResponse& from);

  inline GetTxBlockResponse& operator=(const GetTxBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockResponse& default_instance();

  void Swap(GetTxBlockResponse* other);

  // implements Message ----------------------------------------------

  GetTxBlockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTxBlockResponse& from);
  void MergeFrom(const GetTxBlockResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::std::string& block() const;
  inline void set_block(const ::std::string& value);
  inline void set_block(const char* value);
  inline void set_block(const void* value, size_t size);
  inline ::std::string* mutable_block();
  inline ::std::string* release_block();
  inline void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetTxBlockResponse)
 private:
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static GetTxBlockResponse* default_instance_;
};
// -------------------------------------------------------------------

class AccountHeightRequest : public ::google::protobuf::Message {
 public:
  AccountHeightRequest();
  virtual ~AccountHeightRequest();

  AccountHeightRequest(const AccountHeightRequest& from);

  inline AccountHeightRequest& operator=(const AccountHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountHeightRequest& default_instance();

  void Swap(AccountHeightRequest* other);

  // implements Message ----------------------------------------------

  AccountHeightRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountHeightRequest& from);
  void MergeFrom(const AccountHeightRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account_addr = 1;
  inline bool has_account_addr() const;
  inline void clear_account_addr();
  static const int kAccountAddrFieldNumber = 1;
  inline const ::std::string& account_addr() const;
  inline void set_account_addr(const ::std::string& value);
  inline void set_account_addr(const char* value);
  inline void set_account_addr(const void* value, size_t size);
  inline ::std::string* mutable_account_addr();
  inline ::std::string* release_account_addr();
  inline void set_allocated_account_addr(::std::string* account_addr);

  // optional int64 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountHeightRequest)
 private:
  inline void set_has_account_addr();
  inline void clear_has_account_addr();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_addr_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static AccountHeightRequest* default_instance_;
};
// -------------------------------------------------------------------

class AccountHeightResponse : public ::google::protobuf::Message {
 public:
  AccountHeightResponse();
  virtual ~AccountHeightResponse();

  AccountHeightResponse(const AccountHeightResponse& from);

  inline AccountHeightResponse& operator=(const AccountHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountHeightResponse& default_instance();

  void Swap(AccountHeightResponse* other);

  // implements Message ----------------------------------------------

  AccountHeightResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountHeightResponse& from);
  void MergeFrom(const AccountHeightResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 heights = 1;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 1;
  inline ::google::protobuf::uint64 heights(int index) const;
  inline void set_heights(int index, ::google::protobuf::uint64 value);
  inline void add_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // optional bytes account_addr = 2;
  inline bool has_account_addr() const;
  inline void clear_account_addr();
  static const int kAccountAddrFieldNumber = 2;
  inline const ::std::string& account_addr() const;
  inline void set_account_addr(const ::std::string& value);
  inline void set_account_addr(const char* value);
  inline void set_account_addr(const void* value, size_t size);
  inline ::std::string* mutable_account_addr();
  inline ::std::string* release_account_addr();
  inline void set_allocated_account_addr(::std::string* account_addr);

  // optional bytes type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountHeightResponse)
 private:
  inline void set_has_account_addr();
  inline void clear_has_account_addr();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;
  ::std::string* account_addr_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static AccountHeightResponse* default_instance_;
};
// -------------------------------------------------------------------

class AccountAttrRequest : public ::google::protobuf::Message {
 public:
  AccountAttrRequest();
  virtual ~AccountAttrRequest();

  AccountAttrRequest(const AccountAttrRequest& from);

  inline AccountAttrRequest& operator=(const AccountAttrRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountAttrRequest& default_instance();

  void Swap(AccountAttrRequest* other);

  // implements Message ----------------------------------------------

  AccountAttrRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountAttrRequest& from);
  void MergeFrom(const AccountAttrRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional bytes attr_key = 2;
  inline bool has_attr_key() const;
  inline void clear_attr_key();
  static const int kAttrKeyFieldNumber = 2;
  inline const ::std::string& attr_key() const;
  inline void set_attr_key(const ::std::string& value);
  inline void set_attr_key(const char* value);
  inline void set_attr_key(const void* value, size_t size);
  inline ::std::string* mutable_attr_key();
  inline ::std::string* release_attr_key();
  inline void set_allocated_attr_key(::std::string* attr_key);

  // optional uint64 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountAttrRequest)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_attr_key();
  inline void clear_has_attr_key();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* attr_key_;
  ::google::protobuf::uint64 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static AccountAttrRequest* default_instance_;
};
// -------------------------------------------------------------------

class AccountAttrResponse : public ::google::protobuf::Message {
 public:
  AccountAttrResponse();
  virtual ~AccountAttrResponse();

  AccountAttrResponse(const AccountAttrResponse& from);

  inline AccountAttrResponse& operator=(const AccountAttrResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountAttrResponse& default_instance();

  void Swap(AccountAttrResponse* other);

  // implements Message ----------------------------------------------

  AccountAttrResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountAttrResponse& from);
  void MergeFrom(const AccountAttrResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional bytes attr_key = 2;
  inline bool has_attr_key() const;
  inline void clear_attr_key();
  static const int kAttrKeyFieldNumber = 2;
  inline const ::std::string& attr_key() const;
  inline void set_attr_key(const ::std::string& value);
  inline void set_attr_key(const char* value);
  inline void set_attr_key(const void* value, size_t size);
  inline ::std::string* mutable_attr_key();
  inline ::std::string* release_attr_key();
  inline void set_allocated_attr_key(::std::string* attr_key);

  // optional uint64 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // optional bytes block = 4;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 4;
  inline const ::std::string& block() const;
  inline void set_block(const ::std::string& value);
  inline void set_block(const char* value);
  inline void set_block(const void* value, size_t size);
  inline ::std::string* mutable_block();
  inline ::std::string* release_block();
  inline void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AccountAttrResponse)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_attr_key();
  inline void clear_has_attr_key();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* attr_key_;
  ::google::protobuf::uint64 height_;
  ::std::string* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static AccountAttrResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateVpnCountRequest : public ::google::protobuf::Message {
 public:
  UpdateVpnCountRequest();
  virtual ~UpdateVpnCountRequest();

  UpdateVpnCountRequest(const UpdateVpnCountRequest& from);

  inline UpdateVpnCountRequest& operator=(const UpdateVpnCountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateVpnCountRequest& default_instance();

  void Swap(UpdateVpnCountRequest* other);

  // implements Message ----------------------------------------------

  UpdateVpnCountRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateVpnCountRequest& from);
  void MergeFrom(const UpdateVpnCountRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 account_hash = 1;
  inline bool has_account_hash() const;
  inline void clear_account_hash();
  static const int kAccountHashFieldNumber = 1;
  inline ::google::protobuf::uint64 account_hash() const;
  inline void set_account_hash(::google::protobuf::uint64 value);

  // optional bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional bytes old_ip = 3;
  inline bool has_old_ip() const;
  inline void clear_old_ip();
  static const int kOldIpFieldNumber = 3;
  inline const ::std::string& old_ip() const;
  inline void set_old_ip(const ::std::string& value);
  inline void set_old_ip(const char* value);
  inline void set_old_ip(const void* value, size_t size);
  inline ::std::string* mutable_old_ip();
  inline ::std::string* release_old_ip();
  inline void set_allocated_old_ip(::std::string* old_ip);

  // optional bytes uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const void* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional bool just_set = 5;
  inline bool has_just_set() const;
  inline void clear_just_set();
  static const int kJustSetFieldNumber = 5;
  inline bool just_set() const;
  inline void set_just_set(bool value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.UpdateVpnCountRequest)
 private:
  inline void set_has_account_hash();
  inline void clear_has_account_hash();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_old_ip();
  inline void clear_has_old_ip();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_just_set();
  inline void clear_has_just_set();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 account_hash_;
  ::std::string* ip_;
  ::std::string* old_ip_;
  ::std::string* uid_;
  bool just_set_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static UpdateVpnCountRequest* default_instance_;
};
// -------------------------------------------------------------------

class VpnCountItem : public ::google::protobuf::Message {
 public:
  VpnCountItem();
  virtual ~VpnCountItem();

  VpnCountItem(const VpnCountItem& from);

  inline VpnCountItem& operator=(const VpnCountItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VpnCountItem& default_instance();

  void Swap(VpnCountItem* other);

  // implements Message ----------------------------------------------

  VpnCountItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VpnCountItem& from);
  void MergeFrom(const VpnCountItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.VpnCountItem)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static VpnCountItem* default_instance_;
};
// -------------------------------------------------------------------

class UpdateVpnCountResponse : public ::google::protobuf::Message {
 public:
  UpdateVpnCountResponse();
  virtual ~UpdateVpnCountResponse();

  UpdateVpnCountResponse(const UpdateVpnCountResponse& from);

  inline UpdateVpnCountResponse& operator=(const UpdateVpnCountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateVpnCountResponse& default_instance();

  void Swap(UpdateVpnCountResponse* other);

  // implements Message ----------------------------------------------

  UpdateVpnCountResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateVpnCountResponse& from);
  void MergeFrom(const UpdateVpnCountResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
  inline int vpn_nodes_size() const;
  inline void clear_vpn_nodes();
  static const int kVpnNodesFieldNumber = 1;
  inline const ::zjchain::block::protobuf::VpnCountItem& vpn_nodes(int index) const;
  inline ::zjchain::block::protobuf::VpnCountItem* mutable_vpn_nodes(int index);
  inline ::zjchain::block::protobuf::VpnCountItem* add_vpn_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >&
      vpn_nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >*
      mutable_vpn_nodes();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.UpdateVpnCountResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem > vpn_nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static UpdateVpnCountResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetAccountInitInfoRequest : public ::google::protobuf::Message {
 public:
  GetAccountInitInfoRequest();
  virtual ~GetAccountInitInfoRequest();

  GetAccountInitInfoRequest(const GetAccountInitInfoRequest& from);

  inline GetAccountInitInfoRequest& operator=(const GetAccountInitInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountInitInfoRequest& default_instance();

  void Swap(GetAccountInitInfoRequest* other);

  // implements Message ----------------------------------------------

  GetAccountInitInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountInitInfoRequest& from);
  void MergeFrom(const GetAccountInitInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint64 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // optional uint64 net_id = 4;
  inline bool has_net_id() const;
  inline void clear_net_id();
  static const int kNetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 net_id() const;
  inline void set_net_id(::google::protobuf::uint64 value);

  // optional uint64 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountInitInfoRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_net_id();
  inline void clear_has_net_id();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 net_id_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static GetAccountInitInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAccountInitInfoResponse : public ::google::protobuf::Message {
 public:
  GetAccountInitInfoResponse();
  virtual ~GetAccountInitInfoResponse();

  GetAccountInitInfoResponse(const GetAccountInitInfoResponse& from);

  inline GetAccountInitInfoResponse& operator=(const GetAccountInitInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountInitInfoResponse& default_instance();

  void Swap(GetAccountInitInfoResponse* other);

  // implements Message ----------------------------------------------

  GetAccountInitInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountInitInfoResponse& from);
  void MergeFrom(const GetAccountInitInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 balance = 1;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 1;
  inline ::google::protobuf::uint64 balance() const;
  inline void set_balance(::google::protobuf::uint64 value);

  // repeated .zjchain.block.protobuf.Block block_list = 2;
  inline int block_list_size() const;
  inline void clear_block_list();
  static const int kBlockListFieldNumber = 2;
  inline const ::zjchain::block::protobuf::Block& block_list(int index) const;
  inline ::zjchain::block::protobuf::Block* mutable_block_list(int index);
  inline ::zjchain::block::protobuf::Block* add_block_list();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::Block >&
      block_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::Block >*
      mutable_block_list();

  // optional bytes id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint64 max_index = 4;
  inline bool has_max_index() const;
  inline void clear_max_index();
  static const int kMaxIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 max_index() const;
  inline void set_max_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountInitInfoResponse)
 private:
  inline void set_has_balance();
  inline void clear_has_balance();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_max_index();
  inline void clear_has_max_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 balance_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::Block > block_list_;
  ::std::string* id_;
  ::google::protobuf::uint64 max_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static GetAccountInitInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateVpnActiveRequest : public ::google::protobuf::Message {
 public:
  UpdateVpnActiveRequest();
  virtual ~UpdateVpnActiveRequest();

  UpdateVpnActiveRequest(const UpdateVpnActiveRequest& from);

  inline UpdateVpnActiveRequest& operator=(const UpdateVpnActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateVpnActiveRequest& default_instance();

  void Swap(UpdateVpnActiveRequest* other);

  // implements Message ----------------------------------------------

  UpdateVpnActiveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateVpnActiveRequest& from);
  void MergeFrom(const UpdateVpnActiveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.UpdateVpnActiveRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static UpdateVpnActiveRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdRewardRequest : public ::google::protobuf::Message {
 public:
  AdRewardRequest();
  virtual ~AdRewardRequest();

  AdRewardRequest(const AdRewardRequest& from);

  inline AdRewardRequest& operator=(const AdRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdRewardRequest& default_instance();

  void Swap(AdRewardRequest* other);

  // implements Message ----------------------------------------------

  AdRewardRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdRewardRequest& from);
  void MergeFrom(const AdRewardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes reward_key = 2;
  inline bool has_reward_key() const;
  inline void clear_reward_key();
  static const int kRewardKeyFieldNumber = 2;
  inline const ::std::string& reward_key() const;
  inline void set_reward_key(const ::std::string& value);
  inline void set_reward_key(const char* value);
  inline void set_reward_key(const void* value, size_t size);
  inline ::std::string* mutable_reward_key();
  inline ::std::string* release_reward_key();
  inline void set_allocated_reward_key(::std::string* reward_key);

  // optional bytes gid = 3;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 3;
  inline const ::std::string& gid() const;
  inline void set_gid(const ::std::string& value);
  inline void set_gid(const char* value);
  inline void set_gid(const void* value, size_t size);
  inline ::std::string* mutable_gid();
  inline ::std::string* release_gid();
  inline void set_allocated_gid(::std::string* gid);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.AdRewardRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reward_key();
  inline void clear_has_reward_key();
  inline void set_has_gid();
  inline void clear_has_gid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* reward_key_;
  ::std::string* gid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static AdRewardRequest* default_instance_;
};
// -------------------------------------------------------------------

class ElectStatisticInfo : public ::google::protobuf::Message {
 public:
  ElectStatisticInfo();
  virtual ~ElectStatisticInfo();

  ElectStatisticInfo(const ElectStatisticInfo& from);

  inline ElectStatisticInfo& operator=(const ElectStatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectStatisticInfo& default_instance();

  void Swap(ElectStatisticInfo* other);

  // implements Message ----------------------------------------------

  ElectStatisticInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElectStatisticInfo& from);
  void MergeFrom(const ElectStatisticInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 elect_height = 1;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 1;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // repeated uint32 succ_tx_count = 2;
  inline int succ_tx_count_size() const;
  inline void clear_succ_tx_count();
  static const int kSuccTxCountFieldNumber = 2;
  inline ::google::protobuf::uint32 succ_tx_count(int index) const;
  inline void set_succ_tx_count(int index, ::google::protobuf::uint32 value);
  inline void add_succ_tx_count(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      succ_tx_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_succ_tx_count();

  // repeated uint32 lof_leaders = 3;
  inline int lof_leaders_size() const;
  inline void clear_lof_leaders();
  static const int kLofLeadersFieldNumber = 3;
  inline ::google::protobuf::uint32 lof_leaders(int index) const;
  inline void set_lof_leaders(int index, ::google::protobuf::uint32 value);
  inline void add_lof_leaders(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      lof_leaders() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_lof_leaders();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ElectStatisticInfo)
 private:
  inline void set_has_elect_height();
  inline void clear_has_elect_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > succ_tx_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > lof_leaders_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static ElectStatisticInfo* default_instance_;
};
// -------------------------------------------------------------------

class StatisticInfo : public ::google::protobuf::Message {
 public:
  StatisticInfo();
  virtual ~StatisticInfo();

  StatisticInfo(const StatisticInfo& from);

  inline StatisticInfo& operator=(const StatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticInfo& default_instance();

  void Swap(StatisticInfo* other);

  // implements Message ----------------------------------------------

  StatisticInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatisticInfo& from);
  void MergeFrom(const StatisticInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 timeblock_height = 1;
  inline bool has_timeblock_height() const;
  inline void clear_timeblock_height();
  static const int kTimeblockHeightFieldNumber = 1;
  inline ::google::protobuf::uint64 timeblock_height() const;
  inline void set_timeblock_height(::google::protobuf::uint64 value);

  // optional uint32 all_tx_count = 2;
  inline bool has_all_tx_count() const;
  inline void clear_all_tx_count();
  static const int kAllTxCountFieldNumber = 2;
  inline ::google::protobuf::uint32 all_tx_count() const;
  inline void set_all_tx_count(::google::protobuf::uint32 value);

  // repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  inline int elect_statistic_size() const;
  inline void clear_elect_statistic();
  static const int kElectStatisticFieldNumber = 3;
  inline const ::zjchain::block::protobuf::ElectStatisticInfo& elect_statistic(int index) const;
  inline ::zjchain::block::protobuf::ElectStatisticInfo* mutable_elect_statistic(int index);
  inline ::zjchain::block::protobuf::ElectStatisticInfo* add_elect_statistic();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >&
      elect_statistic() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >*
      mutable_elect_statistic();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.StatisticInfo)
 private:
  inline void set_has_timeblock_height();
  inline void clear_has_timeblock_height();
  inline void set_has_all_tx_count();
  inline void clear_has_all_tx_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 timeblock_height_;
  ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo > elect_statistic_;
  ::google::protobuf::uint32 all_tx_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static StatisticInfo* default_instance_;
};
// -------------------------------------------------------------------

class RefreshPoolHeightRequest : public ::google::protobuf::Message {
 public:
  RefreshPoolHeightRequest();
  virtual ~RefreshPoolHeightRequest();

  RefreshPoolHeightRequest(const RefreshPoolHeightRequest& from);

  inline RefreshPoolHeightRequest& operator=(const RefreshPoolHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshPoolHeightRequest& default_instance();

  void Swap(RefreshPoolHeightRequest* other);

  // implements Message ----------------------------------------------

  RefreshPoolHeightRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshPoolHeightRequest& from);
  void MergeFrom(const RefreshPoolHeightRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 heights = 1;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 1;
  inline ::google::protobuf::uint64 heights(int index) const;
  inline void set_heights(int index, ::google::protobuf::uint64 value);
  inline void add_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.RefreshPoolHeightRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static RefreshPoolHeightRequest* default_instance_;
};
// -------------------------------------------------------------------

class RefreshPoolHeightResponse : public ::google::protobuf::Message {
 public:
  RefreshPoolHeightResponse();
  virtual ~RefreshPoolHeightResponse();

  RefreshPoolHeightResponse(const RefreshPoolHeightResponse& from);

  inline RefreshPoolHeightResponse& operator=(const RefreshPoolHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshPoolHeightResponse& default_instance();

  void Swap(RefreshPoolHeightResponse* other);

  // implements Message ----------------------------------------------

  RefreshPoolHeightResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshPoolHeightResponse& from);
  void MergeFrom(const RefreshPoolHeightResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 heights = 1;
  inline int heights_size() const;
  inline void clear_heights();
  static const int kHeightsFieldNumber = 1;
  inline ::google::protobuf::uint64 heights(int index) const;
  inline void set_heights(int index, ::google::protobuf::uint64 value);
  inline void add_heights(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.RefreshPoolHeightResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static RefreshPoolHeightResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetAccountShardRequest : public ::google::protobuf::Message {
 public:
  GetAccountShardRequest();
  virtual ~GetAccountShardRequest();

  GetAccountShardRequest(const GetAccountShardRequest& from);

  inline GetAccountShardRequest& operator=(const GetAccountShardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountShardRequest& default_instance();

  void Swap(GetAccountShardRequest* other);

  // implements Message ----------------------------------------------

  GetAccountShardRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountShardRequest& from);
  void MergeFrom(const GetAccountShardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountShardRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static GetAccountShardRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAccountShardReponse : public ::google::protobuf::Message {
 public:
  GetAccountShardReponse();
  virtual ~GetAccountShardReponse();

  GetAccountShardReponse(const GetAccountShardReponse& from);

  inline GetAccountShardReponse& operator=(const GetAccountShardReponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountShardReponse& default_instance();

  void Swap(GetAccountShardReponse* other);

  // implements Message ----------------------------------------------

  GetAccountShardReponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountShardReponse& from);
  void MergeFrom(const GetAccountShardReponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint32 shard_id = 2;
  inline bool has_shard_id() const;
  inline void clear_shard_id();
  static const int kShardIdFieldNumber = 2;
  inline ::google::protobuf::uint32 shard_id() const;
  inline void set_shard_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.GetAccountShardReponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_shard_id();
  inline void clear_has_shard_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint32 shard_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static GetAccountShardReponse* default_instance_;
};
// -------------------------------------------------------------------

class CrossShardingTosMessage : public ::google::protobuf::Message {
 public:
  CrossShardingTosMessage();
  virtual ~CrossShardingTosMessage();

  CrossShardingTosMessage(const CrossShardingTosMessage& from);

  inline CrossShardingTosMessage& operator=(const CrossShardingTosMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossShardingTosMessage& default_instance();

  void Swap(CrossShardingTosMessage* other);

  // implements Message ----------------------------------------------

  CrossShardingTosMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossShardingTosMessage& from);
  void MergeFrom(const CrossShardingTosMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.block.protobuf.Block block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::zjchain::block::protobuf::Block& block() const;
  inline ::zjchain::block::protobuf::Block* mutable_block();
  inline ::zjchain::block::protobuf::Block* release_block();
  inline void set_allocated_block(::zjchain::block::protobuf::Block* block);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.CrossShardingTosMessage)
 private:
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::block::protobuf::Block* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static CrossShardingTosMessage* default_instance_;
};
// -------------------------------------------------------------------

class CrossShardingStatisticMessage : public ::google::protobuf::Message {
 public:
  CrossShardingStatisticMessage();
  virtual ~CrossShardingStatisticMessage();

  CrossShardingStatisticMessage(const CrossShardingStatisticMessage& from);

  inline CrossShardingStatisticMessage& operator=(const CrossShardingStatisticMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrossShardingStatisticMessage& default_instance();

  void Swap(CrossShardingStatisticMessage* other);

  // implements Message ----------------------------------------------

  CrossShardingStatisticMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrossShardingStatisticMessage& from);
  void MergeFrom(const CrossShardingStatisticMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.block.protobuf.Block block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::zjchain::block::protobuf::Block& block() const;
  inline ::zjchain::block::protobuf::Block* mutable_block();
  inline ::zjchain::block::protobuf::Block* release_block();
  inline void set_allocated_block(::zjchain::block::protobuf::Block* block);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.CrossShardingStatisticMessage)
 private:
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::block::protobuf::Block* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static CrossShardingStatisticMessage* default_instance_;
};
// -------------------------------------------------------------------

class ElectBlockMessage : public ::google::protobuf::Message {
 public:
  ElectBlockMessage();
  virtual ~ElectBlockMessage();

  ElectBlockMessage(const ElectBlockMessage& from);

  inline ElectBlockMessage& operator=(const ElectBlockMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectBlockMessage& default_instance();

  void Swap(ElectBlockMessage* other);

  // implements Message ----------------------------------------------

  ElectBlockMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElectBlockMessage& from);
  void MergeFrom(const ElectBlockMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.block.protobuf.Block block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::zjchain::block::protobuf::Block& block() const;
  inline ::zjchain::block::protobuf::Block* mutable_block();
  inline ::zjchain::block::protobuf::Block* release_block();
  inline void set_allocated_block(::zjchain::block::protobuf::Block* block);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ElectBlockMessage)
 private:
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::block::protobuf::Block* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static ElectBlockMessage* default_instance_;
};
// -------------------------------------------------------------------

class ShardToTxMessage : public ::google::protobuf::Message {
 public:
  ShardToTxMessage();
  virtual ~ShardToTxMessage();

  ShardToTxMessage(const ShardToTxMessage& from);

  inline ShardToTxMessage& operator=(const ShardToTxMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShardToTxMessage& default_instance();

  void Swap(ShardToTxMessage* other);

  // implements Message ----------------------------------------------

  ShardToTxMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShardToTxMessage& from);
  void MergeFrom(const ShardToTxMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
  inline int to_txs_size() const;
  inline void clear_to_txs();
  static const int kToTxsFieldNumber = 1;
  inline const ::zjchain::pools::protobuf::ShardToTxItem& to_txs(int index) const;
  inline ::zjchain::pools::protobuf::ShardToTxItem* mutable_to_txs(int index);
  inline ::zjchain::pools::protobuf::ShardToTxItem* add_to_txs();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >&
      to_txs() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >*
      mutable_to_txs();

  // optional uint32 leader_idx = 2;
  inline bool has_leader_idx() const;
  inline void clear_leader_idx();
  static const int kLeaderIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 leader_idx() const;
  inline void set_leader_idx(::google::protobuf::uint32 value);

  // optional uint64 elect_height = 3;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // optional int32 leader_to_idx = 4;
  inline bool has_leader_to_idx() const;
  inline void clear_leader_to_idx();
  static const int kLeaderToIdxFieldNumber = 4;
  inline ::google::protobuf::int32 leader_to_idx() const;
  inline void set_leader_to_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.ShardToTxMessage)
 private:
  inline void set_has_leader_idx();
  inline void clear_has_leader_idx();
  inline void set_has_elect_height();
  inline void clear_has_elect_height();
  inline void set_has_leader_to_idx();
  inline void clear_has_leader_to_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem > to_txs_;
  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::uint32 leader_idx_;
  ::google::protobuf::int32 leader_to_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static ShardToTxMessage* default_instance_;
};
// -------------------------------------------------------------------

class StatisticTxMessage : public ::google::protobuf::Message {
 public:
  StatisticTxMessage();
  virtual ~StatisticTxMessage();

  StatisticTxMessage(const StatisticTxMessage& from);

  inline StatisticTxMessage& operator=(const StatisticTxMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticTxMessage& default_instance();

  void Swap(StatisticTxMessage* other);

  // implements Message ----------------------------------------------

  StatisticTxMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatisticTxMessage& from);
  void MergeFrom(const StatisticTxMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
  inline bool has_statistic() const;
  inline void clear_statistic();
  static const int kStatisticFieldNumber = 1;
  inline const ::zjchain::pools::protobuf::StatisticTxItem& statistic() const;
  inline ::zjchain::pools::protobuf::StatisticTxItem* mutable_statistic();
  inline ::zjchain::pools::protobuf::StatisticTxItem* release_statistic();
  inline void set_allocated_statistic(::zjchain::pools::protobuf::StatisticTxItem* statistic);

  // optional uint32 leader_idx = 2;
  inline bool has_leader_idx() const;
  inline void clear_leader_idx();
  static const int kLeaderIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 leader_idx() const;
  inline void set_leader_idx(::google::protobuf::uint32 value);

  // optional uint64 elect_height = 3;
  inline bool has_elect_height() const;
  inline void clear_elect_height();
  static const int kElectHeightFieldNumber = 3;
  inline ::google::protobuf::uint64 elect_height() const;
  inline void set_elect_height(::google::protobuf::uint64 value);

  // optional int32 leader_to_idx = 4;
  inline bool has_leader_to_idx() const;
  inline void clear_leader_to_idx();
  static const int kLeaderToIdxFieldNumber = 4;
  inline ::google::protobuf::int32 leader_to_idx() const;
  inline void set_leader_to_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.StatisticTxMessage)
 private:
  inline void set_has_statistic();
  inline void clear_has_statistic();
  inline void set_has_leader_idx();
  inline void clear_has_leader_idx();
  inline void set_has_elect_height();
  inline void clear_has_elect_height();
  inline void set_has_leader_to_idx();
  inline void clear_has_leader_to_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::pools::protobuf::StatisticTxItem* statistic_;
  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::uint32 leader_idx_;
  ::google::protobuf::int32 leader_to_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static StatisticTxMessage* default_instance_;
};
// -------------------------------------------------------------------

class BlockMessage : public ::google::protobuf::Message {
 public:
  BlockMessage();
  virtual ~BlockMessage();

  BlockMessage(const BlockMessage& from);

  inline BlockMessage& operator=(const BlockMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMessage& default_instance();

  void Swap(BlockMessage* other);

  // implements Message ----------------------------------------------

  BlockMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMessage& from);
  void MergeFrom(const BlockMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
  inline bool has_block_req() const;
  inline void clear_block_req();
  static const int kBlockReqFieldNumber = 1;
  inline const ::zjchain::block::protobuf::GetTxBlockRequest& block_req() const;
  inline ::zjchain::block::protobuf::GetTxBlockRequest* mutable_block_req();
  inline ::zjchain::block::protobuf::GetTxBlockRequest* release_block_req();
  inline void set_allocated_block_req(::zjchain::block::protobuf::GetTxBlockRequest* block_req);

  // optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
  inline bool has_block_res() const;
  inline void clear_block_res();
  static const int kBlockResFieldNumber = 2;
  inline const ::zjchain::block::protobuf::GetTxBlockResponse& block_res() const;
  inline ::zjchain::block::protobuf::GetTxBlockResponse* mutable_block_res();
  inline ::zjchain::block::protobuf::GetTxBlockResponse* release_block_res();
  inline void set_allocated_block_res(::zjchain::block::protobuf::GetTxBlockResponse* block_res);

  // optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
  inline bool has_height_req() const;
  inline void clear_height_req();
  static const int kHeightReqFieldNumber = 3;
  inline const ::zjchain::block::protobuf::AccountHeightRequest& height_req() const;
  inline ::zjchain::block::protobuf::AccountHeightRequest* mutable_height_req();
  inline ::zjchain::block::protobuf::AccountHeightRequest* release_height_req();
  inline void set_allocated_height_req(::zjchain::block::protobuf::AccountHeightRequest* height_req);

  // optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
  inline bool has_height_res() const;
  inline void clear_height_res();
  static const int kHeightResFieldNumber = 4;
  inline const ::zjchain::block::protobuf::AccountHeightResponse& height_res() const;
  inline ::zjchain::block::protobuf::AccountHeightResponse* mutable_height_res();
  inline ::zjchain::block::protobuf::AccountHeightResponse* release_height_res();
  inline void set_allocated_height_res(::zjchain::block::protobuf::AccountHeightResponse* height_res);

  // optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  inline bool has_acc_attr_req() const;
  inline void clear_acc_attr_req();
  static const int kAccAttrReqFieldNumber = 5;
  inline const ::zjchain::block::protobuf::AccountAttrRequest& acc_attr_req() const;
  inline ::zjchain::block::protobuf::AccountAttrRequest* mutable_acc_attr_req();
  inline ::zjchain::block::protobuf::AccountAttrRequest* release_acc_attr_req();
  inline void set_allocated_acc_attr_req(::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req);

  // optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  inline bool has_acc_attr_res() const;
  inline void clear_acc_attr_res();
  static const int kAccAttrResFieldNumber = 6;
  inline const ::zjchain::block::protobuf::AccountAttrResponse& acc_attr_res() const;
  inline ::zjchain::block::protobuf::AccountAttrResponse* mutable_acc_attr_res();
  inline ::zjchain::block::protobuf::AccountAttrResponse* release_acc_attr_res();
  inline void set_allocated_acc_attr_res(::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res);

  // optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  inline bool has_up_vpn_req() const;
  inline void clear_up_vpn_req();
  static const int kUpVpnReqFieldNumber = 7;
  inline const ::zjchain::block::protobuf::UpdateVpnCountRequest& up_vpn_req() const;
  inline ::zjchain::block::protobuf::UpdateVpnCountRequest* mutable_up_vpn_req();
  inline ::zjchain::block::protobuf::UpdateVpnCountRequest* release_up_vpn_req();
  inline void set_allocated_up_vpn_req(::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req);

  // optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  inline bool has_up_vpn_res() const;
  inline void clear_up_vpn_res();
  static const int kUpVpnResFieldNumber = 8;
  inline const ::zjchain::block::protobuf::UpdateVpnCountResponse& up_vpn_res() const;
  inline ::zjchain::block::protobuf::UpdateVpnCountResponse* mutable_up_vpn_res();
  inline ::zjchain::block::protobuf::UpdateVpnCountResponse* release_up_vpn_res();
  inline void set_allocated_up_vpn_res(::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res);

  // optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  inline bool has_account_init_req() const;
  inline void clear_account_init_req();
  static const int kAccountInitReqFieldNumber = 9;
  inline const ::zjchain::block::protobuf::GetAccountInitInfoRequest& account_init_req() const;
  inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* mutable_account_init_req();
  inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* release_account_init_req();
  inline void set_allocated_account_init_req(::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req);

  // optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  inline bool has_account_init_res() const;
  inline void clear_account_init_res();
  static const int kAccountInitResFieldNumber = 10;
  inline const ::zjchain::block::protobuf::GetAccountInitInfoResponse& account_init_res() const;
  inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* mutable_account_init_res();
  inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* release_account_init_res();
  inline void set_allocated_account_init_res(::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res);

  // optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  inline bool has_vpn_active_req() const;
  inline void clear_vpn_active_req();
  static const int kVpnActiveReqFieldNumber = 11;
  inline const ::zjchain::block::protobuf::UpdateVpnActiveRequest& vpn_active_req() const;
  inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* mutable_vpn_active_req();
  inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* release_vpn_active_req();
  inline void set_allocated_vpn_active_req(::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req);

  // optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
  inline bool has_ad_reward_req() const;
  inline void clear_ad_reward_req();
  static const int kAdRewardReqFieldNumber = 12;
  inline const ::zjchain::block::protobuf::AdRewardRequest& ad_reward_req() const;
  inline ::zjchain::block::protobuf::AdRewardRequest* mutable_ad_reward_req();
  inline ::zjchain::block::protobuf::AdRewardRequest* release_ad_reward_req();
  inline void set_allocated_ad_reward_req(::zjchain::block::protobuf::AdRewardRequest* ad_reward_req);

  // optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
  inline bool has_ref_heights_req() const;
  inline void clear_ref_heights_req();
  static const int kRefHeightsReqFieldNumber = 13;
  inline const ::zjchain::block::protobuf::RefreshPoolHeightRequest& ref_heights_req() const;
  inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* mutable_ref_heights_req();
  inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* release_ref_heights_req();
  inline void set_allocated_ref_heights_req(::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req);

  // optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
  inline bool has_ref_heights_res() const;
  inline void clear_ref_heights_res();
  static const int kRefHeightsResFieldNumber = 14;
  inline const ::zjchain::block::protobuf::RefreshPoolHeightResponse& ref_heights_res() const;
  inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* mutable_ref_heights_res();
  inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* release_ref_heights_res();
  inline void set_allocated_ref_heights_res(::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res);

  // optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
  inline bool has_acc_shard_req() const;
  inline void clear_acc_shard_req();
  static const int kAccShardReqFieldNumber = 15;
  inline const ::zjchain::block::protobuf::GetAccountShardRequest& acc_shard_req() const;
  inline ::zjchain::block::protobuf::GetAccountShardRequest* mutable_acc_shard_req();
  inline ::zjchain::block::protobuf::GetAccountShardRequest* release_acc_shard_req();
  inline void set_allocated_acc_shard_req(::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req);

  // optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
  inline bool has_acc_shard_res() const;
  inline void clear_acc_shard_res();
  static const int kAccShardResFieldNumber = 16;
  inline const ::zjchain::block::protobuf::GetAccountShardReponse& acc_shard_res() const;
  inline ::zjchain::block::protobuf::GetAccountShardReponse* mutable_acc_shard_res();
  inline ::zjchain::block::protobuf::GetAccountShardReponse* release_acc_shard_res();
  inline void set_allocated_acc_shard_res(::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res);

  // optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
  inline bool has_shard_to() const;
  inline void clear_shard_to();
  static const int kShardToFieldNumber = 17;
  inline const ::zjchain::block::protobuf::ShardToTxMessage& shard_to() const;
  inline ::zjchain::block::protobuf::ShardToTxMessage* mutable_shard_to();
  inline ::zjchain::block::protobuf::ShardToTxMessage* release_shard_to();
  inline void set_allocated_shard_to(::zjchain::block::protobuf::ShardToTxMessage* shard_to);

  // optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
  inline bool has_statistic_tx() const;
  inline void clear_statistic_tx();
  static const int kStatisticTxFieldNumber = 18;
  inline const ::zjchain::block::protobuf::StatisticTxMessage& statistic_tx() const;
  inline ::zjchain::block::protobuf::StatisticTxMessage* mutable_statistic_tx();
  inline ::zjchain::block::protobuf::StatisticTxMessage* release_statistic_tx();
  inline void set_allocated_statistic_tx(::zjchain::block::protobuf::StatisticTxMessage* statistic_tx);

  // @@protoc_insertion_point(class_scope:zjchain.block.protobuf.BlockMessage)
 private:
  inline void set_has_block_req();
  inline void clear_has_block_req();
  inline void set_has_block_res();
  inline void clear_has_block_res();
  inline void set_has_height_req();
  inline void clear_has_height_req();
  inline void set_has_height_res();
  inline void clear_has_height_res();
  inline void set_has_acc_attr_req();
  inline void clear_has_acc_attr_req();
  inline void set_has_acc_attr_res();
  inline void clear_has_acc_attr_res();
  inline void set_has_up_vpn_req();
  inline void clear_has_up_vpn_req();
  inline void set_has_up_vpn_res();
  inline void clear_has_up_vpn_res();
  inline void set_has_account_init_req();
  inline void clear_has_account_init_req();
  inline void set_has_account_init_res();
  inline void clear_has_account_init_res();
  inline void set_has_vpn_active_req();
  inline void clear_has_vpn_active_req();
  inline void set_has_ad_reward_req();
  inline void clear_has_ad_reward_req();
  inline void set_has_ref_heights_req();
  inline void clear_has_ref_heights_req();
  inline void set_has_ref_heights_res();
  inline void clear_has_ref_heights_res();
  inline void set_has_acc_shard_req();
  inline void clear_has_acc_shard_req();
  inline void set_has_acc_shard_res();
  inline void clear_has_acc_shard_res();
  inline void set_has_shard_to();
  inline void clear_has_shard_to();
  inline void set_has_statistic_tx();
  inline void clear_has_statistic_tx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::block::protobuf::GetTxBlockRequest* block_req_;
  ::zjchain::block::protobuf::GetTxBlockResponse* block_res_;
  ::zjchain::block::protobuf::AccountHeightRequest* height_req_;
  ::zjchain::block::protobuf::AccountHeightResponse* height_res_;
  ::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req_;
  ::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res_;
  ::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req_;
  ::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res_;
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req_;
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res_;
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req_;
  ::zjchain::block::protobuf::AdRewardRequest* ad_reward_req_;
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req_;
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res_;
  ::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req_;
  ::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res_;
  ::zjchain::block::protobuf::ShardToTxMessage* shard_to_;
  ::zjchain::block::protobuf::StatisticTxMessage* statistic_tx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fblock_2eproto();
  friend void protobuf_AssignDesc_protos_2fblock_2eproto();
  friend void protobuf_ShutdownFile_protos_2fblock_2eproto();

  void InitAsDefaultInstance();
  static BlockMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// StorageItem

// optional bytes key = 1;
inline bool StorageItem::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageItem::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageItem::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& StorageItem::key() const {
  return *key_;
}
inline void StorageItem::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void StorageItem::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void StorageItem::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageItem::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* StorageItem::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageItem::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes val_hash = 2;
inline bool StorageItem::has_val_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageItem::set_has_val_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageItem::clear_has_val_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageItem::clear_val_hash() {
  if (val_hash_ != &::google::protobuf::internal::kEmptyString) {
    val_hash_->clear();
  }
  clear_has_val_hash();
}
inline const ::std::string& StorageItem::val_hash() const {
  return *val_hash_;
}
inline void StorageItem::set_val_hash(const ::std::string& value) {
  set_has_val_hash();
  if (val_hash_ == &::google::protobuf::internal::kEmptyString) {
    val_hash_ = new ::std::string;
  }
  val_hash_->assign(value);
}
inline void StorageItem::set_val_hash(const char* value) {
  set_has_val_hash();
  if (val_hash_ == &::google::protobuf::internal::kEmptyString) {
    val_hash_ = new ::std::string;
  }
  val_hash_->assign(value);
}
inline void StorageItem::set_val_hash(const void* value, size_t size) {
  set_has_val_hash();
  if (val_hash_ == &::google::protobuf::internal::kEmptyString) {
    val_hash_ = new ::std::string;
  }
  val_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageItem::mutable_val_hash() {
  set_has_val_hash();
  if (val_hash_ == &::google::protobuf::internal::kEmptyString) {
    val_hash_ = new ::std::string;
  }
  return val_hash_;
}
inline ::std::string* StorageItem::release_val_hash() {
  clear_has_val_hash();
  if (val_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_hash_;
    val_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageItem::set_allocated_val_hash(::std::string* val_hash) {
  if (val_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete val_hash_;
  }
  if (val_hash) {
    set_has_val_hash();
    val_hash_ = val_hash;
  } else {
    clear_has_val_hash();
    val_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 val_size = 3 [default = 0];
inline bool StorageItem::has_val_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageItem::set_has_val_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageItem::clear_has_val_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageItem::clear_val_size() {
  val_size_ = 0u;
  clear_has_val_size();
}
inline ::google::protobuf::uint32 StorageItem::val_size() const {
  return val_size_;
}
inline void StorageItem::set_val_size(::google::protobuf::uint32 value) {
  set_has_val_size();
  val_size_ = value;
}

// -------------------------------------------------------------------

// TransferItem

// optional bytes from = 1;
inline bool TransferItem::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferItem::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferItem::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferItem::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& TransferItem::from() const {
  return *from_;
}
inline void TransferItem::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void TransferItem::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void TransferItem::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferItem::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* TransferItem::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferItem::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes to = 2;
inline bool TransferItem::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferItem::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferItem::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferItem::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& TransferItem::to() const {
  return *to_;
}
inline void TransferItem::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void TransferItem::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void TransferItem::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferItem::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* TransferItem::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferItem::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 amount = 3;
inline bool TransferItem::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferItem::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferItem::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TransferItem::amount() const {
  return amount_;
}
inline void TransferItem::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// TxLog

// optional bytes data = 1;
inline bool TxLog::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxLog::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxLog::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxLog::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& TxLog::data() const {
  return *data_;
}
inline void TxLog::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void TxLog::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void TxLog::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxLog::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* TxLog::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TxLog::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes topics = 2;
inline int TxLog::topics_size() const {
  return topics_.size();
}
inline void TxLog::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& TxLog::topics(int index) const {
  return topics_.Get(index);
}
inline ::std::string* TxLog::mutable_topics(int index) {
  return topics_.Mutable(index);
}
inline void TxLog::set_topics(int index, const ::std::string& value) {
  topics_.Mutable(index)->assign(value);
}
inline void TxLog::set_topics(int index, const char* value) {
  topics_.Mutable(index)->assign(value);
}
inline void TxLog::set_topics(int index, const void* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TxLog::add_topics() {
  return topics_.Add();
}
inline void TxLog::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
}
inline void TxLog::add_topics(const char* value) {
  topics_.Add()->assign(value);
}
inline void TxLog::add_topics(const void* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxLog::topics() const {
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TxLog::mutable_topics() {
  return &topics_;
}

// -------------------------------------------------------------------

// BlockTx

// optional bytes gid = 1;
inline bool BlockTx::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockTx::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockTx::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockTx::clear_gid() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& BlockTx::gid() const {
  return *gid_;
}
inline void BlockTx::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void BlockTx::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void BlockTx::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockTx::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  return gid_;
}
inline ::std::string* BlockTx::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockTx::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes from = 2;
inline bool BlockTx::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockTx::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockTx::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockTx::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& BlockTx::from() const {
  return *from_;
}
inline void BlockTx::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void BlockTx::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void BlockTx::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockTx::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* BlockTx::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockTx::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes to = 3;
inline bool BlockTx::has_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockTx::set_has_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockTx::clear_has_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockTx::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& BlockTx::to() const {
  return *to_;
}
inline void BlockTx::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void BlockTx::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void BlockTx::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockTx::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* BlockTx::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockTx::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 amount = 4;
inline bool BlockTx::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockTx::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockTx::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockTx::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 BlockTx::amount() const {
  return amount_;
}
inline void BlockTx::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint64 gas_limit = 5;
inline bool BlockTx::has_gas_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockTx::set_has_gas_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockTx::clear_has_gas_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockTx::clear_gas_limit() {
  gas_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_limit();
}
inline ::google::protobuf::uint64 BlockTx::gas_limit() const {
  return gas_limit_;
}
inline void BlockTx::set_gas_limit(::google::protobuf::uint64 value) {
  set_has_gas_limit();
  gas_limit_ = value;
}

// optional uint64 gas_used = 6;
inline bool BlockTx::has_gas_used() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockTx::set_has_gas_used() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockTx::clear_has_gas_used() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockTx::clear_gas_used() {
  gas_used_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_used();
}
inline ::google::protobuf::uint64 BlockTx::gas_used() const {
  return gas_used_;
}
inline void BlockTx::set_gas_used(::google::protobuf::uint64 value) {
  set_has_gas_used();
  gas_used_ = value;
}

// optional uint64 gas_price = 7;
inline bool BlockTx::has_gas_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockTx::set_has_gas_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockTx::clear_has_gas_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockTx::clear_gas_price() {
  gas_price_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_price();
}
inline ::google::protobuf::uint64 BlockTx::gas_price() const {
  return gas_price_;
}
inline void BlockTx::set_gas_price(::google::protobuf::uint64 value) {
  set_has_gas_price();
  gas_price_ = value;
}

// optional uint64 balance = 8;
inline bool BlockTx::has_balance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockTx::set_has_balance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockTx::clear_has_balance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockTx::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 BlockTx::balance() const {
  return balance_;
}
inline void BlockTx::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
}

// optional .zjchain.pools.protobuf.StepType step = 9;
inline bool BlockTx::has_step() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockTx::set_has_step() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockTx::clear_has_step() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockTx::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::zjchain::pools::protobuf::StepType BlockTx::step() const {
  return static_cast< ::zjchain::pools::protobuf::StepType >(step_);
}
inline void BlockTx::set_step(::zjchain::pools::protobuf::StepType value) {
  assert(::zjchain::pools::protobuf::StepType_IsValid(value));
  set_has_step();
  step_ = value;
}

// optional uint32 status = 10;
inline bool BlockTx::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlockTx::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlockTx::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlockTx::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 BlockTx::status() const {
  return status_;
}
inline void BlockTx::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// repeated .zjchain.block.protobuf.StorageItem storages = 11;
inline int BlockTx::storages_size() const {
  return storages_.size();
}
inline void BlockTx::clear_storages() {
  storages_.Clear();
}
inline const ::zjchain::block::protobuf::StorageItem& BlockTx::storages(int index) const {
  return storages_.Get(index);
}
inline ::zjchain::block::protobuf::StorageItem* BlockTx::mutable_storages(int index) {
  return storages_.Mutable(index);
}
inline ::zjchain::block::protobuf::StorageItem* BlockTx::add_storages() {
  return storages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >&
BlockTx::storages() const {
  return storages_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::StorageItem >*
BlockTx::mutable_storages() {
  return &storages_;
}

// repeated .zjchain.block.protobuf.TransferItem contract_txs = 12;
inline int BlockTx::contract_txs_size() const {
  return contract_txs_.size();
}
inline void BlockTx::clear_contract_txs() {
  contract_txs_.Clear();
}
inline const ::zjchain::block::protobuf::TransferItem& BlockTx::contract_txs(int index) const {
  return contract_txs_.Get(index);
}
inline ::zjchain::block::protobuf::TransferItem* BlockTx::mutable_contract_txs(int index) {
  return contract_txs_.Mutable(index);
}
inline ::zjchain::block::protobuf::TransferItem* BlockTx::add_contract_txs() {
  return contract_txs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >&
BlockTx::contract_txs() const {
  return contract_txs_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TransferItem >*
BlockTx::mutable_contract_txs() {
  return &contract_txs_;
}

// optional uint64 contract_prepayment = 13;
inline bool BlockTx::has_contract_prepayment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlockTx::set_has_contract_prepayment() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlockTx::clear_has_contract_prepayment() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlockTx::clear_contract_prepayment() {
  contract_prepayment_ = GOOGLE_ULONGLONG(0);
  clear_has_contract_prepayment();
}
inline ::google::protobuf::uint64 BlockTx::contract_prepayment() const {
  return contract_prepayment_;
}
inline void BlockTx::set_contract_prepayment(::google::protobuf::uint64 value) {
  set_has_contract_prepayment();
  contract_prepayment_ = value;
}

// optional bytes contract_code = 14;
inline bool BlockTx::has_contract_code() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BlockTx::set_has_contract_code() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BlockTx::clear_has_contract_code() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BlockTx::clear_contract_code() {
  if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
    contract_code_->clear();
  }
  clear_has_contract_code();
}
inline const ::std::string& BlockTx::contract_code() const {
  return *contract_code_;
}
inline void BlockTx::set_contract_code(const ::std::string& value) {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  contract_code_->assign(value);
}
inline void BlockTx::set_contract_code(const char* value) {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  contract_code_->assign(value);
}
inline void BlockTx::set_contract_code(const void* value, size_t size) {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  contract_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockTx::mutable_contract_code() {
  set_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    contract_code_ = new ::std::string;
  }
  return contract_code_;
}
inline ::std::string* BlockTx::release_contract_code() {
  clear_has_contract_code();
  if (contract_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_code_;
    contract_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockTx::set_allocated_contract_code(::std::string* contract_code) {
  if (contract_code_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_code_;
  }
  if (contract_code) {
    set_has_contract_code();
    contract_code_ = contract_code;
  } else {
    clear_has_contract_code();
    contract_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes contract_input = 15;
inline bool BlockTx::has_contract_input() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlockTx::set_has_contract_input() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlockTx::clear_has_contract_input() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlockTx::clear_contract_input() {
  if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
    contract_input_->clear();
  }
  clear_has_contract_input();
}
inline const ::std::string& BlockTx::contract_input() const {
  return *contract_input_;
}
inline void BlockTx::set_contract_input(const ::std::string& value) {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  contract_input_->assign(value);
}
inline void BlockTx::set_contract_input(const char* value) {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  contract_input_->assign(value);
}
inline void BlockTx::set_contract_input(const void* value, size_t size) {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  contract_input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockTx::mutable_contract_input() {
  set_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    contract_input_ = new ::std::string;
  }
  return contract_input_;
}
inline ::std::string* BlockTx::release_contract_input() {
  clear_has_contract_input();
  if (contract_input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_input_;
    contract_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockTx::set_allocated_contract_input(::std::string* contract_input) {
  if (contract_input_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_input_;
  }
  if (contract_input) {
    set_has_contract_input();
    contract_input_ = contract_input;
  } else {
    clear_has_contract_input();
    contract_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .zjchain.block.protobuf.TxLog events = 16;
inline int BlockTx::events_size() const {
  return events_.size();
}
inline void BlockTx::clear_events() {
  events_.Clear();
}
inline const ::zjchain::block::protobuf::TxLog& BlockTx::events(int index) const {
  return events_.Get(index);
}
inline ::zjchain::block::protobuf::TxLog* BlockTx::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::zjchain::block::protobuf::TxLog* BlockTx::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >&
BlockTx::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::TxLog >*
BlockTx::mutable_events() {
  return &events_;
}

// -------------------------------------------------------------------

// Block

// optional uint32 network_id = 1;
inline bool Block::has_network_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_network_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 Block::network_id() const {
  return network_id_;
}
inline void Block::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
}

// optional uint32 pool_index = 2;
inline bool Block::has_pool_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Block::set_has_pool_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Block::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Block::clear_pool_index() {
  pool_index_ = 0u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 Block::pool_index() const {
  return pool_index_;
}
inline void Block::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
}

// optional bytes prehash = 3;
inline bool Block::has_prehash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Block::set_has_prehash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Block::clear_has_prehash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Block::clear_prehash() {
  if (prehash_ != &::google::protobuf::internal::kEmptyString) {
    prehash_->clear();
  }
  clear_has_prehash();
}
inline const ::std::string& Block::prehash() const {
  return *prehash_;
}
inline void Block::set_prehash(const ::std::string& value) {
  set_has_prehash();
  if (prehash_ == &::google::protobuf::internal::kEmptyString) {
    prehash_ = new ::std::string;
  }
  prehash_->assign(value);
}
inline void Block::set_prehash(const char* value) {
  set_has_prehash();
  if (prehash_ == &::google::protobuf::internal::kEmptyString) {
    prehash_ = new ::std::string;
  }
  prehash_->assign(value);
}
inline void Block::set_prehash(const void* value, size_t size) {
  set_has_prehash();
  if (prehash_ == &::google::protobuf::internal::kEmptyString) {
    prehash_ = new ::std::string;
  }
  prehash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::mutable_prehash() {
  set_has_prehash();
  if (prehash_ == &::google::protobuf::internal::kEmptyString) {
    prehash_ = new ::std::string;
  }
  return prehash_;
}
inline ::std::string* Block::release_prehash() {
  clear_has_prehash();
  if (prehash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prehash_;
    prehash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Block::set_allocated_prehash(::std::string* prehash) {
  if (prehash_ != &::google::protobuf::internal::kEmptyString) {
    delete prehash_;
  }
  if (prehash) {
    set_has_prehash();
    prehash_ = prehash;
  } else {
    clear_has_prehash();
    prehash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes hash = 4;
inline bool Block::has_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Block::set_has_hash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Block::clear_has_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Block::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& Block::hash() const {
  return *hash_;
}
inline void Block::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void Block::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void Block::set_hash(const void* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* Block::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Block::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 version = 5;
inline bool Block::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Block::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Block::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Block::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Block::version() const {
  return version_;
}
inline void Block::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional uint64 height = 6;
inline bool Block::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Block::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Block::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Block::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 Block::height() const {
  return height_;
}
inline void Block::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// optional uint64 consistency_random = 7;
inline bool Block::has_consistency_random() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Block::set_has_consistency_random() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Block::clear_has_consistency_random() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Block::clear_consistency_random() {
  consistency_random_ = GOOGLE_ULONGLONG(0);
  clear_has_consistency_random();
}
inline ::google::protobuf::uint64 Block::consistency_random() const {
  return consistency_random_;
}
inline void Block::set_consistency_random(::google::protobuf::uint64 value) {
  set_has_consistency_random();
  consistency_random_ = value;
}

// optional uint64 electblock_height = 8;
inline bool Block::has_electblock_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Block::set_has_electblock_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Block::clear_has_electblock_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Block::clear_electblock_height() {
  electblock_height_ = GOOGLE_ULONGLONG(0);
  clear_has_electblock_height();
}
inline ::google::protobuf::uint64 Block::electblock_height() const {
  return electblock_height_;
}
inline void Block::set_electblock_height(::google::protobuf::uint64 value) {
  set_has_electblock_height();
  electblock_height_ = value;
}

// optional uint64 timeblock_height = 9;
inline bool Block::has_timeblock_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Block::set_has_timeblock_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Block::clear_has_timeblock_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Block::clear_timeblock_height() {
  timeblock_height_ = GOOGLE_ULONGLONG(0);
  clear_has_timeblock_height();
}
inline ::google::protobuf::uint64 Block::timeblock_height() const {
  return timeblock_height_;
}
inline void Block::set_timeblock_height(::google::protobuf::uint64 value) {
  set_has_timeblock_height();
  timeblock_height_ = value;
}

// repeated .zjchain.block.protobuf.BlockTx tx_list = 10;
inline int Block::tx_list_size() const {
  return tx_list_.size();
}
inline void Block::clear_tx_list() {
  tx_list_.Clear();
}
inline const ::zjchain::block::protobuf::BlockTx& Block::tx_list(int index) const {
  return tx_list_.Get(index);
}
inline ::zjchain::block::protobuf::BlockTx* Block::mutable_tx_list(int index) {
  return tx_list_.Mutable(index);
}
inline ::zjchain::block::protobuf::BlockTx* Block::add_tx_list() {
  return tx_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >&
Block::tx_list() const {
  return tx_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::BlockTx >*
Block::mutable_tx_list() {
  return &tx_list_;
}

// optional uint64 timestamp = 11;
inline bool Block::has_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Block::set_has_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Block::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Block::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Block::timestamp() const {
  return timestamp_;
}
inline void Block::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bytes bls_agg_sign_x = 12;
inline bool Block::has_bls_agg_sign_x() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Block::set_has_bls_agg_sign_x() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Block::clear_has_bls_agg_sign_x() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Block::clear_bls_agg_sign_x() {
  if (bls_agg_sign_x_ != &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_x_->clear();
  }
  clear_has_bls_agg_sign_x();
}
inline const ::std::string& Block::bls_agg_sign_x() const {
  return *bls_agg_sign_x_;
}
inline void Block::set_bls_agg_sign_x(const ::std::string& value) {
  set_has_bls_agg_sign_x();
  if (bls_agg_sign_x_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_x_ = new ::std::string;
  }
  bls_agg_sign_x_->assign(value);
}
inline void Block::set_bls_agg_sign_x(const char* value) {
  set_has_bls_agg_sign_x();
  if (bls_agg_sign_x_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_x_ = new ::std::string;
  }
  bls_agg_sign_x_->assign(value);
}
inline void Block::set_bls_agg_sign_x(const void* value, size_t size) {
  set_has_bls_agg_sign_x();
  if (bls_agg_sign_x_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_x_ = new ::std::string;
  }
  bls_agg_sign_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::mutable_bls_agg_sign_x() {
  set_has_bls_agg_sign_x();
  if (bls_agg_sign_x_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_x_ = new ::std::string;
  }
  return bls_agg_sign_x_;
}
inline ::std::string* Block::release_bls_agg_sign_x() {
  clear_has_bls_agg_sign_x();
  if (bls_agg_sign_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bls_agg_sign_x_;
    bls_agg_sign_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Block::set_allocated_bls_agg_sign_x(::std::string* bls_agg_sign_x) {
  if (bls_agg_sign_x_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_agg_sign_x_;
  }
  if (bls_agg_sign_x) {
    set_has_bls_agg_sign_x();
    bls_agg_sign_x_ = bls_agg_sign_x;
  } else {
    clear_has_bls_agg_sign_x();
    bls_agg_sign_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes bls_agg_sign_y = 13;
inline bool Block::has_bls_agg_sign_y() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Block::set_has_bls_agg_sign_y() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Block::clear_has_bls_agg_sign_y() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Block::clear_bls_agg_sign_y() {
  if (bls_agg_sign_y_ != &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_y_->clear();
  }
  clear_has_bls_agg_sign_y();
}
inline const ::std::string& Block::bls_agg_sign_y() const {
  return *bls_agg_sign_y_;
}
inline void Block::set_bls_agg_sign_y(const ::std::string& value) {
  set_has_bls_agg_sign_y();
  if (bls_agg_sign_y_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_y_ = new ::std::string;
  }
  bls_agg_sign_y_->assign(value);
}
inline void Block::set_bls_agg_sign_y(const char* value) {
  set_has_bls_agg_sign_y();
  if (bls_agg_sign_y_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_y_ = new ::std::string;
  }
  bls_agg_sign_y_->assign(value);
}
inline void Block::set_bls_agg_sign_y(const void* value, size_t size) {
  set_has_bls_agg_sign_y();
  if (bls_agg_sign_y_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_y_ = new ::std::string;
  }
  bls_agg_sign_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::mutable_bls_agg_sign_y() {
  set_has_bls_agg_sign_y();
  if (bls_agg_sign_y_ == &::google::protobuf::internal::kEmptyString) {
    bls_agg_sign_y_ = new ::std::string;
  }
  return bls_agg_sign_y_;
}
inline ::std::string* Block::release_bls_agg_sign_y() {
  clear_has_bls_agg_sign_y();
  if (bls_agg_sign_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bls_agg_sign_y_;
    bls_agg_sign_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Block::set_allocated_bls_agg_sign_y(::std::string* bls_agg_sign_y) {
  if (bls_agg_sign_y_ != &::google::protobuf::internal::kEmptyString) {
    delete bls_agg_sign_y_;
  }
  if (bls_agg_sign_y) {
    set_has_bls_agg_sign_y();
    bls_agg_sign_y_ = bls_agg_sign_y;
  } else {
    clear_has_bls_agg_sign_y();
    bls_agg_sign_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 leader_index = 14;
inline bool Block::has_leader_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Block::set_has_leader_index() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Block::clear_has_leader_index() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Block::clear_leader_index() {
  leader_index_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_index();
}
inline ::google::protobuf::uint64 Block::leader_index() const {
  return leader_index_;
}
inline void Block::set_leader_index(::google::protobuf::uint64 value) {
  set_has_leader_index();
  leader_index_ = value;
}

// repeated bytes change_leader_invalid_hashs = 15;
inline int Block::change_leader_invalid_hashs_size() const {
  return change_leader_invalid_hashs_.size();
}
inline void Block::clear_change_leader_invalid_hashs() {
  change_leader_invalid_hashs_.Clear();
}
inline const ::std::string& Block::change_leader_invalid_hashs(int index) const {
  return change_leader_invalid_hashs_.Get(index);
}
inline ::std::string* Block::mutable_change_leader_invalid_hashs(int index) {
  return change_leader_invalid_hashs_.Mutable(index);
}
inline void Block::set_change_leader_invalid_hashs(int index, const ::std::string& value) {
  change_leader_invalid_hashs_.Mutable(index)->assign(value);
}
inline void Block::set_change_leader_invalid_hashs(int index, const char* value) {
  change_leader_invalid_hashs_.Mutable(index)->assign(value);
}
inline void Block::set_change_leader_invalid_hashs(int index, const void* value, size_t size) {
  change_leader_invalid_hashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Block::add_change_leader_invalid_hashs() {
  return change_leader_invalid_hashs_.Add();
}
inline void Block::add_change_leader_invalid_hashs(const ::std::string& value) {
  change_leader_invalid_hashs_.Add()->assign(value);
}
inline void Block::add_change_leader_invalid_hashs(const char* value) {
  change_leader_invalid_hashs_.Add()->assign(value);
}
inline void Block::add_change_leader_invalid_hashs(const void* value, size_t size) {
  change_leader_invalid_hashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Block::change_leader_invalid_hashs() const {
  return change_leader_invalid_hashs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Block::mutable_change_leader_invalid_hashs() {
  return &change_leader_invalid_hashs_;
}

// optional bool is_commited_block = 16 [default = false];
inline bool Block::has_is_commited_block() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Block::set_has_is_commited_block() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Block::clear_has_is_commited_block() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Block::clear_is_commited_block() {
  is_commited_block_ = false;
  clear_has_is_commited_block();
}
inline bool Block::is_commited_block() const {
  return is_commited_block_;
}
inline void Block::set_is_commited_block(bool value) {
  set_has_is_commited_block();
  is_commited_block_ = value;
}

// -------------------------------------------------------------------

// ConsensusToTxsItem

// optional bytes to = 1;
inline bool ConsensusToTxsItem::has_to() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusToTxsItem::set_has_to() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusToTxsItem::clear_has_to() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusToTxsItem::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& ConsensusToTxsItem::to() const {
  return *to_;
}
inline void ConsensusToTxsItem::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void ConsensusToTxsItem::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void ConsensusToTxsItem::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConsensusToTxsItem::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* ConsensusToTxsItem::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConsensusToTxsItem::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 balance = 2;
inline bool ConsensusToTxsItem::has_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusToTxsItem::set_has_balance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusToTxsItem::clear_has_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusToTxsItem::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 ConsensusToTxsItem::balance() const {
  return balance_;
}
inline void ConsensusToTxsItem::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
}

// -------------------------------------------------------------------

// ConsensusToTxs

// repeated .zjchain.block.protobuf.ConsensusToTxsItem tos = 1;
inline int ConsensusToTxs::tos_size() const {
  return tos_.size();
}
inline void ConsensusToTxs::clear_tos() {
  tos_.Clear();
}
inline const ::zjchain::block::protobuf::ConsensusToTxsItem& ConsensusToTxs::tos(int index) const {
  return tos_.Get(index);
}
inline ::zjchain::block::protobuf::ConsensusToTxsItem* ConsensusToTxs::mutable_tos(int index) {
  return tos_.Mutable(index);
}
inline ::zjchain::block::protobuf::ConsensusToTxsItem* ConsensusToTxs::add_tos() {
  return tos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >&
ConsensusToTxs::tos() const {
  return tos_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ConsensusToTxsItem >*
ConsensusToTxs::mutable_tos() {
  return &tos_;
}

// -------------------------------------------------------------------

// GetTxBlockRequest

// optional bytes tx_gid = 1;
inline bool GetTxBlockRequest::has_tx_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockRequest::set_has_tx_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockRequest::clear_has_tx_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockRequest::clear_tx_gid() {
  if (tx_gid_ != &::google::protobuf::internal::kEmptyString) {
    tx_gid_->clear();
  }
  clear_has_tx_gid();
}
inline const ::std::string& GetTxBlockRequest::tx_gid() const {
  return *tx_gid_;
}
inline void GetTxBlockRequest::set_tx_gid(const ::std::string& value) {
  set_has_tx_gid();
  if (tx_gid_ == &::google::protobuf::internal::kEmptyString) {
    tx_gid_ = new ::std::string;
  }
  tx_gid_->assign(value);
}
inline void GetTxBlockRequest::set_tx_gid(const char* value) {
  set_has_tx_gid();
  if (tx_gid_ == &::google::protobuf::internal::kEmptyString) {
    tx_gid_ = new ::std::string;
  }
  tx_gid_->assign(value);
}
inline void GetTxBlockRequest::set_tx_gid(const void* value, size_t size) {
  set_has_tx_gid();
  if (tx_gid_ == &::google::protobuf::internal::kEmptyString) {
    tx_gid_ = new ::std::string;
  }
  tx_gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTxBlockRequest::mutable_tx_gid() {
  set_has_tx_gid();
  if (tx_gid_ == &::google::protobuf::internal::kEmptyString) {
    tx_gid_ = new ::std::string;
  }
  return tx_gid_;
}
inline ::std::string* GetTxBlockRequest::release_tx_gid() {
  clear_has_tx_gid();
  if (tx_gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tx_gid_;
    tx_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTxBlockRequest::set_allocated_tx_gid(::std::string* tx_gid) {
  if (tx_gid_ != &::google::protobuf::internal::kEmptyString) {
    delete tx_gid_;
  }
  if (tx_gid) {
    set_has_tx_gid();
    tx_gid_ = tx_gid;
  } else {
    clear_has_tx_gid();
    tx_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes block_hash = 2;
inline bool GetTxBlockRequest::has_block_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTxBlockRequest::set_has_block_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTxBlockRequest::clear_has_block_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTxBlockRequest::clear_block_hash() {
  if (block_hash_ != &::google::protobuf::internal::kEmptyString) {
    block_hash_->clear();
  }
  clear_has_block_hash();
}
inline const ::std::string& GetTxBlockRequest::block_hash() const {
  return *block_hash_;
}
inline void GetTxBlockRequest::set_block_hash(const ::std::string& value) {
  set_has_block_hash();
  if (block_hash_ == &::google::protobuf::internal::kEmptyString) {
    block_hash_ = new ::std::string;
  }
  block_hash_->assign(value);
}
inline void GetTxBlockRequest::set_block_hash(const char* value) {
  set_has_block_hash();
  if (block_hash_ == &::google::protobuf::internal::kEmptyString) {
    block_hash_ = new ::std::string;
  }
  block_hash_->assign(value);
}
inline void GetTxBlockRequest::set_block_hash(const void* value, size_t size) {
  set_has_block_hash();
  if (block_hash_ == &::google::protobuf::internal::kEmptyString) {
    block_hash_ = new ::std::string;
  }
  block_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTxBlockRequest::mutable_block_hash() {
  set_has_block_hash();
  if (block_hash_ == &::google::protobuf::internal::kEmptyString) {
    block_hash_ = new ::std::string;
  }
  return block_hash_;
}
inline ::std::string* GetTxBlockRequest::release_block_hash() {
  clear_has_block_hash();
  if (block_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_hash_;
    block_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTxBlockRequest::set_allocated_block_hash(::std::string* block_hash) {
  if (block_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete block_hash_;
  }
  if (block_hash) {
    set_has_block_hash();
    block_hash_ = block_hash;
  } else {
    clear_has_block_hash();
    block_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool from = 3;
inline bool GetTxBlockRequest::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTxBlockRequest::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTxBlockRequest::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTxBlockRequest::clear_from() {
  from_ = false;
  clear_has_from();
}
inline bool GetTxBlockRequest::from() const {
  return from_;
}
inline void GetTxBlockRequest::set_from(bool value) {
  set_has_from();
  from_ = value;
}

// optional uint64 height = 4;
inline bool GetTxBlockRequest::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetTxBlockRequest::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetTxBlockRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetTxBlockRequest::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 GetTxBlockRequest::height() const {
  return height_;
}
inline void GetTxBlockRequest::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// optional bytes account_address = 5;
inline bool GetTxBlockRequest::has_account_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetTxBlockRequest::set_has_account_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetTxBlockRequest::clear_has_account_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetTxBlockRequest::clear_account_address() {
  if (account_address_ != &::google::protobuf::internal::kEmptyString) {
    account_address_->clear();
  }
  clear_has_account_address();
}
inline const ::std::string& GetTxBlockRequest::account_address() const {
  return *account_address_;
}
inline void GetTxBlockRequest::set_account_address(const ::std::string& value) {
  set_has_account_address();
  if (account_address_ == &::google::protobuf::internal::kEmptyString) {
    account_address_ = new ::std::string;
  }
  account_address_->assign(value);
}
inline void GetTxBlockRequest::set_account_address(const char* value) {
  set_has_account_address();
  if (account_address_ == &::google::protobuf::internal::kEmptyString) {
    account_address_ = new ::std::string;
  }
  account_address_->assign(value);
}
inline void GetTxBlockRequest::set_account_address(const void* value, size_t size) {
  set_has_account_address();
  if (account_address_ == &::google::protobuf::internal::kEmptyString) {
    account_address_ = new ::std::string;
  }
  account_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTxBlockRequest::mutable_account_address() {
  set_has_account_address();
  if (account_address_ == &::google::protobuf::internal::kEmptyString) {
    account_address_ = new ::std::string;
  }
  return account_address_;
}
inline ::std::string* GetTxBlockRequest::release_account_address() {
  clear_has_account_address();
  if (account_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_address_;
    account_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTxBlockRequest::set_allocated_account_address(::std::string* account_address) {
  if (account_address_ != &::google::protobuf::internal::kEmptyString) {
    delete account_address_;
  }
  if (account_address) {
    set_has_account_address();
    account_address_ = account_address;
  } else {
    clear_has_account_address();
    account_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetTxBlockResponse

// optional bytes block = 1;
inline bool GetTxBlockResponse::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockResponse::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockResponse::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockResponse::clear_block() {
  if (block_ != &::google::protobuf::internal::kEmptyString) {
    block_->clear();
  }
  clear_has_block();
}
inline const ::std::string& GetTxBlockResponse::block() const {
  return *block_;
}
inline void GetTxBlockResponse::set_block(const ::std::string& value) {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  block_->assign(value);
}
inline void GetTxBlockResponse::set_block(const char* value) {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  block_->assign(value);
}
inline void GetTxBlockResponse::set_block(const void* value, size_t size) {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  block_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTxBlockResponse::mutable_block() {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  return block_;
}
inline ::std::string* GetTxBlockResponse::release_block() {
  clear_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_;
    block_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTxBlockResponse::set_allocated_block(::std::string* block) {
  if (block_ != &::google::protobuf::internal::kEmptyString) {
    delete block_;
  }
  if (block) {
    set_has_block();
    block_ = block;
  } else {
    clear_has_block();
    block_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountHeightRequest

// optional bytes account_addr = 1;
inline bool AccountHeightRequest::has_account_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountHeightRequest::set_has_account_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountHeightRequest::clear_has_account_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountHeightRequest::clear_account_addr() {
  if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
    account_addr_->clear();
  }
  clear_has_account_addr();
}
inline const ::std::string& AccountHeightRequest::account_addr() const {
  return *account_addr_;
}
inline void AccountHeightRequest::set_account_addr(const ::std::string& value) {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  account_addr_->assign(value);
}
inline void AccountHeightRequest::set_account_addr(const char* value) {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  account_addr_->assign(value);
}
inline void AccountHeightRequest::set_account_addr(const void* value, size_t size) {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  account_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountHeightRequest::mutable_account_addr() {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  return account_addr_;
}
inline ::std::string* AccountHeightRequest::release_account_addr() {
  clear_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_addr_;
    account_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountHeightRequest::set_allocated_account_addr(::std::string* account_addr) {
  if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete account_addr_;
  }
  if (account_addr) {
    set_has_account_addr();
    account_addr_ = account_addr;
  } else {
    clear_has_account_addr();
    account_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 index = 2;
inline bool AccountHeightRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountHeightRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountHeightRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountHeightRequest::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 AccountHeightRequest::index() const {
  return index_;
}
inline void AccountHeightRequest::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
}

// optional int32 count = 3;
inline bool AccountHeightRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountHeightRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountHeightRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountHeightRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 AccountHeightRequest::count() const {
  return count_;
}
inline void AccountHeightRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// AccountHeightResponse

// repeated uint64 heights = 1;
inline int AccountHeightResponse::heights_size() const {
  return heights_.size();
}
inline void AccountHeightResponse::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 AccountHeightResponse::heights(int index) const {
  return heights_.Get(index);
}
inline void AccountHeightResponse::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
}
inline void AccountHeightResponse::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AccountHeightResponse::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AccountHeightResponse::mutable_heights() {
  return &heights_;
}

// optional bytes account_addr = 2;
inline bool AccountHeightResponse::has_account_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountHeightResponse::set_has_account_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountHeightResponse::clear_has_account_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountHeightResponse::clear_account_addr() {
  if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
    account_addr_->clear();
  }
  clear_has_account_addr();
}
inline const ::std::string& AccountHeightResponse::account_addr() const {
  return *account_addr_;
}
inline void AccountHeightResponse::set_account_addr(const ::std::string& value) {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  account_addr_->assign(value);
}
inline void AccountHeightResponse::set_account_addr(const char* value) {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  account_addr_->assign(value);
}
inline void AccountHeightResponse::set_account_addr(const void* value, size_t size) {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  account_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountHeightResponse::mutable_account_addr() {
  set_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    account_addr_ = new ::std::string;
  }
  return account_addr_;
}
inline ::std::string* AccountHeightResponse::release_account_addr() {
  clear_has_account_addr();
  if (account_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_addr_;
    account_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountHeightResponse::set_allocated_account_addr(::std::string* account_addr) {
  if (account_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete account_addr_;
  }
  if (account_addr) {
    set_has_account_addr();
    account_addr_ = account_addr;
  } else {
    clear_has_account_addr();
    account_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes type = 3;
inline bool AccountHeightResponse::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountHeightResponse::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountHeightResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountHeightResponse::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& AccountHeightResponse::type() const {
  return *type_;
}
inline void AccountHeightResponse::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void AccountHeightResponse::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void AccountHeightResponse::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountHeightResponse::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* AccountHeightResponse::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountHeightResponse::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountAttrRequest

// optional bytes account = 1;
inline bool AccountAttrRequest::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountAttrRequest::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountAttrRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountAttrRequest::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountAttrRequest::account() const {
  return *account_;
}
inline void AccountAttrRequest::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountAttrRequest::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountAttrRequest::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountAttrRequest::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* AccountAttrRequest::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountAttrRequest::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes attr_key = 2;
inline bool AccountAttrRequest::has_attr_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountAttrRequest::set_has_attr_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountAttrRequest::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountAttrRequest::clear_attr_key() {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    attr_key_->clear();
  }
  clear_has_attr_key();
}
inline const ::std::string& AccountAttrRequest::attr_key() const {
  return *attr_key_;
}
inline void AccountAttrRequest::set_attr_key(const ::std::string& value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void AccountAttrRequest::set_attr_key(const char* value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void AccountAttrRequest::set_attr_key(const void* value, size_t size) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountAttrRequest::mutable_attr_key() {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  return attr_key_;
}
inline ::std::string* AccountAttrRequest::release_attr_key() {
  clear_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attr_key_;
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountAttrRequest::set_allocated_attr_key(::std::string* attr_key) {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (attr_key) {
    set_has_attr_key();
    attr_key_ = attr_key;
  } else {
    clear_has_attr_key();
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 height = 3;
inline bool AccountAttrRequest::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountAttrRequest::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountAttrRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountAttrRequest::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 AccountAttrRequest::height() const {
  return height_;
}
inline void AccountAttrRequest::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// AccountAttrResponse

// optional bytes account = 1;
inline bool AccountAttrResponse::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountAttrResponse::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountAttrResponse::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountAttrResponse::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountAttrResponse::account() const {
  return *account_;
}
inline void AccountAttrResponse::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountAttrResponse::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountAttrResponse::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountAttrResponse::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* AccountAttrResponse::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountAttrResponse::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes attr_key = 2;
inline bool AccountAttrResponse::has_attr_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountAttrResponse::set_has_attr_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountAttrResponse::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountAttrResponse::clear_attr_key() {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    attr_key_->clear();
  }
  clear_has_attr_key();
}
inline const ::std::string& AccountAttrResponse::attr_key() const {
  return *attr_key_;
}
inline void AccountAttrResponse::set_attr_key(const ::std::string& value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void AccountAttrResponse::set_attr_key(const char* value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void AccountAttrResponse::set_attr_key(const void* value, size_t size) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountAttrResponse::mutable_attr_key() {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  return attr_key_;
}
inline ::std::string* AccountAttrResponse::release_attr_key() {
  clear_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attr_key_;
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountAttrResponse::set_allocated_attr_key(::std::string* attr_key) {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (attr_key) {
    set_has_attr_key();
    attr_key_ = attr_key;
  } else {
    clear_has_attr_key();
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 height = 3;
inline bool AccountAttrResponse::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountAttrResponse::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountAttrResponse::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountAttrResponse::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 AccountAttrResponse::height() const {
  return height_;
}
inline void AccountAttrResponse::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// optional bytes block = 4;
inline bool AccountAttrResponse::has_block() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountAttrResponse::set_has_block() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountAttrResponse::clear_has_block() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountAttrResponse::clear_block() {
  if (block_ != &::google::protobuf::internal::kEmptyString) {
    block_->clear();
  }
  clear_has_block();
}
inline const ::std::string& AccountAttrResponse::block() const {
  return *block_;
}
inline void AccountAttrResponse::set_block(const ::std::string& value) {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  block_->assign(value);
}
inline void AccountAttrResponse::set_block(const char* value) {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  block_->assign(value);
}
inline void AccountAttrResponse::set_block(const void* value, size_t size) {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  block_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountAttrResponse::mutable_block() {
  set_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    block_ = new ::std::string;
  }
  return block_;
}
inline ::std::string* AccountAttrResponse::release_block() {
  clear_has_block();
  if (block_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_;
    block_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountAttrResponse::set_allocated_block(::std::string* block) {
  if (block_ != &::google::protobuf::internal::kEmptyString) {
    delete block_;
  }
  if (block) {
    set_has_block();
    block_ = block;
  } else {
    clear_has_block();
    block_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateVpnCountRequest

// optional uint64 account_hash = 1;
inline bool UpdateVpnCountRequest::has_account_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateVpnCountRequest::set_has_account_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateVpnCountRequest::clear_has_account_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateVpnCountRequest::clear_account_hash() {
  account_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_account_hash();
}
inline ::google::protobuf::uint64 UpdateVpnCountRequest::account_hash() const {
  return account_hash_;
}
inline void UpdateVpnCountRequest::set_account_hash(::google::protobuf::uint64 value) {
  set_has_account_hash();
  account_hash_ = value;
}

// optional bytes ip = 2;
inline bool UpdateVpnCountRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateVpnCountRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateVpnCountRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateVpnCountRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UpdateVpnCountRequest::ip() const {
  return *ip_;
}
inline void UpdateVpnCountRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UpdateVpnCountRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UpdateVpnCountRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateVpnCountRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* UpdateVpnCountRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateVpnCountRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes old_ip = 3;
inline bool UpdateVpnCountRequest::has_old_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateVpnCountRequest::set_has_old_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateVpnCountRequest::clear_has_old_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateVpnCountRequest::clear_old_ip() {
  if (old_ip_ != &::google::protobuf::internal::kEmptyString) {
    old_ip_->clear();
  }
  clear_has_old_ip();
}
inline const ::std::string& UpdateVpnCountRequest::old_ip() const {
  return *old_ip_;
}
inline void UpdateVpnCountRequest::set_old_ip(const ::std::string& value) {
  set_has_old_ip();
  if (old_ip_ == &::google::protobuf::internal::kEmptyString) {
    old_ip_ = new ::std::string;
  }
  old_ip_->assign(value);
}
inline void UpdateVpnCountRequest::set_old_ip(const char* value) {
  set_has_old_ip();
  if (old_ip_ == &::google::protobuf::internal::kEmptyString) {
    old_ip_ = new ::std::string;
  }
  old_ip_->assign(value);
}
inline void UpdateVpnCountRequest::set_old_ip(const void* value, size_t size) {
  set_has_old_ip();
  if (old_ip_ == &::google::protobuf::internal::kEmptyString) {
    old_ip_ = new ::std::string;
  }
  old_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateVpnCountRequest::mutable_old_ip() {
  set_has_old_ip();
  if (old_ip_ == &::google::protobuf::internal::kEmptyString) {
    old_ip_ = new ::std::string;
  }
  return old_ip_;
}
inline ::std::string* UpdateVpnCountRequest::release_old_ip() {
  clear_has_old_ip();
  if (old_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = old_ip_;
    old_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateVpnCountRequest::set_allocated_old_ip(::std::string* old_ip) {
  if (old_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete old_ip_;
  }
  if (old_ip) {
    set_has_old_ip();
    old_ip_ = old_ip;
  } else {
    clear_has_old_ip();
    old_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes uid = 4;
inline bool UpdateVpnCountRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateVpnCountRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateVpnCountRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateVpnCountRequest::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& UpdateVpnCountRequest::uid() const {
  return *uid_;
}
inline void UpdateVpnCountRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void UpdateVpnCountRequest::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void UpdateVpnCountRequest::set_uid(const void* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateVpnCountRequest::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* UpdateVpnCountRequest::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateVpnCountRequest::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool just_set = 5;
inline bool UpdateVpnCountRequest::has_just_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateVpnCountRequest::set_has_just_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateVpnCountRequest::clear_has_just_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateVpnCountRequest::clear_just_set() {
  just_set_ = false;
  clear_has_just_set();
}
inline bool UpdateVpnCountRequest::just_set() const {
  return just_set_;
}
inline void UpdateVpnCountRequest::set_just_set(bool value) {
  set_has_just_set();
  just_set_ = value;
}

// -------------------------------------------------------------------

// VpnCountItem

// optional bytes ip = 1;
inline bool VpnCountItem::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VpnCountItem::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VpnCountItem::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VpnCountItem::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& VpnCountItem::ip() const {
  return *ip_;
}
inline void VpnCountItem::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void VpnCountItem::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void VpnCountItem::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VpnCountItem::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* VpnCountItem::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VpnCountItem::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 count = 2;
inline bool VpnCountItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VpnCountItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VpnCountItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VpnCountItem::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 VpnCountItem::count() const {
  return count_;
}
inline void VpnCountItem::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// UpdateVpnCountResponse

// repeated .zjchain.block.protobuf.VpnCountItem vpn_nodes = 1;
inline int UpdateVpnCountResponse::vpn_nodes_size() const {
  return vpn_nodes_.size();
}
inline void UpdateVpnCountResponse::clear_vpn_nodes() {
  vpn_nodes_.Clear();
}
inline const ::zjchain::block::protobuf::VpnCountItem& UpdateVpnCountResponse::vpn_nodes(int index) const {
  return vpn_nodes_.Get(index);
}
inline ::zjchain::block::protobuf::VpnCountItem* UpdateVpnCountResponse::mutable_vpn_nodes(int index) {
  return vpn_nodes_.Mutable(index);
}
inline ::zjchain::block::protobuf::VpnCountItem* UpdateVpnCountResponse::add_vpn_nodes() {
  return vpn_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >&
UpdateVpnCountResponse::vpn_nodes() const {
  return vpn_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::VpnCountItem >*
UpdateVpnCountResponse::mutable_vpn_nodes() {
  return &vpn_nodes_;
}

// -------------------------------------------------------------------

// GetAccountInitInfoRequest

// optional bytes id = 1;
inline bool GetAccountInitInfoRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccountInitInfoRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccountInitInfoRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GetAccountInitInfoRequest::id() const {
  return *id_;
}
inline void GetAccountInitInfoRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountInitInfoRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountInitInfoRequest::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAccountInitInfoRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* GetAccountInitInfoRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAccountInitInfoRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 count = 2;
inline bool GetAccountInitInfoRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccountInitInfoRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccountInitInfoRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetAccountInitInfoRequest::count() const {
  return count_;
}
inline void GetAccountInitInfoRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint64 height = 3;
inline bool GetAccountInitInfoRequest::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAccountInitInfoRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAccountInitInfoRequest::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 GetAccountInitInfoRequest::height() const {
  return height_;
}
inline void GetAccountInitInfoRequest::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
}

// optional uint64 net_id = 4;
inline bool GetAccountInitInfoRequest::has_net_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_net_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetAccountInitInfoRequest::clear_has_net_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetAccountInitInfoRequest::clear_net_id() {
  net_id_ = GOOGLE_ULONGLONG(0);
  clear_has_net_id();
}
inline ::google::protobuf::uint64 GetAccountInitInfoRequest::net_id() const {
  return net_id_;
}
inline void GetAccountInitInfoRequest::set_net_id(::google::protobuf::uint64 value) {
  set_has_net_id();
  net_id_ = value;
}

// optional uint64 index = 5;
inline bool GetAccountInitInfoRequest::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetAccountInitInfoRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetAccountInitInfoRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 GetAccountInitInfoRequest::index() const {
  return index_;
}
inline void GetAccountInitInfoRequest::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// GetAccountInitInfoResponse

// optional uint64 balance = 1;
inline bool GetAccountInitInfoResponse::has_balance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccountInitInfoResponse::set_has_balance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccountInitInfoResponse::clear_has_balance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccountInitInfoResponse::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 GetAccountInitInfoResponse::balance() const {
  return balance_;
}
inline void GetAccountInitInfoResponse::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
}

// repeated .zjchain.block.protobuf.Block block_list = 2;
inline int GetAccountInitInfoResponse::block_list_size() const {
  return block_list_.size();
}
inline void GetAccountInitInfoResponse::clear_block_list() {
  block_list_.Clear();
}
inline const ::zjchain::block::protobuf::Block& GetAccountInitInfoResponse::block_list(int index) const {
  return block_list_.Get(index);
}
inline ::zjchain::block::protobuf::Block* GetAccountInitInfoResponse::mutable_block_list(int index) {
  return block_list_.Mutable(index);
}
inline ::zjchain::block::protobuf::Block* GetAccountInitInfoResponse::add_block_list() {
  return block_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::Block >&
GetAccountInitInfoResponse::block_list() const {
  return block_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::Block >*
GetAccountInitInfoResponse::mutable_block_list() {
  return &block_list_;
}

// optional bytes id = 3;
inline bool GetAccountInitInfoResponse::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAccountInitInfoResponse::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAccountInitInfoResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAccountInitInfoResponse::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GetAccountInitInfoResponse::id() const {
  return *id_;
}
inline void GetAccountInitInfoResponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountInitInfoResponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountInitInfoResponse::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAccountInitInfoResponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* GetAccountInitInfoResponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAccountInitInfoResponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 max_index = 4;
inline bool GetAccountInitInfoResponse::has_max_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetAccountInitInfoResponse::set_has_max_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetAccountInitInfoResponse::clear_has_max_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetAccountInitInfoResponse::clear_max_index() {
  max_index_ = GOOGLE_ULONGLONG(0);
  clear_has_max_index();
}
inline ::google::protobuf::uint64 GetAccountInitInfoResponse::max_index() const {
  return max_index_;
}
inline void GetAccountInitInfoResponse::set_max_index(::google::protobuf::uint64 value) {
  set_has_max_index();
  max_index_ = value;
}

// -------------------------------------------------------------------

// UpdateVpnActiveRequest

// optional bytes id = 1;
inline bool UpdateVpnActiveRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateVpnActiveRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateVpnActiveRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateVpnActiveRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& UpdateVpnActiveRequest::id() const {
  return *id_;
}
inline void UpdateVpnActiveRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void UpdateVpnActiveRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void UpdateVpnActiveRequest::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateVpnActiveRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* UpdateVpnActiveRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateVpnActiveRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ip = 2;
inline bool UpdateVpnActiveRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateVpnActiveRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateVpnActiveRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateVpnActiveRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UpdateVpnActiveRequest::ip() const {
  return *ip_;
}
inline void UpdateVpnActiveRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UpdateVpnActiveRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UpdateVpnActiveRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateVpnActiveRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* UpdateVpnActiveRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateVpnActiveRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdRewardRequest

// optional bytes id = 1;
inline bool AdRewardRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdRewardRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdRewardRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdRewardRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AdRewardRequest::id() const {
  return *id_;
}
inline void AdRewardRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AdRewardRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AdRewardRequest::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdRewardRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* AdRewardRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdRewardRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes reward_key = 2;
inline bool AdRewardRequest::has_reward_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdRewardRequest::set_has_reward_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdRewardRequest::clear_has_reward_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdRewardRequest::clear_reward_key() {
  if (reward_key_ != &::google::protobuf::internal::kEmptyString) {
    reward_key_->clear();
  }
  clear_has_reward_key();
}
inline const ::std::string& AdRewardRequest::reward_key() const {
  return *reward_key_;
}
inline void AdRewardRequest::set_reward_key(const ::std::string& value) {
  set_has_reward_key();
  if (reward_key_ == &::google::protobuf::internal::kEmptyString) {
    reward_key_ = new ::std::string;
  }
  reward_key_->assign(value);
}
inline void AdRewardRequest::set_reward_key(const char* value) {
  set_has_reward_key();
  if (reward_key_ == &::google::protobuf::internal::kEmptyString) {
    reward_key_ = new ::std::string;
  }
  reward_key_->assign(value);
}
inline void AdRewardRequest::set_reward_key(const void* value, size_t size) {
  set_has_reward_key();
  if (reward_key_ == &::google::protobuf::internal::kEmptyString) {
    reward_key_ = new ::std::string;
  }
  reward_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdRewardRequest::mutable_reward_key() {
  set_has_reward_key();
  if (reward_key_ == &::google::protobuf::internal::kEmptyString) {
    reward_key_ = new ::std::string;
  }
  return reward_key_;
}
inline ::std::string* AdRewardRequest::release_reward_key() {
  clear_has_reward_key();
  if (reward_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_key_;
    reward_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdRewardRequest::set_allocated_reward_key(::std::string* reward_key) {
  if (reward_key_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_key_;
  }
  if (reward_key) {
    set_has_reward_key();
    reward_key_ = reward_key;
  } else {
    clear_has_reward_key();
    reward_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes gid = 3;
inline bool AdRewardRequest::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdRewardRequest::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdRewardRequest::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdRewardRequest::clear_gid() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    gid_->clear();
  }
  clear_has_gid();
}
inline const ::std::string& AdRewardRequest::gid() const {
  return *gid_;
}
inline void AdRewardRequest::set_gid(const ::std::string& value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void AdRewardRequest::set_gid(const char* value) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(value);
}
inline void AdRewardRequest::set_gid(const void* value, size_t size) {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  gid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdRewardRequest::mutable_gid() {
  set_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    gid_ = new ::std::string;
  }
  return gid_;
}
inline ::std::string* AdRewardRequest::release_gid() {
  clear_has_gid();
  if (gid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gid_;
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdRewardRequest::set_allocated_gid(::std::string* gid) {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gid) {
    set_has_gid();
    gid_ = gid;
  } else {
    clear_has_gid();
    gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ElectStatisticInfo

// optional uint64 elect_height = 1;
inline bool ElectStatisticInfo::has_elect_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElectStatisticInfo::set_has_elect_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElectStatisticInfo::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElectStatisticInfo::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 ElectStatisticInfo::elect_height() const {
  return elect_height_;
}
inline void ElectStatisticInfo::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// repeated uint32 succ_tx_count = 2;
inline int ElectStatisticInfo::succ_tx_count_size() const {
  return succ_tx_count_.size();
}
inline void ElectStatisticInfo::clear_succ_tx_count() {
  succ_tx_count_.Clear();
}
inline ::google::protobuf::uint32 ElectStatisticInfo::succ_tx_count(int index) const {
  return succ_tx_count_.Get(index);
}
inline void ElectStatisticInfo::set_succ_tx_count(int index, ::google::protobuf::uint32 value) {
  succ_tx_count_.Set(index, value);
}
inline void ElectStatisticInfo::add_succ_tx_count(::google::protobuf::uint32 value) {
  succ_tx_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ElectStatisticInfo::succ_tx_count() const {
  return succ_tx_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ElectStatisticInfo::mutable_succ_tx_count() {
  return &succ_tx_count_;
}

// repeated uint32 lof_leaders = 3;
inline int ElectStatisticInfo::lof_leaders_size() const {
  return lof_leaders_.size();
}
inline void ElectStatisticInfo::clear_lof_leaders() {
  lof_leaders_.Clear();
}
inline ::google::protobuf::uint32 ElectStatisticInfo::lof_leaders(int index) const {
  return lof_leaders_.Get(index);
}
inline void ElectStatisticInfo::set_lof_leaders(int index, ::google::protobuf::uint32 value) {
  lof_leaders_.Set(index, value);
}
inline void ElectStatisticInfo::add_lof_leaders(::google::protobuf::uint32 value) {
  lof_leaders_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ElectStatisticInfo::lof_leaders() const {
  return lof_leaders_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ElectStatisticInfo::mutable_lof_leaders() {
  return &lof_leaders_;
}

// -------------------------------------------------------------------

// StatisticInfo

// optional uint64 timeblock_height = 1;
inline bool StatisticInfo::has_timeblock_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticInfo::set_has_timeblock_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticInfo::clear_has_timeblock_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticInfo::clear_timeblock_height() {
  timeblock_height_ = GOOGLE_ULONGLONG(0);
  clear_has_timeblock_height();
}
inline ::google::protobuf::uint64 StatisticInfo::timeblock_height() const {
  return timeblock_height_;
}
inline void StatisticInfo::set_timeblock_height(::google::protobuf::uint64 value) {
  set_has_timeblock_height();
  timeblock_height_ = value;
}

// optional uint32 all_tx_count = 2;
inline bool StatisticInfo::has_all_tx_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatisticInfo::set_has_all_tx_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatisticInfo::clear_has_all_tx_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatisticInfo::clear_all_tx_count() {
  all_tx_count_ = 0u;
  clear_has_all_tx_count();
}
inline ::google::protobuf::uint32 StatisticInfo::all_tx_count() const {
  return all_tx_count_;
}
inline void StatisticInfo::set_all_tx_count(::google::protobuf::uint32 value) {
  set_has_all_tx_count();
  all_tx_count_ = value;
}

// repeated .zjchain.block.protobuf.ElectStatisticInfo elect_statistic = 3;
inline int StatisticInfo::elect_statistic_size() const {
  return elect_statistic_.size();
}
inline void StatisticInfo::clear_elect_statistic() {
  elect_statistic_.Clear();
}
inline const ::zjchain::block::protobuf::ElectStatisticInfo& StatisticInfo::elect_statistic(int index) const {
  return elect_statistic_.Get(index);
}
inline ::zjchain::block::protobuf::ElectStatisticInfo* StatisticInfo::mutable_elect_statistic(int index) {
  return elect_statistic_.Mutable(index);
}
inline ::zjchain::block::protobuf::ElectStatisticInfo* StatisticInfo::add_elect_statistic() {
  return elect_statistic_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >&
StatisticInfo::elect_statistic() const {
  return elect_statistic_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::block::protobuf::ElectStatisticInfo >*
StatisticInfo::mutable_elect_statistic() {
  return &elect_statistic_;
}

// -------------------------------------------------------------------

// RefreshPoolHeightRequest

// repeated uint64 heights = 1;
inline int RefreshPoolHeightRequest::heights_size() const {
  return heights_.size();
}
inline void RefreshPoolHeightRequest::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 RefreshPoolHeightRequest::heights(int index) const {
  return heights_.Get(index);
}
inline void RefreshPoolHeightRequest::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
}
inline void RefreshPoolHeightRequest::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RefreshPoolHeightRequest::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RefreshPoolHeightRequest::mutable_heights() {
  return &heights_;
}

// -------------------------------------------------------------------

// RefreshPoolHeightResponse

// repeated uint64 heights = 1;
inline int RefreshPoolHeightResponse::heights_size() const {
  return heights_.size();
}
inline void RefreshPoolHeightResponse::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 RefreshPoolHeightResponse::heights(int index) const {
  return heights_.Get(index);
}
inline void RefreshPoolHeightResponse::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
}
inline void RefreshPoolHeightResponse::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RefreshPoolHeightResponse::heights() const {
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RefreshPoolHeightResponse::mutable_heights() {
  return &heights_;
}

// -------------------------------------------------------------------

// GetAccountShardRequest

// optional bytes id = 1;
inline bool GetAccountShardRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccountShardRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccountShardRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccountShardRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GetAccountShardRequest::id() const {
  return *id_;
}
inline void GetAccountShardRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountShardRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountShardRequest::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAccountShardRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* GetAccountShardRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAccountShardRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetAccountShardReponse

// optional bytes id = 1;
inline bool GetAccountShardReponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccountShardReponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccountShardReponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccountShardReponse::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GetAccountShardReponse::id() const {
  return *id_;
}
inline void GetAccountShardReponse::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountShardReponse::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetAccountShardReponse::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAccountShardReponse::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* GetAccountShardReponse::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAccountShardReponse::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 shard_id = 2;
inline bool GetAccountShardReponse::has_shard_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccountShardReponse::set_has_shard_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccountShardReponse::clear_has_shard_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccountShardReponse::clear_shard_id() {
  shard_id_ = 0u;
  clear_has_shard_id();
}
inline ::google::protobuf::uint32 GetAccountShardReponse::shard_id() const {
  return shard_id_;
}
inline void GetAccountShardReponse::set_shard_id(::google::protobuf::uint32 value) {
  set_has_shard_id();
  shard_id_ = value;
}

// -------------------------------------------------------------------

// CrossShardingTosMessage

// optional .zjchain.block.protobuf.Block block = 1;
inline bool CrossShardingTosMessage::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrossShardingTosMessage::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrossShardingTosMessage::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrossShardingTosMessage::clear_block() {
  if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
  clear_has_block();
}
inline const ::zjchain::block::protobuf::Block& CrossShardingTosMessage::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::zjchain::block::protobuf::Block* CrossShardingTosMessage::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::zjchain::block::protobuf::Block;
  return block_;
}
inline ::zjchain::block::protobuf::Block* CrossShardingTosMessage::release_block() {
  clear_has_block();
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline void CrossShardingTosMessage::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// -------------------------------------------------------------------

// CrossShardingStatisticMessage

// optional .zjchain.block.protobuf.Block block = 1;
inline bool CrossShardingStatisticMessage::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrossShardingStatisticMessage::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrossShardingStatisticMessage::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrossShardingStatisticMessage::clear_block() {
  if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
  clear_has_block();
}
inline const ::zjchain::block::protobuf::Block& CrossShardingStatisticMessage::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::zjchain::block::protobuf::Block* CrossShardingStatisticMessage::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::zjchain::block::protobuf::Block;
  return block_;
}
inline ::zjchain::block::protobuf::Block* CrossShardingStatisticMessage::release_block() {
  clear_has_block();
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline void CrossShardingStatisticMessage::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// -------------------------------------------------------------------

// ElectBlockMessage

// optional .zjchain.block.protobuf.Block block = 1;
inline bool ElectBlockMessage::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElectBlockMessage::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElectBlockMessage::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElectBlockMessage::clear_block() {
  if (block_ != NULL) block_->::zjchain::block::protobuf::Block::Clear();
  clear_has_block();
}
inline const ::zjchain::block::protobuf::Block& ElectBlockMessage::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::zjchain::block::protobuf::Block* ElectBlockMessage::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::zjchain::block::protobuf::Block;
  return block_;
}
inline ::zjchain::block::protobuf::Block* ElectBlockMessage::release_block() {
  clear_has_block();
  ::zjchain::block::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline void ElectBlockMessage::set_allocated_block(::zjchain::block::protobuf::Block* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// -------------------------------------------------------------------

// ShardToTxMessage

// repeated .zjchain.pools.protobuf.ShardToTxItem to_txs = 1;
inline int ShardToTxMessage::to_txs_size() const {
  return to_txs_.size();
}
inline void ShardToTxMessage::clear_to_txs() {
  to_txs_.Clear();
}
inline const ::zjchain::pools::protobuf::ShardToTxItem& ShardToTxMessage::to_txs(int index) const {
  return to_txs_.Get(index);
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ShardToTxMessage::mutable_to_txs(int index) {
  return to_txs_.Mutable(index);
}
inline ::zjchain::pools::protobuf::ShardToTxItem* ShardToTxMessage::add_to_txs() {
  return to_txs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >&
ShardToTxMessage::to_txs() const {
  return to_txs_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::pools::protobuf::ShardToTxItem >*
ShardToTxMessage::mutable_to_txs() {
  return &to_txs_;
}

// optional uint32 leader_idx = 2;
inline bool ShardToTxMessage::has_leader_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShardToTxMessage::set_has_leader_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShardToTxMessage::clear_has_leader_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShardToTxMessage::clear_leader_idx() {
  leader_idx_ = 0u;
  clear_has_leader_idx();
}
inline ::google::protobuf::uint32 ShardToTxMessage::leader_idx() const {
  return leader_idx_;
}
inline void ShardToTxMessage::set_leader_idx(::google::protobuf::uint32 value) {
  set_has_leader_idx();
  leader_idx_ = value;
}

// optional uint64 elect_height = 3;
inline bool ShardToTxMessage::has_elect_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShardToTxMessage::set_has_elect_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShardToTxMessage::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShardToTxMessage::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 ShardToTxMessage::elect_height() const {
  return elect_height_;
}
inline void ShardToTxMessage::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// optional int32 leader_to_idx = 4;
inline bool ShardToTxMessage::has_leader_to_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShardToTxMessage::set_has_leader_to_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShardToTxMessage::clear_has_leader_to_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShardToTxMessage::clear_leader_to_idx() {
  leader_to_idx_ = 0;
  clear_has_leader_to_idx();
}
inline ::google::protobuf::int32 ShardToTxMessage::leader_to_idx() const {
  return leader_to_idx_;
}
inline void ShardToTxMessage::set_leader_to_idx(::google::protobuf::int32 value) {
  set_has_leader_to_idx();
  leader_to_idx_ = value;
}

// -------------------------------------------------------------------

// StatisticTxMessage

// optional .zjchain.pools.protobuf.StatisticTxItem statistic = 1;
inline bool StatisticTxMessage::has_statistic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticTxMessage::set_has_statistic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticTxMessage::clear_has_statistic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticTxMessage::clear_statistic() {
  if (statistic_ != NULL) statistic_->::zjchain::pools::protobuf::StatisticTxItem::Clear();
  clear_has_statistic();
}
inline const ::zjchain::pools::protobuf::StatisticTxItem& StatisticTxMessage::statistic() const {
  return statistic_ != NULL ? *statistic_ : *default_instance_->statistic_;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* StatisticTxMessage::mutable_statistic() {
  set_has_statistic();
  if (statistic_ == NULL) statistic_ = new ::zjchain::pools::protobuf::StatisticTxItem;
  return statistic_;
}
inline ::zjchain::pools::protobuf::StatisticTxItem* StatisticTxMessage::release_statistic() {
  clear_has_statistic();
  ::zjchain::pools::protobuf::StatisticTxItem* temp = statistic_;
  statistic_ = NULL;
  return temp;
}
inline void StatisticTxMessage::set_allocated_statistic(::zjchain::pools::protobuf::StatisticTxItem* statistic) {
  delete statistic_;
  statistic_ = statistic;
  if (statistic) {
    set_has_statistic();
  } else {
    clear_has_statistic();
  }
}

// optional uint32 leader_idx = 2;
inline bool StatisticTxMessage::has_leader_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatisticTxMessage::set_has_leader_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatisticTxMessage::clear_has_leader_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatisticTxMessage::clear_leader_idx() {
  leader_idx_ = 0u;
  clear_has_leader_idx();
}
inline ::google::protobuf::uint32 StatisticTxMessage::leader_idx() const {
  return leader_idx_;
}
inline void StatisticTxMessage::set_leader_idx(::google::protobuf::uint32 value) {
  set_has_leader_idx();
  leader_idx_ = value;
}

// optional uint64 elect_height = 3;
inline bool StatisticTxMessage::has_elect_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatisticTxMessage::set_has_elect_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatisticTxMessage::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatisticTxMessage::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 StatisticTxMessage::elect_height() const {
  return elect_height_;
}
inline void StatisticTxMessage::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
}

// optional int32 leader_to_idx = 4;
inline bool StatisticTxMessage::has_leader_to_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatisticTxMessage::set_has_leader_to_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatisticTxMessage::clear_has_leader_to_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatisticTxMessage::clear_leader_to_idx() {
  leader_to_idx_ = 0;
  clear_has_leader_to_idx();
}
inline ::google::protobuf::int32 StatisticTxMessage::leader_to_idx() const {
  return leader_to_idx_;
}
inline void StatisticTxMessage::set_leader_to_idx(::google::protobuf::int32 value) {
  set_has_leader_to_idx();
  leader_to_idx_ = value;
}

// -------------------------------------------------------------------

// BlockMessage

// optional .zjchain.block.protobuf.GetTxBlockRequest block_req = 1;
inline bool BlockMessage::has_block_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMessage::set_has_block_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMessage::clear_has_block_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMessage::clear_block_req() {
  if (block_req_ != NULL) block_req_->::zjchain::block::protobuf::GetTxBlockRequest::Clear();
  clear_has_block_req();
}
inline const ::zjchain::block::protobuf::GetTxBlockRequest& BlockMessage::block_req() const {
  return block_req_ != NULL ? *block_req_ : *default_instance_->block_req_;
}
inline ::zjchain::block::protobuf::GetTxBlockRequest* BlockMessage::mutable_block_req() {
  set_has_block_req();
  if (block_req_ == NULL) block_req_ = new ::zjchain::block::protobuf::GetTxBlockRequest;
  return block_req_;
}
inline ::zjchain::block::protobuf::GetTxBlockRequest* BlockMessage::release_block_req() {
  clear_has_block_req();
  ::zjchain::block::protobuf::GetTxBlockRequest* temp = block_req_;
  block_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_block_req(::zjchain::block::protobuf::GetTxBlockRequest* block_req) {
  delete block_req_;
  block_req_ = block_req;
  if (block_req) {
    set_has_block_req();
  } else {
    clear_has_block_req();
  }
}

// optional .zjchain.block.protobuf.GetTxBlockResponse block_res = 2;
inline bool BlockMessage::has_block_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMessage::set_has_block_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMessage::clear_has_block_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMessage::clear_block_res() {
  if (block_res_ != NULL) block_res_->::zjchain::block::protobuf::GetTxBlockResponse::Clear();
  clear_has_block_res();
}
inline const ::zjchain::block::protobuf::GetTxBlockResponse& BlockMessage::block_res() const {
  return block_res_ != NULL ? *block_res_ : *default_instance_->block_res_;
}
inline ::zjchain::block::protobuf::GetTxBlockResponse* BlockMessage::mutable_block_res() {
  set_has_block_res();
  if (block_res_ == NULL) block_res_ = new ::zjchain::block::protobuf::GetTxBlockResponse;
  return block_res_;
}
inline ::zjchain::block::protobuf::GetTxBlockResponse* BlockMessage::release_block_res() {
  clear_has_block_res();
  ::zjchain::block::protobuf::GetTxBlockResponse* temp = block_res_;
  block_res_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_block_res(::zjchain::block::protobuf::GetTxBlockResponse* block_res) {
  delete block_res_;
  block_res_ = block_res;
  if (block_res) {
    set_has_block_res();
  } else {
    clear_has_block_res();
  }
}

// optional .zjchain.block.protobuf.AccountHeightRequest height_req = 3;
inline bool BlockMessage::has_height_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockMessage::set_has_height_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockMessage::clear_has_height_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockMessage::clear_height_req() {
  if (height_req_ != NULL) height_req_->::zjchain::block::protobuf::AccountHeightRequest::Clear();
  clear_has_height_req();
}
inline const ::zjchain::block::protobuf::AccountHeightRequest& BlockMessage::height_req() const {
  return height_req_ != NULL ? *height_req_ : *default_instance_->height_req_;
}
inline ::zjchain::block::protobuf::AccountHeightRequest* BlockMessage::mutable_height_req() {
  set_has_height_req();
  if (height_req_ == NULL) height_req_ = new ::zjchain::block::protobuf::AccountHeightRequest;
  return height_req_;
}
inline ::zjchain::block::protobuf::AccountHeightRequest* BlockMessage::release_height_req() {
  clear_has_height_req();
  ::zjchain::block::protobuf::AccountHeightRequest* temp = height_req_;
  height_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_height_req(::zjchain::block::protobuf::AccountHeightRequest* height_req) {
  delete height_req_;
  height_req_ = height_req;
  if (height_req) {
    set_has_height_req();
  } else {
    clear_has_height_req();
  }
}

// optional .zjchain.block.protobuf.AccountHeightResponse height_res = 4;
inline bool BlockMessage::has_height_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockMessage::set_has_height_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockMessage::clear_has_height_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockMessage::clear_height_res() {
  if (height_res_ != NULL) height_res_->::zjchain::block::protobuf::AccountHeightResponse::Clear();
  clear_has_height_res();
}
inline const ::zjchain::block::protobuf::AccountHeightResponse& BlockMessage::height_res() const {
  return height_res_ != NULL ? *height_res_ : *default_instance_->height_res_;
}
inline ::zjchain::block::protobuf::AccountHeightResponse* BlockMessage::mutable_height_res() {
  set_has_height_res();
  if (height_res_ == NULL) height_res_ = new ::zjchain::block::protobuf::AccountHeightResponse;
  return height_res_;
}
inline ::zjchain::block::protobuf::AccountHeightResponse* BlockMessage::release_height_res() {
  clear_has_height_res();
  ::zjchain::block::protobuf::AccountHeightResponse* temp = height_res_;
  height_res_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_height_res(::zjchain::block::protobuf::AccountHeightResponse* height_res) {
  delete height_res_;
  height_res_ = height_res;
  if (height_res) {
    set_has_height_res();
  } else {
    clear_has_height_res();
  }
}

// optional .zjchain.block.protobuf.AccountAttrRequest acc_attr_req = 5;
inline bool BlockMessage::has_acc_attr_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockMessage::set_has_acc_attr_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockMessage::clear_has_acc_attr_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockMessage::clear_acc_attr_req() {
  if (acc_attr_req_ != NULL) acc_attr_req_->::zjchain::block::protobuf::AccountAttrRequest::Clear();
  clear_has_acc_attr_req();
}
inline const ::zjchain::block::protobuf::AccountAttrRequest& BlockMessage::acc_attr_req() const {
  return acc_attr_req_ != NULL ? *acc_attr_req_ : *default_instance_->acc_attr_req_;
}
inline ::zjchain::block::protobuf::AccountAttrRequest* BlockMessage::mutable_acc_attr_req() {
  set_has_acc_attr_req();
  if (acc_attr_req_ == NULL) acc_attr_req_ = new ::zjchain::block::protobuf::AccountAttrRequest;
  return acc_attr_req_;
}
inline ::zjchain::block::protobuf::AccountAttrRequest* BlockMessage::release_acc_attr_req() {
  clear_has_acc_attr_req();
  ::zjchain::block::protobuf::AccountAttrRequest* temp = acc_attr_req_;
  acc_attr_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_acc_attr_req(::zjchain::block::protobuf::AccountAttrRequest* acc_attr_req) {
  delete acc_attr_req_;
  acc_attr_req_ = acc_attr_req;
  if (acc_attr_req) {
    set_has_acc_attr_req();
  } else {
    clear_has_acc_attr_req();
  }
}

// optional .zjchain.block.protobuf.AccountAttrResponse acc_attr_res = 6;
inline bool BlockMessage::has_acc_attr_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockMessage::set_has_acc_attr_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockMessage::clear_has_acc_attr_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockMessage::clear_acc_attr_res() {
  if (acc_attr_res_ != NULL) acc_attr_res_->::zjchain::block::protobuf::AccountAttrResponse::Clear();
  clear_has_acc_attr_res();
}
inline const ::zjchain::block::protobuf::AccountAttrResponse& BlockMessage::acc_attr_res() const {
  return acc_attr_res_ != NULL ? *acc_attr_res_ : *default_instance_->acc_attr_res_;
}
inline ::zjchain::block::protobuf::AccountAttrResponse* BlockMessage::mutable_acc_attr_res() {
  set_has_acc_attr_res();
  if (acc_attr_res_ == NULL) acc_attr_res_ = new ::zjchain::block::protobuf::AccountAttrResponse;
  return acc_attr_res_;
}
inline ::zjchain::block::protobuf::AccountAttrResponse* BlockMessage::release_acc_attr_res() {
  clear_has_acc_attr_res();
  ::zjchain::block::protobuf::AccountAttrResponse* temp = acc_attr_res_;
  acc_attr_res_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_acc_attr_res(::zjchain::block::protobuf::AccountAttrResponse* acc_attr_res) {
  delete acc_attr_res_;
  acc_attr_res_ = acc_attr_res;
  if (acc_attr_res) {
    set_has_acc_attr_res();
  } else {
    clear_has_acc_attr_res();
  }
}

// optional .zjchain.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
inline bool BlockMessage::has_up_vpn_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockMessage::set_has_up_vpn_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockMessage::clear_has_up_vpn_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockMessage::clear_up_vpn_req() {
  if (up_vpn_req_ != NULL) up_vpn_req_->::zjchain::block::protobuf::UpdateVpnCountRequest::Clear();
  clear_has_up_vpn_req();
}
inline const ::zjchain::block::protobuf::UpdateVpnCountRequest& BlockMessage::up_vpn_req() const {
  return up_vpn_req_ != NULL ? *up_vpn_req_ : *default_instance_->up_vpn_req_;
}
inline ::zjchain::block::protobuf::UpdateVpnCountRequest* BlockMessage::mutable_up_vpn_req() {
  set_has_up_vpn_req();
  if (up_vpn_req_ == NULL) up_vpn_req_ = new ::zjchain::block::protobuf::UpdateVpnCountRequest;
  return up_vpn_req_;
}
inline ::zjchain::block::protobuf::UpdateVpnCountRequest* BlockMessage::release_up_vpn_req() {
  clear_has_up_vpn_req();
  ::zjchain::block::protobuf::UpdateVpnCountRequest* temp = up_vpn_req_;
  up_vpn_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_up_vpn_req(::zjchain::block::protobuf::UpdateVpnCountRequest* up_vpn_req) {
  delete up_vpn_req_;
  up_vpn_req_ = up_vpn_req;
  if (up_vpn_req) {
    set_has_up_vpn_req();
  } else {
    clear_has_up_vpn_req();
  }
}

// optional .zjchain.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
inline bool BlockMessage::has_up_vpn_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockMessage::set_has_up_vpn_res() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockMessage::clear_has_up_vpn_res() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockMessage::clear_up_vpn_res() {
  if (up_vpn_res_ != NULL) up_vpn_res_->::zjchain::block::protobuf::UpdateVpnCountResponse::Clear();
  clear_has_up_vpn_res();
}
inline const ::zjchain::block::protobuf::UpdateVpnCountResponse& BlockMessage::up_vpn_res() const {
  return up_vpn_res_ != NULL ? *up_vpn_res_ : *default_instance_->up_vpn_res_;
}
inline ::zjchain::block::protobuf::UpdateVpnCountResponse* BlockMessage::mutable_up_vpn_res() {
  set_has_up_vpn_res();
  if (up_vpn_res_ == NULL) up_vpn_res_ = new ::zjchain::block::protobuf::UpdateVpnCountResponse;
  return up_vpn_res_;
}
inline ::zjchain::block::protobuf::UpdateVpnCountResponse* BlockMessage::release_up_vpn_res() {
  clear_has_up_vpn_res();
  ::zjchain::block::protobuf::UpdateVpnCountResponse* temp = up_vpn_res_;
  up_vpn_res_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_up_vpn_res(::zjchain::block::protobuf::UpdateVpnCountResponse* up_vpn_res) {
  delete up_vpn_res_;
  up_vpn_res_ = up_vpn_res;
  if (up_vpn_res) {
    set_has_up_vpn_res();
  } else {
    clear_has_up_vpn_res();
  }
}

// optional .zjchain.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
inline bool BlockMessage::has_account_init_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockMessage::set_has_account_init_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockMessage::clear_has_account_init_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockMessage::clear_account_init_req() {
  if (account_init_req_ != NULL) account_init_req_->::zjchain::block::protobuf::GetAccountInitInfoRequest::Clear();
  clear_has_account_init_req();
}
inline const ::zjchain::block::protobuf::GetAccountInitInfoRequest& BlockMessage::account_init_req() const {
  return account_init_req_ != NULL ? *account_init_req_ : *default_instance_->account_init_req_;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* BlockMessage::mutable_account_init_req() {
  set_has_account_init_req();
  if (account_init_req_ == NULL) account_init_req_ = new ::zjchain::block::protobuf::GetAccountInitInfoRequest;
  return account_init_req_;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoRequest* BlockMessage::release_account_init_req() {
  clear_has_account_init_req();
  ::zjchain::block::protobuf::GetAccountInitInfoRequest* temp = account_init_req_;
  account_init_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_account_init_req(::zjchain::block::protobuf::GetAccountInitInfoRequest* account_init_req) {
  delete account_init_req_;
  account_init_req_ = account_init_req;
  if (account_init_req) {
    set_has_account_init_req();
  } else {
    clear_has_account_init_req();
  }
}

// optional .zjchain.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
inline bool BlockMessage::has_account_init_res() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlockMessage::set_has_account_init_res() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlockMessage::clear_has_account_init_res() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlockMessage::clear_account_init_res() {
  if (account_init_res_ != NULL) account_init_res_->::zjchain::block::protobuf::GetAccountInitInfoResponse::Clear();
  clear_has_account_init_res();
}
inline const ::zjchain::block::protobuf::GetAccountInitInfoResponse& BlockMessage::account_init_res() const {
  return account_init_res_ != NULL ? *account_init_res_ : *default_instance_->account_init_res_;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* BlockMessage::mutable_account_init_res() {
  set_has_account_init_res();
  if (account_init_res_ == NULL) account_init_res_ = new ::zjchain::block::protobuf::GetAccountInitInfoResponse;
  return account_init_res_;
}
inline ::zjchain::block::protobuf::GetAccountInitInfoResponse* BlockMessage::release_account_init_res() {
  clear_has_account_init_res();
  ::zjchain::block::protobuf::GetAccountInitInfoResponse* temp = account_init_res_;
  account_init_res_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_account_init_res(::zjchain::block::protobuf::GetAccountInitInfoResponse* account_init_res) {
  delete account_init_res_;
  account_init_res_ = account_init_res;
  if (account_init_res) {
    set_has_account_init_res();
  } else {
    clear_has_account_init_res();
  }
}

// optional .zjchain.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
inline bool BlockMessage::has_vpn_active_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlockMessage::set_has_vpn_active_req() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlockMessage::clear_has_vpn_active_req() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlockMessage::clear_vpn_active_req() {
  if (vpn_active_req_ != NULL) vpn_active_req_->::zjchain::block::protobuf::UpdateVpnActiveRequest::Clear();
  clear_has_vpn_active_req();
}
inline const ::zjchain::block::protobuf::UpdateVpnActiveRequest& BlockMessage::vpn_active_req() const {
  return vpn_active_req_ != NULL ? *vpn_active_req_ : *default_instance_->vpn_active_req_;
}
inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* BlockMessage::mutable_vpn_active_req() {
  set_has_vpn_active_req();
  if (vpn_active_req_ == NULL) vpn_active_req_ = new ::zjchain::block::protobuf::UpdateVpnActiveRequest;
  return vpn_active_req_;
}
inline ::zjchain::block::protobuf::UpdateVpnActiveRequest* BlockMessage::release_vpn_active_req() {
  clear_has_vpn_active_req();
  ::zjchain::block::protobuf::UpdateVpnActiveRequest* temp = vpn_active_req_;
  vpn_active_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_vpn_active_req(::zjchain::block::protobuf::UpdateVpnActiveRequest* vpn_active_req) {
  delete vpn_active_req_;
  vpn_active_req_ = vpn_active_req;
  if (vpn_active_req) {
    set_has_vpn_active_req();
  } else {
    clear_has_vpn_active_req();
  }
}

// optional .zjchain.block.protobuf.AdRewardRequest ad_reward_req = 12;
inline bool BlockMessage::has_ad_reward_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlockMessage::set_has_ad_reward_req() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlockMessage::clear_has_ad_reward_req() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlockMessage::clear_ad_reward_req() {
  if (ad_reward_req_ != NULL) ad_reward_req_->::zjchain::block::protobuf::AdRewardRequest::Clear();
  clear_has_ad_reward_req();
}
inline const ::zjchain::block::protobuf::AdRewardRequest& BlockMessage::ad_reward_req() const {
  return ad_reward_req_ != NULL ? *ad_reward_req_ : *default_instance_->ad_reward_req_;
}
inline ::zjchain::block::protobuf::AdRewardRequest* BlockMessage::mutable_ad_reward_req() {
  set_has_ad_reward_req();
  if (ad_reward_req_ == NULL) ad_reward_req_ = new ::zjchain::block::protobuf::AdRewardRequest;
  return ad_reward_req_;
}
inline ::zjchain::block::protobuf::AdRewardRequest* BlockMessage::release_ad_reward_req() {
  clear_has_ad_reward_req();
  ::zjchain::block::protobuf::AdRewardRequest* temp = ad_reward_req_;
  ad_reward_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_ad_reward_req(::zjchain::block::protobuf::AdRewardRequest* ad_reward_req) {
  delete ad_reward_req_;
  ad_reward_req_ = ad_reward_req;
  if (ad_reward_req) {
    set_has_ad_reward_req();
  } else {
    clear_has_ad_reward_req();
  }
}

// optional .zjchain.block.protobuf.RefreshPoolHeightRequest ref_heights_req = 13;
inline bool BlockMessage::has_ref_heights_req() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlockMessage::set_has_ref_heights_req() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlockMessage::clear_has_ref_heights_req() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlockMessage::clear_ref_heights_req() {
  if (ref_heights_req_ != NULL) ref_heights_req_->::zjchain::block::protobuf::RefreshPoolHeightRequest::Clear();
  clear_has_ref_heights_req();
}
inline const ::zjchain::block::protobuf::RefreshPoolHeightRequest& BlockMessage::ref_heights_req() const {
  return ref_heights_req_ != NULL ? *ref_heights_req_ : *default_instance_->ref_heights_req_;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* BlockMessage::mutable_ref_heights_req() {
  set_has_ref_heights_req();
  if (ref_heights_req_ == NULL) ref_heights_req_ = new ::zjchain::block::protobuf::RefreshPoolHeightRequest;
  return ref_heights_req_;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightRequest* BlockMessage::release_ref_heights_req() {
  clear_has_ref_heights_req();
  ::zjchain::block::protobuf::RefreshPoolHeightRequest* temp = ref_heights_req_;
  ref_heights_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_ref_heights_req(::zjchain::block::protobuf::RefreshPoolHeightRequest* ref_heights_req) {
  delete ref_heights_req_;
  ref_heights_req_ = ref_heights_req;
  if (ref_heights_req) {
    set_has_ref_heights_req();
  } else {
    clear_has_ref_heights_req();
  }
}

// optional .zjchain.block.protobuf.RefreshPoolHeightResponse ref_heights_res = 14;
inline bool BlockMessage::has_ref_heights_res() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BlockMessage::set_has_ref_heights_res() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BlockMessage::clear_has_ref_heights_res() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BlockMessage::clear_ref_heights_res() {
  if (ref_heights_res_ != NULL) ref_heights_res_->::zjchain::block::protobuf::RefreshPoolHeightResponse::Clear();
  clear_has_ref_heights_res();
}
inline const ::zjchain::block::protobuf::RefreshPoolHeightResponse& BlockMessage::ref_heights_res() const {
  return ref_heights_res_ != NULL ? *ref_heights_res_ : *default_instance_->ref_heights_res_;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* BlockMessage::mutable_ref_heights_res() {
  set_has_ref_heights_res();
  if (ref_heights_res_ == NULL) ref_heights_res_ = new ::zjchain::block::protobuf::RefreshPoolHeightResponse;
  return ref_heights_res_;
}
inline ::zjchain::block::protobuf::RefreshPoolHeightResponse* BlockMessage::release_ref_heights_res() {
  clear_has_ref_heights_res();
  ::zjchain::block::protobuf::RefreshPoolHeightResponse* temp = ref_heights_res_;
  ref_heights_res_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_ref_heights_res(::zjchain::block::protobuf::RefreshPoolHeightResponse* ref_heights_res) {
  delete ref_heights_res_;
  ref_heights_res_ = ref_heights_res;
  if (ref_heights_res) {
    set_has_ref_heights_res();
  } else {
    clear_has_ref_heights_res();
  }
}

// optional .zjchain.block.protobuf.GetAccountShardRequest acc_shard_req = 15;
inline bool BlockMessage::has_acc_shard_req() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlockMessage::set_has_acc_shard_req() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlockMessage::clear_has_acc_shard_req() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlockMessage::clear_acc_shard_req() {
  if (acc_shard_req_ != NULL) acc_shard_req_->::zjchain::block::protobuf::GetAccountShardRequest::Clear();
  clear_has_acc_shard_req();
}
inline const ::zjchain::block::protobuf::GetAccountShardRequest& BlockMessage::acc_shard_req() const {
  return acc_shard_req_ != NULL ? *acc_shard_req_ : *default_instance_->acc_shard_req_;
}
inline ::zjchain::block::protobuf::GetAccountShardRequest* BlockMessage::mutable_acc_shard_req() {
  set_has_acc_shard_req();
  if (acc_shard_req_ == NULL) acc_shard_req_ = new ::zjchain::block::protobuf::GetAccountShardRequest;
  return acc_shard_req_;
}
inline ::zjchain::block::protobuf::GetAccountShardRequest* BlockMessage::release_acc_shard_req() {
  clear_has_acc_shard_req();
  ::zjchain::block::protobuf::GetAccountShardRequest* temp = acc_shard_req_;
  acc_shard_req_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_acc_shard_req(::zjchain::block::protobuf::GetAccountShardRequest* acc_shard_req) {
  delete acc_shard_req_;
  acc_shard_req_ = acc_shard_req;
  if (acc_shard_req) {
    set_has_acc_shard_req();
  } else {
    clear_has_acc_shard_req();
  }
}

// optional .zjchain.block.protobuf.GetAccountShardReponse acc_shard_res = 16;
inline bool BlockMessage::has_acc_shard_res() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BlockMessage::set_has_acc_shard_res() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BlockMessage::clear_has_acc_shard_res() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BlockMessage::clear_acc_shard_res() {
  if (acc_shard_res_ != NULL) acc_shard_res_->::zjchain::block::protobuf::GetAccountShardReponse::Clear();
  clear_has_acc_shard_res();
}
inline const ::zjchain::block::protobuf::GetAccountShardReponse& BlockMessage::acc_shard_res() const {
  return acc_shard_res_ != NULL ? *acc_shard_res_ : *default_instance_->acc_shard_res_;
}
inline ::zjchain::block::protobuf::GetAccountShardReponse* BlockMessage::mutable_acc_shard_res() {
  set_has_acc_shard_res();
  if (acc_shard_res_ == NULL) acc_shard_res_ = new ::zjchain::block::protobuf::GetAccountShardReponse;
  return acc_shard_res_;
}
inline ::zjchain::block::protobuf::GetAccountShardReponse* BlockMessage::release_acc_shard_res() {
  clear_has_acc_shard_res();
  ::zjchain::block::protobuf::GetAccountShardReponse* temp = acc_shard_res_;
  acc_shard_res_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_acc_shard_res(::zjchain::block::protobuf::GetAccountShardReponse* acc_shard_res) {
  delete acc_shard_res_;
  acc_shard_res_ = acc_shard_res;
  if (acc_shard_res) {
    set_has_acc_shard_res();
  } else {
    clear_has_acc_shard_res();
  }
}

// optional .zjchain.block.protobuf.ShardToTxMessage shard_to = 17;
inline bool BlockMessage::has_shard_to() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BlockMessage::set_has_shard_to() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BlockMessage::clear_has_shard_to() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BlockMessage::clear_shard_to() {
  if (shard_to_ != NULL) shard_to_->::zjchain::block::protobuf::ShardToTxMessage::Clear();
  clear_has_shard_to();
}
inline const ::zjchain::block::protobuf::ShardToTxMessage& BlockMessage::shard_to() const {
  return shard_to_ != NULL ? *shard_to_ : *default_instance_->shard_to_;
}
inline ::zjchain::block::protobuf::ShardToTxMessage* BlockMessage::mutable_shard_to() {
  set_has_shard_to();
  if (shard_to_ == NULL) shard_to_ = new ::zjchain::block::protobuf::ShardToTxMessage;
  return shard_to_;
}
inline ::zjchain::block::protobuf::ShardToTxMessage* BlockMessage::release_shard_to() {
  clear_has_shard_to();
  ::zjchain::block::protobuf::ShardToTxMessage* temp = shard_to_;
  shard_to_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_shard_to(::zjchain::block::protobuf::ShardToTxMessage* shard_to) {
  delete shard_to_;
  shard_to_ = shard_to;
  if (shard_to) {
    set_has_shard_to();
  } else {
    clear_has_shard_to();
  }
}

// optional .zjchain.block.protobuf.StatisticTxMessage statistic_tx = 18;
inline bool BlockMessage::has_statistic_tx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BlockMessage::set_has_statistic_tx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BlockMessage::clear_has_statistic_tx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BlockMessage::clear_statistic_tx() {
  if (statistic_tx_ != NULL) statistic_tx_->::zjchain::block::protobuf::StatisticTxMessage::Clear();
  clear_has_statistic_tx();
}
inline const ::zjchain::block::protobuf::StatisticTxMessage& BlockMessage::statistic_tx() const {
  return statistic_tx_ != NULL ? *statistic_tx_ : *default_instance_->statistic_tx_;
}
inline ::zjchain::block::protobuf::StatisticTxMessage* BlockMessage::mutable_statistic_tx() {
  set_has_statistic_tx();
  if (statistic_tx_ == NULL) statistic_tx_ = new ::zjchain::block::protobuf::StatisticTxMessage;
  return statistic_tx_;
}
inline ::zjchain::block::protobuf::StatisticTxMessage* BlockMessage::release_statistic_tx() {
  clear_has_statistic_tx();
  ::zjchain::block::protobuf::StatisticTxMessage* temp = statistic_tx_;
  statistic_tx_ = NULL;
  return temp;
}
inline void BlockMessage::set_allocated_statistic_tx(::zjchain::block::protobuf::StatisticTxMessage* statistic_tx) {
  delete statistic_tx_;
  statistic_tx_ = statistic_tx;
  if (statistic_tx) {
    set_has_statistic_tx();
  } else {
    clear_has_statistic_tx();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace block
}  // namespace zjchain

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protos_2fblock_2eproto__INCLUDED
