// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/hotstuff.proto

#include "protos/hotstuff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protos_2fblock_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fblock_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Block;
}  // namespace protobuf_protos_2fblock_2eproto
namespace protobuf_protos_2fhotstuff_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fhotstuff_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPreCommit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fhotstuff_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPrepare;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fhotstuff_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxCommit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fhotstuff_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxPreCommit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fhotstuff_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LeaderTxPrepare;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fhotstuff_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ToAccountTx;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fhotstuff_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_TxBft;
}  // namespace protobuf_protos_2fhotstuff_2eproto
namespace zjchain {
namespace hotstuff {
namespace protobuf {
class LeaderTxPrepareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderTxPrepare>
      _instance;
} _LeaderTxPrepare_default_instance_;
class BackupTxPrepareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BackupTxPrepare>
      _instance;
} _BackupTxPrepare_default_instance_;
class LeaderTxPreCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderTxPreCommit>
      _instance;
} _LeaderTxPreCommit_default_instance_;
class BackupTxPreCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BackupTxPreCommit>
      _instance;
} _BackupTxPreCommit_default_instance_;
class LeaderTxCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderTxCommit>
      _instance;
} _LeaderTxCommit_default_instance_;
class ToAccountTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToAccountTx>
      _instance;
} _ToAccountTx_default_instance_;
class TxBftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxBft>
      _instance;
} _TxBft_default_instance_;
class HotstuffMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ZbftMessage>
      _instance;
} _HotstuffMessage_default_instance_;
}  // namespace protobuf
}  // namespace hotstuff
}  // namespace zjchain
namespace protobuf_protos_2fhotstuff_2eproto {
static void InitDefaultsLeaderTxPrepare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_LeaderTxPrepare_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::LeaderTxPrepare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::LeaderTxPrepare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeaderTxPrepare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeaderTxPrepare}, {
      &protobuf_protos_2fblock_2eproto::scc_info_Block.base,}};

static void InitDefaultsBackupTxPrepare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_BackupTxPrepare_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::BackupTxPrepare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::BackupTxPrepare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPrepare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBackupTxPrepare}, {}};

static void InitDefaultsLeaderTxPreCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_LeaderTxPreCommit_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::LeaderTxPreCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::LeaderTxPreCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxPreCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaderTxPreCommit}, {}};

static void InitDefaultsBackupTxPreCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_BackupTxPreCommit_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::BackupTxPreCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::BackupTxPreCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPreCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBackupTxPreCommit}, {}};

static void InitDefaultsLeaderTxCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_LeaderTxCommit_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::LeaderTxCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::LeaderTxCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaderTxCommit}, {}};

static void InitDefaultsToAccountTx() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_ToAccountTx_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::ToAccountTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::ToAccountTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ToAccountTx =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsToAccountTx}, {
      &protobuf_protos_2fblock_2eproto::scc_info_Block.base,}};

static void InitDefaultsTxBft() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_TxBft_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::TxBft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::TxBft::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_TxBft =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsTxBft}, {
      &protobuf_protos_2fhotstuff_2eproto::scc_info_ToAccountTx.base,
      &protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxPrepare.base,
      &protobuf_protos_2fhotstuff_2eproto::scc_info_BackupTxPrepare.base,
      &protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxPreCommit.base,
      &protobuf_protos_2fhotstuff_2eproto::scc_info_BackupTxPreCommit.base,
      &protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxCommit.base,}};

static void InitDefaultsHotstuffMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zjchain::hotstuff::protobuf::_HotstuffMessage_default_instance_;
    new (ptr) ::zjchain::hotstuff::protobuf::ZbftMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zjchain::hotstuff::protobuf::ZbftMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HotstuffMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHotstuffMessage}, {
      &protobuf_protos_2fhotstuff_2eproto::scc_info_TxBft.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderTxPrepare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BackupTxPrepare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderTxPreCommit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BackupTxPreCommit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderTxCommit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToAccountTx.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxBft.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HotstuffMessage.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, prepare_final_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, bloom_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, tx_hash_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPrepare, tx_type_),
  1,
  0,
  2,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::BackupTxPrepare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::BackupTxPrepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::BackupTxPrepare, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPreCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPreCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxPreCommit, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::BackupTxPreCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::BackupTxPreCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::BackupTxPreCommit, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxCommit, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::LeaderTxCommit, latest_hegight_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ToAccountTx, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ToAccountTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ToAccountTx, block_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, to_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, ltx_prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, btx_prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, ltx_precommit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, btx_precommit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::TxBft, ltx_commit_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, bft_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, bitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, pool_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, tx_bft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, prepare_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, node_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, node_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, member_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, backup_enc_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, elect_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, bls_sign_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, bls_sign_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, commit_bitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zjchain::hotstuff::protobuf::ZbftMessage, bls_agg_verify_hash_),
  0,
  9,
  11,
  10,
  ~0u,
  12,
  13,
  14,
  8,
  1,
  2,
  15,
  16,
  17,
  3,
  4,
  18,
  5,
  6,
  ~0u,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::zjchain::hotstuff::protobuf::LeaderTxPrepare)},
  { 17, 23, sizeof(::zjchain::hotstuff::protobuf::BackupTxPrepare)},
  { 24, 30, sizeof(::zjchain::hotstuff::protobuf::LeaderTxPreCommit)},
  { 31, 37, sizeof(::zjchain::hotstuff::protobuf::BackupTxPreCommit)},
  { 38, 45, sizeof(::zjchain::hotstuff::protobuf::LeaderTxCommit)},
  { 47, 53, sizeof(::zjchain::hotstuff::protobuf::ToAccountTx)},
  { 54, 65, sizeof(::zjchain::hotstuff::protobuf::TxBft)},
  { 71, 97, sizeof(::zjchain::hotstuff::protobuf::ZbftMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_LeaderTxPrepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_BackupTxPrepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_LeaderTxPreCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_BackupTxPreCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_LeaderTxCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_ToAccountTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_TxBft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zjchain::hotstuff::protobuf::_HotstuffMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protos/hotstuff.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025protos/hotstuff.proto\022\031zjchain.hotstuf"
      "f.protobuf\032\022protos/block.proto\032\022protos/p"
      "ools.proto\"\327\001\n\017LeaderTxPrepare\022,\n\005block\030"
      "\001 \001(\0132\035.zjchain.block.protobuf.Block\022\032\n\022"
      "prepare_final_hash\030\002 \001(\014\022\016\n\006height\030\003 \001(\004"
      "\022\024\n\014bloom_filter\030\004 \003(\004\022\024\n\014tx_hash_list\030\005"
      " \003(\014\022>\n\007tx_type\030\006 \001(\0162 .zjchain.pools.pr"
      "otobuf.StepType:\013kNormalFrom\"!\n\017BackupTx"
      "Prepare\022\016\n\006status\030\001 \001(\005\"#\n\021LeaderTxPreCo"
      "mmit\022\016\n\006status\030\001 \001(\005\"#\n\021BackupTxPreCommi"
      "t\022\016\n\006status\030\001 \001(\005\"8\n\016LeaderTxCommit\022\016\n\006s"
      "tatus\030\001 \001(\005\022\026\n\016latest_hegight\030\002 \001(\004\";\n\013T"
      "oAccountTx\022,\n\005block\030\001 \001(\0132\035.zjchain.bloc"
      "k.protobuf.Block\"\211\003\n\005TxBft\0225\n\005to_tx\030\001 \001("
      "\0132&.zjchain.hotstuff.protobuf.ToAccountT"
      "x\022\?\n\013ltx_prepare\030\002 \001(\0132*.zjchain.hotstuf"
      "f.protobuf.LeaderTxPrepare\022\?\n\013btx_prepar"
      "e\030\003 \001(\0132*.zjchain.hotstuff.protobuf.Back"
      "upTxPrepare\022C\n\rltx_precommit\030\004 \001(\0132,.zjc"
      "hain.hotstuff.protobuf.LeaderTxPreCommit"
      "\022C\n\rbtx_precommit\030\005 \001(\0132,.zjchain.hotstu"
      "ff.protobuf.BackupTxPreCommit\022=\n\nltx_com"
      "mit\030\006 \001(\0132).zjchain.hotstuff.protobuf.Le"
      "aderTxCommit\"\276\003\n\017HotstuffMessage\022\013\n\003gid\030"
      "\001 \001(\014\022\020\n\010bft_step\030\002 \001(\005\022\016\n\006leader\030\003 \001(\010\022"
      "\016\n\006net_id\030\004 \001(\r\022\016\n\006bitmap\030\005 \003(\004\022\r\n\005agree"
      "\030\006 \001(\010\022\022\n\npool_index\030\007 \001(\r\022\r\n\005error\030\010 \001("
      "\005\0220\n\006tx_bft\030\t \001(\0132 .zjchain.hotstuff.pro"
      "tobuf.TxBft\022\024\n\014prepare_hash\030\n \001(\014\022\017\n\007nod"
      "e_ip\030\013 \001(\014\022\021\n\tnode_port\030\014 \001(\r\022\r\n\005epoch\030\r"
      " \001(\r\022\024\n\014member_index\030\016 \001(\r\022\016\n\006pubkey\030\017 \001"
      "(\014\022\027\n\017backup_enc_data\030\020 \001(\014\022\024\n\014elect_hei"
      "ght\030\021 \001(\004\022\022\n\nbls_sign_x\030\022 \001(\014\022\022\n\nbls_sig"
      "n_y\030\023 \001(\014\022\025\n\rcommit_bitmap\030\024 \003(\004\022\033\n\023bls_"
      "agg_verify_hash\030\025 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protos/hotstuff.proto", &protobuf_RegisterTypes);
  ::protobuf_protos_2fblock_2eproto::AddDescriptors();
  ::protobuf_protos_2fpools_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protos_2fhotstuff_2eproto
namespace zjchain {
namespace hotstuff {
namespace protobuf {

// ===================================================================

void LeaderTxPrepare::InitAsDefaultInstance() {
  ::zjchain::hotstuff::protobuf::_LeaderTxPrepare_default_instance_._instance.get_mutable()->block_ = const_cast< ::zjchain::block::protobuf::Block*>(
      ::zjchain::block::protobuf::Block::internal_default_instance());
}
void LeaderTxPrepare::clear_block() {
  if (block_ != NULL) block_->Clear();
  clear_has_block();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderTxPrepare::kBlockFieldNumber;
const int LeaderTxPrepare::kPrepareFinalHashFieldNumber;
const int LeaderTxPrepare::kHeightFieldNumber;
const int LeaderTxPrepare::kBloomFilterFieldNumber;
const int LeaderTxPrepare::kTxHashListFieldNumber;
const int LeaderTxPrepare::kTxTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderTxPrepare::LeaderTxPrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxPrepare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.LeaderTxPrepare)
}
LeaderTxPrepare::LeaderTxPrepare(const LeaderTxPrepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bloom_filter_(from.bloom_filter_),
      tx_hash_list_(from.tx_hash_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prepare_final_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prepare_final_hash()) {
    prepare_final_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prepare_final_hash_);
  }
  if (from.has_block()) {
    block_ = new ::zjchain::block::protobuf::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(tx_type_));
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.LeaderTxPrepare)
}

void LeaderTxPrepare::SharedCtor() {
  prepare_final_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_type_) -
      reinterpret_cast<char*>(&block_)) + sizeof(tx_type_));
}

LeaderTxPrepare::~LeaderTxPrepare() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  SharedDtor();
}

void LeaderTxPrepare::SharedDtor() {
  prepare_final_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_;
}

void LeaderTxPrepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderTxPrepare::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderTxPrepare& LeaderTxPrepare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxPrepare.base);
  return *internal_default_instance();
}


void LeaderTxPrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bloom_filter_.Clear();
  tx_hash_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      prepare_final_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(block_ != NULL);
      block_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_type_) -
        reinterpret_cast<char*>(&height_)) + sizeof(tx_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderTxPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes prepare_final_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prepare_final_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bloom_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_bloom_filter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bloom_filter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes tx_hash_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tx_hash_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.pools.protobuf.StepType tx_type = 6 [default = kNormalFrom];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zjchain::pools::protobuf::StepType_IsValid(value)) {
            set_tx_type(static_cast< ::zjchain::pools::protobuf::StepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  return false;
#undef DO_
}

void LeaderTxPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_block(), output);
  }

  // optional bytes prepare_final_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->prepare_final_hash(), output);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // repeated uint64 bloom_filter = 4;
  for (int i = 0, n = this->bloom_filter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->bloom_filter(i), output);
  }

  // repeated bytes tx_hash_list = 5;
  for (int i = 0, n = this->tx_hash_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->tx_hash_list(i), output);
  }

  // optional .zjchain.pools.protobuf.StepType tx_type = 6 [default = kNormalFrom];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tx_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.LeaderTxPrepare)
}

::google::protobuf::uint8* LeaderTxPrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_block(), deterministic, target);
  }

  // optional bytes prepare_final_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->prepare_final_hash(), target);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // repeated uint64 bloom_filter = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->bloom_filter_, target);

  // repeated bytes tx_hash_list = 5;
  for (int i = 0, n = this->tx_hash_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->tx_hash_list(i), target);
  }

  // optional .zjchain.pools.protobuf.StepType tx_type = 6 [default = kNormalFrom];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tx_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  return target;
}

size_t LeaderTxPrepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 bloom_filter = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bloom_filter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bloom_filter_size());
    total_size += data_size;
  }

  // repeated bytes tx_hash_list = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tx_hash_list_size());
  for (int i = 0, n = this->tx_hash_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tx_hash_list(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes prepare_final_hash = 2;
    if (has_prepare_final_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prepare_final_hash());
    }

    // optional .zjchain.block.protobuf.Block block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *block_);
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional .zjchain.pools.protobuf.StepType tx_type = 6 [default = kNormalFrom];
    if (has_tx_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderTxPrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderTxPrepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderTxPrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.LeaderTxPrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.LeaderTxPrepare)
    MergeFrom(*source);
  }
}

void LeaderTxPrepare::MergeFrom(const LeaderTxPrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bloom_filter_.MergeFrom(from.bloom_filter_);
  tx_hash_list_.MergeFrom(from.tx_hash_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_prepare_final_hash();
      prepare_final_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prepare_final_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_type_ = from.tx_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderTxPrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderTxPrepare::CopyFrom(const LeaderTxPrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.LeaderTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderTxPrepare::IsInitialized() const {
  return true;
}

void LeaderTxPrepare::Swap(LeaderTxPrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderTxPrepare::InternalSwap(LeaderTxPrepare* other) {
  using std::swap;
  bloom_filter_.InternalSwap(&other->bloom_filter_);
  tx_hash_list_.InternalSwap(CastToBase(&other->tx_hash_list_));
  prepare_final_hash_.Swap(&other->prepare_final_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_, other->block_);
  swap(height_, other->height_);
  swap(tx_type_, other->tx_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderTxPrepare::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BackupTxPrepare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupTxPrepare::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupTxPrepare::BackupTxPrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_BackupTxPrepare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.BackupTxPrepare)
}
BackupTxPrepare::BackupTxPrepare(const BackupTxPrepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.BackupTxPrepare)
}

void BackupTxPrepare::SharedCtor() {
  status_ = 0;
}

BackupTxPrepare::~BackupTxPrepare() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.BackupTxPrepare)
  SharedDtor();
}

void BackupTxPrepare::SharedDtor() {
}

void BackupTxPrepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BackupTxPrepare::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupTxPrepare& BackupTxPrepare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_BackupTxPrepare.base);
  return *internal_default_instance();
}


void BackupTxPrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupTxPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.BackupTxPrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.BackupTxPrepare)
  return false;
#undef DO_
}

void BackupTxPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.BackupTxPrepare)
}

::google::protobuf::uint8* BackupTxPrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.BackupTxPrepare)
  return target;
}

size_t BackupTxPrepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackupTxPrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupTxPrepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupTxPrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.BackupTxPrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.BackupTxPrepare)
    MergeFrom(*source);
  }
}

void BackupTxPrepare::MergeFrom(const BackupTxPrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void BackupTxPrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupTxPrepare::CopyFrom(const BackupTxPrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.BackupTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupTxPrepare::IsInitialized() const {
  return true;
}

void BackupTxPrepare::Swap(BackupTxPrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupTxPrepare::InternalSwap(BackupTxPrepare* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BackupTxPrepare::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderTxPreCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderTxPreCommit::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderTxPreCommit::LeaderTxPreCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxPreCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
}
LeaderTxPreCommit::LeaderTxPreCommit(const LeaderTxPreCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
}

void LeaderTxPreCommit::SharedCtor() {
  status_ = 0;
}

LeaderTxPreCommit::~LeaderTxPreCommit() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  SharedDtor();
}

void LeaderTxPreCommit::SharedDtor() {
}

void LeaderTxPreCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderTxPreCommit::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderTxPreCommit& LeaderTxPreCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxPreCommit.base);
  return *internal_default_instance();
}


void LeaderTxPreCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderTxPreCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  return false;
#undef DO_
}

void LeaderTxPreCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
}

::google::protobuf::uint8* LeaderTxPreCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  return target;
}

size_t LeaderTxPreCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderTxPreCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderTxPreCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderTxPreCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
    MergeFrom(*source);
  }
}

void LeaderTxPreCommit::MergeFrom(const LeaderTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void LeaderTxPreCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderTxPreCommit::CopyFrom(const LeaderTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.LeaderTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderTxPreCommit::IsInitialized() const {
  return true;
}

void LeaderTxPreCommit::Swap(LeaderTxPreCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderTxPreCommit::InternalSwap(LeaderTxPreCommit* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderTxPreCommit::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BackupTxPreCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupTxPreCommit::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupTxPreCommit::BackupTxPreCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_BackupTxPreCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.BackupTxPreCommit)
}
BackupTxPreCommit::BackupTxPreCommit(const BackupTxPreCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.BackupTxPreCommit)
}

void BackupTxPreCommit::SharedCtor() {
  status_ = 0;
}

BackupTxPreCommit::~BackupTxPreCommit() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  SharedDtor();
}

void BackupTxPreCommit::SharedDtor() {
}

void BackupTxPreCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BackupTxPreCommit::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupTxPreCommit& BackupTxPreCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_BackupTxPreCommit.base);
  return *internal_default_instance();
}


void BackupTxPreCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupTxPreCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  return false;
#undef DO_
}

void BackupTxPreCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.BackupTxPreCommit)
}

::google::protobuf::uint8* BackupTxPreCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  return target;
}

size_t BackupTxPreCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackupTxPreCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupTxPreCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupTxPreCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.BackupTxPreCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.BackupTxPreCommit)
    MergeFrom(*source);
  }
}

void BackupTxPreCommit::MergeFrom(const BackupTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void BackupTxPreCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupTxPreCommit::CopyFrom(const BackupTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.BackupTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupTxPreCommit::IsInitialized() const {
  return true;
}

void BackupTxPreCommit::Swap(BackupTxPreCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupTxPreCommit::InternalSwap(BackupTxPreCommit* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BackupTxPreCommit::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderTxCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderTxCommit::kStatusFieldNumber;
const int LeaderTxCommit::kLatestHegightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderTxCommit::LeaderTxCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.LeaderTxCommit)
}
LeaderTxCommit::LeaderTxCommit(const LeaderTxCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latest_hegight_, &from.latest_hegight_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&latest_hegight_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.LeaderTxCommit)
}

void LeaderTxCommit::SharedCtor() {
  ::memset(&latest_hegight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&latest_hegight_)) + sizeof(status_));
}

LeaderTxCommit::~LeaderTxCommit() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.LeaderTxCommit)
  SharedDtor();
}

void LeaderTxCommit::SharedDtor() {
}

void LeaderTxCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderTxCommit::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderTxCommit& LeaderTxCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_LeaderTxCommit.base);
  return *internal_default_instance();
}


void LeaderTxCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&latest_hegight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&latest_hegight_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderTxCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 latest_hegight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_latest_hegight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &latest_hegight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.LeaderTxCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.LeaderTxCommit)
  return false;
#undef DO_
}

void LeaderTxCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional uint64 latest_hegight = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->latest_hegight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.LeaderTxCommit)
}

::google::protobuf::uint8* LeaderTxCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional uint64 latest_hegight = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->latest_hegight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.LeaderTxCommit)
  return target;
}

size_t LeaderTxCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 latest_hegight = 2;
    if (has_latest_hegight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->latest_hegight());
    }

    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderTxCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderTxCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderTxCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.LeaderTxCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.LeaderTxCommit)
    MergeFrom(*source);
  }
}

void LeaderTxCommit::MergeFrom(const LeaderTxCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      latest_hegight_ = from.latest_hegight_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderTxCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderTxCommit::CopyFrom(const LeaderTxCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.LeaderTxCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderTxCommit::IsInitialized() const {
  return true;
}

void LeaderTxCommit::Swap(LeaderTxCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderTxCommit::InternalSwap(LeaderTxCommit* other) {
  using std::swap;
  swap(latest_hegight_, other->latest_hegight_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderTxCommit::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ToAccountTx::InitAsDefaultInstance() {
  ::zjchain::hotstuff::protobuf::_ToAccountTx_default_instance_._instance.get_mutable()->block_ = const_cast< ::zjchain::block::protobuf::Block*>(
      ::zjchain::block::protobuf::Block::internal_default_instance());
}
void ToAccountTx::clear_block() {
  if (block_ != NULL) block_->Clear();
  clear_has_block();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToAccountTx::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToAccountTx::ToAccountTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_ToAccountTx.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.ToAccountTx)
}
ToAccountTx::ToAccountTx(const ToAccountTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::zjchain::block::protobuf::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.ToAccountTx)
}

void ToAccountTx::SharedCtor() {
  block_ = NULL;
}

ToAccountTx::~ToAccountTx() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.ToAccountTx)
  SharedDtor();
}

void ToAccountTx::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void ToAccountTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ToAccountTx::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToAccountTx& ToAccountTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_ToAccountTx.base);
  return *internal_default_instance();
}


void ToAccountTx::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.ToAccountTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != NULL);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToAccountTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.ToAccountTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.block.protobuf.Block block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.ToAccountTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.ToAccountTx)
  return false;
#undef DO_
}

void ToAccountTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.ToAccountTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.ToAccountTx)
}

::google::protobuf::uint8* ToAccountTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.ToAccountTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.block.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_block(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.ToAccountTx)
  return target;
}

size_t ToAccountTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.ToAccountTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .zjchain.block.protobuf.Block block = 1;
  if (has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToAccountTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.ToAccountTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ToAccountTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToAccountTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.ToAccountTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.ToAccountTx)
    MergeFrom(*source);
  }
}

void ToAccountTx::MergeFrom(const ToAccountTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.ToAccountTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    mutable_block()->::zjchain::block::protobuf::Block::MergeFrom(from.block());
  }
}

void ToAccountTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.ToAccountTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToAccountTx::CopyFrom(const ToAccountTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.ToAccountTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToAccountTx::IsInitialized() const {
  return true;
}

void ToAccountTx::Swap(ToAccountTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToAccountTx::InternalSwap(ToAccountTx* other) {
  using std::swap;
  swap(block_, other->block_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ToAccountTx::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxBft::InitAsDefaultInstance() {
  ::zjchain::hotstuff::protobuf::_TxBft_default_instance_._instance.get_mutable()->to_tx_ = const_cast< ::zjchain::hotstuff::protobuf::ToAccountTx*>(
      ::zjchain::hotstuff::protobuf::ToAccountTx::internal_default_instance());
  ::zjchain::hotstuff::protobuf::_TxBft_default_instance_._instance.get_mutable()->ltx_prepare_ = const_cast< ::zjchain::hotstuff::protobuf::LeaderTxPrepare*>(
      ::zjchain::hotstuff::protobuf::LeaderTxPrepare::internal_default_instance());
  ::zjchain::hotstuff::protobuf::_TxBft_default_instance_._instance.get_mutable()->btx_prepare_ = const_cast< ::zjchain::hotstuff::protobuf::BackupTxPrepare*>(
      ::zjchain::hotstuff::protobuf::BackupTxPrepare::internal_default_instance());
  ::zjchain::hotstuff::protobuf::_TxBft_default_instance_._instance.get_mutable()->ltx_precommit_ = const_cast< ::zjchain::hotstuff::protobuf::LeaderTxPreCommit*>(
      ::zjchain::hotstuff::protobuf::LeaderTxPreCommit::internal_default_instance());
  ::zjchain::hotstuff::protobuf::_TxBft_default_instance_._instance.get_mutable()->btx_precommit_ = const_cast< ::zjchain::hotstuff::protobuf::BackupTxPreCommit*>(
      ::zjchain::hotstuff::protobuf::BackupTxPreCommit::internal_default_instance());
  ::zjchain::hotstuff::protobuf::_TxBft_default_instance_._instance.get_mutable()->ltx_commit_ = const_cast< ::zjchain::hotstuff::protobuf::LeaderTxCommit*>(
      ::zjchain::hotstuff::protobuf::LeaderTxCommit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxBft::kToTxFieldNumber;
const int TxBft::kLtxPrepareFieldNumber;
const int TxBft::kBtxPrepareFieldNumber;
const int TxBft::kLtxPrecommitFieldNumber;
const int TxBft::kBtxPrecommitFieldNumber;
const int TxBft::kLtxCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxBft::TxBft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_TxBft.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.TxBft)
}
TxBft::TxBft(const TxBft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_to_tx()) {
    to_tx_ = new ::zjchain::hotstuff::protobuf::ToAccountTx(*from.to_tx_);
  } else {
    to_tx_ = NULL;
  }
  if (from.has_ltx_prepare()) {
    ltx_prepare_ = new ::zjchain::hotstuff::protobuf::LeaderTxPrepare(*from.ltx_prepare_);
  } else {
    ltx_prepare_ = NULL;
  }
  if (from.has_btx_prepare()) {
    btx_prepare_ = new ::zjchain::hotstuff::protobuf::BackupTxPrepare(*from.btx_prepare_);
  } else {
    btx_prepare_ = NULL;
  }
  if (from.has_ltx_precommit()) {
    ltx_precommit_ = new ::zjchain::hotstuff::protobuf::LeaderTxPreCommit(*from.ltx_precommit_);
  } else {
    ltx_precommit_ = NULL;
  }
  if (from.has_btx_precommit()) {
    btx_precommit_ = new ::zjchain::hotstuff::protobuf::BackupTxPreCommit(*from.btx_precommit_);
  } else {
    btx_precommit_ = NULL;
  }
  if (from.has_ltx_commit()) {
    ltx_commit_ = new ::zjchain::hotstuff::protobuf::LeaderTxCommit(*from.ltx_commit_);
  } else {
    ltx_commit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.TxBft)
}

void TxBft::SharedCtor() {
  ::memset(&to_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ltx_commit_) -
      reinterpret_cast<char*>(&to_tx_)) + sizeof(ltx_commit_));
}

TxBft::~TxBft() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.TxBft)
  SharedDtor();
}

void TxBft::SharedDtor() {
  if (this != internal_default_instance()) delete to_tx_;
  if (this != internal_default_instance()) delete ltx_prepare_;
  if (this != internal_default_instance()) delete btx_prepare_;
  if (this != internal_default_instance()) delete ltx_precommit_;
  if (this != internal_default_instance()) delete btx_precommit_;
  if (this != internal_default_instance()) delete ltx_commit_;
}

void TxBft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxBft::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxBft& TxBft::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_TxBft.base);
  return *internal_default_instance();
}


void TxBft::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.TxBft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(to_tx_ != NULL);
      to_tx_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ltx_prepare_ != NULL);
      ltx_prepare_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(btx_prepare_ != NULL);
      btx_prepare_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ltx_precommit_ != NULL);
      ltx_precommit_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(btx_precommit_ != NULL);
      btx_precommit_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ltx_commit_ != NULL);
      ltx_commit_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxBft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.TxBft)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zjchain.hotstuff.protobuf.ToAccountTx to_tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.hotstuff.protobuf.LeaderTxPrepare ltx_prepare = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ltx_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.hotstuff.protobuf.BackupTxPrepare btx_prepare = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_btx_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.hotstuff.protobuf.LeaderTxPreCommit ltx_precommit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ltx_precommit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.hotstuff.protobuf.BackupTxPreCommit btx_precommit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_btx_precommit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.hotstuff.protobuf.LeaderTxCommit ltx_commit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ltx_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.TxBft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.TxBft)
  return false;
#undef DO_
}

void TxBft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.TxBft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.hotstuff.protobuf.ToAccountTx to_tx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_to_tx(), output);
  }

  // optional .zjchain.hotstuff.protobuf.LeaderTxPrepare ltx_prepare = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ltx_prepare(), output);
  }

  // optional .zjchain.hotstuff.protobuf.BackupTxPrepare btx_prepare = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_btx_prepare(), output);
  }

  // optional .zjchain.hotstuff.protobuf.LeaderTxPreCommit ltx_precommit = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ltx_precommit(), output);
  }

  // optional .zjchain.hotstuff.protobuf.BackupTxPreCommit btx_precommit = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_btx_precommit(), output);
  }

  // optional .zjchain.hotstuff.protobuf.LeaderTxCommit ltx_commit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_ltx_commit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.TxBft)
}

::google::protobuf::uint8* TxBft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.TxBft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zjchain.hotstuff.protobuf.ToAccountTx to_tx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_to_tx(), deterministic, target);
  }

  // optional .zjchain.hotstuff.protobuf.LeaderTxPrepare ltx_prepare = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ltx_prepare(), deterministic, target);
  }

  // optional .zjchain.hotstuff.protobuf.BackupTxPrepare btx_prepare = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_btx_prepare(), deterministic, target);
  }

  // optional .zjchain.hotstuff.protobuf.LeaderTxPreCommit ltx_precommit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ltx_precommit(), deterministic, target);
  }

  // optional .zjchain.hotstuff.protobuf.BackupTxPreCommit btx_precommit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_btx_precommit(), deterministic, target);
  }

  // optional .zjchain.hotstuff.protobuf.LeaderTxCommit ltx_commit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_ltx_commit(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.TxBft)
  return target;
}

size_t TxBft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.TxBft)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .zjchain.hotstuff.protobuf.ToAccountTx to_tx = 1;
    if (has_to_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *to_tx_);
    }

    // optional .zjchain.hotstuff.protobuf.LeaderTxPrepare ltx_prepare = 2;
    if (has_ltx_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ltx_prepare_);
    }

    // optional .zjchain.hotstuff.protobuf.BackupTxPrepare btx_prepare = 3;
    if (has_btx_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *btx_prepare_);
    }

    // optional .zjchain.hotstuff.protobuf.LeaderTxPreCommit ltx_precommit = 4;
    if (has_ltx_precommit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ltx_precommit_);
    }

    // optional .zjchain.hotstuff.protobuf.BackupTxPreCommit btx_precommit = 5;
    if (has_btx_precommit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *btx_precommit_);
    }

    // optional .zjchain.hotstuff.protobuf.LeaderTxCommit ltx_commit = 6;
    if (has_ltx_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ltx_commit_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxBft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.TxBft)
  GOOGLE_DCHECK_NE(&from, this);
  const TxBft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxBft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.TxBft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.TxBft)
    MergeFrom(*source);
  }
}

void TxBft::MergeFrom(const TxBft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.TxBft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_to_tx()->::zjchain::hotstuff::protobuf::ToAccountTx::MergeFrom(from.to_tx());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ltx_prepare()->::zjchain::hotstuff::protobuf::LeaderTxPrepare::MergeFrom(from.ltx_prepare());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_btx_prepare()->::zjchain::hotstuff::protobuf::BackupTxPrepare::MergeFrom(from.btx_prepare());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ltx_precommit()->::zjchain::hotstuff::protobuf::LeaderTxPreCommit::MergeFrom(from.ltx_precommit());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_btx_precommit()->::zjchain::hotstuff::protobuf::BackupTxPreCommit::MergeFrom(from.btx_precommit());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ltx_commit()->::zjchain::hotstuff::protobuf::LeaderTxCommit::MergeFrom(from.ltx_commit());
    }
  }
}

void TxBft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.TxBft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxBft::CopyFrom(const TxBft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.TxBft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxBft::IsInitialized() const {
  return true;
}

void TxBft::Swap(TxBft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxBft::InternalSwap(TxBft* other) {
  using std::swap;
  swap(to_tx_, other->to_tx_);
  swap(ltx_prepare_, other->ltx_prepare_);
  swap(btx_prepare_, other->btx_prepare_);
  swap(ltx_precommit_, other->ltx_precommit_);
  swap(btx_precommit_, other->btx_precommit_);
  swap(ltx_commit_, other->ltx_commit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxBft::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ZbftMessage::InitAsDefaultInstance() {
  ::zjchain::hotstuff::protobuf::_HotstuffMessage_default_instance_._instance.get_mutable()->tx_bft_ = const_cast< ::zjchain::hotstuff::protobuf::TxBft*>(
      ::zjchain::hotstuff::protobuf::TxBft::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZbftMessage::kGidFieldNumber;
const int ZbftMessage::kBftStepFieldNumber;
const int ZbftMessage::kLeaderFieldNumber;
const int ZbftMessage::kNetIdFieldNumber;
const int ZbftMessage::kBitmapFieldNumber;
const int ZbftMessage::kAgreeFieldNumber;
const int ZbftMessage::kPoolIndexFieldNumber;
const int ZbftMessage::kErrorFieldNumber;
const int ZbftMessage::kTxBftFieldNumber;
const int ZbftMessage::kPrepareHashFieldNumber;
const int ZbftMessage::kNodeIpFieldNumber;
const int ZbftMessage::kNodePortFieldNumber;
const int ZbftMessage::kEpochFieldNumber;
const int ZbftMessage::kMemberIndexFieldNumber;
const int ZbftMessage::kPubkeyFieldNumber;
const int ZbftMessage::kBackupEncDataFieldNumber;
const int ZbftMessage::kElectHeightFieldNumber;
const int ZbftMessage::kBlsSignXFieldNumber;
const int ZbftMessage::kBlsSignYFieldNumber;
const int ZbftMessage::kCommitBitmapFieldNumber;
const int ZbftMessage::kBlsAggVerifyHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZbftMessage::ZbftMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protos_2fhotstuff_2eproto::scc_info_HotstuffMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zjchain.hotstuff.protobuf.ZbftMessage)
}
ZbftMessage::ZbftMessage(const ZbftMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bitmap_(from.bitmap_),
      commit_bitmap_(from.commit_bitmap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gid()) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  prepare_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prepare_hash()) {
    prepare_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prepare_hash_);
  }
  node_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_ip()) {
    node_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ip_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  backup_enc_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_backup_enc_data()) {
    backup_enc_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backup_enc_data_);
  }
  bls_sign_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bls_sign_x()) {
    bls_sign_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_x_);
  }
  bls_sign_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bls_sign_y()) {
    bls_sign_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_y_);
  }
  bls_agg_verify_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bls_agg_verify_hash()) {
    bls_agg_verify_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_agg_verify_hash_);
  }
  if (from.has_tx_bft()) {
    tx_bft_ = new ::zjchain::hotstuff::protobuf::TxBft(*from.tx_bft_);
  } else {
    tx_bft_ = NULL;
  }
  ::memcpy(&bft_step_, &from.bft_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&elect_height_) -
    reinterpret_cast<char*>(&bft_step_)) + sizeof(elect_height_));
  // @@protoc_insertion_point(copy_constructor:zjchain.hotstuff.protobuf.ZbftMessage)
}

void ZbftMessage::SharedCtor() {
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prepare_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backup_enc_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_agg_verify_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_bft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elect_height_) -
      reinterpret_cast<char*>(&tx_bft_)) + sizeof(elect_height_));
}

ZbftMessage::~ZbftMessage() {
  // @@protoc_insertion_point(destructor:zjchain.hotstuff.protobuf.ZbftMessage)
  SharedDtor();
}

void ZbftMessage::SharedDtor() {
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prepare_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backup_enc_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_agg_verify_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tx_bft_;
}

void ZbftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ZbftMessage::descriptor() {
  ::protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ZbftMessage& ZbftMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protos_2fhotstuff_2eproto::scc_info_HotstuffMessage.base);
  return *internal_default_instance();
}


void ZbftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zjchain.hotstuff.protobuf.ZbftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitmap_.Clear();
  commit_bitmap_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      prepare_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      node_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      backup_enc_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      bls_sign_x_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      bls_sign_y_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      bls_agg_verify_hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(tx_bft_ != NULL);
    tx_bft_->Clear();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&bft_step_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_port_) -
        reinterpret_cast<char*>(&bft_step_)) + sizeof(node_port_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elect_height_) -
        reinterpret_cast<char*>(&epoch_)) + sizeof(elect_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ZbftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zjchain.hotstuff.protobuf.ZbftMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bft_step = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bft_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bft_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bitmap = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_bitmap())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bitmap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool agree = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_agree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pool_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_pool_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zjchain.hotstuff.protobuf.TxBft tx_bft = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_bft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes prepare_hash = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prepare_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes node_ip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_port = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_node_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 epoch = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_epoch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_index = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_member_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes backup_enc_data = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_backup_enc_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 elect_height = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_elect_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bls_sign_x = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bls_sign_y = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 commit_bitmap = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 160u, input, this->mutable_commit_bitmap())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_commit_bitmap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bls_agg_verify_hash = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_agg_verify_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zjchain.hotstuff.protobuf.ZbftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zjchain.hotstuff.protobuf.ZbftMessage)
  return false;
#undef DO_
}

void ZbftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zjchain.hotstuff.protobuf.ZbftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gid(), output);
  }

  // optional int32 bft_step = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bft_step(), output);
  }

  // optional bool leader = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leader(), output);
  }

  // optional uint32 net_id = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->net_id(), output);
  }

  // repeated uint64 bitmap = 5;
  for (int i = 0, n = this->bitmap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->bitmap(i), output);
  }

  // optional bool agree = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->agree(), output);
  }

  // optional uint32 pool_index = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pool_index(), output);
  }

  // optional int32 error = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->error(), output);
  }

  // optional .zjchain.hotstuff.protobuf.TxBft tx_bft = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_tx_bft(), output);
  }

  // optional bytes prepare_hash = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->prepare_hash(), output);
  }

  // optional bytes node_ip = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->node_ip(), output);
  }

  // optional uint32 node_port = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->node_port(), output);
  }

  // optional uint32 epoch = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->epoch(), output);
  }

  // optional uint32 member_index = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->member_index(), output);
  }

  // optional bytes pubkey = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->pubkey(), output);
  }

  // optional bytes backup_enc_data = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->backup_enc_data(), output);
  }

  // optional uint64 elect_height = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->elect_height(), output);
  }

  // optional bytes bls_sign_x = 18;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->bls_sign_x(), output);
  }

  // optional bytes bls_sign_y = 19;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->bls_sign_y(), output);
  }

  // repeated uint64 commit_bitmap = 20;
  for (int i = 0, n = this->commit_bitmap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      20, this->commit_bitmap(i), output);
  }

  // optional bytes bls_agg_verify_hash = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->bls_agg_verify_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zjchain.hotstuff.protobuf.ZbftMessage)
}

::google::protobuf::uint8* ZbftMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zjchain.hotstuff.protobuf.ZbftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gid(), target);
  }

  // optional int32 bft_step = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bft_step(), target);
  }

  // optional bool leader = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leader(), target);
  }

  // optional uint32 net_id = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->net_id(), target);
  }

  // repeated uint64 bitmap = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->bitmap_, target);

  // optional bool agree = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->agree(), target);
  }

  // optional uint32 pool_index = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pool_index(), target);
  }

  // optional int32 error = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->error(), target);
  }

  // optional .zjchain.hotstuff.protobuf.TxBft tx_bft = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_tx_bft(), deterministic, target);
  }

  // optional bytes prepare_hash = 10;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->prepare_hash(), target);
  }

  // optional bytes node_ip = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->node_ip(), target);
  }

  // optional uint32 node_port = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->node_port(), target);
  }

  // optional uint32 epoch = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->epoch(), target);
  }

  // optional uint32 member_index = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->member_index(), target);
  }

  // optional bytes pubkey = 15;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->pubkey(), target);
  }

  // optional bytes backup_enc_data = 16;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->backup_enc_data(), target);
  }

  // optional uint64 elect_height = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->elect_height(), target);
  }

  // optional bytes bls_sign_x = 18;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->bls_sign_x(), target);
  }

  // optional bytes bls_sign_y = 19;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->bls_sign_y(), target);
  }

  // repeated uint64 commit_bitmap = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(20, this->commit_bitmap_, target);

  // optional bytes bls_agg_verify_hash = 21;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->bls_agg_verify_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zjchain.hotstuff.protobuf.ZbftMessage)
  return target;
}

size_t ZbftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zjchain.hotstuff.protobuf.ZbftMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 bitmap = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bitmap_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bitmap_size());
    total_size += data_size;
  }

  // repeated uint64 commit_bitmap = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->commit_bitmap_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->commit_bitmap_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional bytes prepare_hash = 10;
    if (has_prepare_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prepare_hash());
    }

    // optional bytes node_ip = 11;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_ip());
    }

    // optional bytes pubkey = 15;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes backup_enc_data = 16;
    if (has_backup_enc_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->backup_enc_data());
    }

    // optional bytes bls_sign_x = 18;
    if (has_bls_sign_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_x());
    }

    // optional bytes bls_sign_y = 19;
    if (has_bls_sign_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_y());
    }

    // optional bytes bls_agg_verify_hash = 21;
    if (has_bls_agg_verify_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_agg_verify_hash());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .zjchain.hotstuff.protobuf.TxBft tx_bft = 9;
    if (has_tx_bft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_bft_);
    }

    // optional int32 bft_step = 2;
    if (has_bft_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bft_step());
    }

    // optional uint32 net_id = 4;
    if (has_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_id());
    }

    // optional bool leader = 3;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional bool agree = 6;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 pool_index = 7;
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

    // optional int32 error = 8;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional uint32 node_port = 12;
    if (has_node_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_port());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 epoch = 13;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epoch());
    }

    // optional uint32 member_index = 14;
    if (has_member_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_index());
    }

    // optional uint64 elect_height = 17;
    if (has_elect_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZbftMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zjchain.hotstuff.protobuf.ZbftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ZbftMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ZbftMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zjchain.hotstuff.protobuf.ZbftMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zjchain.hotstuff.protobuf.ZbftMessage)
    MergeFrom(*source);
  }
}

void ZbftMessage::MergeFrom(const ZbftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zjchain.hotstuff.protobuf.ZbftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bitmap_.MergeFrom(from.bitmap_);
  commit_bitmap_.MergeFrom(from.commit_bitmap_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_prepare_hash();
      prepare_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prepare_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_node_ip();
      node_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_backup_enc_data();
      backup_enc_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backup_enc_data_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_bls_sign_x();
      bls_sign_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_x_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_bls_sign_y();
      bls_sign_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_y_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_bls_agg_verify_hash();
      bls_agg_verify_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_agg_verify_hash_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_tx_bft()->::zjchain::hotstuff::protobuf::TxBft::MergeFrom(from.tx_bft());
    }
    if (cached_has_bits & 0x00000200u) {
      bft_step_ = from.bft_step_;
    }
    if (cached_has_bits & 0x00000400u) {
      net_id_ = from.net_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      leader_ = from.leader_;
    }
    if (cached_has_bits & 0x00001000u) {
      agree_ = from.agree_;
    }
    if (cached_has_bits & 0x00002000u) {
      pool_index_ = from.pool_index_;
    }
    if (cached_has_bits & 0x00004000u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00008000u) {
      node_port_ = from.node_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      epoch_ = from.epoch_;
    }
    if (cached_has_bits & 0x00020000u) {
      member_index_ = from.member_index_;
    }
    if (cached_has_bits & 0x00040000u) {
      elect_height_ = from.elect_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ZbftMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zjchain.hotstuff.protobuf.ZbftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZbftMessage::CopyFrom(const ZbftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zjchain.hotstuff.protobuf.ZbftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZbftMessage::IsInitialized() const {
  return true;
}

void ZbftMessage::Swap(ZbftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZbftMessage::InternalSwap(ZbftMessage* other) {
  using std::swap;
  bitmap_.InternalSwap(&other->bitmap_);
  commit_bitmap_.InternalSwap(&other->commit_bitmap_);
  gid_.Swap(&other->gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prepare_hash_.Swap(&other->prepare_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_ip_.Swap(&other->node_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  backup_enc_data_.Swap(&other->backup_enc_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bls_sign_x_.Swap(&other->bls_sign_x_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bls_sign_y_.Swap(&other->bls_sign_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bls_agg_verify_hash_.Swap(&other->bls_agg_verify_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tx_bft_, other->tx_bft_);
  swap(bft_step_, other->bft_step_);
  swap(net_id_, other->net_id_);
  swap(leader_, other->leader_);
  swap(agree_, other->agree_);
  swap(pool_index_, other->pool_index_);
  swap(error_, other->error_);
  swap(node_port_, other->node_port_);
  swap(epoch_, other->epoch_);
  swap(member_index_, other->member_index_);
  swap(elect_height_, other->elect_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ZbftMessage::GetMetadata() const {
  protobuf_protos_2fhotstuff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protos_2fhotstuff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace hotstuff
}  // namespace zjchain
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::LeaderTxPrepare* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::LeaderTxPrepare >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::LeaderTxPrepare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::BackupTxPrepare* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::BackupTxPrepare >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::BackupTxPrepare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::LeaderTxPreCommit* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::LeaderTxPreCommit >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::LeaderTxPreCommit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::BackupTxPreCommit* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::BackupTxPreCommit >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::BackupTxPreCommit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::LeaderTxCommit* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::LeaderTxCommit >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::LeaderTxCommit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::ToAccountTx* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::ToAccountTx >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::ToAccountTx >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::TxBft* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::TxBft >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::TxBft >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zjchain::hotstuff::protobuf::ZbftMessage* Arena::CreateMaybeMessage< ::zjchain::hotstuff::protobuf::ZbftMessage >(Arena* arena) {
  return Arena::CreateInternal< ::zjchain::hotstuff::protobuf::ZbftMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
