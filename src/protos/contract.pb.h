// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/contract.proto

#ifndef PROTOBUF_protos_2fcontract_2eproto__INCLUDED
#define PROTOBUF_protos_2fcontract_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace contract {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protos_2fcontract_2eproto();
void protobuf_AssignDesc_protos_2fcontract_2eproto();
void protobuf_ShutdownFile_protos_2fcontract_2eproto();

class GetAttrByKeyReq;
class GetAttrByKeyRes;
class ContractMessage;

// ===================================================================

class GetAttrByKeyReq : public ::google::protobuf::Message {
 public:
  GetAttrByKeyReq();
  virtual ~GetAttrByKeyReq();

  GetAttrByKeyReq(const GetAttrByKeyReq& from);

  inline GetAttrByKeyReq& operator=(const GetAttrByKeyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAttrByKeyReq& default_instance();

  void Swap(GetAttrByKeyReq* other);

  // implements Message ----------------------------------------------

  GetAttrByKeyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAttrByKeyReq& from);
  void MergeFrom(const GetAttrByKeyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes call_addr = 1;
  inline bool has_call_addr() const;
  inline void clear_call_addr();
  static const int kCallAddrFieldNumber = 1;
  inline const ::std::string& call_addr() const;
  inline void set_call_addr(const ::std::string& value);
  inline void set_call_addr(const char* value);
  inline void set_call_addr(const void* value, size_t size);
  inline ::std::string* mutable_call_addr();
  inline ::std::string* release_call_addr();
  inline void set_allocated_call_addr(::std::string* call_addr);

  // optional bytes attr_key = 2;
  inline bool has_attr_key() const;
  inline void clear_attr_key();
  static const int kAttrKeyFieldNumber = 2;
  inline const ::std::string& attr_key() const;
  inline void set_attr_key(const ::std::string& value);
  inline void set_attr_key(const char* value);
  inline void set_attr_key(const void* value, size_t size);
  inline ::std::string* mutable_attr_key();
  inline ::std::string* release_attr_key();
  inline void set_allocated_attr_key(::std::string* attr_key);

  // @@protoc_insertion_point(class_scope:zjchain.contract.protobuf.GetAttrByKeyReq)
 private:
  inline void set_has_call_addr();
  inline void clear_has_call_addr();
  inline void set_has_attr_key();
  inline void clear_has_attr_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* call_addr_;
  ::std::string* attr_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fcontract_2eproto();
  friend void protobuf_AssignDesc_protos_2fcontract_2eproto();
  friend void protobuf_ShutdownFile_protos_2fcontract_2eproto();

  void InitAsDefaultInstance();
  static GetAttrByKeyReq* default_instance_;
};
// -------------------------------------------------------------------

class GetAttrByKeyRes : public ::google::protobuf::Message {
 public:
  GetAttrByKeyRes();
  virtual ~GetAttrByKeyRes();

  GetAttrByKeyRes(const GetAttrByKeyRes& from);

  inline GetAttrByKeyRes& operator=(const GetAttrByKeyRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAttrByKeyRes& default_instance();

  void Swap(GetAttrByKeyRes* other);

  // implements Message ----------------------------------------------

  GetAttrByKeyRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAttrByKeyRes& from);
  void MergeFrom(const GetAttrByKeyRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes call_addr = 1;
  inline bool has_call_addr() const;
  inline void clear_call_addr();
  static const int kCallAddrFieldNumber = 1;
  inline const ::std::string& call_addr() const;
  inline void set_call_addr(const ::std::string& value);
  inline void set_call_addr(const char* value);
  inline void set_call_addr(const void* value, size_t size);
  inline ::std::string* mutable_call_addr();
  inline ::std::string* release_call_addr();
  inline void set_allocated_call_addr(::std::string* call_addr);

  // optional bytes attr_key = 2;
  inline bool has_attr_key() const;
  inline void clear_attr_key();
  static const int kAttrKeyFieldNumber = 2;
  inline const ::std::string& attr_key() const;
  inline void set_attr_key(const ::std::string& value);
  inline void set_attr_key(const char* value);
  inline void set_attr_key(const void* value, size_t size);
  inline ::std::string* mutable_attr_key();
  inline ::std::string* release_attr_key();
  inline void set_allocated_attr_key(::std::string* attr_key);

  // optional bytes attr_value = 3;
  inline bool has_attr_value() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 3;
  inline const ::std::string& attr_value() const;
  inline void set_attr_value(const ::std::string& value);
  inline void set_attr_value(const char* value);
  inline void set_attr_value(const void* value, size_t size);
  inline ::std::string* mutable_attr_value();
  inline ::std::string* release_attr_value();
  inline void set_allocated_attr_value(::std::string* attr_value);

  // @@protoc_insertion_point(class_scope:zjchain.contract.protobuf.GetAttrByKeyRes)
 private:
  inline void set_has_call_addr();
  inline void clear_has_call_addr();
  inline void set_has_attr_key();
  inline void clear_has_attr_key();
  inline void set_has_attr_value();
  inline void clear_has_attr_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* call_addr_;
  ::std::string* attr_key_;
  ::std::string* attr_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fcontract_2eproto();
  friend void protobuf_AssignDesc_protos_2fcontract_2eproto();
  friend void protobuf_ShutdownFile_protos_2fcontract_2eproto();

  void InitAsDefaultInstance();
  static GetAttrByKeyRes* default_instance_;
};
// -------------------------------------------------------------------

class ContractMessage : public ::google::protobuf::Message {
 public:
  ContractMessage();
  virtual ~ContractMessage();

  ContractMessage(const ContractMessage& from);

  inline ContractMessage& operator=(const ContractMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContractMessage& default_instance();

  void Swap(ContractMessage* other);

  // implements Message ----------------------------------------------

  ContractMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContractMessage& from);
  void MergeFrom(const ContractMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
  inline bool has_get_attr_req() const;
  inline void clear_get_attr_req();
  static const int kGetAttrReqFieldNumber = 1;
  inline const ::zjchain::contract::protobuf::GetAttrByKeyReq& get_attr_req() const;
  inline ::zjchain::contract::protobuf::GetAttrByKeyReq* mutable_get_attr_req();
  inline ::zjchain::contract::protobuf::GetAttrByKeyReq* release_get_attr_req();
  inline void set_allocated_get_attr_req(::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req);

  // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
  inline bool has_get_attr_res() const;
  inline void clear_get_attr_res();
  static const int kGetAttrResFieldNumber = 2;
  inline const ::zjchain::contract::protobuf::GetAttrByKeyRes& get_attr_res() const;
  inline ::zjchain::contract::protobuf::GetAttrByKeyRes* mutable_get_attr_res();
  inline ::zjchain::contract::protobuf::GetAttrByKeyRes* release_get_attr_res();
  inline void set_allocated_get_attr_res(::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res);

  // @@protoc_insertion_point(class_scope:zjchain.contract.protobuf.ContractMessage)
 private:
  inline void set_has_get_attr_req();
  inline void clear_has_get_attr_req();
  inline void set_has_get_attr_res();
  inline void clear_has_get_attr_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req_;
  ::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fcontract_2eproto();
  friend void protobuf_AssignDesc_protos_2fcontract_2eproto();
  friend void protobuf_ShutdownFile_protos_2fcontract_2eproto();

  void InitAsDefaultInstance();
  static ContractMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// GetAttrByKeyReq

// optional bytes call_addr = 1;
inline bool GetAttrByKeyReq::has_call_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAttrByKeyReq::set_has_call_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAttrByKeyReq::clear_has_call_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAttrByKeyReq::clear_call_addr() {
  if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
    call_addr_->clear();
  }
  clear_has_call_addr();
}
inline const ::std::string& GetAttrByKeyReq::call_addr() const {
  return *call_addr_;
}
inline void GetAttrByKeyReq::set_call_addr(const ::std::string& value) {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  call_addr_->assign(value);
}
inline void GetAttrByKeyReq::set_call_addr(const char* value) {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  call_addr_->assign(value);
}
inline void GetAttrByKeyReq::set_call_addr(const void* value, size_t size) {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  call_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAttrByKeyReq::mutable_call_addr() {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  return call_addr_;
}
inline ::std::string* GetAttrByKeyReq::release_call_addr() {
  clear_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = call_addr_;
    call_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAttrByKeyReq::set_allocated_call_addr(::std::string* call_addr) {
  if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete call_addr_;
  }
  if (call_addr) {
    set_has_call_addr();
    call_addr_ = call_addr;
  } else {
    clear_has_call_addr();
    call_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes attr_key = 2;
inline bool GetAttrByKeyReq::has_attr_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAttrByKeyReq::set_has_attr_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAttrByKeyReq::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAttrByKeyReq::clear_attr_key() {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    attr_key_->clear();
  }
  clear_has_attr_key();
}
inline const ::std::string& GetAttrByKeyReq::attr_key() const {
  return *attr_key_;
}
inline void GetAttrByKeyReq::set_attr_key(const ::std::string& value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void GetAttrByKeyReq::set_attr_key(const char* value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void GetAttrByKeyReq::set_attr_key(const void* value, size_t size) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAttrByKeyReq::mutable_attr_key() {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  return attr_key_;
}
inline ::std::string* GetAttrByKeyReq::release_attr_key() {
  clear_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attr_key_;
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAttrByKeyReq::set_allocated_attr_key(::std::string* attr_key) {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (attr_key) {
    set_has_attr_key();
    attr_key_ = attr_key;
  } else {
    clear_has_attr_key();
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetAttrByKeyRes

// optional bytes call_addr = 1;
inline bool GetAttrByKeyRes::has_call_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAttrByKeyRes::set_has_call_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAttrByKeyRes::clear_has_call_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAttrByKeyRes::clear_call_addr() {
  if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
    call_addr_->clear();
  }
  clear_has_call_addr();
}
inline const ::std::string& GetAttrByKeyRes::call_addr() const {
  return *call_addr_;
}
inline void GetAttrByKeyRes::set_call_addr(const ::std::string& value) {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  call_addr_->assign(value);
}
inline void GetAttrByKeyRes::set_call_addr(const char* value) {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  call_addr_->assign(value);
}
inline void GetAttrByKeyRes::set_call_addr(const void* value, size_t size) {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  call_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAttrByKeyRes::mutable_call_addr() {
  set_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    call_addr_ = new ::std::string;
  }
  return call_addr_;
}
inline ::std::string* GetAttrByKeyRes::release_call_addr() {
  clear_has_call_addr();
  if (call_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = call_addr_;
    call_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAttrByKeyRes::set_allocated_call_addr(::std::string* call_addr) {
  if (call_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete call_addr_;
  }
  if (call_addr) {
    set_has_call_addr();
    call_addr_ = call_addr;
  } else {
    clear_has_call_addr();
    call_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes attr_key = 2;
inline bool GetAttrByKeyRes::has_attr_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAttrByKeyRes::set_has_attr_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAttrByKeyRes::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAttrByKeyRes::clear_attr_key() {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    attr_key_->clear();
  }
  clear_has_attr_key();
}
inline const ::std::string& GetAttrByKeyRes::attr_key() const {
  return *attr_key_;
}
inline void GetAttrByKeyRes::set_attr_key(const ::std::string& value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void GetAttrByKeyRes::set_attr_key(const char* value) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(value);
}
inline void GetAttrByKeyRes::set_attr_key(const void* value, size_t size) {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  attr_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAttrByKeyRes::mutable_attr_key() {
  set_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    attr_key_ = new ::std::string;
  }
  return attr_key_;
}
inline ::std::string* GetAttrByKeyRes::release_attr_key() {
  clear_has_attr_key();
  if (attr_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attr_key_;
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAttrByKeyRes::set_allocated_attr_key(::std::string* attr_key) {
  if (attr_key_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_key_;
  }
  if (attr_key) {
    set_has_attr_key();
    attr_key_ = attr_key;
  } else {
    clear_has_attr_key();
    attr_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes attr_value = 3;
inline bool GetAttrByKeyRes::has_attr_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAttrByKeyRes::set_has_attr_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAttrByKeyRes::clear_has_attr_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAttrByKeyRes::clear_attr_value() {
  if (attr_value_ != &::google::protobuf::internal::kEmptyString) {
    attr_value_->clear();
  }
  clear_has_attr_value();
}
inline const ::std::string& GetAttrByKeyRes::attr_value() const {
  return *attr_value_;
}
inline void GetAttrByKeyRes::set_attr_value(const ::std::string& value) {
  set_has_attr_value();
  if (attr_value_ == &::google::protobuf::internal::kEmptyString) {
    attr_value_ = new ::std::string;
  }
  attr_value_->assign(value);
}
inline void GetAttrByKeyRes::set_attr_value(const char* value) {
  set_has_attr_value();
  if (attr_value_ == &::google::protobuf::internal::kEmptyString) {
    attr_value_ = new ::std::string;
  }
  attr_value_->assign(value);
}
inline void GetAttrByKeyRes::set_attr_value(const void* value, size_t size) {
  set_has_attr_value();
  if (attr_value_ == &::google::protobuf::internal::kEmptyString) {
    attr_value_ = new ::std::string;
  }
  attr_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAttrByKeyRes::mutable_attr_value() {
  set_has_attr_value();
  if (attr_value_ == &::google::protobuf::internal::kEmptyString) {
    attr_value_ = new ::std::string;
  }
  return attr_value_;
}
inline ::std::string* GetAttrByKeyRes::release_attr_value() {
  clear_has_attr_value();
  if (attr_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attr_value_;
    attr_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAttrByKeyRes::set_allocated_attr_value(::std::string* attr_value) {
  if (attr_value_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_value_;
  }
  if (attr_value) {
    set_has_attr_value();
    attr_value_ = attr_value;
  } else {
    clear_has_attr_value();
    attr_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ContractMessage

// optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
inline bool ContractMessage::has_get_attr_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContractMessage::set_has_get_attr_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContractMessage::clear_has_get_attr_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContractMessage::clear_get_attr_req() {
  if (get_attr_req_ != NULL) get_attr_req_->::zjchain::contract::protobuf::GetAttrByKeyReq::Clear();
  clear_has_get_attr_req();
}
inline const ::zjchain::contract::protobuf::GetAttrByKeyReq& ContractMessage::get_attr_req() const {
  return get_attr_req_ != NULL ? *get_attr_req_ : *default_instance_->get_attr_req_;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyReq* ContractMessage::mutable_get_attr_req() {
  set_has_get_attr_req();
  if (get_attr_req_ == NULL) get_attr_req_ = new ::zjchain::contract::protobuf::GetAttrByKeyReq;
  return get_attr_req_;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyReq* ContractMessage::release_get_attr_req() {
  clear_has_get_attr_req();
  ::zjchain::contract::protobuf::GetAttrByKeyReq* temp = get_attr_req_;
  get_attr_req_ = NULL;
  return temp;
}
inline void ContractMessage::set_allocated_get_attr_req(::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req) {
  delete get_attr_req_;
  get_attr_req_ = get_attr_req;
  if (get_attr_req) {
    set_has_get_attr_req();
  } else {
    clear_has_get_attr_req();
  }
}

// optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
inline bool ContractMessage::has_get_attr_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContractMessage::set_has_get_attr_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContractMessage::clear_has_get_attr_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContractMessage::clear_get_attr_res() {
  if (get_attr_res_ != NULL) get_attr_res_->::zjchain::contract::protobuf::GetAttrByKeyRes::Clear();
  clear_has_get_attr_res();
}
inline const ::zjchain::contract::protobuf::GetAttrByKeyRes& ContractMessage::get_attr_res() const {
  return get_attr_res_ != NULL ? *get_attr_res_ : *default_instance_->get_attr_res_;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyRes* ContractMessage::mutable_get_attr_res() {
  set_has_get_attr_res();
  if (get_attr_res_ == NULL) get_attr_res_ = new ::zjchain::contract::protobuf::GetAttrByKeyRes;
  return get_attr_res_;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyRes* ContractMessage::release_get_attr_res() {
  clear_has_get_attr_res();
  ::zjchain::contract::protobuf::GetAttrByKeyRes* temp = get_attr_res_;
  get_attr_res_ = NULL;
  return temp;
}
inline void ContractMessage::set_allocated_get_attr_res(::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res) {
  delete get_attr_res_;
  get_attr_res_ = get_attr_res;
  if (get_attr_res) {
    set_has_get_attr_res();
  } else {
    clear_has_get_attr_res();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace contract
}  // namespace zjchain

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protos_2fcontract_2eproto__INCLUDED
