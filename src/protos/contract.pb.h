// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fcontract_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fcontract_2eproto;
namespace zjchain {
namespace contract {
namespace protobuf {
class ContractMessage;
struct ContractMessageDefaultTypeInternal;
extern ContractMessageDefaultTypeInternal _ContractMessage_default_instance_;
class GetAttrByKeyReq;
struct GetAttrByKeyReqDefaultTypeInternal;
extern GetAttrByKeyReqDefaultTypeInternal _GetAttrByKeyReq_default_instance_;
class GetAttrByKeyRes;
struct GetAttrByKeyResDefaultTypeInternal;
extern GetAttrByKeyResDefaultTypeInternal _GetAttrByKeyRes_default_instance_;
}  // namespace protobuf
}  // namespace contract
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::contract::protobuf::ContractMessage* Arena::CreateMaybeMessage<::zjchain::contract::protobuf::ContractMessage>(Arena*);
template<> ::zjchain::contract::protobuf::GetAttrByKeyReq* Arena::CreateMaybeMessage<::zjchain::contract::protobuf::GetAttrByKeyReq>(Arena*);
template<> ::zjchain::contract::protobuf::GetAttrByKeyRes* Arena::CreateMaybeMessage<::zjchain::contract::protobuf::GetAttrByKeyRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace contract {
namespace protobuf {

// ===================================================================

class GetAttrByKeyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.contract.protobuf.GetAttrByKeyReq) */ {
 public:
  inline GetAttrByKeyReq() : GetAttrByKeyReq(nullptr) {}
  ~GetAttrByKeyReq() override;
  explicit PROTOBUF_CONSTEXPR GetAttrByKeyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAttrByKeyReq(const GetAttrByKeyReq& from);
  GetAttrByKeyReq(GetAttrByKeyReq&& from) noexcept
    : GetAttrByKeyReq() {
    *this = ::std::move(from);
  }

  inline GetAttrByKeyReq& operator=(const GetAttrByKeyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttrByKeyReq& operator=(GetAttrByKeyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttrByKeyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttrByKeyReq* internal_default_instance() {
    return reinterpret_cast<const GetAttrByKeyReq*>(
               &_GetAttrByKeyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAttrByKeyReq& a, GetAttrByKeyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttrByKeyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttrByKeyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttrByKeyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAttrByKeyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAttrByKeyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAttrByKeyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttrByKeyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.contract.protobuf.GetAttrByKeyReq";
  }
  protected:
  explicit GetAttrByKeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallAddrFieldNumber = 1,
    kAttrKeyFieldNumber = 2,
  };
  // optional bytes call_addr = 1;
  bool has_call_addr() const;
  private:
  bool _internal_has_call_addr() const;
  public:
  void clear_call_addr();
  const std::string& call_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_call_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_call_addr();
  PROTOBUF_NODISCARD std::string* release_call_addr();
  void set_allocated_call_addr(std::string* call_addr);
  private:
  const std::string& _internal_call_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_addr(const std::string& value);
  std::string* _internal_mutable_call_addr();
  public:

  // optional bytes attr_key = 2;
  bool has_attr_key() const;
  private:
  bool _internal_has_attr_key() const;
  public:
  void clear_attr_key();
  const std::string& attr_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attr_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attr_key();
  PROTOBUF_NODISCARD std::string* release_attr_key();
  void set_allocated_attr_key(std::string* attr_key);
  private:
  const std::string& _internal_attr_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attr_key(const std::string& value);
  std::string* _internal_mutable_attr_key();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.contract.protobuf.GetAttrByKeyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr call_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_key_;
  friend struct ::TableStruct_protos_2fcontract_2eproto;
};
// -------------------------------------------------------------------

class GetAttrByKeyRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.contract.protobuf.GetAttrByKeyRes) */ {
 public:
  inline GetAttrByKeyRes() : GetAttrByKeyRes(nullptr) {}
  ~GetAttrByKeyRes() override;
  explicit PROTOBUF_CONSTEXPR GetAttrByKeyRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAttrByKeyRes(const GetAttrByKeyRes& from);
  GetAttrByKeyRes(GetAttrByKeyRes&& from) noexcept
    : GetAttrByKeyRes() {
    *this = ::std::move(from);
  }

  inline GetAttrByKeyRes& operator=(const GetAttrByKeyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttrByKeyRes& operator=(GetAttrByKeyRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttrByKeyRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttrByKeyRes* internal_default_instance() {
    return reinterpret_cast<const GetAttrByKeyRes*>(
               &_GetAttrByKeyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAttrByKeyRes& a, GetAttrByKeyRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttrByKeyRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttrByKeyRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttrByKeyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAttrByKeyRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAttrByKeyRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAttrByKeyRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttrByKeyRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.contract.protobuf.GetAttrByKeyRes";
  }
  protected:
  explicit GetAttrByKeyRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallAddrFieldNumber = 1,
    kAttrKeyFieldNumber = 2,
    kAttrValueFieldNumber = 3,
  };
  // optional bytes call_addr = 1;
  bool has_call_addr() const;
  private:
  bool _internal_has_call_addr() const;
  public:
  void clear_call_addr();
  const std::string& call_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_call_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_call_addr();
  PROTOBUF_NODISCARD std::string* release_call_addr();
  void set_allocated_call_addr(std::string* call_addr);
  private:
  const std::string& _internal_call_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_addr(const std::string& value);
  std::string* _internal_mutable_call_addr();
  public:

  // optional bytes attr_key = 2;
  bool has_attr_key() const;
  private:
  bool _internal_has_attr_key() const;
  public:
  void clear_attr_key();
  const std::string& attr_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attr_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attr_key();
  PROTOBUF_NODISCARD std::string* release_attr_key();
  void set_allocated_attr_key(std::string* attr_key);
  private:
  const std::string& _internal_attr_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attr_key(const std::string& value);
  std::string* _internal_mutable_attr_key();
  public:

  // optional bytes attr_value = 3;
  bool has_attr_value() const;
  private:
  bool _internal_has_attr_value() const;
  public:
  void clear_attr_value();
  const std::string& attr_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attr_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attr_value();
  PROTOBUF_NODISCARD std::string* release_attr_value();
  void set_allocated_attr_value(std::string* attr_value);
  private:
  const std::string& _internal_attr_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attr_value(const std::string& value);
  std::string* _internal_mutable_attr_value();
  public:

  // @@protoc_insertion_point(class_scope:zjchain.contract.protobuf.GetAttrByKeyRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr call_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_value_;
  friend struct ::TableStruct_protos_2fcontract_2eproto;
};
// -------------------------------------------------------------------

class ContractMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.contract.protobuf.ContractMessage) */ {
 public:
  inline ContractMessage() : ContractMessage(nullptr) {}
  ~ContractMessage() override;
  explicit PROTOBUF_CONSTEXPR ContractMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractMessage(const ContractMessage& from);
  ContractMessage(ContractMessage&& from) noexcept
    : ContractMessage() {
    *this = ::std::move(from);
  }

  inline ContractMessage& operator=(const ContractMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractMessage& operator=(ContractMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractMessage* internal_default_instance() {
    return reinterpret_cast<const ContractMessage*>(
               &_ContractMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContractMessage& a, ContractMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContractMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.contract.protobuf.ContractMessage";
  }
  protected:
  explicit ContractMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetAttrReqFieldNumber = 1,
    kGetAttrResFieldNumber = 2,
  };
  // optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
  bool has_get_attr_req() const;
  private:
  bool _internal_has_get_attr_req() const;
  public:
  void clear_get_attr_req();
  const ::zjchain::contract::protobuf::GetAttrByKeyReq& get_attr_req() const;
  PROTOBUF_NODISCARD ::zjchain::contract::protobuf::GetAttrByKeyReq* release_get_attr_req();
  ::zjchain::contract::protobuf::GetAttrByKeyReq* mutable_get_attr_req();
  void set_allocated_get_attr_req(::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req);
  private:
  const ::zjchain::contract::protobuf::GetAttrByKeyReq& _internal_get_attr_req() const;
  ::zjchain::contract::protobuf::GetAttrByKeyReq* _internal_mutable_get_attr_req();
  public:
  void unsafe_arena_set_allocated_get_attr_req(
      ::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req);
  ::zjchain::contract::protobuf::GetAttrByKeyReq* unsafe_arena_release_get_attr_req();

  // optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
  bool has_get_attr_res() const;
  private:
  bool _internal_has_get_attr_res() const;
  public:
  void clear_get_attr_res();
  const ::zjchain::contract::protobuf::GetAttrByKeyRes& get_attr_res() const;
  PROTOBUF_NODISCARD ::zjchain::contract::protobuf::GetAttrByKeyRes* release_get_attr_res();
  ::zjchain::contract::protobuf::GetAttrByKeyRes* mutable_get_attr_res();
  void set_allocated_get_attr_res(::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res);
  private:
  const ::zjchain::contract::protobuf::GetAttrByKeyRes& _internal_get_attr_res() const;
  ::zjchain::contract::protobuf::GetAttrByKeyRes* _internal_mutable_get_attr_res();
  public:
  void unsafe_arena_set_allocated_get_attr_res(
      ::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res);
  ::zjchain::contract::protobuf::GetAttrByKeyRes* unsafe_arena_release_get_attr_res();

  // @@protoc_insertion_point(class_scope:zjchain.contract.protobuf.ContractMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req_;
  ::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res_;
  friend struct ::TableStruct_protos_2fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAttrByKeyReq

// optional bytes call_addr = 1;
inline bool GetAttrByKeyReq::_internal_has_call_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAttrByKeyReq::has_call_addr() const {
  return _internal_has_call_addr();
}
inline void GetAttrByKeyReq::clear_call_addr() {
  call_addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAttrByKeyReq::call_addr() const {
  // @@protoc_insertion_point(field_get:zjchain.contract.protobuf.GetAttrByKeyReq.call_addr)
  return _internal_call_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAttrByKeyReq::set_call_addr(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 call_addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.contract.protobuf.GetAttrByKeyReq.call_addr)
}
inline std::string* GetAttrByKeyReq::mutable_call_addr() {
  std::string* _s = _internal_mutable_call_addr();
  // @@protoc_insertion_point(field_mutable:zjchain.contract.protobuf.GetAttrByKeyReq.call_addr)
  return _s;
}
inline const std::string& GetAttrByKeyReq::_internal_call_addr() const {
  return call_addr_.Get();
}
inline void GetAttrByKeyReq::_internal_set_call_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  call_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAttrByKeyReq::_internal_mutable_call_addr() {
  _has_bits_[0] |= 0x00000001u;
  return call_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAttrByKeyReq::release_call_addr() {
  // @@protoc_insertion_point(field_release:zjchain.contract.protobuf.GetAttrByKeyReq.call_addr)
  if (!_internal_has_call_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = call_addr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (call_addr_.IsDefault()) {
    call_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAttrByKeyReq::set_allocated_call_addr(std::string* call_addr) {
  if (call_addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  call_addr_.SetAllocated(call_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (call_addr_.IsDefault()) {
    call_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.contract.protobuf.GetAttrByKeyReq.call_addr)
}

// optional bytes attr_key = 2;
inline bool GetAttrByKeyReq::_internal_has_attr_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAttrByKeyReq::has_attr_key() const {
  return _internal_has_attr_key();
}
inline void GetAttrByKeyReq::clear_attr_key() {
  attr_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetAttrByKeyReq::attr_key() const {
  // @@protoc_insertion_point(field_get:zjchain.contract.protobuf.GetAttrByKeyReq.attr_key)
  return _internal_attr_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAttrByKeyReq::set_attr_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 attr_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.contract.protobuf.GetAttrByKeyReq.attr_key)
}
inline std::string* GetAttrByKeyReq::mutable_attr_key() {
  std::string* _s = _internal_mutable_attr_key();
  // @@protoc_insertion_point(field_mutable:zjchain.contract.protobuf.GetAttrByKeyReq.attr_key)
  return _s;
}
inline const std::string& GetAttrByKeyReq::_internal_attr_key() const {
  return attr_key_.Get();
}
inline void GetAttrByKeyReq::_internal_set_attr_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  attr_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAttrByKeyReq::_internal_mutable_attr_key() {
  _has_bits_[0] |= 0x00000002u;
  return attr_key_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAttrByKeyReq::release_attr_key() {
  // @@protoc_insertion_point(field_release:zjchain.contract.protobuf.GetAttrByKeyReq.attr_key)
  if (!_internal_has_attr_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = attr_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAttrByKeyReq::set_allocated_attr_key(std::string* attr_key) {
  if (attr_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attr_key_.SetAllocated(attr_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.contract.protobuf.GetAttrByKeyReq.attr_key)
}

// -------------------------------------------------------------------

// GetAttrByKeyRes

// optional bytes call_addr = 1;
inline bool GetAttrByKeyRes::_internal_has_call_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetAttrByKeyRes::has_call_addr() const {
  return _internal_has_call_addr();
}
inline void GetAttrByKeyRes::clear_call_addr() {
  call_addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAttrByKeyRes::call_addr() const {
  // @@protoc_insertion_point(field_get:zjchain.contract.protobuf.GetAttrByKeyRes.call_addr)
  return _internal_call_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAttrByKeyRes::set_call_addr(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 call_addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.contract.protobuf.GetAttrByKeyRes.call_addr)
}
inline std::string* GetAttrByKeyRes::mutable_call_addr() {
  std::string* _s = _internal_mutable_call_addr();
  // @@protoc_insertion_point(field_mutable:zjchain.contract.protobuf.GetAttrByKeyRes.call_addr)
  return _s;
}
inline const std::string& GetAttrByKeyRes::_internal_call_addr() const {
  return call_addr_.Get();
}
inline void GetAttrByKeyRes::_internal_set_call_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  call_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAttrByKeyRes::_internal_mutable_call_addr() {
  _has_bits_[0] |= 0x00000001u;
  return call_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAttrByKeyRes::release_call_addr() {
  // @@protoc_insertion_point(field_release:zjchain.contract.protobuf.GetAttrByKeyRes.call_addr)
  if (!_internal_has_call_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = call_addr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (call_addr_.IsDefault()) {
    call_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAttrByKeyRes::set_allocated_call_addr(std::string* call_addr) {
  if (call_addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  call_addr_.SetAllocated(call_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (call_addr_.IsDefault()) {
    call_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.contract.protobuf.GetAttrByKeyRes.call_addr)
}

// optional bytes attr_key = 2;
inline bool GetAttrByKeyRes::_internal_has_attr_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetAttrByKeyRes::has_attr_key() const {
  return _internal_has_attr_key();
}
inline void GetAttrByKeyRes::clear_attr_key() {
  attr_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetAttrByKeyRes::attr_key() const {
  // @@protoc_insertion_point(field_get:zjchain.contract.protobuf.GetAttrByKeyRes.attr_key)
  return _internal_attr_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAttrByKeyRes::set_attr_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 attr_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.contract.protobuf.GetAttrByKeyRes.attr_key)
}
inline std::string* GetAttrByKeyRes::mutable_attr_key() {
  std::string* _s = _internal_mutable_attr_key();
  // @@protoc_insertion_point(field_mutable:zjchain.contract.protobuf.GetAttrByKeyRes.attr_key)
  return _s;
}
inline const std::string& GetAttrByKeyRes::_internal_attr_key() const {
  return attr_key_.Get();
}
inline void GetAttrByKeyRes::_internal_set_attr_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  attr_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAttrByKeyRes::_internal_mutable_attr_key() {
  _has_bits_[0] |= 0x00000002u;
  return attr_key_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAttrByKeyRes::release_attr_key() {
  // @@protoc_insertion_point(field_release:zjchain.contract.protobuf.GetAttrByKeyRes.attr_key)
  if (!_internal_has_attr_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = attr_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAttrByKeyRes::set_allocated_attr_key(std::string* attr_key) {
  if (attr_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  attr_key_.SetAllocated(attr_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_key_.IsDefault()) {
    attr_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.contract.protobuf.GetAttrByKeyRes.attr_key)
}

// optional bytes attr_value = 3;
inline bool GetAttrByKeyRes::_internal_has_attr_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetAttrByKeyRes::has_attr_value() const {
  return _internal_has_attr_value();
}
inline void GetAttrByKeyRes::clear_attr_value() {
  attr_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetAttrByKeyRes::attr_value() const {
  // @@protoc_insertion_point(field_get:zjchain.contract.protobuf.GetAttrByKeyRes.attr_value)
  return _internal_attr_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAttrByKeyRes::set_attr_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 attr_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.contract.protobuf.GetAttrByKeyRes.attr_value)
}
inline std::string* GetAttrByKeyRes::mutable_attr_value() {
  std::string* _s = _internal_mutable_attr_value();
  // @@protoc_insertion_point(field_mutable:zjchain.contract.protobuf.GetAttrByKeyRes.attr_value)
  return _s;
}
inline const std::string& GetAttrByKeyRes::_internal_attr_value() const {
  return attr_value_.Get();
}
inline void GetAttrByKeyRes::_internal_set_attr_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  attr_value_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAttrByKeyRes::_internal_mutable_attr_value() {
  _has_bits_[0] |= 0x00000004u;
  return attr_value_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAttrByKeyRes::release_attr_value() {
  // @@protoc_insertion_point(field_release:zjchain.contract.protobuf.GetAttrByKeyRes.attr_value)
  if (!_internal_has_attr_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = attr_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_value_.IsDefault()) {
    attr_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetAttrByKeyRes::set_allocated_attr_value(std::string* attr_value) {
  if (attr_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  attr_value_.SetAllocated(attr_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_value_.IsDefault()) {
    attr_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.contract.protobuf.GetAttrByKeyRes.attr_value)
}

// -------------------------------------------------------------------

// ContractMessage

// optional .zjchain.contract.protobuf.GetAttrByKeyReq get_attr_req = 1;
inline bool ContractMessage::_internal_has_get_attr_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || get_attr_req_ != nullptr);
  return value;
}
inline bool ContractMessage::has_get_attr_req() const {
  return _internal_has_get_attr_req();
}
inline void ContractMessage::clear_get_attr_req() {
  if (get_attr_req_ != nullptr) get_attr_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::contract::protobuf::GetAttrByKeyReq& ContractMessage::_internal_get_attr_req() const {
  const ::zjchain::contract::protobuf::GetAttrByKeyReq* p = get_attr_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::contract::protobuf::GetAttrByKeyReq&>(
      ::zjchain::contract::protobuf::_GetAttrByKeyReq_default_instance_);
}
inline const ::zjchain::contract::protobuf::GetAttrByKeyReq& ContractMessage::get_attr_req() const {
  // @@protoc_insertion_point(field_get:zjchain.contract.protobuf.ContractMessage.get_attr_req)
  return _internal_get_attr_req();
}
inline void ContractMessage::unsafe_arena_set_allocated_get_attr_req(
    ::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_attr_req_);
  }
  get_attr_req_ = get_attr_req;
  if (get_attr_req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.contract.protobuf.ContractMessage.get_attr_req)
}
inline ::zjchain::contract::protobuf::GetAttrByKeyReq* ContractMessage::release_get_attr_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::contract::protobuf::GetAttrByKeyReq* temp = get_attr_req_;
  get_attr_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyReq* ContractMessage::unsafe_arena_release_get_attr_req() {
  // @@protoc_insertion_point(field_release:zjchain.contract.protobuf.ContractMessage.get_attr_req)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::contract::protobuf::GetAttrByKeyReq* temp = get_attr_req_;
  get_attr_req_ = nullptr;
  return temp;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyReq* ContractMessage::_internal_mutable_get_attr_req() {
  _has_bits_[0] |= 0x00000001u;
  if (get_attr_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::contract::protobuf::GetAttrByKeyReq>(GetArenaForAllocation());
    get_attr_req_ = p;
  }
  return get_attr_req_;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyReq* ContractMessage::mutable_get_attr_req() {
  ::zjchain::contract::protobuf::GetAttrByKeyReq* _msg = _internal_mutable_get_attr_req();
  // @@protoc_insertion_point(field_mutable:zjchain.contract.protobuf.ContractMessage.get_attr_req)
  return _msg;
}
inline void ContractMessage::set_allocated_get_attr_req(::zjchain::contract::protobuf::GetAttrByKeyReq* get_attr_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_attr_req_;
  }
  if (get_attr_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_attr_req);
    if (message_arena != submessage_arena) {
      get_attr_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_attr_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  get_attr_req_ = get_attr_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.contract.protobuf.ContractMessage.get_attr_req)
}

// optional .zjchain.contract.protobuf.GetAttrByKeyRes get_attr_res = 2;
inline bool ContractMessage::_internal_has_get_attr_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || get_attr_res_ != nullptr);
  return value;
}
inline bool ContractMessage::has_get_attr_res() const {
  return _internal_has_get_attr_res();
}
inline void ContractMessage::clear_get_attr_res() {
  if (get_attr_res_ != nullptr) get_attr_res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::contract::protobuf::GetAttrByKeyRes& ContractMessage::_internal_get_attr_res() const {
  const ::zjchain::contract::protobuf::GetAttrByKeyRes* p = get_attr_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::contract::protobuf::GetAttrByKeyRes&>(
      ::zjchain::contract::protobuf::_GetAttrByKeyRes_default_instance_);
}
inline const ::zjchain::contract::protobuf::GetAttrByKeyRes& ContractMessage::get_attr_res() const {
  // @@protoc_insertion_point(field_get:zjchain.contract.protobuf.ContractMessage.get_attr_res)
  return _internal_get_attr_res();
}
inline void ContractMessage::unsafe_arena_set_allocated_get_attr_res(
    ::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_attr_res_);
  }
  get_attr_res_ = get_attr_res;
  if (get_attr_res) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.contract.protobuf.ContractMessage.get_attr_res)
}
inline ::zjchain::contract::protobuf::GetAttrByKeyRes* ContractMessage::release_get_attr_res() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::contract::protobuf::GetAttrByKeyRes* temp = get_attr_res_;
  get_attr_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyRes* ContractMessage::unsafe_arena_release_get_attr_res() {
  // @@protoc_insertion_point(field_release:zjchain.contract.protobuf.ContractMessage.get_attr_res)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::contract::protobuf::GetAttrByKeyRes* temp = get_attr_res_;
  get_attr_res_ = nullptr;
  return temp;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyRes* ContractMessage::_internal_mutable_get_attr_res() {
  _has_bits_[0] |= 0x00000002u;
  if (get_attr_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::contract::protobuf::GetAttrByKeyRes>(GetArenaForAllocation());
    get_attr_res_ = p;
  }
  return get_attr_res_;
}
inline ::zjchain::contract::protobuf::GetAttrByKeyRes* ContractMessage::mutable_get_attr_res() {
  ::zjchain::contract::protobuf::GetAttrByKeyRes* _msg = _internal_mutable_get_attr_res();
  // @@protoc_insertion_point(field_mutable:zjchain.contract.protobuf.ContractMessage.get_attr_res)
  return _msg;
}
inline void ContractMessage::set_allocated_get_attr_res(::zjchain::contract::protobuf::GetAttrByKeyRes* get_attr_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_attr_res_;
  }
  if (get_attr_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_attr_res);
    if (message_arena != submessage_arena) {
      get_attr_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_attr_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  get_attr_res_ = get_attr_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.contract.protobuf.ContractMessage.get_attr_res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace contract
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fcontract_2eproto
