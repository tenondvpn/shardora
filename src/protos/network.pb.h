// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/network.proto

#ifndef PROTOBUF_INCLUDED_protos_2fnetwork_2eproto
#define PROTOBUF_INCLUDED_protos_2fnetwork_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protos_2fnetwork_2eproto 

namespace protobuf_protos_2fnetwork_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protos_2fnetwork_2eproto
namespace shardora {
namespace network {
namespace protobuf {
class DropNodeRequest;
class DropNodeRequestDefaultTypeInternal;
extern DropNodeRequestDefaultTypeInternal _DropNodeRequest_default_instance_;
class GetNetworkNodesRequest;
class GetNetworkNodesRequestDefaultTypeInternal;
extern GetNetworkNodesRequestDefaultTypeInternal _GetNetworkNodesRequest_default_instance_;
class GetNetworkNodesResponse;
class GetNetworkNodesResponseDefaultTypeInternal;
extern GetNetworkNodesResponseDefaultTypeInternal _GetNetworkNodesResponse_default_instance_;
class NetworkMessage;
class NetworkMessageDefaultTypeInternal;
extern NetworkMessageDefaultTypeInternal _NetworkMessage_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
}  // namespace protobuf
}  // namespace network
}  // namespace shardora
namespace google {
namespace protobuf {
template<> ::shardora::network::protobuf::DropNodeRequest* Arena::CreateMaybeMessage<::shardora::network::protobuf::DropNodeRequest>(Arena*);
template<> ::shardora::network::protobuf::GetNetworkNodesRequest* Arena::CreateMaybeMessage<::shardora::network::protobuf::GetNetworkNodesRequest>(Arena*);
template<> ::shardora::network::protobuf::GetNetworkNodesResponse* Arena::CreateMaybeMessage<::shardora::network::protobuf::GetNetworkNodesResponse>(Arena*);
template<> ::shardora::network::protobuf::NetworkMessage* Arena::CreateMaybeMessage<::shardora::network::protobuf::NetworkMessage>(Arena*);
template<> ::shardora::network::protobuf::NodeInfo* Arena::CreateMaybeMessage<::shardora::network::protobuf::NodeInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace shardora {
namespace network {
namespace protobuf {

// ===================================================================

class GetNetworkNodesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shardora.network.protobuf.GetNetworkNodesRequest) */ {
 public:
  GetNetworkNodesRequest();
  virtual ~GetNetworkNodesRequest();

  GetNetworkNodesRequest(const GetNetworkNodesRequest& from);

  inline GetNetworkNodesRequest& operator=(const GetNetworkNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNetworkNodesRequest(GetNetworkNodesRequest&& from) noexcept
    : GetNetworkNodesRequest() {
    *this = ::std::move(from);
  }

  inline GetNetworkNodesRequest& operator=(GetNetworkNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNetworkNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNetworkNodesRequest* internal_default_instance() {
    return reinterpret_cast<const GetNetworkNodesRequest*>(
               &_GetNetworkNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetNetworkNodesRequest* other);
  friend void swap(GetNetworkNodesRequest& a, GetNetworkNodesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkNodesRequest* New() const final {
    return CreateMaybeMessage<GetNetworkNodesRequest>(NULL);
  }

  GetNetworkNodesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkNodesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNetworkNodesRequest& from);
  void MergeFrom(const GetNetworkNodesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkNodesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 net_id = 1;
  bool has_net_id() const;
  void clear_net_id();
  static const int kNetIdFieldNumber = 1;
  ::google::protobuf::uint32 net_id() const;
  void set_net_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:shardora.network.protobuf.GetNetworkNodesRequest)
 private:
  void set_has_net_id();
  void clear_has_net_id();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 net_id_;
  ::google::protobuf::uint32 count_;
  friend struct ::protobuf_protos_2fnetwork_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shardora.network.protobuf.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(NULL);
  }

  NodeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_ip = 2;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 2;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional bytes pubkey = 4;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 4;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional int32 sharding_id = 1;
  bool has_sharding_id() const;
  void clear_sharding_id();
  static const int kShardingIdFieldNumber = 1;
  ::google::protobuf::int32 sharding_id() const;
  void set_sharding_id(::google::protobuf::int32 value);

  // optional int32 public_port = 3;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 3;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:shardora.network.protobuf.NodeInfo)
 private:
  void set_has_sharding_id();
  void clear_has_sharding_id();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();
  void set_has_pubkey();
  void clear_has_pubkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::int32 sharding_id_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_protos_2fnetwork_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNetworkNodesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shardora.network.protobuf.GetNetworkNodesResponse) */ {
 public:
  GetNetworkNodesResponse();
  virtual ~GetNetworkNodesResponse();

  GetNetworkNodesResponse(const GetNetworkNodesResponse& from);

  inline GetNetworkNodesResponse& operator=(const GetNetworkNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNetworkNodesResponse(GetNetworkNodesResponse&& from) noexcept
    : GetNetworkNodesResponse() {
    *this = ::std::move(from);
  }

  inline GetNetworkNodesResponse& operator=(GetNetworkNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNetworkNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNetworkNodesResponse* internal_default_instance() {
    return reinterpret_cast<const GetNetworkNodesResponse*>(
               &_GetNetworkNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetNetworkNodesResponse* other);
  friend void swap(GetNetworkNodesResponse& a, GetNetworkNodesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkNodesResponse* New() const final {
    return CreateMaybeMessage<GetNetworkNodesResponse>(NULL);
  }

  GetNetworkNodesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkNodesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNetworkNodesResponse& from);
  void MergeFrom(const GetNetworkNodesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkNodesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .shardora.network.protobuf.NodeInfo nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::shardora::network::protobuf::NodeInfo* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::shardora::network::protobuf::NodeInfo >*
      mutable_nodes();
  const ::shardora::network::protobuf::NodeInfo& nodes(int index) const;
  ::shardora::network::protobuf::NodeInfo* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::shardora::network::protobuf::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:shardora.network.protobuf.GetNetworkNodesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::shardora::network::protobuf::NodeInfo > nodes_;
  friend struct ::protobuf_protos_2fnetwork_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shardora.network.protobuf.DropNodeRequest) */ {
 public:
  DropNodeRequest();
  virtual ~DropNodeRequest();

  DropNodeRequest(const DropNodeRequest& from);

  inline DropNodeRequest& operator=(const DropNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropNodeRequest(DropNodeRequest&& from) noexcept
    : DropNodeRequest() {
    *this = ::std::move(from);
  }

  inline DropNodeRequest& operator=(DropNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropNodeRequest* internal_default_instance() {
    return reinterpret_cast<const DropNodeRequest*>(
               &_DropNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DropNodeRequest* other);
  friend void swap(DropNodeRequest& a, DropNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropNodeRequest* New() const final {
    return CreateMaybeMessage<DropNodeRequest>(NULL);
  }

  DropNodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropNodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropNodeRequest& from);
  void MergeFrom(const DropNodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:shardora.network.protobuf.DropNodeRequest)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_protos_2fnetwork_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shardora.network.protobuf.NetworkMessage) */ {
 public:
  NetworkMessage();
  virtual ~NetworkMessage();

  NetworkMessage(const NetworkMessage& from);

  inline NetworkMessage& operator=(const NetworkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkMessage(NetworkMessage&& from) noexcept
    : NetworkMessage() {
    *this = ::std::move(from);
  }

  inline NetworkMessage& operator=(NetworkMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkMessage* internal_default_instance() {
    return reinterpret_cast<const NetworkMessage*>(
               &_NetworkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NetworkMessage* other);
  friend void swap(NetworkMessage& a, NetworkMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkMessage* New() const final {
    return CreateMaybeMessage<NetworkMessage>(NULL);
  }

  NetworkMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkMessage& from);
  void MergeFrom(const NetworkMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .shardora.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  bool has_get_net_nodes_req() const;
  void clear_get_net_nodes_req();
  static const int kGetNetNodesReqFieldNumber = 1;
  private:
  const ::shardora::network::protobuf::GetNetworkNodesRequest& _internal_get_net_nodes_req() const;
  public:
  const ::shardora::network::protobuf::GetNetworkNodesRequest& get_net_nodes_req() const;
  ::shardora::network::protobuf::GetNetworkNodesRequest* release_get_net_nodes_req();
  ::shardora::network::protobuf::GetNetworkNodesRequest* mutable_get_net_nodes_req();
  void set_allocated_get_net_nodes_req(::shardora::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req);

  // optional .shardora.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  bool has_get_net_nodes_res() const;
  void clear_get_net_nodes_res();
  static const int kGetNetNodesResFieldNumber = 2;
  private:
  const ::shardora::network::protobuf::GetNetworkNodesResponse& _internal_get_net_nodes_res() const;
  public:
  const ::shardora::network::protobuf::GetNetworkNodesResponse& get_net_nodes_res() const;
  ::shardora::network::protobuf::GetNetworkNodesResponse* release_get_net_nodes_res();
  ::shardora::network::protobuf::GetNetworkNodesResponse* mutable_get_net_nodes_res();
  void set_allocated_get_net_nodes_res(::shardora::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res);

  // optional .shardora.network.protobuf.DropNodeRequest drop_node = 3;
  bool has_drop_node() const;
  void clear_drop_node();
  static const int kDropNodeFieldNumber = 3;
  private:
  const ::shardora::network::protobuf::DropNodeRequest& _internal_drop_node() const;
  public:
  const ::shardora::network::protobuf::DropNodeRequest& drop_node() const;
  ::shardora::network::protobuf::DropNodeRequest* release_drop_node();
  ::shardora::network::protobuf::DropNodeRequest* mutable_drop_node();
  void set_allocated_drop_node(::shardora::network::protobuf::DropNodeRequest* drop_node);

  // @@protoc_insertion_point(class_scope:shardora.network.protobuf.NetworkMessage)
 private:
  void set_has_get_net_nodes_req();
  void clear_has_get_net_nodes_req();
  void set_has_get_net_nodes_res();
  void clear_has_get_net_nodes_res();
  void set_has_drop_node();
  void clear_has_drop_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::shardora::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req_;
  ::shardora::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res_;
  ::shardora::network::protobuf::DropNodeRequest* drop_node_;
  friend struct ::protobuf_protos_2fnetwork_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetNetworkNodesRequest

// optional uint32 net_id = 1;
inline bool GetNetworkNodesRequest::has_net_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetNetworkNodesRequest::set_has_net_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetNetworkNodesRequest::clear_has_net_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetNetworkNodesRequest::clear_net_id() {
  net_id_ = 0u;
  clear_has_net_id();
}
inline ::google::protobuf::uint32 GetNetworkNodesRequest::net_id() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.GetNetworkNodesRequest.net_id)
  return net_id_;
}
inline void GetNetworkNodesRequest::set_net_id(::google::protobuf::uint32 value) {
  set_has_net_id();
  net_id_ = value;
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.GetNetworkNodesRequest.net_id)
}

// optional uint32 count = 2;
inline bool GetNetworkNodesRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetNetworkNodesRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetNetworkNodesRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetNetworkNodesRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetNetworkNodesRequest::count() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.GetNetworkNodesRequest.count)
  return count_;
}
inline void GetNetworkNodesRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.GetNetworkNodesRequest.count)
}

// -------------------------------------------------------------------

// NodeInfo

// optional int32 sharding_id = 1;
inline bool NodeInfo::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeInfo::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeInfo::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeInfo::clear_sharding_id() {
  sharding_id_ = 0;
  clear_has_sharding_id();
}
inline ::google::protobuf::int32 NodeInfo::sharding_id() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.NodeInfo.sharding_id)
  return sharding_id_;
}
inline void NodeInfo::set_sharding_id(::google::protobuf::int32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.NodeInfo.sharding_id)
}

// optional bytes public_ip = 2;
inline bool NodeInfo::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& NodeInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.NodeInfo.public_ip)
  return public_ip_.GetNoArena();
}
inline void NodeInfo::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.NodeInfo.public_ip)
}
#if LANG_CXX11
inline void NodeInfo::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.network.protobuf.NodeInfo.public_ip)
}
#endif
inline void NodeInfo::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.network.protobuf.NodeInfo.public_ip)
}
inline void NodeInfo::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.network.protobuf.NodeInfo.public_ip)
}
inline ::std::string* NodeInfo::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:shardora.network.protobuf.NodeInfo.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_public_ip() {
  // @@protoc_insertion_point(field_release:shardora.network.protobuf.NodeInfo.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:shardora.network.protobuf.NodeInfo.public_ip)
}

// optional int32 public_port = 3;
inline bool NodeInfo::has_public_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeInfo::set_has_public_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeInfo::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeInfo::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 NodeInfo::public_port() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.NodeInfo.public_port)
  return public_port_;
}
inline void NodeInfo::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.NodeInfo.public_port)
}

// optional bytes pubkey = 4;
inline bool NodeInfo::has_pubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_pubkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& NodeInfo::pubkey() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.NodeInfo.pubkey)
  return pubkey_.GetNoArena();
}
inline void NodeInfo::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.NodeInfo.pubkey)
}
#if LANG_CXX11
inline void NodeInfo::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.network.protobuf.NodeInfo.pubkey)
}
#endif
inline void NodeInfo::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.network.protobuf.NodeInfo.pubkey)
}
inline void NodeInfo::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.network.protobuf.NodeInfo.pubkey)
}
inline ::std::string* NodeInfo::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:shardora.network.protobuf.NodeInfo.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_pubkey() {
  // @@protoc_insertion_point(field_release:shardora.network.protobuf.NodeInfo.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:shardora.network.protobuf.NodeInfo.pubkey)
}

// -------------------------------------------------------------------

// GetNetworkNodesResponse

// repeated .shardora.network.protobuf.NodeInfo nodes = 1;
inline int GetNetworkNodesResponse::nodes_size() const {
  return nodes_.size();
}
inline void GetNetworkNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::shardora::network::protobuf::NodeInfo* GetNetworkNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:shardora.network.protobuf.GetNetworkNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::shardora::network::protobuf::NodeInfo >*
GetNetworkNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:shardora.network.protobuf.GetNetworkNodesResponse.nodes)
  return &nodes_;
}
inline const ::shardora::network::protobuf::NodeInfo& GetNetworkNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.GetNetworkNodesResponse.nodes)
  return nodes_.Get(index);
}
inline ::shardora::network::protobuf::NodeInfo* GetNetworkNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:shardora.network.protobuf.GetNetworkNodesResponse.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::shardora::network::protobuf::NodeInfo >&
GetNetworkNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:shardora.network.protobuf.GetNetworkNodesResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// DropNodeRequest

// optional bytes ip = 1;
inline bool DropNodeRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropNodeRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropNodeRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropNodeRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& DropNodeRequest::ip() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.DropNodeRequest.ip)
  return ip_.GetNoArena();
}
inline void DropNodeRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.DropNodeRequest.ip)
}
#if LANG_CXX11
inline void DropNodeRequest::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:shardora.network.protobuf.DropNodeRequest.ip)
}
#endif
inline void DropNodeRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shardora.network.protobuf.DropNodeRequest.ip)
}
inline void DropNodeRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shardora.network.protobuf.DropNodeRequest.ip)
}
inline ::std::string* DropNodeRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:shardora.network.protobuf.DropNodeRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropNodeRequest::release_ip() {
  // @@protoc_insertion_point(field_release:shardora.network.protobuf.DropNodeRequest.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropNodeRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:shardora.network.protobuf.DropNodeRequest.ip)
}

// optional int32 port = 2;
inline bool DropNodeRequest::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropNodeRequest::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropNodeRequest::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropNodeRequest::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 DropNodeRequest::port() const {
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.DropNodeRequest.port)
  return port_;
}
inline void DropNodeRequest::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:shardora.network.protobuf.DropNodeRequest.port)
}

// -------------------------------------------------------------------

// NetworkMessage

// optional .shardora.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
inline bool NetworkMessage::has_get_net_nodes_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkMessage::set_has_get_net_nodes_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkMessage::clear_has_get_net_nodes_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkMessage::clear_get_net_nodes_req() {
  if (get_net_nodes_req_ != NULL) get_net_nodes_req_->Clear();
  clear_has_get_net_nodes_req();
}
inline const ::shardora::network::protobuf::GetNetworkNodesRequest& NetworkMessage::_internal_get_net_nodes_req() const {
  return *get_net_nodes_req_;
}
inline const ::shardora::network::protobuf::GetNetworkNodesRequest& NetworkMessage::get_net_nodes_req() const {
  const ::shardora::network::protobuf::GetNetworkNodesRequest* p = get_net_nodes_req_;
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.NetworkMessage.get_net_nodes_req)
  return p != NULL ? *p : *reinterpret_cast<const ::shardora::network::protobuf::GetNetworkNodesRequest*>(
      &::shardora::network::protobuf::_GetNetworkNodesRequest_default_instance_);
}
inline ::shardora::network::protobuf::GetNetworkNodesRequest* NetworkMessage::release_get_net_nodes_req() {
  // @@protoc_insertion_point(field_release:shardora.network.protobuf.NetworkMessage.get_net_nodes_req)
  clear_has_get_net_nodes_req();
  ::shardora::network::protobuf::GetNetworkNodesRequest* temp = get_net_nodes_req_;
  get_net_nodes_req_ = NULL;
  return temp;
}
inline ::shardora::network::protobuf::GetNetworkNodesRequest* NetworkMessage::mutable_get_net_nodes_req() {
  set_has_get_net_nodes_req();
  if (get_net_nodes_req_ == NULL) {
    auto* p = CreateMaybeMessage<::shardora::network::protobuf::GetNetworkNodesRequest>(GetArenaNoVirtual());
    get_net_nodes_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:shardora.network.protobuf.NetworkMessage.get_net_nodes_req)
  return get_net_nodes_req_;
}
inline void NetworkMessage::set_allocated_get_net_nodes_req(::shardora::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_net_nodes_req_;
  }
  if (get_net_nodes_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_net_nodes_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_net_nodes_req, submessage_arena);
    }
    set_has_get_net_nodes_req();
  } else {
    clear_has_get_net_nodes_req();
  }
  get_net_nodes_req_ = get_net_nodes_req;
  // @@protoc_insertion_point(field_set_allocated:shardora.network.protobuf.NetworkMessage.get_net_nodes_req)
}

// optional .shardora.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
inline bool NetworkMessage::has_get_net_nodes_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkMessage::set_has_get_net_nodes_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkMessage::clear_has_get_net_nodes_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkMessage::clear_get_net_nodes_res() {
  if (get_net_nodes_res_ != NULL) get_net_nodes_res_->Clear();
  clear_has_get_net_nodes_res();
}
inline const ::shardora::network::protobuf::GetNetworkNodesResponse& NetworkMessage::_internal_get_net_nodes_res() const {
  return *get_net_nodes_res_;
}
inline const ::shardora::network::protobuf::GetNetworkNodesResponse& NetworkMessage::get_net_nodes_res() const {
  const ::shardora::network::protobuf::GetNetworkNodesResponse* p = get_net_nodes_res_;
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.NetworkMessage.get_net_nodes_res)
  return p != NULL ? *p : *reinterpret_cast<const ::shardora::network::protobuf::GetNetworkNodesResponse*>(
      &::shardora::network::protobuf::_GetNetworkNodesResponse_default_instance_);
}
inline ::shardora::network::protobuf::GetNetworkNodesResponse* NetworkMessage::release_get_net_nodes_res() {
  // @@protoc_insertion_point(field_release:shardora.network.protobuf.NetworkMessage.get_net_nodes_res)
  clear_has_get_net_nodes_res();
  ::shardora::network::protobuf::GetNetworkNodesResponse* temp = get_net_nodes_res_;
  get_net_nodes_res_ = NULL;
  return temp;
}
inline ::shardora::network::protobuf::GetNetworkNodesResponse* NetworkMessage::mutable_get_net_nodes_res() {
  set_has_get_net_nodes_res();
  if (get_net_nodes_res_ == NULL) {
    auto* p = CreateMaybeMessage<::shardora::network::protobuf::GetNetworkNodesResponse>(GetArenaNoVirtual());
    get_net_nodes_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:shardora.network.protobuf.NetworkMessage.get_net_nodes_res)
  return get_net_nodes_res_;
}
inline void NetworkMessage::set_allocated_get_net_nodes_res(::shardora::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_net_nodes_res_;
  }
  if (get_net_nodes_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_net_nodes_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_net_nodes_res, submessage_arena);
    }
    set_has_get_net_nodes_res();
  } else {
    clear_has_get_net_nodes_res();
  }
  get_net_nodes_res_ = get_net_nodes_res;
  // @@protoc_insertion_point(field_set_allocated:shardora.network.protobuf.NetworkMessage.get_net_nodes_res)
}

// optional .shardora.network.protobuf.DropNodeRequest drop_node = 3;
inline bool NetworkMessage::has_drop_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkMessage::set_has_drop_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkMessage::clear_has_drop_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkMessage::clear_drop_node() {
  if (drop_node_ != NULL) drop_node_->Clear();
  clear_has_drop_node();
}
inline const ::shardora::network::protobuf::DropNodeRequest& NetworkMessage::_internal_drop_node() const {
  return *drop_node_;
}
inline const ::shardora::network::protobuf::DropNodeRequest& NetworkMessage::drop_node() const {
  const ::shardora::network::protobuf::DropNodeRequest* p = drop_node_;
  // @@protoc_insertion_point(field_get:shardora.network.protobuf.NetworkMessage.drop_node)
  return p != NULL ? *p : *reinterpret_cast<const ::shardora::network::protobuf::DropNodeRequest*>(
      &::shardora::network::protobuf::_DropNodeRequest_default_instance_);
}
inline ::shardora::network::protobuf::DropNodeRequest* NetworkMessage::release_drop_node() {
  // @@protoc_insertion_point(field_release:shardora.network.protobuf.NetworkMessage.drop_node)
  clear_has_drop_node();
  ::shardora::network::protobuf::DropNodeRequest* temp = drop_node_;
  drop_node_ = NULL;
  return temp;
}
inline ::shardora::network::protobuf::DropNodeRequest* NetworkMessage::mutable_drop_node() {
  set_has_drop_node();
  if (drop_node_ == NULL) {
    auto* p = CreateMaybeMessage<::shardora::network::protobuf::DropNodeRequest>(GetArenaNoVirtual());
    drop_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:shardora.network.protobuf.NetworkMessage.drop_node)
  return drop_node_;
}
inline void NetworkMessage::set_allocated_drop_node(::shardora::network::protobuf::DropNodeRequest* drop_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete drop_node_;
  }
  if (drop_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop_node, submessage_arena);
    }
    set_has_drop_node();
  } else {
    clear_has_drop_node();
  }
  drop_node_ = drop_node;
  // @@protoc_insertion_point(field_set_allocated:shardora.network.protobuf.NetworkMessage.drop_node)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace network
}  // namespace shardora

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protos_2fnetwork_2eproto
