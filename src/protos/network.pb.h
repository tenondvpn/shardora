// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fnetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fnetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fnetwork_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fnetwork_2eproto;
namespace zjchain {
namespace network {
namespace protobuf {
class DropNodeRequest;
struct DropNodeRequestDefaultTypeInternal;
extern DropNodeRequestDefaultTypeInternal _DropNodeRequest_default_instance_;
class GetNetworkNodesRequest;
struct GetNetworkNodesRequestDefaultTypeInternal;
extern GetNetworkNodesRequestDefaultTypeInternal _GetNetworkNodesRequest_default_instance_;
class GetNetworkNodesResponse;
struct GetNetworkNodesResponseDefaultTypeInternal;
extern GetNetworkNodesResponseDefaultTypeInternal _GetNetworkNodesResponse_default_instance_;
class NetworkMessage;
struct NetworkMessageDefaultTypeInternal;
extern NetworkMessageDefaultTypeInternal _NetworkMessage_default_instance_;
class NodeInfo;
struct NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
}  // namespace protobuf
}  // namespace network
}  // namespace zjchain
PROTOBUF_NAMESPACE_OPEN
template<> ::zjchain::network::protobuf::DropNodeRequest* Arena::CreateMaybeMessage<::zjchain::network::protobuf::DropNodeRequest>(Arena*);
template<> ::zjchain::network::protobuf::GetNetworkNodesRequest* Arena::CreateMaybeMessage<::zjchain::network::protobuf::GetNetworkNodesRequest>(Arena*);
template<> ::zjchain::network::protobuf::GetNetworkNodesResponse* Arena::CreateMaybeMessage<::zjchain::network::protobuf::GetNetworkNodesResponse>(Arena*);
template<> ::zjchain::network::protobuf::NetworkMessage* Arena::CreateMaybeMessage<::zjchain::network::protobuf::NetworkMessage>(Arena*);
template<> ::zjchain::network::protobuf::NodeInfo* Arena::CreateMaybeMessage<::zjchain::network::protobuf::NodeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zjchain {
namespace network {
namespace protobuf {

// ===================================================================

class GetNetworkNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.network.protobuf.GetNetworkNodesRequest) */ {
 public:
  inline GetNetworkNodesRequest() : GetNetworkNodesRequest(nullptr) {}
  ~GetNetworkNodesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNetworkNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNetworkNodesRequest(const GetNetworkNodesRequest& from);
  GetNetworkNodesRequest(GetNetworkNodesRequest&& from) noexcept
    : GetNetworkNodesRequest() {
    *this = ::std::move(from);
  }

  inline GetNetworkNodesRequest& operator=(const GetNetworkNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkNodesRequest& operator=(GetNetworkNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNetworkNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNetworkNodesRequest* internal_default_instance() {
    return reinterpret_cast<const GetNetworkNodesRequest*>(
               &_GetNetworkNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetNetworkNodesRequest& a, GetNetworkNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNetworkNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNetworkNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNetworkNodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNetworkNodesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkNodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.network.protobuf.GetNetworkNodesRequest";
  }
  protected:
  explicit GetNetworkNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional uint32 net_id = 1;
  bool has_net_id() const;
  private:
  bool _internal_has_net_id() const;
  public:
  void clear_net_id();
  uint32_t net_id() const;
  void set_net_id(uint32_t value);
  private:
  uint32_t _internal_net_id() const;
  void _internal_set_net_id(uint32_t value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.GetNetworkNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t net_id_;
  uint32_t count_;
  friend struct ::TableStruct_protos_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.network.protobuf.NodeInfo) */ {
 public:
  inline NodeInfo() : NodeInfo(nullptr) {}
  ~NodeInfo() override;
  explicit PROTOBUF_CONSTEXPR NodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.network.protobuf.NodeInfo";
  }
  protected:
  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIpFieldNumber = 2,
    kPubkeyFieldNumber = 4,
    kShardingIdFieldNumber = 1,
    kPublicPortFieldNumber = 3,
  };
  // optional bytes public_ip = 2;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const std::string& public_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_ip();
  PROTOBUF_NODISCARD std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // optional bytes pubkey = 4;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_NODISCARD std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // optional int32 sharding_id = 1;
  bool has_sharding_id() const;
  private:
  bool _internal_has_sharding_id() const;
  public:
  void clear_sharding_id();
  int32_t sharding_id() const;
  void set_sharding_id(int32_t value);
  private:
  int32_t _internal_sharding_id() const;
  void _internal_set_sharding_id(int32_t value);
  public:

  // optional int32 public_port = 3;
  bool has_public_port() const;
  private:
  bool _internal_has_public_port() const;
  public:
  void clear_public_port();
  int32_t public_port() const;
  void set_public_port(int32_t value);
  private:
  int32_t _internal_public_port() const;
  void _internal_set_public_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  int32_t sharding_id_;
  int32_t public_port_;
  friend struct ::TableStruct_protos_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkNodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.network.protobuf.GetNetworkNodesResponse) */ {
 public:
  inline GetNetworkNodesResponse() : GetNetworkNodesResponse(nullptr) {}
  ~GetNetworkNodesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNetworkNodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNetworkNodesResponse(const GetNetworkNodesResponse& from);
  GetNetworkNodesResponse(GetNetworkNodesResponse&& from) noexcept
    : GetNetworkNodesResponse() {
    *this = ::std::move(from);
  }

  inline GetNetworkNodesResponse& operator=(const GetNetworkNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkNodesResponse& operator=(GetNetworkNodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNetworkNodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNetworkNodesResponse* internal_default_instance() {
    return reinterpret_cast<const GetNetworkNodesResponse*>(
               &_GetNetworkNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetNetworkNodesResponse& a, GetNetworkNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkNodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNetworkNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNetworkNodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNetworkNodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNetworkNodesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkNodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.network.protobuf.GetNetworkNodesResponse";
  }
  protected:
  explicit GetNetworkNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::zjchain::network::protobuf::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >*
      mutable_nodes();
  private:
  const ::zjchain::network::protobuf::NodeInfo& _internal_nodes(int index) const;
  ::zjchain::network::protobuf::NodeInfo* _internal_add_nodes();
  public:
  const ::zjchain::network::protobuf::NodeInfo& nodes(int index) const;
  ::zjchain::network::protobuf::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.GetNetworkNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class DropNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.network.protobuf.DropNodeRequest) */ {
 public:
  inline DropNodeRequest() : DropNodeRequest(nullptr) {}
  ~DropNodeRequest() override;
  explicit PROTOBUF_CONSTEXPR DropNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropNodeRequest(const DropNodeRequest& from);
  DropNodeRequest(DropNodeRequest&& from) noexcept
    : DropNodeRequest() {
    *this = ::std::move(from);
  }

  inline DropNodeRequest& operator=(const DropNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropNodeRequest& operator=(DropNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropNodeRequest* internal_default_instance() {
    return reinterpret_cast<const DropNodeRequest*>(
               &_DropNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DropNodeRequest& a, DropNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DropNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.network.protobuf.DropNodeRequest";
  }
  protected:
  explicit DropNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // optional bytes ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional int32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.DropNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int32_t port_;
  friend struct ::TableStruct_protos_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class NetworkMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zjchain.network.protobuf.NetworkMessage) */ {
 public:
  inline NetworkMessage() : NetworkMessage(nullptr) {}
  ~NetworkMessage() override;
  explicit PROTOBUF_CONSTEXPR NetworkMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkMessage(const NetworkMessage& from);
  NetworkMessage(NetworkMessage&& from) noexcept
    : NetworkMessage() {
    *this = ::std::move(from);
  }

  inline NetworkMessage& operator=(const NetworkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkMessage& operator=(NetworkMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkMessage* internal_default_instance() {
    return reinterpret_cast<const NetworkMessage*>(
               &_NetworkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetworkMessage& a, NetworkMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetworkMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zjchain.network.protobuf.NetworkMessage";
  }
  protected:
  explicit NetworkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetNetNodesReqFieldNumber = 1,
    kGetNetNodesResFieldNumber = 2,
    kDropNodeFieldNumber = 3,
  };
  // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  bool has_get_net_nodes_req() const;
  private:
  bool _internal_has_get_net_nodes_req() const;
  public:
  void clear_get_net_nodes_req();
  const ::zjchain::network::protobuf::GetNetworkNodesRequest& get_net_nodes_req() const;
  PROTOBUF_NODISCARD ::zjchain::network::protobuf::GetNetworkNodesRequest* release_get_net_nodes_req();
  ::zjchain::network::protobuf::GetNetworkNodesRequest* mutable_get_net_nodes_req();
  void set_allocated_get_net_nodes_req(::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req);
  private:
  const ::zjchain::network::protobuf::GetNetworkNodesRequest& _internal_get_net_nodes_req() const;
  ::zjchain::network::protobuf::GetNetworkNodesRequest* _internal_mutable_get_net_nodes_req();
  public:
  void unsafe_arena_set_allocated_get_net_nodes_req(
      ::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req);
  ::zjchain::network::protobuf::GetNetworkNodesRequest* unsafe_arena_release_get_net_nodes_req();

  // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  bool has_get_net_nodes_res() const;
  private:
  bool _internal_has_get_net_nodes_res() const;
  public:
  void clear_get_net_nodes_res();
  const ::zjchain::network::protobuf::GetNetworkNodesResponse& get_net_nodes_res() const;
  PROTOBUF_NODISCARD ::zjchain::network::protobuf::GetNetworkNodesResponse* release_get_net_nodes_res();
  ::zjchain::network::protobuf::GetNetworkNodesResponse* mutable_get_net_nodes_res();
  void set_allocated_get_net_nodes_res(::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res);
  private:
  const ::zjchain::network::protobuf::GetNetworkNodesResponse& _internal_get_net_nodes_res() const;
  ::zjchain::network::protobuf::GetNetworkNodesResponse* _internal_mutable_get_net_nodes_res();
  public:
  void unsafe_arena_set_allocated_get_net_nodes_res(
      ::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res);
  ::zjchain::network::protobuf::GetNetworkNodesResponse* unsafe_arena_release_get_net_nodes_res();

  // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
  bool has_drop_node() const;
  private:
  bool _internal_has_drop_node() const;
  public:
  void clear_drop_node();
  const ::zjchain::network::protobuf::DropNodeRequest& drop_node() const;
  PROTOBUF_NODISCARD ::zjchain::network::protobuf::DropNodeRequest* release_drop_node();
  ::zjchain::network::protobuf::DropNodeRequest* mutable_drop_node();
  void set_allocated_drop_node(::zjchain::network::protobuf::DropNodeRequest* drop_node);
  private:
  const ::zjchain::network::protobuf::DropNodeRequest& _internal_drop_node() const;
  ::zjchain::network::protobuf::DropNodeRequest* _internal_mutable_drop_node();
  public:
  void unsafe_arena_set_allocated_drop_node(
      ::zjchain::network::protobuf::DropNodeRequest* drop_node);
  ::zjchain::network::protobuf::DropNodeRequest* unsafe_arena_release_drop_node();

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.NetworkMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req_;
  ::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res_;
  ::zjchain::network::protobuf::DropNodeRequest* drop_node_;
  friend struct ::TableStruct_protos_2fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetNetworkNodesRequest

// optional uint32 net_id = 1;
inline bool GetNetworkNodesRequest::_internal_has_net_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetNetworkNodesRequest::has_net_id() const {
  return _internal_has_net_id();
}
inline void GetNetworkNodesRequest::clear_net_id() {
  net_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t GetNetworkNodesRequest::_internal_net_id() const {
  return net_id_;
}
inline uint32_t GetNetworkNodesRequest::net_id() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.GetNetworkNodesRequest.net_id)
  return _internal_net_id();
}
inline void GetNetworkNodesRequest::_internal_set_net_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  net_id_ = value;
}
inline void GetNetworkNodesRequest::set_net_id(uint32_t value) {
  _internal_set_net_id(value);
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.GetNetworkNodesRequest.net_id)
}

// optional uint32 count = 2;
inline bool GetNetworkNodesRequest::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetNetworkNodesRequest::has_count() const {
  return _internal_has_count();
}
inline void GetNetworkNodesRequest::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GetNetworkNodesRequest::_internal_count() const {
  return count_;
}
inline uint32_t GetNetworkNodesRequest::count() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.GetNetworkNodesRequest.count)
  return _internal_count();
}
inline void GetNetworkNodesRequest::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void GetNetworkNodesRequest::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.GetNetworkNodesRequest.count)
}

// -------------------------------------------------------------------

// NodeInfo

// optional int32 sharding_id = 1;
inline bool NodeInfo::_internal_has_sharding_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NodeInfo::has_sharding_id() const {
  return _internal_has_sharding_id();
}
inline void NodeInfo::clear_sharding_id() {
  sharding_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t NodeInfo::_internal_sharding_id() const {
  return sharding_id_;
}
inline int32_t NodeInfo::sharding_id() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.NodeInfo.sharding_id)
  return _internal_sharding_id();
}
inline void NodeInfo::_internal_set_sharding_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  sharding_id_ = value;
}
inline void NodeInfo::set_sharding_id(int32_t value) {
  _internal_set_sharding_id(value);
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.NodeInfo.sharding_id)
}

// optional bytes public_ip = 2;
inline bool NodeInfo::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NodeInfo::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void NodeInfo::clear_public_ip() {
  public_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NodeInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.NodeInfo.public_ip)
  return _internal_public_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_public_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 public_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.NodeInfo.public_ip)
}
inline std::string* NodeInfo::mutable_public_ip() {
  std::string* _s = _internal_mutable_public_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.network.protobuf.NodeInfo.public_ip)
  return _s;
}
inline const std::string& NodeInfo::_internal_public_ip() const {
  return public_ip_.Get();
}
inline void NodeInfo::_internal_set_public_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  return public_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfo::release_public_ip() {
  // @@protoc_insertion_point(field_release:zjchain.network.protobuf.NodeInfo.public_ip)
  if (!_internal_has_public_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = public_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_.IsDefault()) {
    public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NodeInfo::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.SetAllocated(public_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_ip_.IsDefault()) {
    public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.network.protobuf.NodeInfo.public_ip)
}

// optional int32 public_port = 3;
inline bool NodeInfo::_internal_has_public_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NodeInfo::has_public_port() const {
  return _internal_has_public_port();
}
inline void NodeInfo::clear_public_port() {
  public_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t NodeInfo::_internal_public_port() const {
  return public_port_;
}
inline int32_t NodeInfo::public_port() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.NodeInfo.public_port)
  return _internal_public_port();
}
inline void NodeInfo::_internal_set_public_port(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  public_port_ = value;
}
inline void NodeInfo::set_public_port(int32_t value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.NodeInfo.public_port)
}

// optional bytes pubkey = 4;
inline bool NodeInfo::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NodeInfo::has_pubkey() const {
  return _internal_has_pubkey();
}
inline void NodeInfo::clear_pubkey() {
  pubkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NodeInfo::pubkey() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.NodeInfo.pubkey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_pubkey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pubkey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.NodeInfo.pubkey)
}
inline std::string* NodeInfo::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:zjchain.network.protobuf.NodeInfo.pubkey)
  return _s;
}
inline const std::string& NodeInfo::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void NodeInfo::_internal_set_pubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pubkey_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000002u;
  return pubkey_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfo::release_pubkey() {
  // @@protoc_insertion_point(field_release:zjchain.network.protobuf.NodeInfo.pubkey)
  if (!_internal_has_pubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = pubkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NodeInfo::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pubkey_.SetAllocated(pubkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pubkey_.IsDefault()) {
    pubkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.network.protobuf.NodeInfo.pubkey)
}

// -------------------------------------------------------------------

// GetNetworkNodesResponse

// repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
inline int GetNetworkNodesResponse::_internal_nodes_size() const {
  return nodes_.size();
}
inline int GetNetworkNodesResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline void GetNetworkNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::zjchain::network::protobuf::NodeInfo* GetNetworkNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:zjchain.network.protobuf.GetNetworkNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >*
GetNetworkNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:zjchain.network.protobuf.GetNetworkNodesResponse.nodes)
  return &nodes_;
}
inline const ::zjchain::network::protobuf::NodeInfo& GetNetworkNodesResponse::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::zjchain::network::protobuf::NodeInfo& GetNetworkNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.GetNetworkNodesResponse.nodes)
  return _internal_nodes(index);
}
inline ::zjchain::network::protobuf::NodeInfo* GetNetworkNodesResponse::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::zjchain::network::protobuf::NodeInfo* GetNetworkNodesResponse::add_nodes() {
  ::zjchain::network::protobuf::NodeInfo* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:zjchain.network.protobuf.GetNetworkNodesResponse.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >&
GetNetworkNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:zjchain.network.protobuf.GetNetworkNodesResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// DropNodeRequest

// optional bytes ip = 1;
inline bool DropNodeRequest::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DropNodeRequest::has_ip() const {
  return _internal_has_ip();
}
inline void DropNodeRequest::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DropNodeRequest::ip() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.DropNodeRequest.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropNodeRequest::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.DropNodeRequest.ip)
}
inline std::string* DropNodeRequest::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:zjchain.network.protobuf.DropNodeRequest.ip)
  return _s;
}
inline const std::string& DropNodeRequest::_internal_ip() const {
  return ip_.Get();
}
inline void DropNodeRequest::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* DropNodeRequest::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* DropNodeRequest::release_ip() {
  // @@protoc_insertion_point(field_release:zjchain.network.protobuf.DropNodeRequest.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DropNodeRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zjchain.network.protobuf.DropNodeRequest.ip)
}

// optional int32 port = 2;
inline bool DropNodeRequest::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DropNodeRequest::has_port() const {
  return _internal_has_port();
}
inline void DropNodeRequest::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DropNodeRequest::_internal_port() const {
  return port_;
}
inline int32_t DropNodeRequest::port() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.DropNodeRequest.port)
  return _internal_port();
}
inline void DropNodeRequest::_internal_set_port(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void DropNodeRequest::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:zjchain.network.protobuf.DropNodeRequest.port)
}

// -------------------------------------------------------------------

// NetworkMessage

// optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
inline bool NetworkMessage::_internal_has_get_net_nodes_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || get_net_nodes_req_ != nullptr);
  return value;
}
inline bool NetworkMessage::has_get_net_nodes_req() const {
  return _internal_has_get_net_nodes_req();
}
inline void NetworkMessage::clear_get_net_nodes_req() {
  if (get_net_nodes_req_ != nullptr) get_net_nodes_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zjchain::network::protobuf::GetNetworkNodesRequest& NetworkMessage::_internal_get_net_nodes_req() const {
  const ::zjchain::network::protobuf::GetNetworkNodesRequest* p = get_net_nodes_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::network::protobuf::GetNetworkNodesRequest&>(
      ::zjchain::network::protobuf::_GetNetworkNodesRequest_default_instance_);
}
inline const ::zjchain::network::protobuf::GetNetworkNodesRequest& NetworkMessage::get_net_nodes_req() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.NetworkMessage.get_net_nodes_req)
  return _internal_get_net_nodes_req();
}
inline void NetworkMessage::unsafe_arena_set_allocated_get_net_nodes_req(
    ::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_net_nodes_req_);
  }
  get_net_nodes_req_ = get_net_nodes_req;
  if (get_net_nodes_req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.network.protobuf.NetworkMessage.get_net_nodes_req)
}
inline ::zjchain::network::protobuf::GetNetworkNodesRequest* NetworkMessage::release_get_net_nodes_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::network::protobuf::GetNetworkNodesRequest* temp = get_net_nodes_req_;
  get_net_nodes_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::network::protobuf::GetNetworkNodesRequest* NetworkMessage::unsafe_arena_release_get_net_nodes_req() {
  // @@protoc_insertion_point(field_release:zjchain.network.protobuf.NetworkMessage.get_net_nodes_req)
  _has_bits_[0] &= ~0x00000001u;
  ::zjchain::network::protobuf::GetNetworkNodesRequest* temp = get_net_nodes_req_;
  get_net_nodes_req_ = nullptr;
  return temp;
}
inline ::zjchain::network::protobuf::GetNetworkNodesRequest* NetworkMessage::_internal_mutable_get_net_nodes_req() {
  _has_bits_[0] |= 0x00000001u;
  if (get_net_nodes_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::network::protobuf::GetNetworkNodesRequest>(GetArenaForAllocation());
    get_net_nodes_req_ = p;
  }
  return get_net_nodes_req_;
}
inline ::zjchain::network::protobuf::GetNetworkNodesRequest* NetworkMessage::mutable_get_net_nodes_req() {
  ::zjchain::network::protobuf::GetNetworkNodesRequest* _msg = _internal_mutable_get_net_nodes_req();
  // @@protoc_insertion_point(field_mutable:zjchain.network.protobuf.NetworkMessage.get_net_nodes_req)
  return _msg;
}
inline void NetworkMessage::set_allocated_get_net_nodes_req(::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_net_nodes_req_;
  }
  if (get_net_nodes_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_net_nodes_req);
    if (message_arena != submessage_arena) {
      get_net_nodes_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_net_nodes_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  get_net_nodes_req_ = get_net_nodes_req;
  // @@protoc_insertion_point(field_set_allocated:zjchain.network.protobuf.NetworkMessage.get_net_nodes_req)
}

// optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
inline bool NetworkMessage::_internal_has_get_net_nodes_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || get_net_nodes_res_ != nullptr);
  return value;
}
inline bool NetworkMessage::has_get_net_nodes_res() const {
  return _internal_has_get_net_nodes_res();
}
inline void NetworkMessage::clear_get_net_nodes_res() {
  if (get_net_nodes_res_ != nullptr) get_net_nodes_res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zjchain::network::protobuf::GetNetworkNodesResponse& NetworkMessage::_internal_get_net_nodes_res() const {
  const ::zjchain::network::protobuf::GetNetworkNodesResponse* p = get_net_nodes_res_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::network::protobuf::GetNetworkNodesResponse&>(
      ::zjchain::network::protobuf::_GetNetworkNodesResponse_default_instance_);
}
inline const ::zjchain::network::protobuf::GetNetworkNodesResponse& NetworkMessage::get_net_nodes_res() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.NetworkMessage.get_net_nodes_res)
  return _internal_get_net_nodes_res();
}
inline void NetworkMessage::unsafe_arena_set_allocated_get_net_nodes_res(
    ::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_net_nodes_res_);
  }
  get_net_nodes_res_ = get_net_nodes_res;
  if (get_net_nodes_res) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.network.protobuf.NetworkMessage.get_net_nodes_res)
}
inline ::zjchain::network::protobuf::GetNetworkNodesResponse* NetworkMessage::release_get_net_nodes_res() {
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::network::protobuf::GetNetworkNodesResponse* temp = get_net_nodes_res_;
  get_net_nodes_res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::network::protobuf::GetNetworkNodesResponse* NetworkMessage::unsafe_arena_release_get_net_nodes_res() {
  // @@protoc_insertion_point(field_release:zjchain.network.protobuf.NetworkMessage.get_net_nodes_res)
  _has_bits_[0] &= ~0x00000002u;
  ::zjchain::network::protobuf::GetNetworkNodesResponse* temp = get_net_nodes_res_;
  get_net_nodes_res_ = nullptr;
  return temp;
}
inline ::zjchain::network::protobuf::GetNetworkNodesResponse* NetworkMessage::_internal_mutable_get_net_nodes_res() {
  _has_bits_[0] |= 0x00000002u;
  if (get_net_nodes_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::network::protobuf::GetNetworkNodesResponse>(GetArenaForAllocation());
    get_net_nodes_res_ = p;
  }
  return get_net_nodes_res_;
}
inline ::zjchain::network::protobuf::GetNetworkNodesResponse* NetworkMessage::mutable_get_net_nodes_res() {
  ::zjchain::network::protobuf::GetNetworkNodesResponse* _msg = _internal_mutable_get_net_nodes_res();
  // @@protoc_insertion_point(field_mutable:zjchain.network.protobuf.NetworkMessage.get_net_nodes_res)
  return _msg;
}
inline void NetworkMessage::set_allocated_get_net_nodes_res(::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_net_nodes_res_;
  }
  if (get_net_nodes_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_net_nodes_res);
    if (message_arena != submessage_arena) {
      get_net_nodes_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_net_nodes_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  get_net_nodes_res_ = get_net_nodes_res;
  // @@protoc_insertion_point(field_set_allocated:zjchain.network.protobuf.NetworkMessage.get_net_nodes_res)
}

// optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
inline bool NetworkMessage::_internal_has_drop_node() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || drop_node_ != nullptr);
  return value;
}
inline bool NetworkMessage::has_drop_node() const {
  return _internal_has_drop_node();
}
inline void NetworkMessage::clear_drop_node() {
  if (drop_node_ != nullptr) drop_node_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zjchain::network::protobuf::DropNodeRequest& NetworkMessage::_internal_drop_node() const {
  const ::zjchain::network::protobuf::DropNodeRequest* p = drop_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::zjchain::network::protobuf::DropNodeRequest&>(
      ::zjchain::network::protobuf::_DropNodeRequest_default_instance_);
}
inline const ::zjchain::network::protobuf::DropNodeRequest& NetworkMessage::drop_node() const {
  // @@protoc_insertion_point(field_get:zjchain.network.protobuf.NetworkMessage.drop_node)
  return _internal_drop_node();
}
inline void NetworkMessage::unsafe_arena_set_allocated_drop_node(
    ::zjchain::network::protobuf::DropNodeRequest* drop_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_node_);
  }
  drop_node_ = drop_node;
  if (drop_node) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zjchain.network.protobuf.NetworkMessage.drop_node)
}
inline ::zjchain::network::protobuf::DropNodeRequest* NetworkMessage::release_drop_node() {
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::network::protobuf::DropNodeRequest* temp = drop_node_;
  drop_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zjchain::network::protobuf::DropNodeRequest* NetworkMessage::unsafe_arena_release_drop_node() {
  // @@protoc_insertion_point(field_release:zjchain.network.protobuf.NetworkMessage.drop_node)
  _has_bits_[0] &= ~0x00000004u;
  ::zjchain::network::protobuf::DropNodeRequest* temp = drop_node_;
  drop_node_ = nullptr;
  return temp;
}
inline ::zjchain::network::protobuf::DropNodeRequest* NetworkMessage::_internal_mutable_drop_node() {
  _has_bits_[0] |= 0x00000004u;
  if (drop_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::zjchain::network::protobuf::DropNodeRequest>(GetArenaForAllocation());
    drop_node_ = p;
  }
  return drop_node_;
}
inline ::zjchain::network::protobuf::DropNodeRequest* NetworkMessage::mutable_drop_node() {
  ::zjchain::network::protobuf::DropNodeRequest* _msg = _internal_mutable_drop_node();
  // @@protoc_insertion_point(field_mutable:zjchain.network.protobuf.NetworkMessage.drop_node)
  return _msg;
}
inline void NetworkMessage::set_allocated_drop_node(::zjchain::network::protobuf::DropNodeRequest* drop_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete drop_node_;
  }
  if (drop_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(drop_node);
    if (message_arena != submessage_arena) {
      drop_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  drop_node_ = drop_node;
  // @@protoc_insertion_point(field_set_allocated:zjchain.network.protobuf.NetworkMessage.drop_node)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace network
}  // namespace zjchain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fnetwork_2eproto
