// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/network.proto

#ifndef PROTOBUF_protos_2fnetwork_2eproto__INCLUDED
#define PROTOBUF_protos_2fnetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zjchain {
namespace network {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protos_2fnetwork_2eproto();
void protobuf_AssignDesc_protos_2fnetwork_2eproto();
void protobuf_ShutdownFile_protos_2fnetwork_2eproto();

class GetNetworkNodesRequest;
class NodeInfo;
class GetNetworkNodesResponse;
class DropNodeRequest;
class NetworkMessage;

// ===================================================================

class GetNetworkNodesRequest : public ::google::protobuf::Message {
 public:
  GetNetworkNodesRequest();
  virtual ~GetNetworkNodesRequest();

  GetNetworkNodesRequest(const GetNetworkNodesRequest& from);

  inline GetNetworkNodesRequest& operator=(const GetNetworkNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNetworkNodesRequest& default_instance();

  void Swap(GetNetworkNodesRequest* other);

  // implements Message ----------------------------------------------

  GetNetworkNodesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNetworkNodesRequest& from);
  void MergeFrom(const GetNetworkNodesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 net_id = 1;
  inline bool has_net_id() const;
  inline void clear_net_id();
  static const int kNetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 net_id() const;
  inline void set_net_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.GetNetworkNodesRequest)
 private:
  inline void set_has_net_id();
  inline void clear_has_net_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 net_id_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_protos_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_protos_2fnetwork_2eproto();

  void InitAsDefaultInstance();
  static GetNetworkNodesRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  void Swap(NodeInfo* other);

  // implements Message ----------------------------------------------

  NodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sharding_id = 1;
  inline bool has_sharding_id() const;
  inline void clear_sharding_id();
  static const int kShardingIdFieldNumber = 1;
  inline ::google::protobuf::int32 sharding_id() const;
  inline void set_sharding_id(::google::protobuf::int32 value);

  // optional bytes public_ip = 2;
  inline bool has_public_ip() const;
  inline void clear_public_ip();
  static const int kPublicIpFieldNumber = 2;
  inline const ::std::string& public_ip() const;
  inline void set_public_ip(const ::std::string& value);
  inline void set_public_ip(const char* value);
  inline void set_public_ip(const void* value, size_t size);
  inline ::std::string* mutable_public_ip();
  inline ::std::string* release_public_ip();
  inline void set_allocated_public_ip(::std::string* public_ip);

  // optional int32 public_port = 3;
  inline bool has_public_port() const;
  inline void clear_public_port();
  static const int kPublicPortFieldNumber = 3;
  inline ::google::protobuf::int32 public_port() const;
  inline void set_public_port(::google::protobuf::int32 value);

  // optional bytes pubkey = 4;
  inline bool has_pubkey() const;
  inline void clear_pubkey();
  static const int kPubkeyFieldNumber = 4;
  inline const ::std::string& pubkey() const;
  inline void set_pubkey(const ::std::string& value);
  inline void set_pubkey(const char* value);
  inline void set_pubkey(const void* value, size_t size);
  inline ::std::string* mutable_pubkey();
  inline ::std::string* release_pubkey();
  inline void set_allocated_pubkey(::std::string* pubkey);

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.NodeInfo)
 private:
  inline void set_has_sharding_id();
  inline void clear_has_sharding_id();
  inline void set_has_public_ip();
  inline void clear_has_public_ip();
  inline void set_has_public_port();
  inline void clear_has_public_port();
  inline void set_has_pubkey();
  inline void clear_has_pubkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* public_ip_;
  ::google::protobuf::int32 sharding_id_;
  ::google::protobuf::int32 public_port_;
  ::std::string* pubkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_protos_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_protos_2fnetwork_2eproto();

  void InitAsDefaultInstance();
  static NodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetNetworkNodesResponse : public ::google::protobuf::Message {
 public:
  GetNetworkNodesResponse();
  virtual ~GetNetworkNodesResponse();

  GetNetworkNodesResponse(const GetNetworkNodesResponse& from);

  inline GetNetworkNodesResponse& operator=(const GetNetworkNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNetworkNodesResponse& default_instance();

  void Swap(GetNetworkNodesResponse* other);

  // implements Message ----------------------------------------------

  GetNetworkNodesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNetworkNodesResponse& from);
  void MergeFrom(const GetNetworkNodesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::zjchain::network::protobuf::NodeInfo& nodes(int index) const;
  inline ::zjchain::network::protobuf::NodeInfo* mutable_nodes(int index);
  inline ::zjchain::network::protobuf::NodeInfo* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.GetNetworkNodesResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_protos_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_protos_2fnetwork_2eproto();

  void InitAsDefaultInstance();
  static GetNetworkNodesResponse* default_instance_;
};
// -------------------------------------------------------------------

class DropNodeRequest : public ::google::protobuf::Message {
 public:
  DropNodeRequest();
  virtual ~DropNodeRequest();

  DropNodeRequest(const DropNodeRequest& from);

  inline DropNodeRequest& operator=(const DropNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropNodeRequest& default_instance();

  void Swap(DropNodeRequest* other);

  // implements Message ----------------------------------------------

  DropNodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropNodeRequest& from);
  void MergeFrom(const DropNodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.DropNodeRequest)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_protos_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_protos_2fnetwork_2eproto();

  void InitAsDefaultInstance();
  static DropNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class NetworkMessage : public ::google::protobuf::Message {
 public:
  NetworkMessage();
  virtual ~NetworkMessage();

  NetworkMessage(const NetworkMessage& from);

  inline NetworkMessage& operator=(const NetworkMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkMessage& default_instance();

  void Swap(NetworkMessage* other);

  // implements Message ----------------------------------------------

  NetworkMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkMessage& from);
  void MergeFrom(const NetworkMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  inline bool has_get_net_nodes_req() const;
  inline void clear_get_net_nodes_req();
  static const int kGetNetNodesReqFieldNumber = 1;
  inline const ::zjchain::network::protobuf::GetNetworkNodesRequest& get_net_nodes_req() const;
  inline ::zjchain::network::protobuf::GetNetworkNodesRequest* mutable_get_net_nodes_req();
  inline ::zjchain::network::protobuf::GetNetworkNodesRequest* release_get_net_nodes_req();
  inline void set_allocated_get_net_nodes_req(::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req);

  // optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  inline bool has_get_net_nodes_res() const;
  inline void clear_get_net_nodes_res();
  static const int kGetNetNodesResFieldNumber = 2;
  inline const ::zjchain::network::protobuf::GetNetworkNodesResponse& get_net_nodes_res() const;
  inline ::zjchain::network::protobuf::GetNetworkNodesResponse* mutable_get_net_nodes_res();
  inline ::zjchain::network::protobuf::GetNetworkNodesResponse* release_get_net_nodes_res();
  inline void set_allocated_get_net_nodes_res(::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res);

  // optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
  inline bool has_drop_node() const;
  inline void clear_drop_node();
  static const int kDropNodeFieldNumber = 3;
  inline const ::zjchain::network::protobuf::DropNodeRequest& drop_node() const;
  inline ::zjchain::network::protobuf::DropNodeRequest* mutable_drop_node();
  inline ::zjchain::network::protobuf::DropNodeRequest* release_drop_node();
  inline void set_allocated_drop_node(::zjchain::network::protobuf::DropNodeRequest* drop_node);

  // @@protoc_insertion_point(class_scope:zjchain.network.protobuf.NetworkMessage)
 private:
  inline void set_has_get_net_nodes_req();
  inline void clear_has_get_net_nodes_req();
  inline void set_has_get_net_nodes_res();
  inline void clear_has_get_net_nodes_res();
  inline void set_has_drop_node();
  inline void clear_has_drop_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req_;
  ::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res_;
  ::zjchain::network::protobuf::DropNodeRequest* drop_node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fnetwork_2eproto();
  friend void protobuf_AssignDesc_protos_2fnetwork_2eproto();
  friend void protobuf_ShutdownFile_protos_2fnetwork_2eproto();

  void InitAsDefaultInstance();
  static NetworkMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// GetNetworkNodesRequest

// optional uint32 net_id = 1;
inline bool GetNetworkNodesRequest::has_net_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetNetworkNodesRequest::set_has_net_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetNetworkNodesRequest::clear_has_net_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetNetworkNodesRequest::clear_net_id() {
  net_id_ = 0u;
  clear_has_net_id();
}
inline ::google::protobuf::uint32 GetNetworkNodesRequest::net_id() const {
  return net_id_;
}
inline void GetNetworkNodesRequest::set_net_id(::google::protobuf::uint32 value) {
  set_has_net_id();
  net_id_ = value;
}

// optional uint32 count = 2;
inline bool GetNetworkNodesRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetNetworkNodesRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetNetworkNodesRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetNetworkNodesRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetNetworkNodesRequest::count() const {
  return count_;
}
inline void GetNetworkNodesRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NodeInfo

// optional int32 sharding_id = 1;
inline bool NodeInfo::has_sharding_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_sharding_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_sharding_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_sharding_id() {
  sharding_id_ = 0;
  clear_has_sharding_id();
}
inline ::google::protobuf::int32 NodeInfo::sharding_id() const {
  return sharding_id_;
}
inline void NodeInfo::set_sharding_id(::google::protobuf::int32 value) {
  set_has_sharding_id();
  sharding_id_ = value;
}

// optional bytes public_ip = 2;
inline bool NodeInfo::has_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_public_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_public_ip() {
  if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
    public_ip_->clear();
  }
  clear_has_public_ip();
}
inline const ::std::string& NodeInfo::public_ip() const {
  return *public_ip_;
}
inline void NodeInfo::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  public_ip_->assign(value);
}
inline void NodeInfo::set_public_ip(const char* value) {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  public_ip_->assign(value);
}
inline void NodeInfo::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  public_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfo::mutable_public_ip() {
  set_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_ = new ::std::string;
  }
  return public_ip_;
}
inline ::std::string* NodeInfo::release_public_ip() {
  clear_has_public_ip();
  if (public_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_ip_;
    public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeInfo::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete public_ip_;
  }
  if (public_ip) {
    set_has_public_ip();
    public_ip_ = public_ip;
  } else {
    clear_has_public_ip();
    public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 public_port = 3;
inline bool NodeInfo::has_public_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeInfo::set_has_public_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeInfo::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeInfo::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 NodeInfo::public_port() const {
  return public_port_;
}
inline void NodeInfo::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
}

// optional bytes pubkey = 4;
inline bool NodeInfo::has_pubkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeInfo::set_has_pubkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeInfo::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeInfo::clear_pubkey() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    pubkey_->clear();
  }
  clear_has_pubkey();
}
inline const ::std::string& NodeInfo::pubkey() const {
  return *pubkey_;
}
inline void NodeInfo::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void NodeInfo::set_pubkey(const char* value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void NodeInfo::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfo::mutable_pubkey() {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  return pubkey_;
}
inline ::std::string* NodeInfo::release_pubkey() {
  clear_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pubkey_;
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeInfo::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pubkey_;
  }
  if (pubkey) {
    set_has_pubkey();
    pubkey_ = pubkey;
  } else {
    clear_has_pubkey();
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetNetworkNodesResponse

// repeated .zjchain.network.protobuf.NodeInfo nodes = 1;
inline int GetNetworkNodesResponse::nodes_size() const {
  return nodes_.size();
}
inline void GetNetworkNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline const ::zjchain::network::protobuf::NodeInfo& GetNetworkNodesResponse::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::zjchain::network::protobuf::NodeInfo* GetNetworkNodesResponse::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::zjchain::network::protobuf::NodeInfo* GetNetworkNodesResponse::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >&
GetNetworkNodesResponse::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::zjchain::network::protobuf::NodeInfo >*
GetNetworkNodesResponse::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// DropNodeRequest

// optional bytes ip = 1;
inline bool DropNodeRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropNodeRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropNodeRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropNodeRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& DropNodeRequest::ip() const {
  return *ip_;
}
inline void DropNodeRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DropNodeRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DropNodeRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DropNodeRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* DropNodeRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DropNodeRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 2;
inline bool DropNodeRequest::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropNodeRequest::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropNodeRequest::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropNodeRequest::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 DropNodeRequest::port() const {
  return port_;
}
inline void DropNodeRequest::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// NetworkMessage

// optional .zjchain.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
inline bool NetworkMessage::has_get_net_nodes_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkMessage::set_has_get_net_nodes_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkMessage::clear_has_get_net_nodes_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkMessage::clear_get_net_nodes_req() {
  if (get_net_nodes_req_ != NULL) get_net_nodes_req_->::zjchain::network::protobuf::GetNetworkNodesRequest::Clear();
  clear_has_get_net_nodes_req();
}
inline const ::zjchain::network::protobuf::GetNetworkNodesRequest& NetworkMessage::get_net_nodes_req() const {
  return get_net_nodes_req_ != NULL ? *get_net_nodes_req_ : *default_instance_->get_net_nodes_req_;
}
inline ::zjchain::network::protobuf::GetNetworkNodesRequest* NetworkMessage::mutable_get_net_nodes_req() {
  set_has_get_net_nodes_req();
  if (get_net_nodes_req_ == NULL) get_net_nodes_req_ = new ::zjchain::network::protobuf::GetNetworkNodesRequest;
  return get_net_nodes_req_;
}
inline ::zjchain::network::protobuf::GetNetworkNodesRequest* NetworkMessage::release_get_net_nodes_req() {
  clear_has_get_net_nodes_req();
  ::zjchain::network::protobuf::GetNetworkNodesRequest* temp = get_net_nodes_req_;
  get_net_nodes_req_ = NULL;
  return temp;
}
inline void NetworkMessage::set_allocated_get_net_nodes_req(::zjchain::network::protobuf::GetNetworkNodesRequest* get_net_nodes_req) {
  delete get_net_nodes_req_;
  get_net_nodes_req_ = get_net_nodes_req;
  if (get_net_nodes_req) {
    set_has_get_net_nodes_req();
  } else {
    clear_has_get_net_nodes_req();
  }
}

// optional .zjchain.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
inline bool NetworkMessage::has_get_net_nodes_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkMessage::set_has_get_net_nodes_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkMessage::clear_has_get_net_nodes_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkMessage::clear_get_net_nodes_res() {
  if (get_net_nodes_res_ != NULL) get_net_nodes_res_->::zjchain::network::protobuf::GetNetworkNodesResponse::Clear();
  clear_has_get_net_nodes_res();
}
inline const ::zjchain::network::protobuf::GetNetworkNodesResponse& NetworkMessage::get_net_nodes_res() const {
  return get_net_nodes_res_ != NULL ? *get_net_nodes_res_ : *default_instance_->get_net_nodes_res_;
}
inline ::zjchain::network::protobuf::GetNetworkNodesResponse* NetworkMessage::mutable_get_net_nodes_res() {
  set_has_get_net_nodes_res();
  if (get_net_nodes_res_ == NULL) get_net_nodes_res_ = new ::zjchain::network::protobuf::GetNetworkNodesResponse;
  return get_net_nodes_res_;
}
inline ::zjchain::network::protobuf::GetNetworkNodesResponse* NetworkMessage::release_get_net_nodes_res() {
  clear_has_get_net_nodes_res();
  ::zjchain::network::protobuf::GetNetworkNodesResponse* temp = get_net_nodes_res_;
  get_net_nodes_res_ = NULL;
  return temp;
}
inline void NetworkMessage::set_allocated_get_net_nodes_res(::zjchain::network::protobuf::GetNetworkNodesResponse* get_net_nodes_res) {
  delete get_net_nodes_res_;
  get_net_nodes_res_ = get_net_nodes_res;
  if (get_net_nodes_res) {
    set_has_get_net_nodes_res();
  } else {
    clear_has_get_net_nodes_res();
  }
}

// optional .zjchain.network.protobuf.DropNodeRequest drop_node = 3;
inline bool NetworkMessage::has_drop_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkMessage::set_has_drop_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkMessage::clear_has_drop_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkMessage::clear_drop_node() {
  if (drop_node_ != NULL) drop_node_->::zjchain::network::protobuf::DropNodeRequest::Clear();
  clear_has_drop_node();
}
inline const ::zjchain::network::protobuf::DropNodeRequest& NetworkMessage::drop_node() const {
  return drop_node_ != NULL ? *drop_node_ : *default_instance_->drop_node_;
}
inline ::zjchain::network::protobuf::DropNodeRequest* NetworkMessage::mutable_drop_node() {
  set_has_drop_node();
  if (drop_node_ == NULL) drop_node_ = new ::zjchain::network::protobuf::DropNodeRequest;
  return drop_node_;
}
inline ::zjchain::network::protobuf::DropNodeRequest* NetworkMessage::release_drop_node() {
  clear_has_drop_node();
  ::zjchain::network::protobuf::DropNodeRequest* temp = drop_node_;
  drop_node_ = NULL;
  return temp;
}
inline void NetworkMessage::set_allocated_drop_node(::zjchain::network::protobuf::DropNodeRequest* drop_node) {
  delete drop_node_;
  drop_node_ = drop_node;
  if (drop_node) {
    set_has_drop_node();
  } else {
    clear_has_drop_node();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace network
}  // namespace zjchain

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protos_2fnetwork_2eproto__INCLUDED
