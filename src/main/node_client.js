const Web3 = require('web3')
var net = require('net');
var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', net));
const { randomBytes } = require('crypto')
const Secp256k1 = require('./secp256k1_1')
const keccak256 = require('keccak256')
var querystring = require('querystring');
var http = require('http');
var fs = require('fs');

function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

function PostCode(data) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '10.101.20.29',
        port: '8781',
        path: '/transaction',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (chunk != "ok") {
                console.log('Response: ' + chunk + ", " + data);
            } else {
                console.log('Response: ' + chunk + ", " + data);
            }
        })
    });

    post_req.write(post_data);
    post_req.end();
}

function PostCode(path, data) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '127.0.0.1',
        port: '8781',
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (chunk != "ok") {
                console.log('Response: ' + chunk + ", " + data);
            } else {
                console.log('Response: ' + chunk + ", " + data);
            }
        })
    });

    post_req.write(post_data);
    post_req.end();
}

function GetValidHexString(uint256_bytes) {
    var str_res = uint256_bytes.toString(16)
    while (str_res.length < 64) {
        str_res = "0" + str_res;
    }

    return str_res;
}

function QueryContract(input) {
    var contract_address = fs.readFileSync('contract_address', 'utf-8');
    var data = {
        "input": input,
        'address': contract_address,
    };

    PostCode('/query_contract', data);
}

function param_contract(tx_type, gid, to, amount, gas_limit, gas_price, contract_bytes, input, prepay, prikey) {
    // 私钥
    const privateKeyBuf = Secp256k1.uint256(prikey, 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)

    // 将内容编码
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)

    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var prepay_buf = new Buffer(8);
    var big = ~~(prepay / MAX_UINT32)
    var low = (prepay % MAX_UINT32) - big
    prepay_buf.writeUInt32LE(big, 4)
    prepay_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf, Buffer.from(contract_bytes, 'hex'), Buffer.from(input, 'hex'), prepay_buf]);

    // 签名
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)

    // 发送给链的交易参数
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': 3,
        'hash': kechash,
        'attrs_size': 4,
        "bytes_code": contract_bytes,
        "input": input,
        "pepay": prepay,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function create_tx(to, amount, gas_limit, gas_price) {
    // 私钥
    const privateKeyBuf = Secp256k1.uint256("fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971", 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)

    // 将内容编码
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var tx_type = 0;
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)
    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf]);

    // 签名
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)

    // 发送给链的交易参数
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': 3,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

// 创建合约
function new_contract(contract_bytes, prikey) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    const privateKeyBuf = Secp256k1.uint256(prikey, 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)
    var pk_bytes = hexToBytes(self_public_key.x.toString(16) + self_public_key.y.toString(16))
    var address = keccak256(pk_bytes).toString('hex')
    var self_account_id = address.slice(address.length - 40, address.length)
    var kechash = keccak256(self_account_id + gid + contract_bytes).toString('hex')
    var self_contract_address = kechash.slice(kechash.length - 40, kechash.length)
    var data = param_contract(
        6,
        gid,
        self_contract_address,
        10000000,
        10000000,
        1,
        contract_bytes,
        "",
        999999999,
        prikey);
    PostCode(data);

    const opt = { flag: 'w', }
    fs.writeFile('contract_address', self_contract_address, opt, (err) => {
        if (err) {
            console.error(err)
        }
    })
}

// 调用合约, 收回预付费 input = ""
function call_contract(input, prikey, amount) {
    var contract_address = fs.readFileSync('contract_address', 'utf-8');
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        8,
        gid,
        contract_address,
        amount,
        10000000,
        1,
        "",
        input,
        0,
        prikey);
    PostCode(data);
}

// 设置预付费 prepayment > 0
function prepay_contract(prikey, prepayment) {
    var contract_address = fs.readFileSync('contract_address', 'utf-8');
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        7,
        gid,
        contract_address,
        0,
        10000000,
        1,
        "",
        "",
        prepayment,
        prikey);
    PostCode(data);
}

// 普通交易和kv写入
function do_transaction(to_addr, amount, gas_limit, gas_price, key, value) {
    var data = create_tx(to_addr, amount, gas_limit, gas_price);
    PostCode(data);
}

const args = process.argv.slice(2)
var prikey = "fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971";
if (args.length >= 2) {
    prikey = args[1];
}

// 普通交易，并写入kv数据
if (args[0] == 0) {
    do_transaction(args[1], 100000, 10000, 1, "key", "value");
}

// 创建合约 phr.sol
if (args[0] == 1) {
    new_contract(
        "60806040526040516200258438038062002584833981810160405281019062000029919062000326565b8060009080519060200190620000419291906200008a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000377565b82805482825590600052602060002090810192821562000106579160200282015b82811115620001055782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620000ab565b5b50905062000115919062000119565b5090565b5b80821115620001345760008160009055506001016200011a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200019c8262000151565b810181811067ffffffffffffffff82111715620001be57620001bd62000162565b5b80604052505050565b6000620001d362000138565b9050620001e1828262000191565b919050565b600067ffffffffffffffff82111562000204576200020362000162565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000247826200021a565b9050919050565b62000259816200023a565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b6000620002966200029084620001e6565b620001c7565b90508083825260208201905060208402830185811115620002bc57620002bb62000215565b5b835b81811015620002e95780620002d4888262000268565b845260208401935050602081019050620002be565b5050509392505050565b600082601f8301126200030b576200030a6200014c565b5b81516200031d8482602086016200027f565b91505092915050565b6000602082840312156200033f576200033e62000142565b5b600082015167ffffffffffffffff81111562000360576200035f62000147565b5b6200036e84828501620002f3565b91505092915050565b6121fd80620003876000396000f3fe60806040526004361061011f5760003560e01c8063728f4561116100a0578063b89e70b511610064578063b89e70b51461041b578063cfefc01014610458578063e645df4314610462578063e9c7feda1461047e578063fdba8f11146104bb5761011f565b8063728f45611461030a5780637e280378146103365780638da5cb5b14610375578063a51f8aac146103a0578063ae0ad9d9146103de5761011f565b80634819544b116100e75780634819544b146101ff5780635f13d6ee1461023e5780636189d2df1461027b578063691b3463146102a45780636b83e059146102cd5761011f565b806308ad872a146101245780630ef403f81461014d57806329c1cb4b1461018a5780632a1343a7146101c7578063348a2b91146101e3575b600080fd5b34801561013057600080fd5b5061014b6004803603810190610146919061146f565b6104e4565b005b34801561015957600080fd5b50610174600480360381019061016f91906114fa565b61064c565b6040516101819190611542565b60405180910390f35b34801561019657600080fd5b506101b160048036038101906101ac919061155d565b610679565b6040516101be9190611542565b60405180910390f35b6101e160048036038101906101dc919061164d565b6106c0565b005b6101fd60048036038101906101f891906116cd565b610714565b005b34801561020b57600080fd5b50610226600480360381019061022191906116fa565b610768565b60405161023593929190611758565b60405180910390f35b34801561024a57600080fd5b506102656004803603810190610260919061178f565b6107bc565b60405161027291906117cb565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d919061196c565b6107fb565b005b3480156102b057600080fd5b506102cb60048036038101906102c69190611a0b565b6109d9565b005b3480156102d957600080fd5b506102f460048036038101906102ef919061155d565b610ae6565b6040516103019190611542565b60405180910390f35b34801561031657600080fd5b5061031f610b2b565b60405161032d929190611b15565b60405180910390f35b34801561034257600080fd5b5061035d600480360381019061035891906114fa565b610b60565b60405161036c93929190611b45565b60405180910390f35b34801561038157600080fd5b5061038a610ca7565b6040516103979190611bab565b60405180910390f35b3480156103ac57600080fd5b506103c760048036038101906103c291906114fa565b610ccd565b6040516103d5929190611bc6565b60405180910390f35b3480156103ea57600080fd5b5061040560048036038101906104009190611bef565b610cfe565b6040516104129190611542565b60405180910390f35b34801561042757600080fd5b50610442600480360381019061043d91906114fa565b610d43565b60405161044f9190611542565b60405180910390f35b610460610dca565b005b61047c60048036038101906104779190611c77565b610e05565b005b34801561048a57600080fd5b506104a560048036038101906104a0919061155d565b610e5a565b6040516104b29190611542565b60405180910390f35b3480156104c757600080fd5b506104e260048036038101906104dd919061146f565b610f73565b005b8051600080549050146104f657600080fd5b60005b81518110156105b6576000818154811061051657610515611cb7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661058361056385611128565b84848151811061057657610575611cb7565b5b6020026020010151611158565b73ffffffffffffffffffffffffffffffffffffffff16146105a357600080fd5b80806105ae90611d15565b9150506104f9565b5060016003846040516105c99190611d99565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000848152602001908152602001600020846040516106229190611d99565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b60006002600083815260200190815260200160002060020160009054906101000a900460ff169050919050565b600060038360405161068b9190611d99565b9081526020016040518091039020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b808273ffffffffffffffffffffffffffffffffffffffff16427fa6b5ddd331f9dc412a8c258207b1c66f53c1740c72628d9913aafcb6b28d8f733360405161070891906117cb565b60405180910390a45050565b3373ffffffffffffffffffffffffffffffffffffffff166108fc8267ffffffffffffffff169081150290604051600060405180830381858888f19350505050158015610764573d6000803e3d6000fd5b5050565b6005602052816000526040600020818154811061078457600080fd5b9060005260206000209060030201600091509150508060000154908060010154908060020160009054906101000a900460ff16905083565b600081815481106107cc57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461085557600080fd5b6006600085815260200190815260200160002060010160009054906101000a900460ff161561088357600080fd5b805182511461089157600080fd5b604051806040016040528084815260200160011515815250600660008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555090505060008251905060005b818110156109d15760056000868152602001908152602001600020604051806060016040528086848151811061092b5761092a611cb7565b5b6020026020010151815260200185848151811061094b5761094a611cb7565b5b60200260200101518152602001600115158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505080806109c990611d15565b9150506108f2565b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a3357600080fd5b6002600084815260200190815260200160002060020160009054906101000a900460ff1615610a6157600080fd5b604051806060016040528083815260200182815260200160011515815250600260008581526020019081526020016000206000820151816000019081610aa79190611fbc565b506020820151816001019081610abd9190611fbc565b5060408201518160020160006101000a81548160ff021916908315150217905550905050505050565b6003828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900460ff1681565b6000606060006203084e905060006040518060600160405280603a815260200161218e603a9139905081819350935050509091565b6002602052806000526040600020600091509050806000018054610b8390611ddf565b80601f0160208091040260200160405190810160405280929190818152602001828054610baf90611ddf565b8015610bfc5780601f10610bd157610100808354040283529160200191610bfc565b820191906000526020600020905b815481529060010190602001808311610bdf57829003601f168201915b505050505090806001018054610c1190611ddf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3d90611ddf565b8015610c8a5780601f10610c5f57610100808354040283529160200191610c8a565b820191906000526020600020905b815481529060010190602001808311610c6d57829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6004602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d9f57600080fd5b6006600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b8173ffffffffffffffffffffffffffffffffffffffff166108fc8267ffffffffffffffff169081150290604051600060405180830381858888f19350505050158015610e55573d6000803e3d6000fd5b505050565b6000806005600084815260200190815260200160002080549050905060008111610e8357600080fd5b60005b81811015610f665760046000600560008781526020019081526020016000208381548110610eb757610eb6611cb7565b5b906000526020600020906003020160000154815260200190815260200160002085604051610ee59190611d99565b908152602001604051809103902060009054906101000a900460ff168015610f43575042600560008681526020019081526020016000208281548110610f2e57610f2d611cb7565b5b90600052602060002090600302016001015410155b15610f5357600192505050610f6d565b8080610f5e90611d15565b915050610e86565b5060009150505b92915050565b805160008054905014610f8557600080fd5b60001515600384604051610f999190611d99565b9081526020016040518091039020600084815260200190815260200160002060009054906101000a900460ff16151514610fd257600080fd5b60005b81518110156110925760008181548110610ff257610ff1611cb7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661105f61103f85611128565b84848151811061105257611051611cb7565b5b6020026020010151611158565b73ffffffffffffffffffffffffffffffffffffffff161461107f57600080fd5b808061108a90611d15565b915050610fd5565b5060016003846040516110a59190611d99565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000848152602001908152602001600020846040516110fe9190611d99565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b60008160405160200161113b9190612106565b604051602081830303815290604052805190602001209050919050565b600080600080611167856111c7565b925092509250600186848484604051600081526020016040526040516111909493929190612148565b6020604051602081039080840390855afa1580156111b2573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600080600060418451146111da57600080fd5b6020840151915060408401519050606084015160001a92509193909250565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61126082611217565b810181811067ffffffffffffffff8211171561127f5761127e611228565b5b80604052505050565b60006112926111f9565b905061129e8282611257565b919050565b600067ffffffffffffffff8211156112be576112bd611228565b5b6112c782611217565b9050602081019050919050565b82818337600083830152505050565b60006112f66112f1846112a3565b611288565b90508281526020810184848401111561131257611311611212565b5b61131d8482856112d4565b509392505050565b600082601f83011261133a5761133961120d565b5b813561134a8482602086016112e3565b91505092915050565b6000819050919050565b61136681611353565b811461137157600080fd5b50565b6000813590506113838161135d565b92915050565b600067ffffffffffffffff8211156113a4576113a3611228565b5b602082029050602081019050919050565b600080fd5b60006113cd6113c884611389565b611288565b905080838252602082019050602084028301858111156113f0576113ef6113b5565b5b835b8181101561143757803567ffffffffffffffff8111156114155761141461120d565b5b8086016114228982611325565b855260208501945050506020810190506113f2565b5050509392505050565b600082601f8301126114565761145561120d565b5b81356114668482602086016113ba565b91505092915050565b60008060006060848603121561148857611487611203565b5b600084013567ffffffffffffffff8111156114a6576114a5611208565b5b6114b286828701611325565b93505060206114c386828701611374565b925050604084013567ffffffffffffffff8111156114e4576114e3611208565b5b6114f086828701611441565b9150509250925092565b6000602082840312156115105761150f611203565b5b600061151e84828501611374565b91505092915050565b60008115159050919050565b61153c81611527565b82525050565b60006020820190506115576000830184611533565b92915050565b6000806040838503121561157457611573611203565b5b600083013567ffffffffffffffff81111561159257611591611208565b5b61159e85828601611325565b92505060206115af85828601611374565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115e4826115b9565b9050919050565b6115f4816115d9565b81146115ff57600080fd5b50565b600081359050611611816115eb565b92915050565b6000819050919050565b61162a81611617565b811461163557600080fd5b50565b60008135905061164781611621565b92915050565b6000806040838503121561166457611663611203565b5b600061167285828601611602565b925050602061168385828601611638565b9150509250929050565b600067ffffffffffffffff82169050919050565b6116aa8161168d565b81146116b557600080fd5b50565b6000813590506116c7816116a1565b92915050565b6000602082840312156116e3576116e2611203565b5b60006116f1848285016116b8565b91505092915050565b6000806040838503121561171157611710611203565b5b600061171f85828601611374565b925050602061173085828601611638565b9150509250929050565b61174381611353565b82525050565b61175281611617565b82525050565b600060608201905061176d600083018661173a565b61177a6020830185611749565b6117876040830184611533565b949350505050565b6000602082840312156117a5576117a4611203565b5b60006117b384828501611638565b91505092915050565b6117c5816115d9565b82525050565b60006020820190506117e060008301846117bc565b92915050565b600067ffffffffffffffff82111561180157611800611228565b5b602082029050602081019050919050565b6000611825611820846117e6565b611288565b90508083825260208201905060208402830185811115611848576118476113b5565b5b835b81811015611871578061185d8882611374565b84526020840193505060208101905061184a565b5050509392505050565b600082601f8301126118905761188f61120d565b5b81356118a0848260208601611812565b91505092915050565b600067ffffffffffffffff8211156118c4576118c3611228565b5b602082029050602081019050919050565b60006118e86118e3846118a9565b611288565b9050808382526020820190506020840283018581111561190b5761190a6113b5565b5b835b8181101561193457806119208882611638565b84526020840193505060208101905061190d565b5050509392505050565b600082601f8301126119535761195261120d565b5b81356119638482602086016118d5565b91505092915050565b6000806000806080858703121561198657611985611203565b5b600061199487828801611374565b94505060206119a587828801611374565b935050604085013567ffffffffffffffff8111156119c6576119c5611208565b5b6119d28782880161187b565b925050606085013567ffffffffffffffff8111156119f3576119f2611208565b5b6119ff8782880161193e565b91505092959194509250565b600080600060608486031215611a2457611a23611203565b5b6000611a3286828701611374565b935050602084013567ffffffffffffffff811115611a5357611a52611208565b5b611a5f86828701611325565b925050604084013567ffffffffffffffff811115611a8057611a7f611208565b5b611a8c86828701611325565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ad0578082015181840152602081019050611ab5565b60008484015250505050565b6000611ae782611a96565b611af18185611aa1565b9350611b01818560208601611ab2565b611b0a81611217565b840191505092915050565b6000604082019050611b2a6000830185611749565b8181036020830152611b3c8184611adc565b90509392505050565b60006060820190508181036000830152611b5f8186611adc565b90508181036020830152611b738185611adc565b9050611b826040830184611533565b949350505050565b6000611b95826115b9565b9050919050565b611ba581611b8a565b82525050565b6000602082019050611bc06000830184611b9c565b92915050565b6000604082019050611bdb600083018561173a565b611be86020830184611533565b9392505050565b60008060408385031215611c0657611c05611203565b5b6000611c1485828601611374565b925050602083013567ffffffffffffffff811115611c3557611c34611208565b5b611c4185828601611325565b9150509250929050565b611c5481611b8a565b8114611c5f57600080fd5b50565b600081359050611c7181611c4b565b92915050565b60008060408385031215611c8e57611c8d611203565b5b6000611c9c85828601611c62565b9250506020611cad858286016116b8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d2082611617565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d5257611d51611ce6565b5b600182019050919050565b600081905092915050565b6000611d7382611a96565b611d7d8185611d5d565b9350611d8d818560208601611ab2565b80840191505092915050565b6000611da58284611d68565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611df757607f821691505b602082108103611e0a57611e09611db0565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e35565b611e7c8683611e35565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611eb9611eb4611eaf84611617565b611e94565b611617565b9050919050565b6000819050919050565b611ed383611e9e565b611ee7611edf82611ec0565b848454611e42565b825550505050565b600090565b611efc611eef565b611f07818484611eca565b505050565b5b81811015611f2b57611f20600082611ef4565b600181019050611f0d565b5050565b601f821115611f7057611f4181611e10565b611f4a84611e25565b81016020851015611f59578190505b611f6d611f6585611e25565b830182611f0c565b50505b505050565b600082821c905092915050565b6000611f9360001984600802611f75565b1980831691505092915050565b6000611fac8383611f82565b9150826002028217905092915050565b611fc582611a96565b67ffffffffffffffff811115611fde57611fdd611228565b5b611fe88254611ddf565b611ff3828285611f2f565b600060209050601f8311600181146120265760008415612014578287015190505b61201e8582611fa0565b865550612086565b601f19841661203486611e10565b60005b8281101561205c57848901518255600182019150602085019450602081019050612037565b868310156120795784890151612075601f891682611f82565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006120cf601c8361208e565b91506120da82612099565b601c82019050919050565b6000819050919050565b6121006120fb82611353565b6120e5565b82525050565b6000612111826120c2565b915061211d82846120ef565b60208201915081905092915050565b600060ff82169050919050565b6121428161212c565b82525050565b600060808201905061215d600083018761173a565b61216a6020830186612139565b612177604083018561173a565b612184606083018461173a565b9594505050505056fe73646661736466617364666173646661736466616473666164736661736466616466736466616466616466736164667364666173646661736466a2646970667358221220ef4380600c45b455d27626c650fa9151218c3b082f38ddba040d1a96ca96289b64736f6c6343000811003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e252d01a37b85e2007ed3cc13797aa92496204a40000000000000000000000005f15294a1918633d4dd4ec47098a14d01c58e957000000000000000000000000d45cfd6855c6ec8f635a6f2b46c647e99c59c79d",
        prikey);
}

// 调用合约 phr.sol 的 ResAdd 函数
if (args[0] == 2) {
    call_contract("cfefc010", prikey, 10);
}

if (args[0] == 3) {
    call_contract("348a2b9100000000000000000000000000000000000000000000000000000000000003e8", prikey, 10);
}

if (args[0] == 4) {
    call_contract("e645df43000000000000000000000000e252d01a37b85e2007ed3cc13797aa92496204a400000000000000000000000000000000000000000000000000000000000003e8", prikey, 10);
}

if (args[0] == 5) {
    prepay_contract(prikey, 1000);
}

if (args[0] == 6) {
    call_contract("", prikey, 0);
}

// 测试event
if (args[0] == 7) {
    call_contract("2a1343a70000000000000000000000005f15294a1918633d4dd4ec47098a14d01c58e95700000000000000000000000000000000000000000000000000000000000003e8", prikey, 0);
}

// 测试合约查询
if (args[0] == 8) {
    QueryContract("728f4561");
}