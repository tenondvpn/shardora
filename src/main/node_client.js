const Web3 = require('web3')
var net = require('net');
var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', net));
const { randomBytes } = require('crypto')
const Secp256k1 = require('./secp256k1_1')
const keccak256 = require('keccak256')
var querystring = require('querystring');
var http = require('http');
var fs = require('fs');

function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

function PostCode(data) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '82.156.224.174',
        port: '8781',
        path: '/transaction',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (chunk != "ok") {
                console.log('Response: ' + chunk + ", " + data);
            } else {
                console.log('Response: ' + chunk + ", " + data);
            }
        })
    });

    post_req.write(post_data);
    post_req.end();
}

function QueryPostCode(path, data) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '82.156.224.174',
        port: '8781',
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            var json_res = JSON.parse(chunk)
            console.log('amount: ' + json_res.amount + ", tmp: " + json_res.tmp);
            console.log('Response: ' + chunk);
        })
    });

    post_req.write(post_data);
    post_req.end();
}

function GetValidHexString(uint256_bytes) {
    var str_res = uint256_bytes.toString(16)
    while (str_res.length < 64) {
        str_res = "0" + str_res;
    }

    return str_res;
}

function QueryContract(input) {
    var contract_address = fs.readFileSync('contract_address', 'utf-8');
    var data = {
        "input": input,
        'address': contract_address,
        'from': 'd9ec5aff3001dece14e1f4a35a39ed506bd6274a',
    };

    QueryPostCode('/query_contract', data);
}

function param_contract(tx_type, gid, to, amount, gas_limit, gas_price, contract_bytes, input, prepay, prikey) {
    // 私钥
    const privateKeyBuf = Secp256k1.uint256(prikey, 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)

    // 将内容编码
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)

    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var prepay_buf = new Buffer(8);
    var big = ~~(prepay / MAX_UINT32)
    var low = (prepay % MAX_UINT32) - big
    prepay_buf.writeUInt32LE(big, 4)
    prepay_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf, Buffer.from(contract_bytes, 'hex'), Buffer.from(input, 'hex'), prepay_buf]);

    // 签名
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)

    // 发送给链的交易参数
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': 3,
        'hash': kechash,
        'attrs_size': 4,
        "bytes_code": contract_bytes,
        "input": input,
        "pepay": prepay,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function create_tx(to, amount, gas_limit, gas_price) {
    // 私钥
    const privateKeyBuf = Secp256k1.uint256("fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971", 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)

    // 将内容编码
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var tx_type = 0;
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)
    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf]);

    // 签名
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)

    // 发送给链的交易参数
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': 3,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

// 创建合约
function new_contract(contract_bytes, prikey) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    const privateKeyBuf = Secp256k1.uint256(prikey, 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)
    var pk_bytes = hexToBytes(self_public_key.x.toString(16) + self_public_key.y.toString(16))
    var address = keccak256(pk_bytes).toString('hex')
    var self_account_id = address.slice(address.length - 40, address.length)
    var kechash = keccak256(self_account_id + gid + contract_bytes).toString('hex')
    var self_contract_address = kechash.slice(kechash.length - 40, kechash.length)
    var data = param_contract(
        6,
        gid,
        self_contract_address,
        10000000,
        10000000,
        1,
        contract_bytes,
        "",
        999999999,
        prikey);
    PostCode(data);

    const opt = { flag: 'w', }
    fs.writeFile('contract_address', self_contract_address, opt, (err) => {
        if (err) {
            console.error(err)
        }
    })
}

// 调用合约, 收回预付费 input = ""
function call_contract(input, prikey, amount) {
    var contract_address = fs.readFileSync('contract_address', 'utf-8');
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        8,
        gid,
        contract_address,
        amount,
        10000000,
        1,
        "",
        input,
        0,
        prikey);
    PostCode(data);
}

// 设置预付费 prepayment > 0
function prepay_contract(prikey, prepayment) {
    var contract_address = fs.readFileSync('contract_address', 'utf-8');
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        7,
        gid,
        contract_address,
        0,
        10000000,
        1,
        "",
        "",
        prepayment,
        prikey);
    PostCode(data);
}

// 普通交易和kv写入
function do_transaction(to_addr, amount, gas_limit, gas_price, key, value) {
    var data = create_tx(to_addr, amount, gas_limit, gas_price);
    PostCode(data);
}

const args = process.argv.slice(2)
var prikey = "fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971";
if (args.length >= 2) {
    prikey = args[1];
}

// 普通交易，并写入kv数据
if (args[0] == 0) {
    do_transaction(args[1], 100000, 10000, 1, "key", "value");
}

// 创建合约 phr.sol
if (args[0] == 1) {
    new_contract(
        "60806040526040516200258438038062002584833981810160405281019062000029919062000326565b8060009080519060200190620000419291906200008a565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000377565b82805482825590600052602060002090810192821562000106579160200282015b82811115620001055782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620000ab565b5b50905062000115919062000119565b5090565b5b80821115620001345760008160009055506001016200011a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200019c8262000151565b810181811067ffffffffffffffff82111715620001be57620001bd62000162565b5b80604052505050565b6000620001d362000138565b9050620001e1828262000191565b919050565b600067ffffffffffffffff82111562000204576200020362000162565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000247826200021a565b9050919050565b62000259816200023a565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b6000620002966200029084620001e6565b620001c7565b90508083825260208201905060208402830185811115620002bc57620002bb62000215565b5b835b81811015620002e95780620002d4888262000268565b845260208401935050602081019050620002be565b5050509392505050565b600082601f8301126200030b576200030a6200014c565b5b81516200031d8482602086016200027f565b91505092915050565b6000602082840312156200033f576200033e62000142565b5b600082015167ffffffffffffffff81111562000360576200035f62000147565b5b6200036e84828501620002f3565b91505092915050565b6121fd80620003876000396000f3fe60806040526004361061011f5760003560e01c8063728f4561116100a0578063b89e70b511610064578063b89e70b51461041a578063cfefc01014610457578063e645df4314610461578063e9c7feda1461047d578063fdba8f11146104ba5761011f565b8063728f45611461030a5780637e280378146103355780638da5cb5b14610374578063a51f8aac1461039f578063ae0ad9d9146103dd5761011f565b80634819544b116100e75780634819544b146101ff5780635f13d6ee1461023e5780636189d2df1461027b578063691b3463146102a45780636b83e059146102cd5761011f565b806308ad872a146101245780630ef403f81461014d57806329c1cb4b1461018a5780632a1343a7146101c7578063348a2b91146101e3575b600080fd5b34801561013057600080fd5b5061014b6004803603810190610146919061145f565b6104e3565b005b34801561015957600080fd5b50610174600480360381019061016f91906114ea565b61064b565b6040516101819190611532565b60405180910390f35b34801561019657600080fd5b506101b160048036038101906101ac919061154d565b610678565b6040516101be9190611532565b60405180910390f35b6101e160048036038101906101dc919061163d565b6106bf565b005b6101fd60048036038101906101f891906116bd565b610713565b005b34801561020b57600080fd5b50610226600480360381019061022191906116ea565b610767565b60405161023593929190611748565b60405180910390f35b34801561024a57600080fd5b506102656004803603810190610260919061177f565b6107bb565b60405161027291906117bb565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d919061195c565b6107fa565b005b3480156102b057600080fd5b506102cb60048036038101906102c691906119fb565b6109d8565b005b3480156102d957600080fd5b506102f460048036038101906102ef919061154d565b610ae5565b6040516103019190611532565b60405180910390f35b34801561031657600080fd5b5061031f610b2a565b60405161032c9190611b05565b60405180910390f35b34801561034157600080fd5b5061035c600480360381019061035791906114ea565b610b50565b60405161036b93929190611b27565b60405180910390f35b34801561038057600080fd5b50610389610c97565b6040516103969190611b8d565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c191906114ea565b610cbd565b6040516103d4929190611ba8565b60405180910390f35b3480156103e957600080fd5b5061040460048036038101906103ff9190611bd1565b610cee565b6040516104119190611532565b60405180910390f35b34801561042657600080fd5b50610441600480360381019061043c91906114ea565b610d33565b60405161044e9190611532565b60405180910390f35b61045f610dba565b005b61047b60048036038101906104769190611c59565b610df5565b005b34801561048957600080fd5b506104a4600480360381019061049f919061154d565b610e4a565b6040516104b19190611532565b60405180910390f35b3480156104c657600080fd5b506104e160048036038101906104dc919061145f565b610f63565b005b8051600080549050146104f557600080fd5b60005b81518110156105b5576000818154811061051557610514611c99565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661058261056285611118565b84848151811061057557610574611c99565b5b6020026020010151611148565b73ffffffffffffffffffffffffffffffffffffffff16146105a257600080fd5b80806105ad90611cf7565b9150506104f8565b5060016003846040516105c89190611d7b565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000848152602001908152602001600020846040516106219190611d7b565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b60006002600083815260200190815260200160002060020160009054906101000a900460ff169050919050565b600060038360405161068a9190611d7b565b9081526020016040518091039020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b808273ffffffffffffffffffffffffffffffffffffffff16427fa6b5ddd331f9dc412a8c258207b1c66f53c1740c72628d9913aafcb6b28d8f733360405161070791906117bb565b60405180910390a45050565b3373ffffffffffffffffffffffffffffffffffffffff166108fc8267ffffffffffffffff169081150290604051600060405180830381858888f19350505050158015610763573d6000803e3d6000fd5b5050565b6005602052816000526040600020818154811061078357600080fd5b9060005260206000209060030201600091509150508060000154908060010154908060020160009054906101000a900460ff16905083565b600081815481106107cb57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461085457600080fd5b6006600085815260200190815260200160002060010160009054906101000a900460ff161561088257600080fd5b805182511461089057600080fd5b604051806040016040528084815260200160011515815250600660008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555090505060008251905060005b818110156109d05760056000868152602001908152602001600020604051806060016040528086848151811061092a57610929611c99565b5b6020026020010151815260200185848151811061094a57610949611c99565b5b60200260200101518152602001600115158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505080806109c890611cf7565b9150506108f1565b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a3257600080fd5b6002600084815260200190815260200160002060020160009054906101000a900460ff1615610a6057600080fd5b604051806060016040528083815260200182815260200160011515815250600260008581526020019081526020016000206000820151816000019081610aa69190611f9e565b506020820151816001019081610abc9190611f9e565b5060408201518160020160006101000a81548160ff021916908315150217905550905050505050565b6003828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900460ff1681565b606060006040518060800160405280605881526020016121706058913990508091505090565b6002602052806000526040600020600091509050806000018054610b7390611dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9f90611dc1565b8015610bec5780601f10610bc157610100808354040283529160200191610bec565b820191906000526020600020905b815481529060010190602001808311610bcf57829003601f168201915b505050505090806001018054610c0190611dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2d90611dc1565b8015610c7a5780601f10610c4f57610100808354040283529160200191610c7a565b820191906000526020600020905b815481529060010190602001808311610c5d57829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6004602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8f57600080fd5b6006600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b8173ffffffffffffffffffffffffffffffffffffffff166108fc8267ffffffffffffffff169081150290604051600060405180830381858888f19350505050158015610e45573d6000803e3d6000fd5b505050565b6000806005600084815260200190815260200160002080549050905060008111610e7357600080fd5b60005b81811015610f565760046000600560008781526020019081526020016000208381548110610ea757610ea6611c99565b5b906000526020600020906003020160000154815260200190815260200160002085604051610ed59190611d7b565b908152602001604051809103902060009054906101000a900460ff168015610f33575042600560008681526020019081526020016000208281548110610f1e57610f1d611c99565b5b90600052602060002090600302016001015410155b15610f4357600192505050610f5d565b8080610f4e90611cf7565b915050610e76565b5060009150505b92915050565b805160008054905014610f7557600080fd5b60001515600384604051610f899190611d7b565b9081526020016040518091039020600084815260200190815260200160002060009054906101000a900460ff16151514610fc257600080fd5b60005b81518110156110825760008181548110610fe257610fe1611c99565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661104f61102f85611118565b84848151811061104257611041611c99565b5b6020026020010151611148565b73ffffffffffffffffffffffffffffffffffffffff161461106f57600080fd5b808061107a90611cf7565b915050610fc5565b5060016003846040516110959190611d7b565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000848152602001908152602001600020846040516110ee9190611d7b565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b60008160405160200161112b91906120e8565b604051602081830303815290604052805190602001209050919050565b600080600080611157856111b7565b92509250925060018684848460405160008152602001604052604051611180949392919061212a565b6020604051602081039080840390855afa1580156111a2573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600080600060418451146111ca57600080fd5b6020840151915060408401519050606084015160001a92509193909250565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61125082611207565b810181811067ffffffffffffffff8211171561126f5761126e611218565b5b80604052505050565b60006112826111e9565b905061128e8282611247565b919050565b600067ffffffffffffffff8211156112ae576112ad611218565b5b6112b782611207565b9050602081019050919050565b82818337600083830152505050565b60006112e66112e184611293565b611278565b90508281526020810184848401111561130257611301611202565b5b61130d8482856112c4565b509392505050565b600082601f83011261132a576113296111fd565b5b813561133a8482602086016112d3565b91505092915050565b6000819050919050565b61135681611343565b811461136157600080fd5b50565b6000813590506113738161134d565b92915050565b600067ffffffffffffffff82111561139457611393611218565b5b602082029050602081019050919050565b600080fd5b60006113bd6113b884611379565b611278565b905080838252602082019050602084028301858111156113e0576113df6113a5565b5b835b8181101561142757803567ffffffffffffffff811115611405576114046111fd565b5b8086016114128982611315565b855260208501945050506020810190506113e2565b5050509392505050565b600082601f830112611446576114456111fd565b5b81356114568482602086016113aa565b91505092915050565b600080600060608486031215611478576114776111f3565b5b600084013567ffffffffffffffff811115611496576114956111f8565b5b6114a286828701611315565b93505060206114b386828701611364565b925050604084013567ffffffffffffffff8111156114d4576114d36111f8565b5b6114e086828701611431565b9150509250925092565b600060208284031215611500576114ff6111f3565b5b600061150e84828501611364565b91505092915050565b60008115159050919050565b61152c81611517565b82525050565b60006020820190506115476000830184611523565b92915050565b60008060408385031215611564576115636111f3565b5b600083013567ffffffffffffffff811115611582576115816111f8565b5b61158e85828601611315565b925050602061159f85828601611364565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115d4826115a9565b9050919050565b6115e4816115c9565b81146115ef57600080fd5b50565b600081359050611601816115db565b92915050565b6000819050919050565b61161a81611607565b811461162557600080fd5b50565b60008135905061163781611611565b92915050565b60008060408385031215611654576116536111f3565b5b6000611662858286016115f2565b925050602061167385828601611628565b9150509250929050565b600067ffffffffffffffff82169050919050565b61169a8161167d565b81146116a557600080fd5b50565b6000813590506116b781611691565b92915050565b6000602082840312156116d3576116d26111f3565b5b60006116e1848285016116a8565b91505092915050565b60008060408385031215611701576117006111f3565b5b600061170f85828601611364565b925050602061172085828601611628565b9150509250929050565b61173381611343565b82525050565b61174281611607565b82525050565b600060608201905061175d600083018661172a565b61176a6020830185611739565b6117776040830184611523565b949350505050565b600060208284031215611795576117946111f3565b5b60006117a384828501611628565b91505092915050565b6117b5816115c9565b82525050565b60006020820190506117d060008301846117ac565b92915050565b600067ffffffffffffffff8211156117f1576117f0611218565b5b602082029050602081019050919050565b6000611815611810846117d6565b611278565b90508083825260208201905060208402830185811115611838576118376113a5565b5b835b81811015611861578061184d8882611364565b84526020840193505060208101905061183a565b5050509392505050565b600082601f8301126118805761187f6111fd565b5b8135611890848260208601611802565b91505092915050565b600067ffffffffffffffff8211156118b4576118b3611218565b5b602082029050602081019050919050565b60006118d86118d384611899565b611278565b905080838252602082019050602084028301858111156118fb576118fa6113a5565b5b835b8181101561192457806119108882611628565b8452602084019350506020810190506118fd565b5050509392505050565b600082601f830112611943576119426111fd565b5b81356119538482602086016118c5565b91505092915050565b60008060008060808587031215611976576119756111f3565b5b600061198487828801611364565b945050602061199587828801611364565b935050604085013567ffffffffffffffff8111156119b6576119b56111f8565b5b6119c28782880161186b565b925050606085013567ffffffffffffffff8111156119e3576119e26111f8565b5b6119ef8782880161192e565b91505092959194509250565b600080600060608486031215611a1457611a136111f3565b5b6000611a2286828701611364565b935050602084013567ffffffffffffffff811115611a4357611a426111f8565b5b611a4f86828701611315565b925050604084013567ffffffffffffffff811115611a7057611a6f6111f8565b5b611a7c86828701611315565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ac0578082015181840152602081019050611aa5565b60008484015250505050565b6000611ad782611a86565b611ae18185611a91565b9350611af1818560208601611aa2565b611afa81611207565b840191505092915050565b60006020820190508181036000830152611b1f8184611acc565b905092915050565b60006060820190508181036000830152611b418186611acc565b90508181036020830152611b558185611acc565b9050611b646040830184611523565b949350505050565b6000611b77826115a9565b9050919050565b611b8781611b6c565b82525050565b6000602082019050611ba26000830184611b7e565b92915050565b6000604082019050611bbd600083018561172a565b611bca6020830184611523565b9392505050565b60008060408385031215611be857611be76111f3565b5b6000611bf685828601611364565b925050602083013567ffffffffffffffff811115611c1757611c166111f8565b5b611c2385828601611315565b9150509250929050565b611c3681611b6c565b8114611c4157600080fd5b50565b600081359050611c5381611c2d565b92915050565b60008060408385031215611c7057611c6f6111f3565b5b6000611c7e85828601611c44565b9250506020611c8f858286016116a8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d0282611607565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d3457611d33611cc8565b5b600182019050919050565b600081905092915050565b6000611d5582611a86565b611d5f8185611d3f565b9350611d6f818560208601611aa2565b80840191505092915050565b6000611d878284611d4a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611dd957607f821691505b602082108103611dec57611deb611d92565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e17565b611e5e8683611e17565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611e9b611e96611e9184611607565b611e76565b611607565b9050919050565b6000819050919050565b611eb583611e80565b611ec9611ec182611ea2565b848454611e24565b825550505050565b600090565b611ede611ed1565b611ee9818484611eac565b505050565b5b81811015611f0d57611f02600082611ed6565b600181019050611eef565b5050565b601f821115611f5257611f2381611df2565b611f2c84611e07565b81016020851015611f3b578190505b611f4f611f4785611e07565b830182611eee565b50505b505050565b600082821c905092915050565b6000611f7560001984600802611f57565b1980831691505092915050565b6000611f8e8383611f64565b9150826002028217905092915050565b611fa782611a86565b67ffffffffffffffff811115611fc057611fbf611218565b5b611fca8254611dc1565b611fd5828285611f11565b600060209050601f8311600181146120085760008415611ff6578287015190505b6120008582611f82565b865550612068565b601f19841661201686611df2565b60005b8281101561203e57848901518255600182019150602085019450602081019050612019565b8683101561205b5784890151612057601f891682611f64565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006120b1601c83612070565b91506120bc8261207b565b601c82019050919050565b6000819050919050565b6120e26120dd82611343565b6120c7565b82525050565b60006120f3826120a4565b91506120ff82846120d1565b60208201915081905092915050565b600060ff82169050919050565b6121248161210e565b82525050565b600060808201905061213f600083018761172a565b61214c602083018661211b565b612159604083018561172a565b612166606083018461172a565b9594505050505056fe7b22616d6f756e74223a203139383733342c2022746d70223a20202273646661736466617364666173646661736466616473666164736661736466616466736466616466616466736164667364666173646661736466227da2646970667358221220b8cc9194a23ab2d5bde664df82cc2efee5da3ecd1ea4156eec45d0f609b2208b64736f6c6343000811003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e252d01a37b85e2007ed3cc13797aa92496204a40000000000000000000000005f15294a1918633d4dd4ec47098a14d01c58e957000000000000000000000000d45cfd6855c6ec8f635a6f2b46c647e99c59c79d",
        prikey);
}

// 调用合约 phr.sol 的 ResAdd 函数
if (args[0] == 2) {
    call_contract("cfefc010", prikey, 10);
}

if (args[0] == 3) {
    call_contract("348a2b9100000000000000000000000000000000000000000000000000000000000003e8", prikey, 10);
}

if (args[0] == 4) {
    call_contract("e645df43000000000000000000000000e252d01a37b85e2007ed3cc13797aa92496204a400000000000000000000000000000000000000000000000000000000000003e8", prikey, 10);
}

if (args[0] == 5) {
    prepay_contract(prikey, 1000);
}

if (args[0] == 6) {
    call_contract("", prikey, 0);
}

// 测试event
if (args[0] == 7) {
    call_contract("2a1343a70000000000000000000000005f15294a1918633d4dd4ec47098a14d01c58e95700000000000000000000000000000000000000000000000000000000000003e8", prikey, 0);
}

// 测试合约查询
if (args[0] == 8) {
    QueryContract("728f4561");
}
