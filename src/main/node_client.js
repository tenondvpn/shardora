const Web3 = require('web3')
var net = require('net');
var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', net));
const { randomBytes } = require('crypto')
const Secp256k1 = require('./secp256k1_1')
const keccak256 = require('keccak256')
var querystring = require('querystring');
var http = require('http');
var fs = require('fs');

function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

function PostCode(data) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '127.0.0.1',
        port: '8781',
        path: '/transaction',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (chunk != "ok") {
                console.log('Response: ' + chunk + ", " + data);
            } else {
                console.log('Response: ' + chunk + ", " + data);
            }
        })
    });

    post_req.write(post_data);
    post_req.end();
}

function GetValidHexString(uint256_bytes) {
    var str_res = uint256_bytes.toString(16)
    while (str_res.length < 64) {
        str_res = "0" + str_res;
    }

    return str_res;
}

function param_contract(tx_type, gid, to, amount, gas_limit, gas_price, contract_bytes, input, prepay) {
    // 私钥
    const privateKeyBuf = Secp256k1.uint256("fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971", 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)

    // 将内容编码
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)

    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var prepay_buf = new Buffer(8);
    var big = ~~(prepay / MAX_UINT32)
    var low = (prepay % MAX_UINT32) - big
    prepay_buf.writeUInt32LE(big, 4)
    prepay_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf, Buffer.from(contract_bytes, 'hex'), Buffer.from(input, 'hex'), prepay_buf]);

    // 签名
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)

    // 发送给链的交易参数
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': 3,
        'hash': kechash,
        'attrs_size': 4,
        "bytes_code": contract_bytes,
        "input": input,
        "pepay": prepay,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function create_tx(to, amount, gas_limit, gas_price) {
    // 私钥
    const privateKeyBuf = Secp256k1.uint256("fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971", 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)

    // 将内容编码
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var tx_type = 0;
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)
    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf]);

    // 签名
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)

    // 发送给链的交易参数
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': 3,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

// 创建合约
function new_contract(contract_bytes) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    const privateKeyBuf = Secp256k1.uint256("fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971", 16)
    var self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    var self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)
    var pk_bytes = hexToBytes(self_public_key.x.toString(16) + self_public_key.y.toString(16))
    var address = keccak256(pk_bytes).toString('hex')
    var self_account_id = address.slice(address.length - 40, address.length)
    var kechash = keccak256(self_account_id + gid + contract_bytes).toString('hex')
    var self_contract_address = kechash.slice(kechash.length - 40, kechash.length)
    var data = param_contract(
        6,
        gid,
        self_contract_address,
        0,
        10000000,
        1,
        contract_bytes,
        "",
        999999999);
    PostCode(data);

    const opt = { flag: 'w', }
    fs.writeFile('contract_address', self_contract_address, opt, (err) => {
        if (err) {
            console.error(err)
        }
    })
}

// 调用合约
function call_contract(input) {
    var contract_address = fs.readFileSync('contract_address', 'utf-8');
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        8,
        gid,
        contract_address,
        10000000,
        10000000,
        1,
        "",
        input,
        0);
    PostCode(data);
}

// 普通交易和kv写入
function do_transaction(to_addr, amount, gas_limit, gas_price, key, value) {
    var data = create_tx(to_addr, amount, gas_limit, gas_price);
    PostCode(data);
}

const args = process.argv.slice(2)
// 普通交易，并写入kv数据
if (args[0] == 0) {
    do_transaction(args[1], 100000, 10000, 1, "key", "value");
}

// 创建合约 phr.sol
if (args[0] == 1) {
    new_contract("60806040523480156200001157600080fd5b50604051620020ff380380620020ff833981810160405281019062000037919062000334565b80600090805190602001906200004f92919062000098565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000385565b82805482825590600052602060002090810192821562000114579160200282015b82811115620001135782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620000b9565b5b50905062000123919062000127565b5090565b5b808211156200014257600081600090555060010162000128565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001aa826200015f565b810181811067ffffffffffffffff82111715620001cc57620001cb62000170565b5b80604052505050565b6000620001e162000146565b9050620001ef82826200019f565b919050565b600067ffffffffffffffff82111562000212576200021162000170565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002558262000228565b9050919050565b620002678162000248565b81146200027357600080fd5b50565b60008151905062000287816200025c565b92915050565b6000620002a46200029e84620001f4565b620001d5565b90508083825260208201905060208402830185811115620002ca57620002c962000223565b5b835b81811015620002f75780620002e2888262000276565b845260208401935050602081019050620002cc565b5050509392505050565b600082601f8301126200031957620003186200015a565b5b81516200032b8482602086016200028d565b91505092915050565b6000602082840312156200034d576200034c62000150565b5b600082015167ffffffffffffffff8111156200036e576200036d62000155565b5b6200037c8482850162000301565b91505092915050565b611d6a80620003956000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636b83e05911610097578063ae0ad9d911610066578063ae0ad9d9146102c1578063b89e70b5146102f1578063e9c7feda14610321578063fdba8f1114610351576100f5565b80636b83e059146102105780637e280378146102405780638da5cb5b14610272578063a51f8aac14610290576100f5565b80634819544b116100d35780634819544b146101765780635f13d6ee146101a85780636189d2df146101d8578063691b3463146101f4576100f5565b806308ad872a146100fa5780630ef403f81461011657806329c1cb4b14610146575b600080fd5b610114600480360381019061010f919061118b565b61036d565b005b610130600480360381019061012b9190611216565b6104d5565b60405161013d919061125e565b60405180910390f35b610160600480360381019061015b9190611279565b610502565b60405161016d919061125e565b60405180910390f35b610190600480360381019061018b919061130b565b610549565b60405161019f93929190611369565b60405180910390f35b6101c260048036038101906101bd91906113a0565b61059d565b6040516101cf919061140e565b60405180910390f35b6101f260048036038101906101ed91906115af565b6105dc565b005b61020e6004803603810190610209919061164e565b6107ba565b005b61022a60048036038101906102259190611279565b6108c7565b604051610237919061125e565b60405180910390f35b61025a60048036038101906102559190611216565b61090c565b60405161026993929190611758565b60405180910390f35b61027a610a53565b60405161028791906117be565b60405180910390f35b6102aa60048036038101906102a59190611216565b610a79565b6040516102b89291906117d9565b60405180910390f35b6102db60048036038101906102d69190611802565b610aaa565b6040516102e8919061125e565b60405180910390f35b61030b60048036038101906103069190611216565b610aef565b604051610318919061125e565b60405180910390f35b61033b60048036038101906103369190611279565b610b76565b604051610348919061125e565b60405180910390f35b61036b6004803603810190610366919061118b565b610c8f565b005b80516000805490501461037f57600080fd5b60005b815181101561043f576000818154811061039f5761039e61185e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661040c6103ec85610e44565b8484815181106103ff576103fe61185e565b5b6020026020010151610e74565b73ffffffffffffffffffffffffffffffffffffffff161461042c57600080fd5b8080610437906118bc565b915050610382565b5060016003846040516104529190611940565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000848152602001908152602001600020846040516104ab9190611940565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b60006002600083815260200190815260200160002060020160009054906101000a900460ff169050919050565b60006003836040516105149190611940565b9081526020016040518091039020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6005602052816000526040600020818154811061056557600080fd5b9060005260206000209060030201600091509150508060000154908060010154908060020160009054906101000a900460ff16905083565b600081815481106105ad57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461063657600080fd5b6006600085815260200190815260200160002060010160009054906101000a900460ff161561066457600080fd5b805182511461067257600080fd5b604051806040016040528084815260200160011515815250600660008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555090505060008251905060005b818110156107b25760056000868152602001908152602001600020604051806060016040528086848151811061070c5761070b61185e565b5b6020026020010151815260200185848151811061072c5761072b61185e565b5b60200260200101518152602001600115158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505080806107aa906118bc565b9150506106d3565b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461081457600080fd5b6002600084815260200190815260200160002060020160009054906101000a900460ff161561084257600080fd5b6040518060600160405280838152602001828152602001600115158152506002600085815260200190815260200160002060008201518160000190816108889190611b63565b50602082015181600101908161089e9190611b63565b5060408201518160020160006101000a81548160ff021916908315150217905550905050505050565b6003828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900460ff1681565b600260205280600052604060002060009150905080600001805461092f90611986565b80601f016020809104026020016040519081016040528092919081815260200182805461095b90611986565b80156109a85780601f1061097d576101008083540402835291602001916109a8565b820191906000526020600020905b81548152906001019060200180831161098b57829003601f168201915b5050505050908060010180546109bd90611986565b80601f01602080910402602001604051908101604052809291908181526020018280546109e990611986565b8015610a365780601f10610a0b57610100808354040283529160200191610a36565b820191906000526020600020905b815481529060010190602001808311610a1957829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b6004602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b4b57600080fd5b6006600083815260200190815260200160002060010160009054906101000a900460ff169050919050565b6000806005600084815260200190815260200160002080549050905060008111610b9f57600080fd5b60005b81811015610c825760046000600560008781526020019081526020016000208381548110610bd357610bd261185e565b5b906000526020600020906003020160000154815260200190815260200160002085604051610c019190611940565b908152602001604051809103902060009054906101000a900460ff168015610c5f575042600560008681526020019081526020016000208281548110610c4a57610c4961185e565b5b90600052602060002090600302016001015410155b15610c6f57600192505050610c89565b8080610c7a906118bc565b915050610ba2565b5060009150505b92915050565b805160008054905014610ca157600080fd5b60001515600384604051610cb59190611940565b9081526020016040518091039020600084815260200190815260200160002060009054906101000a900460ff16151514610cee57600080fd5b60005b8151811015610dae5760008181548110610d0e57610d0d61185e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d7b610d5b85610e44565b848481518110610d6e57610d6d61185e565b5b6020026020010151610e74565b73ffffffffffffffffffffffffffffffffffffffff1614610d9b57600080fd5b8080610da6906118bc565b915050610cf1565b506001600384604051610dc19190611940565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600084815260200190815260200160002084604051610e1a9190611940565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b600081604051602001610e579190611cad565b604051602081830303815290604052805190602001209050919050565b600080600080610e8385610ee3565b92509250925060018684848460405160008152602001604052604051610eac9493929190611cef565b6020604051602081039080840390855afa158015610ece573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060006041845114610ef657600080fd5b6020840151915060408401519050606084015160001a92509193909250565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7c82610f33565b810181811067ffffffffffffffff82111715610f9b57610f9a610f44565b5b80604052505050565b6000610fae610f15565b9050610fba8282610f73565b919050565b600067ffffffffffffffff821115610fda57610fd9610f44565b5b610fe382610f33565b9050602081019050919050565b82818337600083830152505050565b600061101261100d84610fbf565b610fa4565b90508281526020810184848401111561102e5761102d610f2e565b5b611039848285610ff0565b509392505050565b600082601f83011261105657611055610f29565b5b8135611066848260208601610fff565b91505092915050565b6000819050919050565b6110828161106f565b811461108d57600080fd5b50565b60008135905061109f81611079565b92915050565b600067ffffffffffffffff8211156110c0576110bf610f44565b5b602082029050602081019050919050565b600080fd5b60006110e96110e4846110a5565b610fa4565b9050808382526020820190506020840283018581111561110c5761110b6110d1565b5b835b8181101561115357803567ffffffffffffffff81111561113157611130610f29565b5b80860161113e8982611041565b8552602085019450505060208101905061110e565b5050509392505050565b600082601f83011261117257611171610f29565b5b81356111828482602086016110d6565b91505092915050565b6000806000606084860312156111a4576111a3610f1f565b5b600084013567ffffffffffffffff8111156111c2576111c1610f24565b5b6111ce86828701611041565b93505060206111df86828701611090565b925050604084013567ffffffffffffffff811115611200576111ff610f24565b5b61120c8682870161115d565b9150509250925092565b60006020828403121561122c5761122b610f1f565b5b600061123a84828501611090565b91505092915050565b60008115159050919050565b61125881611243565b82525050565b6000602082019050611273600083018461124f565b92915050565b600080604083850312156112905761128f610f1f565b5b600083013567ffffffffffffffff8111156112ae576112ad610f24565b5b6112ba85828601611041565b92505060206112cb85828601611090565b9150509250929050565b6000819050919050565b6112e8816112d5565b81146112f357600080fd5b50565b600081359050611305816112df565b92915050565b6000806040838503121561132257611321610f1f565b5b600061133085828601611090565b9250506020611341858286016112f6565b9150509250929050565b6113548161106f565b82525050565b611363816112d5565b82525050565b600060608201905061137e600083018661134b565b61138b602083018561135a565b611398604083018461124f565b949350505050565b6000602082840312156113b6576113b5610f1f565b5b60006113c4848285016112f6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113f8826113cd565b9050919050565b611408816113ed565b82525050565b600060208201905061142360008301846113ff565b92915050565b600067ffffffffffffffff82111561144457611443610f44565b5b602082029050602081019050919050565b600061146861146384611429565b610fa4565b9050808382526020820190506020840283018581111561148b5761148a6110d1565b5b835b818110156114b457806114a08882611090565b84526020840193505060208101905061148d565b5050509392505050565b600082601f8301126114d3576114d2610f29565b5b81356114e3848260208601611455565b91505092915050565b600067ffffffffffffffff82111561150757611506610f44565b5b602082029050602081019050919050565b600061152b611526846114ec565b610fa4565b9050808382526020820190506020840283018581111561154e5761154d6110d1565b5b835b81811015611577578061156388826112f6565b845260208401935050602081019050611550565b5050509392505050565b600082601f83011261159657611595610f29565b5b81356115a6848260208601611518565b91505092915050565b600080600080608085870312156115c9576115c8610f1f565b5b60006115d787828801611090565b94505060206115e887828801611090565b935050604085013567ffffffffffffffff81111561160957611608610f24565b5b611615878288016114be565b925050606085013567ffffffffffffffff81111561163657611635610f24565b5b61164287828801611581565b91505092959194509250565b60008060006060848603121561166757611666610f1f565b5b600061167586828701611090565b935050602084013567ffffffffffffffff81111561169657611695610f24565b5b6116a286828701611041565b925050604084013567ffffffffffffffff8111156116c3576116c2610f24565b5b6116cf86828701611041565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156117135780820151818401526020810190506116f8565b60008484015250505050565b600061172a826116d9565b61173481856116e4565b93506117448185602086016116f5565b61174d81610f33565b840191505092915050565b60006060820190508181036000830152611772818661171f565b90508181036020830152611786818561171f565b9050611795604083018461124f565b949350505050565b60006117a8826113cd565b9050919050565b6117b88161179d565b82525050565b60006020820190506117d360008301846117af565b92915050565b60006040820190506117ee600083018561134b565b6117fb602083018461124f565b9392505050565b6000806040838503121561181957611818610f1f565b5b600061182785828601611090565b925050602083013567ffffffffffffffff81111561184857611847610f24565b5b61185485828601611041565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118c7826112d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118f9576118f861188d565b5b600182019050919050565b600081905092915050565b600061191a826116d9565b6119248185611904565b93506119348185602086016116f5565b80840191505092915050565b600061194c828461190f565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061199e57607f821691505b6020821081036119b1576119b0611957565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611a197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826119dc565b611a2386836119dc565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611a60611a5b611a56846112d5565b611a3b565b6112d5565b9050919050565b6000819050919050565b611a7a83611a45565b611a8e611a8682611a67565b8484546119e9565b825550505050565b600090565b611aa3611a96565b611aae818484611a71565b505050565b5b81811015611ad257611ac7600082611a9b565b600181019050611ab4565b5050565b601f821115611b1757611ae8816119b7565b611af1846119cc565b81016020851015611b00578190505b611b14611b0c856119cc565b830182611ab3565b50505b505050565b600082821c905092915050565b6000611b3a60001984600802611b1c565b1980831691505092915050565b6000611b538383611b29565b9150826002028217905092915050565b611b6c826116d9565b67ffffffffffffffff811115611b8557611b84610f44565b5b611b8f8254611986565b611b9a828285611ad6565b600060209050601f831160018114611bcd5760008415611bbb578287015190505b611bc58582611b47565b865550611c2d565b601f198416611bdb866119b7565b60005b82811015611c0357848901518255600182019150602085019450602081019050611bde565b86831015611c205784890151611c1c601f891682611b29565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000611c76601c83611c35565b9150611c8182611c40565b601c82019050919050565b6000819050919050565b611ca7611ca28261106f565b611c8c565b82525050565b6000611cb882611c69565b9150611cc48284611c96565b60208201915081905092915050565b600060ff82169050919050565b611ce981611cd3565b82525050565b6000608082019050611d04600083018761134b565b611d116020830186611ce0565b611d1e604083018561134b565b611d2b606083018461134b565b9594505050505056fea2646970667358221220b157dad628cd6b1a70e5bda344915f6b18b68431854b53faa8c00a2fc4a5254364736f6c6343000811003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e252d01a37b85e2007ed3cc13797aa92496204a40000000000000000000000005f15294a1918633d4dd4ec47098a14d01c58e957000000000000000000000000d45cfd6855c6ec8f635a6f2b46c647e99c59c79d");
}

// 调用合约 phr.sol 的 ResAdd 函数
if (args[0] == 2) {
    call_contract("691b346320ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002020ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5000000000000000000000000000000000000000000000000000000000000002020ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5");
}
