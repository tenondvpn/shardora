#include "elect/elect_pledge.h"
namespace shardora {

namespace elect {

static const std::string ELECT_PLEGE_CONTRACT_ADDR = "1397000000000000000000000000000000000001";
static const std::string CONTRACTCODE = "6080604052600180546001600160401b031916600a17905534801561002357600080fd5b50610e69806100336000396000f3fe6080604052600436106100a05760003560e01c806370587c101161006457806370587c101461018857806388ffe867146101a8578063be16dffc146101b0578063c78cd339146101ce578063cdf6399a146101ee578063d5c620681461022c57600080fd5b80630cdb0d53146100b45780630fdb1c10146100ea5780632e559c0d146100f2578063324b425e146101125780634d7364851461016857600080fd5b366100af576100ad61024c565b005b600080fd5b3480156100c057600080fd5b506100d46100cf366004610aef565b6102be565b6040516100e19190610b2b565b60405180910390f35b6100ad610460565b3480156100fe57600080fd5b506100d461010d366004610b79565b61054b565b34801561011e57600080fd5b5061015061012d366004610bc5565b60006020818152928152604080822090935290815220546001600160401b031681565b6040516001600160401b0390911681526020016100e1565b34801561017457600080fd5b506100d4610183366004610b79565b610575565b34801561019457600080fd5b506100d46101a3366004610bf8565b610703565b6100ad61024c565b3480156101bc57600080fd5b506001546001600160401b0316610150565b3480156101da57600080fd5b506100d46101e9366004610cc0565b610864565b3480156101fa57600080fd5b506100ad610209366004610ce2565b6001805467ffffffffffffffff19166001600160401b0392909216919091179055565b34801561023857600080fd5b506100d4610247366004610bc5565b610990565b60006102606001546001600160401b031690565b336000908152602081815260408083206001600160401b038086168552925282208054939450349390929161029791859116610d13565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555050565b60606000825160026102d09190610d3a565b6001600160401b038111156102e7576102e7610a3a565b6040519080825280601f01601f191660200182016040528015610311576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b84518110156104575781825186838151811061035d5761035d610d51565b016020015161036f919060f81c610d7d565b8151811061037f5761037f610d51565b01602001516001600160f81b0319168361039a836002610d3a565b815181106103aa576103aa610d51565b60200101906001600160f81b031916908160001a9053508182518683815181106103d6576103d6610d51565b01602001516103e8919060f81c610d91565b815181106103f8576103f8610d51565b01602001516001600160f81b03191683610413836002610d3a565b61041e906001610da5565b8151811061042e5761042e610d51565b60200101906001600160f81b031916908160001a9053508061044f81610db8565b91505061033f565b50909392505050565b600060146104766001546001600160401b031690565b6104809190610dd1565b90506000805b826001600160401b0316816001600160401b0316101561051057336000908152602081815260408083206001600160401b0380861685529252909120546104ce911683610d13565b336000908152602081815260408083206001600160401b03861684529091529020805467ffffffffffffffff19169055915061050981610df1565b9050610486565b5060405133906001600160401b03831680156108fc02916000818181858888f19350505050158015610546573d6000803e3d6000fd5b505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6060600061058560206002610e17565b60ff166001600160401b0381111561059f5761059f610a3a565b6040519080825280601f01601f1916602001820160405280156105c9576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b60208110156104575781825186836020811061061557610615610d51565b6106219291901a610d7d565b8151811061063157610631610d51565b01602001516001600160f81b0319168361064c836002610d3a565b8151811061065c5761065c610d51565b60200101906001600160f81b031916908160001a90535081825186836020811061068857610688610d51565b6106949291901a610d91565b815181106106a4576106a4610d51565b01602001516001600160f81b031916836106bf836002610d3a565b6106ca906001610da5565b815181106106da576106da610d51565b60200101906001600160f81b031916908160001a905350806106fb81610db8565b9150506105f7565b60606000805b8381101561074b5784818151811061072357610723610d51565b602002602001015151826107379190610da5565b91508061074381610db8565b915050610709565b506000816001600160401b0381111561076657610766610a3a565b6040519080825280601f01601f191660200182016040528015610790576020820181803683370190505b5090506000805b858110156108575760005b8782815181106107b4576107b4610d51565b602002602001015151811015610844578782815181106107d6576107d6610d51565b602002602001015181815181106107ef576107ef610d51565b01602001516001600160f81b031916848461080981610db8565b95508151811061081b5761081b610d51565b60200101906001600160f81b031916908160001a9053508061083c81610db8565b9150506107a2565b508061084f81610db8565b915050610797565b5090925050505b92915050565b6060600061087a6001546001600160401b031690565b905060006014826001600160401b0316106108a15761089a601483610dd1565b90506108a5565b5060005b6000815b836001600160401b0316816001600160401b03161161090b576001600160a01b0386166000908152602081815260408083206001600160401b0380861685529252909120546108f9911683610d13565b915061090481610df1565b90506108a9565b50604080516064808252610ca08201909252600091816020015b606081526020019060019003908161092557905050905060006109536100cf846001600160401b031661054b565b828261095e81610db8565b93508151811061097057610970610d51565b60200260200101819052506109858282610703565b979650505050505050565b604080516064808252610ca0820190925260609160009190816020015b60608152602001906001900390816109ad5750506001600160a01b0385166000908152602081815260408083206001600160401b038881168552925282205492935090916109ff916100cf911661054b565b8282610a0a81610db8565b935081518110610a1c57610a1c610d51565b6020026020010181905250610a318282610703565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610a7857610a78610a3a565b604052919050565b600082601f830112610a9157600080fd5b81356001600160401b03811115610aaa57610aaa610a3a565b610abd601f8201601f1916602001610a50565b818152846020838601011115610ad257600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610b0157600080fd5b81356001600160401b03811115610b1757600080fd5b610b2384828501610a80565b949350505050565b600060208083528351808285015260005b81811015610b5857858101830151858201604001528201610b3c565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610b8b57600080fd5b5035919050565b80356001600160a01b0381168114610ba957600080fd5b919050565b80356001600160401b0381168114610ba957600080fd5b60008060408385031215610bd857600080fd5b610be183610b92565b9150610bef60208401610bae565b90509250929050565b60008060408385031215610c0b57600080fd5b82356001600160401b0380821115610c2257600080fd5b818501915085601f830112610c3657600080fd5b8135602082821115610c4a57610c4a610a3a565b8160051b610c59828201610a50565b928352848101820192828101908a851115610c7357600080fd5b83870192505b84831015610caf57823586811115610c915760008081fd5b610c9f8c86838b0101610a80565b8352509183019190830190610c79565b9a9890920135985050505050505050565b600060208284031215610cd257600080fd5b610cdb82610b92565b9392505050565b600060208284031215610cf457600080fd5b610cdb82610bae565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019080821115610d3357610d33610cfd565b5092915050565b808202811582820484141761085e5761085e610cfd565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082610d8c57610d8c610d67565b500490565b600082610da057610da0610d67565b500690565b8082018082111561085e5761085e610cfd565b600060018201610dca57610dca610cfd565b5060010190565b6001600160401b03828116828216039080821115610d3357610d33610cfd565b60006001600160401b03808316818103610e0d57610e0d610cfd565b6001019392505050565b60ff8181168382160290811690818114610d3357610d33610cfd56fea26469706673582212207c4f743865726ea0d26ff7b56bbb03ea5df7068153b1194f7e75af5aaa64555664736f6c63430008110033";

int ElectPlege::gen_elect_plege_GensisBlocks(uint64_t shard_id, block::protobuf::BlockTx *tx_info) {
    auto contract_addr_tmp = gen_elect_plege_contract_addr(shard_id);
    auto contract_addr = common::Encode::HexDecode(contract_addr_tmp);
    auto contract_code = common::Encode::HexDecode(CONTRACTCODE);


    tx_info->set_nonce(0);
    tx_info->set_from(contract_addr);
    tx_info->set_to(contract_addr);
    tx_info->set_amount(0);
    tx_info->set_balance(0);
    tx_info->set_gas_limit(100000000);
    tx_info->set_gas_price(0llu);
    tx_info->set_gas_used(0);
    tx_info->set_step(pools::protobuf::kContractCreate);
    tx_info->set_contract_prepayment(1000000000);
    tx_info->set_contract_code(contract_code);

    auto storage = tx_info->add_storages();
    storage->set_key(protos::kCreateContractBytesCode);
    storage->set_value(contract_code);
    ZJC_DEBUG("gen_elect_plege_GensisBlocks contract_addr: %s , nonce: %s ,",
                                            common::Encode::HexEncode(contract_addr).c_str(),
                                            tx_info->nonce());
    assert(false);
    return kElectSuccess;
}
std::string  ElectPlege::toHexString(uint64_t shard_id, size_t width) {
    std::ostringstream oss;
    oss << std::setw(width) << std::setfill('0') << shard_id;
    return oss.str();
}

 std::string  ElectPlege::gen_elect_plege_contract_addr(uint64_t shard_id) {
    std::string res = std::string(ELECT_PLEGE_CONTRACT_ADDR);
    std::string shard_id_str = toHexString(shard_id, 6); // Adjust width if necessary
    res.replace(res.length() - shard_id_str.length(), shard_id_str.length(), shard_id_str);
    return res;
}

uint64_t  ElectPlege::getStoke(uint32_t shard_id, std::string addr, uint64_t elect_height) {
    return size_t();
}
} // namespace elect
}