const Web3 = require('web3')
var net = require('net');
var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', net)); // mac os path
const { randomBytes } = require('crypto')
const Secp256k1 = require('./secp256k1_1')
const keccak256 = require('keccak256')
var querystring = require('querystring');
var http = require('http');
var fs = require('fs');

var self_private_key = null;
var self_public_key = null;
var local_count_shard_id = 3;
var contract_address = null;

function str_to_hex(str) {
    var arr1 = [];
    for (var n = 0; n < str.length; n++) {
        var hex = Number(str.charCodeAt(n)).toString(16);
        arr1.push(hex);
    }
    return arr1.join('');
}

function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

function init_private_key() {
    const privateKeyBuf = Secp256k1.uint256("fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971", 16)
    self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)
    var pk_bytes = hexToBytes(self_public_key.x.toString(16) + self_public_key.y.toString(16))
    var address = keccak256(pk_bytes).toString('hex')
    console.log("self_account_id: " + address.toString('hex'));
    address = address.slice(address.length - 40, address.length)
    self_account_id = address;
    contract_address = fs.readFileSync('contract_address', 'utf-8');
    console.log("contract_address: " + contract_address);
}

function PostCode(data) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '127.0.0.1',
        port: '8781',
        path: '/transaction',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (chunk != "ok") {
                console.log('Response: ' + chunk + ", " + data);
            } else {
                console.log('Response: ' + chunk + ", " + data);
            }
        })
    });

    //console.log("req data: " + post_data);
    post_req.write(post_data);
    post_req.end();
}

function GetValidHexString(uint256_bytes) {
    var str_res = uint256_bytes.toString(16)
    while (str_res.length < 64) {
        str_res = "0" + str_res;
    }

    return str_res;
}

function param_contract(tx_type, gid, to, amount, gas_limit, gas_price, contract_bytes, input, prepay) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)

    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var prepay_buf = new Buffer(8);
    var big = ~~(prepay / MAX_UINT32)
    var low = (prepay % MAX_UINT32) - big
    prepay_buf.writeUInt32LE(big, 4)
    prepay_buf.writeUInt32LE(low, 0)

    const message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf, Buffer.from(contract_bytes, 'hex'), Buffer.from(input, 'hex'), prepay_buf]);
    //var arrByte = Uint8Array.from(message_buf)
    var kechash = keccak256(message_buf)

    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)
    const pubX = Secp256k1.uint256(self_public_key.x, 16)
    const pubY = Secp256k1.uint256(self_public_key.y, 16)
    const isValidSig = Secp256k1.ecverify(pubX, pubY, sigR, sigS, digest)
    console.log("digest: " + digest)
    console.log("sigr: " + sigR.toString(16))
    console.log("sigs: " + sigS.toString(16))
    if (!isValidSig) {
        console.log('signature transaction failed.')
        return;
    }

    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': local_count_shard_id,
        'hash': kechash,
        'attrs_size': 4,
        "bytes_code": contract_bytes,
        "input": input,
        "pepay": prepay,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function create_tx(to, amount, gas_limit, gas_price) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var tx_type = 0;
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)
    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    const message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf]);
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)
    const pubX = Secp256k1.uint256(self_public_key.x, 16)
    const pubY = Secp256k1.uint256(self_public_key.y, 16)
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': local_count_shard_id,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function new_contract(contract_bytes) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var kechash = keccak256(self_account_id + gid + contract_bytes).toString('hex')
    var self_contract_address = kechash.slice(kechash.length - 40, kechash.length)
    var data = param_contract(
        6,
        gid,
        self_contract_address,
        0,
        10000000,
        1,
        contract_bytes,
        "",
        999999999);
    PostCode(data);

    const opt = { flag: 'w', }
    fs.writeFile('contract_address', self_contract_address, opt, (err) => {
        if (err) {
            console.error(err)
        }
    })
}

function call_contract(input) {
    contract_address = fs.readFileSync('contract_address', 'utf-8');
    console.log("contract_address: " + contract_address);
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        8,
        gid,
        contract_address,
        0,
        10000000,
        1,
        "",
        input,
        0);
    PostCode(data);
}

function do_transaction(to_addr, amount, gas_limit, gas_price) {
    var data = create_tx(to_addr, amount, gas_limit, gas_price);
    PostCode(data);
}

function CreatePhr() {
    console.log("test smart contract signature: ");
    var account1 = web3.eth.accounts.privateKeyToAccount('0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5');
    console.log("account1 :");
    console.log(account1.address);
    var account2 = web3.eth.accounts.privateKeyToAccount('0x748f7eaad8be6841490a134e0518dafdf67714a73d1275f917475abeb504dc05');
    console.log("account2 :");
    console.log(account2.address);
    var account3 = web3.eth.accounts.privateKeyToAccount('0xb546fd36d57b4c9adda29967cf6a1a3e3478f9a4892394e17225cfb6c0d1d1e5');
    console.log("account3 :");
    console.log(account3.address);

    var cons_codes = web3.eth.abi.encodeParameters(['address[]'],
        [[account1.address,
        account2.address,
        account3.address]]);
    console.log("cons_codes: " + cons_codes.substring(2));


    // func code
    var ResAddFunc = web3.eth.abi.encodeFunctionSignature('ResAdd(bytes32,bytes,bytes)');
    var ResAddFunc_param_codes = web3.eth.abi.encodeParameters(['bytes32', 'bytes', 'bytes'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5']);
    console.log("ResAddFunc: " + ResAddFunc.substring(2) + ResAddFunc_param_codes.substring(2));

    {
        var AttrReg = web3.eth.abi.encodeFunctionSignature('AttrReg(bytes,bytes32,bytes[])');
        var test_attr = "test_attr";
        var test_attr_hash = web3.utils.keccak256(test_attr);

        var sig1 = web3.eth.accounts.sign(test_attr_hash, '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5');
        var sig2 = web3.eth.accounts.sign(test_attr_hash, '0x748f7eaad8be6841490a134e0518dafdf67714a73d1275f917475abeb504dc05');
        var sig3 = web3.eth.accounts.sign(test_attr_hash, '0xb546fd36d57b4c9adda29967cf6a1a3e3478f9a4892394e17225cfb6c0d1d1e5');
        var AttrReg_param_codes = web3.eth.abi.encodeParameters(['bytes', 'bytes32', 'bytes[]'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', test_attr_hash, [sig1.signature, sig2.signature, sig3.signature]]);
        console.log("AttrReg: " + AttrReg.substring(2) + AttrReg_param_codes.substring(2));
    }
    
}

init_private_key();
const args = process.argv.slice(2)
if (args[0] == 0) {
    do_transaction(args[1], 100000, 100000, 1);
}

if (args[0] == 1) {
    new_contract("60806040523480156200001157600080fd5b50604051620014bb380380620014bb833981810160405281019062000037919062000334565b80600090805190602001906200004f92919062000098565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000385565b82805482825590600052602060002090810192821562000114579160200282015b82811115620001135782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620000b9565b5b50905062000123919062000127565b5090565b5b808211156200014257600081600090555060010162000128565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001aa826200015f565b810181811067ffffffffffffffff82111715620001cc57620001cb62000170565b5b80604052505050565b6000620001e162000146565b9050620001ef82826200019f565b919050565b600067ffffffffffffffff82111562000212576200021162000170565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002558262000228565b9050919050565b620002678162000248565b81146200027357600080fd5b50565b60008151905062000287816200025c565b92915050565b6000620002a46200029e84620001f4565b620001d5565b90508083825260208201905060208402830185811115620002ca57620002c962000223565b5b835b81811015620002f75780620002e2888262000276565b845260208401935050602081019050620002cc565b5050509392505050565b600082601f8301126200031957620003186200015a565b5b81516200032b8482602086016200028d565b91505092915050565b6000602082840312156200034d576200034c62000150565b5b600082015167ffffffffffffffff8111156200036e576200036d62000155565b5b6200037c8482850162000301565b91505092915050565b61112680620003956000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80635f13d6ee14610067578063691b3463146100975780637e280378146100b35780638da5cb5b146100e5578063b105ef3314610103578063fdba8f1114610133575b600080fd5b610081600480360381019061007c9190610687565b61014f565b60405161008e91906106f5565b60405180910390f35b6100b160048036038101906100ac919061088c565b61018e565b005b6100cd60048036038101906100c89190610917565b61029b565b6040516100dc939291906109de565b60405180910390f35b6100ed6103e2565b6040516100fa91906106f5565b60405180910390f35b61011d60048036038101906101189190610a23565b610408565b60405161012a9190610a8e565b60405180910390f35b61014d60048036038101906101489190610b8f565b61044f565b005b6000818154811061015f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101e857600080fd5b6002600084815260200190815260200160002060020160009054906101000a900460ff161561021657600080fd5b60405180606001604052808381526020018281526020016001151581525060026000858152602001908152602001600020600082015181600001908161025c9190610e26565b5060208201518160010190816102729190610e26565b5060408201518160020160006101000a81548160ff021916908315150217905550905050505050565b60026020528060005260406000206000915090508060000180546102be90610c49565b80601f01602080910402602001604051908101604052809291908181526020018280546102ea90610c49565b80156103375780601f1061030c57610100808354040283529160200191610337565b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b50505050509080600101805461034c90610c49565b80601f016020809104026020016040519081016040528092919081815260200182805461037890610c49565b80156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600382805160208101820180518482526020830160208501208183528095505050505050818154811061043a57600080fd5b90600052602060002001600091509150505481565b80516000805490501461046157600080fd5b60005b8151811015610521576000818154811061048157610480610ef8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104ee6104ce8561056c565b8484815181106104e1576104e0610ef8565b5b602002602001015161059c565b73ffffffffffffffffffffffffffffffffffffffff161461050e57600080fd5b808061051990610f56565b915050610464565b506003836040516105329190610fda565b9081526020016040518091039020829080600181540180825580915050600190039060005260206000200160009091909190915055505050565b60008160405160200161057f9190611069565b604051602081830303815290604052805190602001209050919050565b6000806000806105ab8561060b565b925092509250600186848484604051600081526020016040526040516105d494939291906110ab565b6020604051602081039080840390855afa1580156105f6573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604184511461061e57600080fd5b6020840151915060408401519050606084015160001a92509193909250565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61066481610651565b811461066f57600080fd5b50565b6000813590506106818161065b565b92915050565b60006020828403121561069d5761069c610647565b5b60006106ab84828501610672565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106df826106b4565b9050919050565b6106ef816106d4565b82525050565b600060208201905061070a60008301846106e6565b92915050565b6000819050919050565b61072381610710565b811461072e57600080fd5b50565b6000813590506107408161071a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61079982610750565b810181811067ffffffffffffffff821117156107b8576107b7610761565b5b80604052505050565b60006107cb61063d565b90506107d78282610790565b919050565b600067ffffffffffffffff8211156107f7576107f6610761565b5b61080082610750565b9050602081019050919050565b82818337600083830152505050565b600061082f61082a846107dc565b6107c1565b90508281526020810184848401111561084b5761084a61074b565b5b61085684828561080d565b509392505050565b600082601f83011261087357610872610746565b5b813561088384826020860161081c565b91505092915050565b6000806000606084860312156108a5576108a4610647565b5b60006108b386828701610731565b935050602084013567ffffffffffffffff8111156108d4576108d361064c565b5b6108e08682870161085e565b925050604084013567ffffffffffffffff8111156109015761090061064c565b5b61090d8682870161085e565b9150509250925092565b60006020828403121561092d5761092c610647565b5b600061093b84828501610731565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561097e578082015181840152602081019050610963565b60008484015250505050565b600061099582610944565b61099f818561094f565b93506109af818560208601610960565b6109b881610750565b840191505092915050565b60008115159050919050565b6109d8816109c3565b82525050565b600060608201905081810360008301526109f8818661098a565b90508181036020830152610a0c818561098a565b9050610a1b60408301846109cf565b949350505050565b60008060408385031215610a3a57610a39610647565b5b600083013567ffffffffffffffff811115610a5857610a5761064c565b5b610a648582860161085e565b9250506020610a7585828601610672565b9150509250929050565b610a8881610710565b82525050565b6000602082019050610aa36000830184610a7f565b92915050565b600067ffffffffffffffff821115610ac457610ac3610761565b5b602082029050602081019050919050565b600080fd5b6000610aed610ae884610aa9565b6107c1565b90508083825260208201905060208402830185811115610b1057610b0f610ad5565b5b835b81811015610b5757803567ffffffffffffffff811115610b3557610b34610746565b5b808601610b42898261085e565b85526020850194505050602081019050610b12565b5050509392505050565b600082601f830112610b7657610b75610746565b5b8135610b86848260208601610ada565b91505092915050565b600080600060608486031215610ba857610ba7610647565b5b600084013567ffffffffffffffff811115610bc657610bc561064c565b5b610bd28682870161085e565b9350506020610be386828701610731565b925050604084013567ffffffffffffffff811115610c0457610c0361064c565b5b610c1086828701610b61565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c6157607f821691505b602082108103610c7457610c73610c1a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610cdc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c9f565b610ce68683610c9f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d23610d1e610d1984610651565b610cfe565b610651565b9050919050565b6000819050919050565b610d3d83610d08565b610d51610d4982610d2a565b848454610cac565b825550505050565b600090565b610d66610d59565b610d71818484610d34565b505050565b5b81811015610d9557610d8a600082610d5e565b600181019050610d77565b5050565b601f821115610dda57610dab81610c7a565b610db484610c8f565b81016020851015610dc3578190505b610dd7610dcf85610c8f565b830182610d76565b50505b505050565b600082821c905092915050565b6000610dfd60001984600802610ddf565b1980831691505092915050565b6000610e168383610dec565b9150826002028217905092915050565b610e2f82610944565b67ffffffffffffffff811115610e4857610e47610761565b5b610e528254610c49565b610e5d828285610d99565b600060209050601f831160018114610e905760008415610e7e578287015190505b610e888582610e0a565b865550610ef0565b601f198416610e9e86610c7a565b60005b82811015610ec657848901518255600182019150602085019450602081019050610ea1565b86831015610ee35784890151610edf601f891682610dec565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f6182610651565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f9357610f92610f27565b5b600182019050919050565b600081905092915050565b6000610fb482610944565b610fbe8185610f9e565b9350610fce818560208601610960565b80840191505092915050565b6000610fe68284610fa9565b915081905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000611032601c83610ff1565b915061103d82610ffc565b601c82019050919050565b6000819050919050565b61106361105e82610710565b611048565b82525050565b600061107482611025565b91506110808284611052565b60208201915081905092915050565b600060ff82169050919050565b6110a58161108f565b82525050565b60006080820190506110c06000830187610a7f565b6110cd602083018661109c565b6110da6040830185610a7f565b6110e76060830184610a7f565b9594505050505056fea2646970667358221220b944393fbc0cff213ef5e953dd3c697a0195aefb6b8ef8df0d7374de4ddeee3c64736f6c6343000811003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e252d01a37b85e2007ed3cc13797aa92496204a40000000000000000000000005f15294a1918633d4dd4ec47098a14d01c58e957000000000000000000000000d45cfd6855c6ec8f635a6f2b46c647e99c59c79d");
}

if (args[0] == 2) {
    call_contract(args[1]);
}

if (args[0] == 3) {
    CreatePhr();
}