const Web3 = require('web3')
var net = require('net');
var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', net)); // mac os path
const { randomBytes } = require('crypto')
const Secp256k1 = require('./secp256k1_1')
const keccak256 = require('keccak256')
var querystring = require('querystring');
var http = require('http');
var fs = require('fs');

var self_private_key = null;
var self_public_key = null;
var local_count_shard_id = 3;
var contract_address = null;

function str_to_hex(str) {
    var arr1 = [];
    for (var n = 0; n < str.length; n++) {
        var hex = Number(str.charCodeAt(n)).toString(16);
        arr1.push(hex);
    }
    return arr1.join('');
}

function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

function init_private_key() {
    const privateKeyBuf = Secp256k1.uint256("fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971", 16)
    self_private_key = Secp256k1.uint256(privateKeyBuf, 16)
    self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key)
    var pk_bytes = hexToBytes(self_public_key.x.toString(16) + self_public_key.y.toString(16))
    var address = keccak256(pk_bytes).toString('hex')
    console.log("self_account_id: " + address.toString('hex'));
    address = address.slice(address.length - 40, address.length)
    self_account_id = address;
    contract_address = fs.readFileSync('contract_address', 'utf-8');
    console.log("contract_address: " + contract_address);
}

function PostCode(data) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '127.0.0.1',
        port: '8781',
        path: '/transaction',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (chunk != "ok") {
                console.log('Response: ' + chunk + ", " + data);
            } else {
                console.log('Response: ' + chunk + ", " + data);
            }
        })
    });

    //console.log("req data: " + post_data);
    post_req.write(post_data);
    post_req.end();
}

function GetValidHexString(uint256_bytes) {
    var str_res = uint256_bytes.toString(16)
    while (str_res.length < 64) {
        str_res = "0" + str_res;
    }

    return str_res;
}

function param_contract(tx_type, gid, to, amount, gas_limit, gas_price, contract_bytes, input, prepay) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)

    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var prepay_buf = new Buffer(8);
    var big = ~~(prepay / MAX_UINT32)
    var low = (prepay % MAX_UINT32) - big
    prepay_buf.writeUInt32LE(big, 4)
    prepay_buf.writeUInt32LE(low, 0)

    const message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf, Buffer.from(contract_bytes, 'hex'), Buffer.from(input, 'hex'), prepay_buf]);
    //var arrByte = Uint8Array.from(message_buf)
    var kechash = keccak256(message_buf)

    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)
    const pubX = Secp256k1.uint256(self_public_key.x, 16)
    const pubY = Secp256k1.uint256(self_public_key.y, 16)
    const isValidSig = Secp256k1.ecverify(pubX, pubY, sigR, sigS, digest)
    console.log("digest: " + digest)
    console.log("sigr: " + sigR.toString(16))
    console.log("sigs: " + sigS.toString(16))
    if (!isValidSig) {
        console.log('signature transaction failed.')
        return;
    }

    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': local_count_shard_id,
        'hash': kechash,
        'attrs_size': 4,
        "bytes_code": contract_bytes,
        "input": input,
        "pepay": prepay,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function create_tx(to, amount, gas_limit, gas_price) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var tx_type = 0;
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)
    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    const message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf]);
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)
    const pubX = Secp256k1.uint256(self_public_key.x, 16)
    const pubY = Secp256k1.uint256(self_public_key.y, 16)
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': local_count_shard_id,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function new_contract(contract_bytes) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var kechash = keccak256(self_account_id + gid + contract_bytes).toString('hex')
    var self_contract_address = kechash.slice(kechash.length - 40, kechash.length)
    var data = param_contract(
        6,
        gid,
        self_contract_address,
        0,
        10000000,
        1,
        contract_bytes,
        "",
        999999999);
    PostCode(data);

    const opt = { flag: 'w', }
    fs.writeFile('contract_address', self_contract_address, opt, (err) => {
        if (err) {
            console.error(err)
        }
    })
}

function call_contract(input) {
    contract_address = fs.readFileSync('contract_address', 'utf-8');
    console.log("contract_address: " + contract_address);
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        8,
        gid,
        contract_address,
        0,
        10000000,
        1,
        "",
        input,
        0);
    PostCode(data);
}

function do_transaction(to_addr, amount, gas_limit, gas_price) {
    var data = create_tx(to_addr, amount, gas_limit, gas_price);
    PostCode(data);
}

function CreatePhr() {
    console.log("test smart contract signature: ");
    var account1 = web3.eth.accounts.privateKeyToAccount('0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5');
    console.log("account1 :");
    console.log(account1.address);
    var account2 = web3.eth.accounts.privateKeyToAccount('0x748f7eaad8be6841490a134e0518dafdf67714a73d1275f917475abeb504dc05');
    console.log("account2 :");
    console.log(account2.address);
    var account3 = web3.eth.accounts.privateKeyToAccount('0xb546fd36d57b4c9adda29967cf6a1a3e3478f9a4892394e17225cfb6c0d1d1e5');
    console.log("account3 :");
    console.log(account3.address);

    var cons_codes = web3.eth.abi.encodeParameters(['address[]'],
        [[account1.address,
        account2.address,
        account3.address]]);
    console.log("cons_codes: " + cons_codes.substring(2));


    // func code
    var ResAddFunc = web3.eth.abi.encodeFunctionSignature('ResAdd(bytes32,bytes,bytes)');
    var ResAddFunc_param_codes = web3.eth.abi.encodeParameters(['bytes32', 'bytes', 'bytes'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5']);
    console.log("ResAddFunc: " + ResAddFunc.substring(2) + ResAddFunc_param_codes.substring(2));

    {
        var AttrReg = web3.eth.abi.encodeFunctionSignature('AttrReg(bytes,bytes32,bytes[])');
        var test_attr = "test_attr";
        var test_attr_hash = web3.utils.keccak256(test_attr);

        var sig1 = web3.eth.accounts.sign(test_attr_hash, '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5');
        var sig2 = web3.eth.accounts.sign(test_attr_hash, '0x748f7eaad8be6841490a134e0518dafdf67714a73d1275f917475abeb504dc05');
        var sig3 = web3.eth.accounts.sign(test_attr_hash, '0xb546fd36d57b4c9adda29967cf6a1a3e3478f9a4892394e17225cfb6c0d1d1e5');
        var AttrReg_param_codes = web3.eth.abi.encodeParameters(['bytes', 'bytes32', 'bytes[]'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', test_attr_hash, [sig1.signature, sig2.signature, sig3.signature]]);
        console.log("AttrReg: " + AttrReg.substring(2) + AttrReg_param_codes.substring(2));
    }

    {
        var UpdateAttr = web3.eth.abi.encodeFunctionSignature('UpdateAttr(bytes,bytes32,bytes[])');
        var test_attr = "test_attr";
        var test_attr_hash = web3.utils.keccak256(test_attr);

        var sig1 = web3.eth.accounts.sign(test_attr_hash, '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5');
        var sig2 = web3.eth.accounts.sign(test_attr_hash, '0x748f7eaad8be6841490a134e0518dafdf67714a73d1275f917475abeb504dc05');
        var sig3 = web3.eth.accounts.sign(test_attr_hash, '0xb546fd36d57b4c9adda29967cf6a1a3e3478f9a4892394e17225cfb6c0d1d1e5');
        var UpdateAttr_param_codes = web3.eth.abi.encodeParameters(['bytes', 'bytes32', 'bytes[]'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', test_attr_hash, [sig1.signature, sig2.signature, sig3.signature]]);
        console.log("UpdateAttr: " + UpdateAttr.substring(2) + UpdateAttr_param_codes.substring(2));
    }

    {
        var QuerryAttr = web3.eth.abi.encodeFunctionSignature('QuerryAttr(bytes,bytes32)');
        var test_attr = "test_attr";
        var test_attr_hash = web3.utils.keccak256(test_attr);
        var QuerryAttr_param_codes = web3.eth.abi.encodeParameters(['bytes', 'bytes32'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', test_attr_hash]);
        console.log("QuerryAttr: " + QuerryAttr.substring(2) + QuerryAttr_param_codes.substring(2));
    }

    {
        var PolicyAdd = web3.eth.abi.encodeFunctionSignature('PolicyAdd(bytes32,bytes32,bytes32)');
        var test_attr = "test_attr";
        var test_attr_hash = web3.utils.keccak256(test_attr);
        var PolicyAdd_param_codes = web3.eth.abi.encodeParameters(['bytes32', 'bytes32', 'bytes32'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5',test_attr_hash]);
        console.log("PolicyAdd: " + PolicyAdd.substring(2) + PolicyAdd_param_codes.substring(2));
    }

    {
        var PolicyQry = web3.eth.abi.encodeFunctionSignature('PolicyQry(bytes32)');
        var PolicyQry_param_codes = web3.eth.abi.encodeParameters(['bytes32'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5']);
        console.log("PolicyQry: " + PolicyQry.substring(2) + PolicyQry_param_codes.substring(2));
    }

    {
        var Access = web3.eth.abi.encodeFunctionSignature('Access(bytes,bytes32)');
        var Access_param_codes = web3.eth.abi.encodeParameters(['bytes', 'bytes32'], ['0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5', '0x20ac5391ad70648f4ac6ee659e7709c0305c91c968c91b45018673ba5d1841e5']);
        console.log("Access: " + Access.substring(2) + Access_param_codes.substring(2));
    }
}

init_private_key();
const args = process.argv.slice(2)
if (args[0] == 0) {
    do_transaction(args[1], 100000, 100000, 1);
}

if (args[0] == 1) {
    new_contract("60806040523480156200001157600080fd5b5060405162001d5638038062001d56833981810160405281019062000037919062000334565b80600090805190602001906200004f92919062000098565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000385565b82805482825590600052602060002090810192821562000114579160200282015b82811115620001135782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620000b9565b5b50905062000123919062000127565b5090565b5b808211156200014257600081600090555060010162000128565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001aa826200015f565b810181811067ffffffffffffffff82111715620001cc57620001cb62000170565b5b80604052505050565b6000620001e162000146565b9050620001ef82826200019f565b919050565b600067ffffffffffffffff82111562000212576200021162000170565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002558262000228565b9050919050565b620002678162000248565b81146200027357600080fd5b50565b60008151905062000287816200025c565b92915050565b6000620002a46200029e84620001f4565b620001d5565b90508083825260208201905060208402830185811115620002ca57620002c962000223565b5b835b81811015620002f75780620002e2888262000276565b845260208401935050602081019050620002cc565b5050509392505050565b600082601f8301126200031957620003186200015a565b5b81516200032b8482602086016200028d565b91505092915050565b6000602082840312156200034d576200034c62000150565b5b600082015167ffffffffffffffff8111156200036e576200036d62000155565b5b6200037c8482850162000301565b91505092915050565b6119c180620003956000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063b89e70b511610066578063b89e70b514610299578063e9c7feda146102c9578063f700caab146102f9578063fdba8f1114610315576100ea565b80638da5cb5b14610219578063a51f8aac14610237578063ae0ad9d914610269576100ea565b80635f13d6ee116100c85780635f13d6ee1461016b578063691b34631461019b5780636b83e059146101b75780637e280378146101e7576100ea565b806308ad872a146100ef57806329c1cb4b1461010b5780634819544b1461013b575b600080fd5b6101096004803603810190610104919061100d565b610331565b005b61012560048036038101906101209190611098565b610499565b604051610132919061110f565b60405180910390f35b61015560048036038101906101509190611160565b6104e0565b60405161016291906111af565b60405180910390f35b610185600480360381019061018091906111ca565b610511565b6040516101929190611238565b60405180910390f35b6101b560048036038101906101b09190611253565b610550565b005b6101d160048036038101906101cc9190611098565b61065d565b6040516101de919061110f565b60405180910390f35b61020160048036038101906101fc91906112de565b6106a2565b6040516102109392919061138a565b60405180910390f35b6102216107e9565b60405161022e9190611238565b60405180910390f35b610251600480360381019061024c91906112de565b61080f565b604051610260939291906113cf565b60405180910390f35b610283600480360381019061027e9190611406565b610846565b604051610290919061110f565b60405180910390f35b6102b360048036038101906102ae91906112de565b61088b565b6040516102c0919061110f565b60405180910390f35b6102e360048036038101906102de9190611098565b610912565b6040516102f0919061110f565b60405180910390f35b610313600480360381019061030e9190611462565b6109e2565b005b61032f600480360381019061032a919061100d565b610b11565b005b80516000805490501461034357600080fd5b60005b81518110156104035760008181548110610363576103626114b5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166103d06103b085610cc6565b8484815181106103c3576103c26114b5565b5b6020026020010151610cf6565b73ffffffffffffffffffffffffffffffffffffffff16146103f057600080fd5b80806103fb90611513565b915050610346565b5060016003846040516104169190611597565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008481526020019081526020016000208460405161046f9190611597565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b60006003836040516104ab9190611597565b9081526020016040518091039020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b600560205281600052604060002081815481106104fc57600080fd5b90600052602060002001600091509150505481565b6000818154811061052157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105aa57600080fd5b6002600084815260200190815260200160002060020160009054906101000a900460ff16156105d857600080fd5b60405180606001604052808381526020018281526020016001151581525060026000858152602001908152602001600020600082015181600001908161061e91906117ba565b50602082015181600101908161063491906117ba565b5060408201518160020160006101000a81548160ff021916908315150217905550905050505050565b6003828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900460ff1681565b60026020528060005260406000206000915090508060000180546106c5906115dd565b80601f01602080910402602001604051908101604052809291908181526020018280546106f1906115dd565b801561073e5780601f106107135761010080835404028352916020019161073e565b820191906000526020600020905b81548152906001019060200180831161072157829003601f168201915b505050505090806001018054610753906115dd565b80601f016020809104026020016040519081016040528092919081815260200182805461077f906115dd565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b6004602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108e757600080fd5b6006600083815260200190815260200160002060020160009054906101000a900460ff169050919050565b600080600560008481526020019081526020016000208054905090506000811161093b57600080fd5b60005b818110156109d5576004600060056000878152602001908152602001600020838154811061096f5761096e6114b5565b5b90600052602060002001548152602001908152602001600020856040516109969190611597565b908152602001604051809103902060009054906101000a900460ff16156109c2576001925050506109dc565b80806109cd90611513565b91505061093e565b5060009150505b92915050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a3c57600080fd5b6006600084815260200190815260200160002060020160009054906101000a900460ff1615610a6a57600080fd5b60405180606001604052808381526020018281526020016001151581525060066000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555090505060056000838152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055505050565b805160008054905014610b2357600080fd5b60001515600384604051610b379190611597565b9081526020016040518091039020600084815260200190815260200160002060009054906101000a900460ff16151514610b7057600080fd5b60005b8151811015610c305760008181548110610b9057610b8f6114b5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bfd610bdd85610cc6565b848481518110610bf057610bef6114b5565b5b6020026020010151610cf6565b73ffffffffffffffffffffffffffffffffffffffff1614610c1d57600080fd5b8080610c2890611513565b915050610b73565b506001600384604051610c439190611597565b9081526020016040518091039020600084815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600084815260200190815260200160002084604051610c9c9190611597565b908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b600081604051602001610cd99190611904565b604051602081830303815290604052805190602001209050919050565b600080600080610d0585610d65565b92509250925060018684848460405160008152602001604052604051610d2e9493929190611946565b6020604051602081039080840390855afa158015610d50573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060006041845114610d7857600080fd5b6020840151915060408401519050606084015160001a92509193909250565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dfe82610db5565b810181811067ffffffffffffffff82111715610e1d57610e1c610dc6565b5b80604052505050565b6000610e30610d97565b9050610e3c8282610df5565b919050565b600067ffffffffffffffff821115610e5c57610e5b610dc6565b5b610e6582610db5565b9050602081019050919050565b82818337600083830152505050565b6000610e94610e8f84610e41565b610e26565b905082815260208101848484011115610eb057610eaf610db0565b5b610ebb848285610e72565b509392505050565b600082601f830112610ed857610ed7610dab565b5b8135610ee8848260208601610e81565b91505092915050565b6000819050919050565b610f0481610ef1565b8114610f0f57600080fd5b50565b600081359050610f2181610efb565b92915050565b600067ffffffffffffffff821115610f4257610f41610dc6565b5b602082029050602081019050919050565b600080fd5b6000610f6b610f6684610f27565b610e26565b90508083825260208201905060208402830185811115610f8e57610f8d610f53565b5b835b81811015610fd557803567ffffffffffffffff811115610fb357610fb2610dab565b5b808601610fc08982610ec3565b85526020850194505050602081019050610f90565b5050509392505050565b600082601f830112610ff457610ff3610dab565b5b8135611004848260208601610f58565b91505092915050565b60008060006060848603121561102657611025610da1565b5b600084013567ffffffffffffffff81111561104457611043610da6565b5b61105086828701610ec3565b935050602061106186828701610f12565b925050604084013567ffffffffffffffff81111561108257611081610da6565b5b61108e86828701610fdf565b9150509250925092565b600080604083850312156110af576110ae610da1565b5b600083013567ffffffffffffffff8111156110cd576110cc610da6565b5b6110d985828601610ec3565b92505060206110ea85828601610f12565b9150509250929050565b60008115159050919050565b611109816110f4565b82525050565b60006020820190506111246000830184611100565b92915050565b6000819050919050565b61113d8161112a565b811461114857600080fd5b50565b60008135905061115a81611134565b92915050565b6000806040838503121561117757611176610da1565b5b600061118585828601610f12565b92505060206111968582860161114b565b9150509250929050565b6111a981610ef1565b82525050565b60006020820190506111c460008301846111a0565b92915050565b6000602082840312156111e0576111df610da1565b5b60006111ee8482850161114b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611222826111f7565b9050919050565b61123281611217565b82525050565b600060208201905061124d6000830184611229565b92915050565b60008060006060848603121561126c5761126b610da1565b5b600061127a86828701610f12565b935050602084013567ffffffffffffffff81111561129b5761129a610da6565b5b6112a786828701610ec3565b925050604084013567ffffffffffffffff8111156112c8576112c7610da6565b5b6112d486828701610ec3565b9150509250925092565b6000602082840312156112f4576112f3610da1565b5b600061130284828501610f12565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561134557808201518184015260208101905061132a565b60008484015250505050565b600061135c8261130b565b6113668185611316565b9350611376818560208601611327565b61137f81610db5565b840191505092915050565b600060608201905081810360008301526113a48186611351565b905081810360208301526113b88185611351565b90506113c76040830184611100565b949350505050565b60006060820190506113e460008301866111a0565b6113f160208301856111a0565b6113fe6040830184611100565b949350505050565b6000806040838503121561141d5761141c610da1565b5b600061142b85828601610f12565b925050602083013567ffffffffffffffff81111561144c5761144b610da6565b5b61145885828601610ec3565b9150509250929050565b60008060006060848603121561147b5761147a610da1565b5b600061148986828701610f12565b935050602061149a86828701610f12565b92505060406114ab86828701610f12565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061151e8261112a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036115505761154f6114e4565b5b600182019050919050565b600081905092915050565b60006115718261130b565b61157b818561155b565b935061158b818560208601611327565b80840191505092915050565b60006115a38284611566565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115f557607f821691505b602082108103611608576116076115ae565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116707fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611633565b61167a8683611633565b95508019841693508086168417925050509392505050565b6000819050919050565b60006116b76116b26116ad8461112a565b611692565b61112a565b9050919050565b6000819050919050565b6116d18361169c565b6116e56116dd826116be565b848454611640565b825550505050565b600090565b6116fa6116ed565b6117058184846116c8565b505050565b5b818110156117295761171e6000826116f2565b60018101905061170b565b5050565b601f82111561176e5761173f8161160e565b61174884611623565b81016020851015611757578190505b61176b61176385611623565b83018261170a565b50505b505050565b600082821c905092915050565b600061179160001984600802611773565b1980831691505092915050565b60006117aa8383611780565b9150826002028217905092915050565b6117c38261130b565b67ffffffffffffffff8111156117dc576117db610dc6565b5b6117e682546115dd565b6117f182828561172d565b600060209050601f8311600181146118245760008415611812578287015190505b61181c858261179e565b865550611884565b601f1984166118328661160e565b60005b8281101561185a57848901518255600182019150602085019450602081019050611835565b868310156118775784890151611873601f891682611780565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006118cd601c8361188c565b91506118d882611897565b601c82019050919050565b6000819050919050565b6118fe6118f982610ef1565b6118e3565b82525050565b600061190f826118c0565b915061191b82846118ed565b60208201915081905092915050565b600060ff82169050919050565b6119408161192a565b82525050565b600060808201905061195b60008301876111a0565b6119686020830186611937565b61197560408301856111a0565b61198260608301846111a0565b9594505050505056fea26469706673582212204821f67fd0ec7912e6f9b270526571bd602fa61ff51d3bbe0984f08f8e64dedb64736f6c6343000811003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e252d01a37b85e2007ed3cc13797aa92496204a40000000000000000000000005f15294a1918633d4dd4ec47098a14d01c58e957000000000000000000000000d45cfd6855c6ec8f635a6f2b46c647e99c59c79d");
}

if (args[0] == 2) {
    call_contract(args[1]);
}

if (args[0] == 3) {
    CreatePhr();
}