/* 用于测试区块链跨分片合约执行 */

const Web3 = require('web3');
var net = require('net');
var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', net)); // mac os path
const { randomBytes } = require('crypto');
const Secp256k1 = require('./secp256k1.js');
const keccak256 = require('keccak256');
var querystring = require('querystring');
var http = require('http');
var fs = require('fs');
const { get } = require('https');
const assert = require('assert');

var self_private_key = null;
var self_public_key = null;
var self_account_id = null;
var local_count_shard_id = 3;
var contract_address = null;
const CONTRACT_CODE = "";
const HOST = "10.101.20.35";

function str_to_hex(str) {
    var arr1 = [];
    for (var n = 0; n < str.length; n++) {
        var hex = Number(str.charCodeAt(n)).toString(16);
        arr1.push(hex);
    }
    return arr1.join('');
}

function hexToBytes(hex) {
    for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

function init_private_key(sk) {
    const privateKeyBuf = Secp256k1.uint256(sk, 16);
    self_private_key = Secp256k1.uint256(privateKeyBuf, 16);
    self_public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(self_private_key);
    var pk_bytes = hexToBytes(self_public_key.x.toString(16) + self_public_key.y.toString(16));
    var address = keccak256(pk_bytes).toString('hex');
    address = address.slice(address.length - 40, address.length);
    self_account_id = address;
}

function sk_to_account(sk) {
    const privateKeyBuf = Secp256k1.uint256(sk, 16);
    var private_key = Secp256k1.uint256(privateKeyBuf, 16);
    var public_key = Secp256k1.generatePublicKeyFromPrivateKeyData(private_key);
    var pk_bytes = hexToBytes(public_key.x.toString(16) + public_key.y.toString(16));
    var address = keccak256(pk_bytes).toString('hex');
    address = address.slice(address.length - 40, address.length);
    return address;
}

function PostCode(data, from_port) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: HOST,
        port: from_port,
        path: '/transaction',
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (chunk != "ok") {
                // console.log('Response: ' + chunk + ", " + data);
            } else {
                // console.log('Response: ' + chunk + ", " + data);
            }
        })
    });

    post_req.write(post_data);
    post_req.end();
}

function GetValidHexString(uint256_bytes) {
    var str_res = uint256_bytes.toString(16)
    while (str_res.length < 64) {
        str_res = "0" + str_res;
    }

    return str_res;
}

function param_contract(tx_type, gid, to, amount, gas_limit, gas_price, contract_bytes, input, prepay) {

    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)

    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)

    var prepay_buf = new Buffer(8);
    var big = ~~(prepay / MAX_UINT32)
    var low = (prepay % MAX_UINT32) - big
    prepay_buf.writeUInt32LE(big, 4)
    prepay_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf, Buffer.from(contract_bytes, 'hex'), Buffer.from(input, 'hex'), prepay_buf]);
    var kechash = keccak256(message_buf)

    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)
    const pubX = Secp256k1.uint256(self_public_key.x, 16)
    const pubY = Secp256k1.uint256(self_public_key.y, 16)
    const isValidSig = Secp256k1.ecverify(pubX, pubY, sigR, sigS, digest)

    if (!isValidSig) {
        console.log('signature transaction failed.')
        return;
    }

    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': local_count_shard_id,
        'hash': kechash,
        'attrs_size': 4,
        "bytes_code": contract_bytes,
        "input": input,
        "pepay": prepay,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
    }
}

function create_tx(to, amount, gas_limit, gas_price, prepay, tx_type) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    console.log(gid);
    var frompk = '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16);
    const MAX_UINT32 = 0xFFFFFFFF;
    var amount_buf = new Buffer(8);
    var big = ~~(amount / MAX_UINT32)
    var low = (amount % MAX_UINT32) - big
    amount_buf.writeUInt32LE(big, 4)
    amount_buf.writeUInt32LE(low, 0)

    var gas_limit_buf = new Buffer(8);
    var big = ~~(gas_limit / MAX_UINT32)
    var low = (gas_limit % MAX_UINT32) - big
    gas_limit_buf.writeUInt32LE(big, 4)
    gas_limit_buf.writeUInt32LE(low, 0)

    var gas_price_buf = new Buffer(8);
    var big = ~~(gas_price / MAX_UINT32)
    var low = (gas_price % MAX_UINT32) - big
    gas_price_buf.writeUInt32LE(big, 4)
    gas_price_buf.writeUInt32LE(low, 0)
    var step_buf = new Buffer(8);
    var big = ~~(tx_type / MAX_UINT32)
    var low = (tx_type % MAX_UINT32) - big
    step_buf.writeUInt32LE(big, 0)
    step_buf.writeUInt32LE(low, 0)
    var prepay_buf = new Buffer(8);
    var big = ~~(prepay / MAX_UINT32)
    var low = (prepay % MAX_UINT32) - big
    prepay_buf.writeUInt32LE(big, 4)
    prepay_buf.writeUInt32LE(low, 0)

    var message_buf = Buffer.concat([Buffer.from(gid, 'hex'), Buffer.from(frompk, 'hex'), Buffer.from(to, 'hex'),
        amount_buf, gas_limit_buf, gas_price_buf, step_buf, prepay_buf]);
    var kechash = keccak256(message_buf)
    var digest = Secp256k1.uint256(kechash, 16)
    const sig = Secp256k1.ecsign(self_private_key, digest)
    const sigR = Secp256k1.uint256(sig.r, 16)
    const sigS = Secp256k1.uint256(sig.s, 16)
    const pubX = Secp256k1.uint256(self_public_key.x, 16)
    const pubY = Secp256k1.uint256(self_public_key.y, 16)
    return {
        'gid': gid,
        'pubkey': '04' + self_public_key.x.toString(16) + self_public_key.y.toString(16),
        'to': to,
        'amount': amount,
        'gas_limit': gas_limit,
        'gas_price': gas_price,
        'type': tx_type,
        'shard_id': local_count_shard_id,
        'sign_r': sigR.toString(16),
        'sign_s': sigS.toString(16),
        'sign_v': sig.v,
        'pepay': prepay
    }
}

function new_contract(data_id, account_id, contract_bytes, from_port) {
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var contract_address = get_contract_address(data_id, account_id);
    var data = param_contract(
        6,
        gid,
        contract_address,
        0,
        100000000,
        1,
        contract_bytes,
        "",
        1000000000);
    PostCode(data, from_port);
}

function get_contract_address(data_id, account_id) {
    var contract_addr_str = account_id + data_id + CONTRACT_CODE;
    var kechash = keccak256(contract_addr_str).toString('hex');
    return kechash.slice(kechash.length - 40, kechash.length);
}

function call_contract(account_id, data_id, input, amount, from_port) {
    contract_address = get_contract_address(data_id, account_id);
    var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
    var data = param_contract(
        8,
        gid,
        contract_address,
        amount,
        100000000,
        1,
        "",
        input,
        0);
    PostCode(data, from_port);
}

function Transfer(to_addr, amount, gas_limit, gas_price, from_port) {
    var data = create_tx(to_addr, amount, gas_limit, gas_price, 0, 0);
    PostCode(data, from_port);
}


function GetConstructorParams(account_id, data_id, data) {
    var cons_codes = web3.eth.abi.encodeParameters(['address[]', 'bytes', 'bytes'], [[account_id], '0x' + str_to_hex(data_id), '0x' + str_to_hex(data)]);
    return cons_codes.substring(2);
}


function GetAuthorizationParams(data) {
    var func = web3.eth.abi.encodeFunctionSignature('Authorization(bytes)');
    var funcParam = web3.eth.abi.encodeParameters(['bytes'], ['0x' + str_to_hex(data)]);
    return func.substring(2) + funcParam.substring(2);
}

function QueryPostCode(path, data, from_port, callback) {
    var post_data = querystring.stringify(data);
    var post_options = {
        host: '10.101.20.35',
        port: from_port,
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(post_data)
        }
    };

    var post_req = http.request(post_options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            try {
                var json_res = JSON.parse(chunk);
                callback(json_res);
            } catch (error) {
                callback("");
            }
        })
    });

    post_req.write(post_data);
    post_req.end();
}

function QueryContract(account_id, data_id, input, from_port, callback) {
    var contract_address = get_contract_address(data_id, account_id);
    var data = {
        "input": input,
        'address': contract_address,
        'from': account_id,
    };

    return QueryPostCode('/query_contract', data, from_port, callback);
}

function QueryAccount(account_id, from_port, callback) {
    var data = {
        "address": account_id,
    }

    return QueryPostCode('/query_account', data, from_port, callback);
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


function CreateDataAuth(account_id, data_id, data, from_port) {
    var cons_cods = GetConstructorParams(account_id, data_id, data);
    if (cons_cods == null) {
        console.log("创建数据身份失败，输入的初始管理员错误: " + process.argv);
        return;
    }

	var contract_bytes = CONTRACT_CODE;
    new_contract(data_id, account_id, contract_bytes + cons_cods, from_port);
}

function AddDataAuth(account_id, data_id, data, from_port) {
    var auth_cods = GetAuthorizationParams(data);
    if (auth_cods == null) {
        console.log("确权失败，输入的确权参数错误: " + process.argv);
        return;
    }
    
    call_contract(account_id, data_id, auth_cods, 0, from_port);
}

function GetAuthData(account_id, data_id, from_port, callback) {
    var func = web3.eth.abi.encodeFunctionSignature('GetAuthJson(uint32,uint32)');
    var funcParam = web3.eth.abi.encodeParameters(['uint32', 'uint32'], [0, 10]);
    // console.log("GetAuthJson func: " + func.substring(2));
    return QueryContract(account_id, data_id, func.substring(2)+funcParam.substring(2), from_port, callback);
}

/**
 * 从数组中随机返回一个元素。
 *
 * @param arr 要从中随机选取元素的数组。
 * @returns 返回数组中的一个随机元素。如果数组为空，则返回 undefined 或其他适当的值。
 */
function randomOfArr(arr) {
    if (arr.length === 0) {
        return undefined; // 如果数组为空，返回 undefined 或其他适当的值
    }

    const randomIndex = Math.floor(Math.random() * arr.length);
    return arr[randomIndex];
}

var sk1_shard3 = "b5039128131f96f6164a33bc7fbc48c2f5cf425e8476b1c4d0f4d186fbd0d708";
var sk2_shard4 = "fa04ebee157c6c10bd9d250fc2c938780bf68cbe30e9f0d7c048e4d081907971";
var sk3_shard4 = "373a3165ec09edea6e7a1c8cff21b06f5fb074386ece283927aef730c6d44596";
var sk_unknown = "1ef07e73ed6211e7b0a512bc6468419fbdcd9b345b49a3331b4c8f8070172a70";

var testcases = [
    { // 同分片执行合约、同分片查询合约
        "sk": sk1_shard3, // 发起者 sk
        "from_shard": 3, // 发起者所在 shard
        "contract_shard": 3, // 合约目标 shard
        "query_shard": 3, // 查询者所在 shard
        "query_suc": true, // 是否能查到数据
    }, { // 跨分片执行合约、同分片查询合约
        "sk": sk1_shard3,
        "from_shard": 3,
        "contract_shard": 4,
        "query_shard": 4,
        "query_suc": false,
    }, { // 同分片执行合约、跨分片查询合约
        "sk": sk1_shard3,
        "from_shard": 3,
        "contract_shard": 3,
        "query_shard": 4,
        "query_suc": false,
    }, { // 跨分片执行合约、跨分片查询合约
        "sk": sk1_shard3,
        "from_shard": 4,
        "contract_shard": 3,
        "query_shard": 3,
        "query_suc": true,
    }
];

var testcases_transfer = [
    { // 跨分片转账，发起网络与 from 账户网络一致，to 账户已存在
        "from_sk": sk1_shard3, // 转账 from sk
        "to_sk": sk2_shard4, // 转账 to sk, '' 时会自动创建随机 sk
        "need_create": false, // to 账号是否需要创建
        "from_shard": 3, // 转账请求发起的网络
        "amount": 1000, // 转账金额
        "create_ok": true, // 账户是否创建成功
    }, { // 跨分片转账，发起网络与 from 账户网络一致，to 账户不存在
        "from_sk": sk1_shard3,
        "to_sk": '',
        "need_create": true,
        "from_shard": 3,
        "amount": 1000,
        "create_ok": true,
    }, {
        "from_sk": sk1_shard3,
        "to_sk": sk2_shard4,
        "need_create": false,
        "from_shard": 4,
        "amount": 1000,
        "create_ok": true,
    }
]


var shard3_port = [8781, 8782, 8783];
var shard4_port = [8784, 8785, 8786, 8787, 8788, 8789, 8790, 8791];
var root_port = [8001, 8002, 8003];

var net_port = {
    2: root_port,
    3: shard3_port,
    4: shard4_port,  
}


async function test_contracts() {
    console.log("test contracts...");
    for (var i = 0; i < testcases.length; ++i) { 
        var sk = testcases[i].sk;
        init_private_key(sk);
        var from_shard = testcases[i].from_shard;
        var query_shard = testcases[i].query_shard;

        local_count_shard_id = testcases[i].contract_shard;

        var gid = GetValidHexString(Secp256k1.uint256(randomBytes(32)))
        var data_id = i.toString() + gid;

        CreateDataAuth(self_account_id, data_id, "1", randomOfArr(net_port[from_shard]));
        await sleep(5000);
        AddDataAuth(self_account_id, data_id, "2", randomOfArr(net_port[from_shard]));
        await sleep(5000);
        GetAuthData(self_account_id, data_id, randomOfArr(net_port[query_shard]), function(res) {
            // console.log(res);
            if (testcases[i].query_suc) {   
                assert.ok(res["data"].length == 2, i.toString() + ": " + "fail: " + res["data"])
            } else {
                assert.ok(res == '', i.toString() + ": " + "fail: res is not empty, " + res);
            }
        });
        console.log(i.toString() + ": " + "success")
        await sleep(3000);
    }
}


async function test_transfers() {
    console.log("test transfers...");

    for (var i = 0; i < testcases_transfer.length; ++i) {
        var from_sk = testcases_transfer[i].from_sk;
        init_private_key(from_sk);

        var to_sk = testcases_transfer[i].to_sk;
        if (to_sk == '') {
            to_sk = GetValidHexString(Secp256k1.uint256(randomBytes(32)));
        }
        to_addr = sk_to_account(to_sk);
        // console.log("to_addr: " + to_addr);
        var from_shard = testcases_transfer[i].from_shard;
        var need_create = testcases_transfer[i].need_create;
        var create_ok = testcases_transfer[i].create_ok;
        var to_balance = 0;

        // 查询 to 账户原始信息
        QueryAccount(to_addr, randomOfArr(net_port[2]), function(res) {
            // 账户已经存在
            if (res != '') {
                assert.ok(!need_create, i.toString() + ": " + "fail: addr already exists");
                var shard_id = res['shardingId'];
                QueryAccount(sk_to_account(sk1_shard3), randomOfArr(net_port[shard_id]), function(res2) {
                    if (res2 != '') {
                        to_balance = res2['balance'];
                    }
                })
            } else {
                // 账户不存在，创建账户
                assert.ok(need_create, i.toString() + ": " + "fail: addr need create");
            }
        });

        // 转账

        var amount = testcases_transfer[i].amount;
        Transfer(to_addr, amount, 100000, 1, randomOfArr(net_port[from_shard]));
        await sleep(10000);

        // 再查询
        QueryAccount(to_addr, randomOfArr(net_port[2]), function(res) {
            // 账户已经存在
            if (create_ok) {
                assert.ok(res == '', i.toString() + ": " + "fail: account should create ok");
            } else {
                assert.ok(res != '', i.toString() + ": " + "fail: account should not create ok");
            }
            
            if (res == '') {
                return;
            }

            var shard_id = res['shardingId'];
            QueryAccount(sk_to_account(sk1_shard3), randomOfArr(net_port[shard_id]), function(res2) {
                if (res2 != '') {
                    var new_to_balance = res2['balance'];
                    assert.equal(new_to_balance, to_balance + amount, i.toString() + ": " + "fail: balance not equal");
                }
            })
            
        });

        console.log(i.toString() + ": " + "success");
    }
}

async function main() {
    // 测试合约执行、合约查询
    await test_contracts();
    // 测试跨分片转账
    await test_transfers();
}

main();